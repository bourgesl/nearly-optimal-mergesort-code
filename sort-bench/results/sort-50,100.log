max(arraySize): 100
subSizeList: [1, 4, 16, 64]
# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 0.00% complete, ETA 00:26:24
# Fork: 1 of 2
# Warmup Iteration   1: 19.630 ns/op
# Warmup Iteration   2: 23.085 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.887 ns/op

# Run progress: 0.03% complete, ETA 01:08:33
# Fork: 2 of 2
# Warmup Iteration   1: 19.618 ns/op
# Warmup Iteration   2: 22.447 ns/op
# Warmup Iteration   3: 14.100 ns/op
Iteration   1: 14.106 ns/op
Iteration   2: 14.106 ns/op
Iteration   3: 14.106 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.872 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.899 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (13.712, 13.899, 14.106), stdev = 0.160
  CI (99.9%): [13.657, 14.141] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 0.07% complete, ETA 01:03:51
# Fork: 1 of 2
# Warmup Iteration   1: 778.481 ns/op
# Warmup Iteration   2: 406.153 ns/op
# Warmup Iteration   3: 286.189 ns/op
Iteration   1: 286.366 ns/op
Iteration   2: 286.325 ns/op
Iteration   3: 286.255 ns/op
Iteration   4: 286.352 ns/op
Iteration   5: 286.326 ns/op

# Run progress: 0.10% complete, ETA 01:02:43
# Fork: 2 of 2
# Warmup Iteration   1: 963.723 ns/op
# Warmup Iteration   2: 424.621 ns/op
# Warmup Iteration   3: 286.209 ns/op
Iteration   1: 286.673 ns/op
Iteration   2: 286.429 ns/op
Iteration   3: 286.340 ns/op
Iteration   4: 286.328 ns/op
Iteration   5: 286.296 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  286.369 ±(99.9%) 0.175 ns/op [Average]
  (min, avg, max) = (286.255, 286.369, 286.673), stdev = 0.116
  CI (99.9%): [286.194, 286.544] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 0.14% complete, ETA 01:01:42
# Fork: 1 of 2
# Warmup Iteration   1: 373.439 ns/op
# Warmup Iteration   2: 365.033 ns/op
# Warmup Iteration   3: 254.612 ns/op
Iteration   1: 254.537 ns/op
Iteration   2: 253.654 ns/op
Iteration   3: 254.343 ns/op
Iteration   4: 254.079 ns/op
Iteration   5: 254.579 ns/op

# Run progress: 0.17% complete, ETA 01:01:08
# Fork: 2 of 2
# Warmup Iteration   1: 392.572 ns/op
# Warmup Iteration   2: 349.732 ns/op
# Warmup Iteration   3: 254.158 ns/op
Iteration   1: 253.788 ns/op
Iteration   2: 253.828 ns/op
Iteration   3: 254.626 ns/op
Iteration   4: 254.508 ns/op
Iteration   5: 253.405 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  254.135 ±(99.9%) 0.669 ns/op [Average]
  (min, avg, max) = (253.405, 254.135, 254.626), stdev = 0.443
  CI (99.9%): [253.465, 254.804] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 0.21% complete, ETA 01:00:51
# Fork: 1 of 2
# Warmup Iteration   1: 1446.978 ns/op
# Warmup Iteration   2: 502.196 ns/op
# Warmup Iteration   3: 299.436 ns/op
Iteration   1: 299.732 ns/op
Iteration   2: 299.806 ns/op
Iteration   3: 299.634 ns/op
Iteration   4: 299.662 ns/op
Iteration   5: 299.670 ns/op

# Run progress: 0.24% complete, ETA 01:00:33
# Fork: 2 of 2
# Warmup Iteration   1: 1471.865 ns/op
# Warmup Iteration   2: 433.612 ns/op
# Warmup Iteration   3: 347.337 ns/op
Iteration   1: 303.211 ns/op
Iteration   2: 331.380 ns/op
Iteration   3: 343.524 ns/op
Iteration   4: 306.521 ns/op
Iteration   5: 305.003 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  308.814 ±(99.9%) 23.532 ns/op [Average]
  (min, avg, max) = (299.634, 308.814, 343.524), stdev = 15.565
  CI (99.9%): [285.282, 332.346] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 0.28% complete, ETA 01:00:15
# Fork: 1 of 2
# Warmup Iteration   1: 343.803 ns/op
# Warmup Iteration   2: 263.632 ns/op
# Warmup Iteration   3: 189.911 ns/op
Iteration   1: 189.964 ns/op
Iteration   2: 189.910 ns/op
Iteration   3: 189.874 ns/op
Iteration   4: 189.861 ns/op
Iteration   5: 189.872 ns/op

# Run progress: 0.31% complete, ETA 01:00:07
# Fork: 2 of 2
# Warmup Iteration   1: 307.025 ns/op
# Warmup Iteration   2: 261.006 ns/op
# Warmup Iteration   3: 189.751 ns/op
Iteration   1: 189.784 ns/op
Iteration   2: 189.714 ns/op
Iteration   3: 189.757 ns/op
Iteration   4: 189.704 ns/op
Iteration   5: 189.661 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  189.810 ±(99.9%) 0.152 ns/op [Average]
  (min, avg, max) = (189.661, 189.810, 189.964), stdev = 0.100
  CI (99.9%): [189.658, 189.962] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 0.35% complete, ETA 01:00:02
# Fork: 1 of 2
# Warmup Iteration   1: 392.556 ns/op
# Warmup Iteration   2: 367.078 ns/op
# Warmup Iteration   3: 218.542 ns/op
Iteration   1: 218.726 ns/op
Iteration   2: 218.656 ns/op
Iteration   3: 218.693 ns/op
Iteration   4: 222.620 ns/op
Iteration   5: 222.762 ns/op

# Run progress: 0.38% complete, ETA 00:59:53
# Fork: 2 of 2
# Warmup Iteration   1: 402.804 ns/op
# Warmup Iteration   2: 367.409 ns/op
# Warmup Iteration   3: 225.452 ns/op
Iteration   1: 225.390 ns/op
Iteration   2: 225.330 ns/op
Iteration   3: 225.274 ns/op
Iteration   4: 227.001 ns/op
Iteration   5: 226.783 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  223.123 ±(99.9%) 5.099 ns/op [Average]
  (min, avg, max) = (218.656, 223.123, 227.001), stdev = 3.372
  CI (99.9%): [218.025, 228.222] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 0.42% complete, ETA 00:59:50
# Fork: 1 of 2
# Warmup Iteration   1: 22.291 ns/op
# Warmup Iteration   2: 28.495 ns/op
# Warmup Iteration   3: 13.726 ns/op
Iteration   1: 13.732 ns/op
Iteration   2: 13.730 ns/op
Iteration   3: 13.720 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.886 ns/op

# Run progress: 0.45% complete, ETA 00:59:43
# Fork: 2 of 2
# Warmup Iteration   1: 18.883 ns/op
# Warmup Iteration   2: 25.379 ns/op
# Warmup Iteration   3: 14.100 ns/op
Iteration   1: 14.102 ns/op
Iteration   2: 14.106 ns/op
Iteration   3: 14.104 ns/op
Iteration   4: 13.895 ns/op
Iteration   5: 13.890 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.905 ±(99.9%) 0.234 ns/op [Average]
  (min, avg, max) = (13.720, 13.905, 14.106), stdev = 0.154
  CI (99.9%): [13.672, 14.139] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 0.49% complete, ETA 00:59:36
# Fork: 1 of 2
# Warmup Iteration   1: 71.573 ns/op
# Warmup Iteration   2: 82.612 ns/op
# Warmup Iteration   3: 52.365 ns/op
Iteration   1: 52.381 ns/op
Iteration   2: 52.363 ns/op
Iteration   3: 52.398 ns/op
Iteration   4: 52.200 ns/op
Iteration   5: 52.216 ns/op

# Run progress: 0.52% complete, ETA 00:59:31
# Fork: 2 of 2
# Warmup Iteration   1: 76.948 ns/op
# Warmup Iteration   2: 81.865 ns/op
# Warmup Iteration   3: 52.643 ns/op
Iteration   1: 52.693 ns/op
Iteration   2: 52.660 ns/op
Iteration   3: 52.615 ns/op
Iteration   4: 52.541 ns/op
Iteration   5: 52.524 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.459 ±(99.9%) 0.264 ns/op [Average]
  (min, avg, max) = (52.200, 52.459, 52.693), stdev = 0.175
  CI (99.9%): [52.195, 52.723] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 0.56% complete, ETA 00:59:26
# Fork: 1 of 2
# Warmup Iteration   1: 65.094 ns/op
# Warmup Iteration   2: 67.126 ns/op
# Warmup Iteration   3: 45.440 ns/op
Iteration   1: 45.467 ns/op
Iteration   2: 45.420 ns/op
Iteration   3: 45.433 ns/op
Iteration   4: 45.896 ns/op
Iteration   5: 45.909 ns/op

# Run progress: 0.59% complete, ETA 00:59:24
# Fork: 2 of 2
# Warmup Iteration   1: 68.025 ns/op
# Warmup Iteration   2: 70.272 ns/op
# Warmup Iteration   3: 45.285 ns/op
Iteration   1: 45.285 ns/op
Iteration   2: 45.217 ns/op
Iteration   3: 45.278 ns/op
Iteration   4: 45.362 ns/op
Iteration   5: 45.295 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.456 ±(99.9%) 0.375 ns/op [Average]
  (min, avg, max) = (45.217, 45.456, 45.909), stdev = 0.248
  CI (99.9%): [45.081, 45.831] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 0.63% complete, ETA 00:59:20
# Fork: 1 of 2
# Warmup Iteration   1: 151.268 ns/op
# Warmup Iteration   2: 79.900 ns/op
# Warmup Iteration   3: 48.317 ns/op
Iteration   1: 48.343 ns/op
Iteration   2: 48.330 ns/op
Iteration   3: 48.341 ns/op
Iteration   4: 48.317 ns/op
Iteration   5: 48.318 ns/op

# Run progress: 0.66% complete, ETA 00:59:17
# Fork: 2 of 2
# Warmup Iteration   1: 152.797 ns/op
# Warmup Iteration   2: 80.027 ns/op
# Warmup Iteration   3: 48.624 ns/op
Iteration   1: 48.629 ns/op
Iteration   2: 48.619 ns/op
Iteration   3: 48.625 ns/op
Iteration   4: 48.663 ns/op
Iteration   5: 48.688 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.487 ±(99.9%) 0.253 ns/op [Average]
  (min, avg, max) = (48.317, 48.487, 48.688), stdev = 0.167
  CI (99.9%): [48.234, 48.740] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 0.69% complete, ETA 00:59:13
# Fork: 1 of 2
# Warmup Iteration   1: 73.374 ns/op
# Warmup Iteration   2: 76.950 ns/op
# Warmup Iteration   3: 47.514 ns/op
Iteration   1: 47.606 ns/op
Iteration   2: 47.552 ns/op
Iteration   3: 47.527 ns/op
Iteration   4: 47.553 ns/op
Iteration   5: 47.663 ns/op

# Run progress: 0.73% complete, ETA 00:59:10
# Fork: 2 of 2
# Warmup Iteration   1: 68.276 ns/op
# Warmup Iteration   2: 73.275 ns/op
# Warmup Iteration   3: 47.548 ns/op
Iteration   1: 47.511 ns/op
Iteration   2: 47.523 ns/op
Iteration   3: 47.536 ns/op
Iteration   4: 47.568 ns/op
Iteration   5: 47.552 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.559 ±(99.9%) 0.069 ns/op [Average]
  (min, avg, max) = (47.511, 47.559, 47.663), stdev = 0.045
  CI (99.9%): [47.491, 47.628] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 0.76% complete, ETA 00:59:07
# Fork: 1 of 2
# Warmup Iteration   1: 166.331 ns/op
# Warmup Iteration   2: 178.939 ns/op
# Warmup Iteration   3: 93.975 ns/op
Iteration   1: 94.055 ns/op
Iteration   2: 93.973 ns/op
Iteration   3: 94.028 ns/op
Iteration   4: 100.150 ns/op
Iteration   5: 100.179 ns/op

# Run progress: 0.80% complete, ETA 00:59:05
# Fork: 2 of 2
# Warmup Iteration   1: 183.975 ns/op
# Warmup Iteration   2: 179.163 ns/op
# Warmup Iteration   3: 93.999 ns/op
Iteration   1: 94.034 ns/op
Iteration   2: 93.966 ns/op
Iteration   3: 94.055 ns/op
Iteration   4: 100.353 ns/op
Iteration   5: 100.136 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.493 ±(99.9%) 4.831 ns/op [Average]
  (min, avg, max) = (93.966, 96.493, 100.353), stdev = 3.195
  CI (99.9%): [91.662, 101.324] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 0.83% complete, ETA 00:59:02
# Fork: 1 of 2
# Warmup Iteration   1: 19.447 ns/op
# Warmup Iteration   2: 24.403 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.730 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.913 ns/op
Iteration   5: 13.908 ns/op

# Run progress: 0.87% complete, ETA 00:59:01
# Fork: 2 of 2
# Warmup Iteration   1: 19.338 ns/op
# Warmup Iteration   2: 24.736 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.892 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.791 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (13.710, 13.791, 13.913), stdev = 0.093
  CI (99.9%): [13.650, 13.932] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 0.90% complete, ETA 00:58:57
# Fork: 1 of 2
# Warmup Iteration   1: 74.121 ns/op
# Warmup Iteration   2: 83.095 ns/op
# Warmup Iteration   3: 52.632 ns/op
Iteration   1: 52.685 ns/op
Iteration   2: 52.636 ns/op
Iteration   3: 52.626 ns/op
Iteration   4: 52.491 ns/op
Iteration   5: 52.551 ns/op

# Run progress: 0.94% complete, ETA 00:58:56
# Fork: 2 of 2
# Warmup Iteration   1: 72.191 ns/op
# Warmup Iteration   2: 92.595 ns/op
# Warmup Iteration   3: 52.358 ns/op
Iteration   1: 52.401 ns/op
Iteration   2: 52.410 ns/op
Iteration   3: 52.390 ns/op
Iteration   4: 52.206 ns/op
Iteration   5: 52.210 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.461 ±(99.9%) 0.255 ns/op [Average]
  (min, avg, max) = (52.206, 52.461, 52.685), stdev = 0.169
  CI (99.9%): [52.205, 52.716] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 0.97% complete, ETA 00:58:54
# Fork: 1 of 2
# Warmup Iteration   1: 70.644 ns/op
# Warmup Iteration   2: 73.094 ns/op
# Warmup Iteration   3: 45.164 ns/op
Iteration   1: 45.247 ns/op
Iteration   2: 45.292 ns/op
Iteration   3: 45.293 ns/op
Iteration   4: 45.373 ns/op
Iteration   5: 45.337 ns/op

# Run progress: 1.01% complete, ETA 00:58:52
# Fork: 2 of 2
# Warmup Iteration   1: 65.113 ns/op
# Warmup Iteration   2: 69.341 ns/op
# Warmup Iteration   3: 45.221 ns/op
Iteration   1: 45.207 ns/op
Iteration   2: 45.274 ns/op
Iteration   3: 45.248 ns/op
Iteration   4: 45.262 ns/op
Iteration   5: 45.281 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.281 ±(99.9%) 0.071 ns/op [Average]
  (min, avg, max) = (45.207, 45.281, 45.373), stdev = 0.047
  CI (99.9%): [45.210, 45.353] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 1.04% complete, ETA 00:58:50
# Fork: 1 of 2
# Warmup Iteration   1: 152.338 ns/op
# Warmup Iteration   2: 70.177 ns/op
# Warmup Iteration   3: 48.312 ns/op
Iteration   1: 48.308 ns/op
Iteration   2: 48.323 ns/op
Iteration   3: 48.311 ns/op
Iteration   4: 48.310 ns/op
Iteration   5: 48.346 ns/op

# Run progress: 1.08% complete, ETA 00:58:49
# Fork: 2 of 2
# Warmup Iteration   1: 147.713 ns/op
# Warmup Iteration   2: 71.823 ns/op
# Warmup Iteration   3: 48.332 ns/op
Iteration   1: 48.335 ns/op
Iteration   2: 48.343 ns/op
Iteration   3: 48.339 ns/op
Iteration   4: 48.333 ns/op
Iteration   5: 48.315 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.326 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (48.308, 48.326, 48.346), stdev = 0.015
  CI (99.9%): [48.304, 48.349] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 1.11% complete, ETA 00:58:46
# Fork: 1 of 2
# Warmup Iteration   1: 68.067 ns/op
# Warmup Iteration   2: 70.053 ns/op
# Warmup Iteration   3: 47.546 ns/op
Iteration   1: 47.541 ns/op
Iteration   2: 47.440 ns/op
Iteration   3: 47.558 ns/op
Iteration   4: 47.642 ns/op
Iteration   5: 47.632 ns/op

# Run progress: 1.15% complete, ETA 00:58:44
# Fork: 2 of 2
# Warmup Iteration   1: 67.940 ns/op
# Warmup Iteration   2: 83.797 ns/op
# Warmup Iteration   3: 47.537 ns/op
Iteration   1: 47.533 ns/op
Iteration   2: 47.589 ns/op
Iteration   3: 47.590 ns/op
Iteration   4: 47.558 ns/op
Iteration   5: 47.604 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.569 ±(99.9%) 0.088 ns/op [Average]
  (min, avg, max) = (47.440, 47.569, 47.642), stdev = 0.058
  CI (99.9%): [47.481, 47.657] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 1.18% complete, ETA 00:58:42
# Fork: 1 of 2
# Warmup Iteration   1: 165.601 ns/op
# Warmup Iteration   2: 165.348 ns/op
# Warmup Iteration   3: 94.075 ns/op
Iteration   1: 94.017 ns/op
Iteration   2: 93.986 ns/op
Iteration   3: 93.985 ns/op
Iteration   4: 100.385 ns/op
Iteration   5: 100.062 ns/op

# Run progress: 1.22% complete, ETA 00:58:40
# Fork: 2 of 2
# Warmup Iteration   1: 163.431 ns/op
# Warmup Iteration   2: 172.711 ns/op
# Warmup Iteration   3: 93.996 ns/op
Iteration   1: 94.121 ns/op
Iteration   2: 93.950 ns/op
Iteration   3: 94.021 ns/op
Iteration   4: 100.176 ns/op
Iteration   5: 100.068 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.477 ±(99.9%) 4.811 ns/op [Average]
  (min, avg, max) = (93.950, 96.477, 100.385), stdev = 3.182
  CI (99.9%): [91.666, 101.288] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 1.25% complete, ETA 00:58:38
# Fork: 1 of 2
# Warmup Iteration   1: 18.973 ns/op
# Warmup Iteration   2: 22.958 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.736 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 14.617 ns/op
Iteration   5: 14.617 ns/op

# Run progress: 1.28% complete, ETA 00:58:37
# Fork: 2 of 2
# Warmup Iteration   1: 20.287 ns/op
# Warmup Iteration   2: 25.166 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.732 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.893 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.932 ±(99.9%) 0.555 ns/op [Average]
  (min, avg, max) = (13.710, 13.932, 14.617), stdev = 0.367
  CI (99.9%): [13.377, 14.487] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 1.32% complete, ETA 00:58:35
# Fork: 1 of 2
# Warmup Iteration   1: 79.190 ns/op
# Warmup Iteration   2: 84.704 ns/op
# Warmup Iteration   3: 55.954 ns/op
Iteration   1: 55.955 ns/op
Iteration   2: 55.898 ns/op
Iteration   3: 55.904 ns/op
Iteration   4: 55.721 ns/op
Iteration   5: 55.766 ns/op

# Run progress: 1.35% complete, ETA 00:58:35
# Fork: 2 of 2
# Warmup Iteration   1: 80.659 ns/op
# Warmup Iteration   2: 79.777 ns/op
# Warmup Iteration   3: 55.936 ns/op
Iteration   1: 56.001 ns/op
Iteration   2: 55.963 ns/op
Iteration   3: 56.000 ns/op
Iteration   4: 55.605 ns/op
Iteration   5: 55.706 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  55.852 ±(99.9%) 0.213 ns/op [Average]
  (min, avg, max) = (55.605, 55.852, 56.001), stdev = 0.141
  CI (99.9%): [55.639, 56.065] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 1.39% complete, ETA 00:58:33
# Fork: 1 of 2
# Warmup Iteration   1: 66.736 ns/op
# Warmup Iteration   2: 65.988 ns/op
# Warmup Iteration   3: 45.215 ns/op
Iteration   1: 45.273 ns/op
Iteration   2: 45.238 ns/op
Iteration   3: 45.229 ns/op
Iteration   4: 45.261 ns/op
Iteration   5: 45.288 ns/op

# Run progress: 1.42% complete, ETA 00:58:32
# Fork: 2 of 2
# Warmup Iteration   1: 66.456 ns/op
# Warmup Iteration   2: 65.747 ns/op
# Warmup Iteration   3: 45.223 ns/op
Iteration   1: 45.333 ns/op
Iteration   2: 45.230 ns/op
Iteration   3: 45.265 ns/op
Iteration   4: 45.359 ns/op
Iteration   5: 45.281 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.276 ±(99.9%) 0.065 ns/op [Average]
  (min, avg, max) = (45.229, 45.276, 45.359), stdev = 0.043
  CI (99.9%): [45.211, 45.340] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 1.46% complete, ETA 00:58:30
# Fork: 1 of 2
# Warmup Iteration   1: 469.368 ns/op
# Warmup Iteration   2: 104.952 ns/op
# Warmup Iteration   3: 66.715 ns/op
Iteration   1: 66.697 ns/op
Iteration   2: 66.779 ns/op
Iteration   3: 66.772 ns/op
Iteration   4: 66.878 ns/op
Iteration   5: 66.814 ns/op

# Run progress: 1.49% complete, ETA 00:58:28
# Fork: 2 of 2
# Warmup Iteration   1: 519.003 ns/op
# Warmup Iteration   2: 105.724 ns/op
# Warmup Iteration   3: 66.728 ns/op
Iteration   1: 66.678 ns/op
Iteration   2: 66.720 ns/op
Iteration   3: 66.742 ns/op
Iteration   4: 66.870 ns/op
Iteration   5: 66.611 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.756 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (66.611, 66.756, 66.878), stdev = 0.085
  CI (99.9%): [66.628, 66.884] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 1.53% complete, ETA 00:58:25
# Fork: 1 of 2
# Warmup Iteration   1: 69.195 ns/op
# Warmup Iteration   2: 69.410 ns/op
# Warmup Iteration   3: 47.506 ns/op
Iteration   1: 47.577 ns/op
Iteration   2: 47.571 ns/op
Iteration   3: 47.533 ns/op
Iteration   4: 47.536 ns/op
Iteration   5: 47.558 ns/op

# Run progress: 1.56% complete, ETA 00:58:24
# Fork: 2 of 2
# Warmup Iteration   1: 73.419 ns/op
# Warmup Iteration   2: 71.378 ns/op
# Warmup Iteration   3: 47.528 ns/op
Iteration   1: 47.586 ns/op
Iteration   2: 47.560 ns/op
Iteration   3: 47.519 ns/op
Iteration   4: 47.567 ns/op
Iteration   5: 47.574 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.558 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (47.519, 47.558, 47.586), stdev = 0.022
  CI (99.9%): [47.525, 47.591] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 1.60% complete, ETA 00:58:23
# Fork: 1 of 2
# Warmup Iteration   1: 174.925 ns/op
# Warmup Iteration   2: 171.588 ns/op
# Warmup Iteration   3: 98.636 ns/op
Iteration   1: 98.574 ns/op
Iteration   2: 98.672 ns/op
Iteration   3: 98.583 ns/op
Iteration   4: 105.171 ns/op
Iteration   5: 105.193 ns/op

# Run progress: 1.63% complete, ETA 00:58:22
# Fork: 2 of 2
# Warmup Iteration   1: 182.308 ns/op
# Warmup Iteration   2: 175.449 ns/op
# Warmup Iteration   3: 89.157 ns/op
Iteration   1: 89.058 ns/op
Iteration   2: 89.204 ns/op
Iteration   3: 89.229 ns/op
Iteration   4: 92.026 ns/op
Iteration   5: 91.962 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.767 ±(99.9%) 9.573 ns/op [Average]
  (min, avg, max) = (89.058, 95.767, 105.193), stdev = 6.332
  CI (99.9%): [86.195, 105.340] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 1.67% complete, ETA 00:58:20
# Fork: 1 of 2
# Warmup Iteration   1: 20.966 ns/op
# Warmup Iteration   2: 22.924 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.884 ns/op

# Run progress: 1.70% complete, ETA 00:58:19
# Fork: 2 of 2
# Warmup Iteration   1: 19.472 ns/op
# Warmup Iteration   2: 24.289 ns/op
# Warmup Iteration   3: 13.725 ns/op
Iteration   1: 13.709 ns/op
Iteration   2: 13.733 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.881 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.709, 13.783, 13.884), stdev = 0.086
  CI (99.9%): [13.652, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 1.74% complete, ETA 00:58:18
# Fork: 1 of 2
# Warmup Iteration   1: 171.514 ns/op
# Warmup Iteration   2: 136.317 ns/op
# Warmup Iteration   3: 89.980 ns/op
Iteration   1: 90.075 ns/op
Iteration   2: 89.962 ns/op
Iteration   3: 90.086 ns/op
Iteration   4: 89.765 ns/op
Iteration   5: 89.779 ns/op

# Run progress: 1.77% complete, ETA 00:58:16
# Fork: 2 of 2
# Warmup Iteration   1: 174.261 ns/op
# Warmup Iteration   2: 127.801 ns/op
# Warmup Iteration   3: 89.995 ns/op
Iteration   1: 105.072 ns/op
Iteration   2: 90.092 ns/op
Iteration   3: 90.004 ns/op
Iteration   4: 89.868 ns/op
Iteration   5: 89.868 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  91.457 ±(99.9%) 7.235 ns/op [Average]
  (min, avg, max) = (89.765, 91.457, 105.072), stdev = 4.785
  CI (99.9%): [84.222, 98.692] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 1.81% complete, ETA 00:58:15
# Fork: 1 of 2
# Warmup Iteration   1: 67.678 ns/op
# Warmup Iteration   2: 70.840 ns/op
# Warmup Iteration   3: 45.276 ns/op
Iteration   1: 45.214 ns/op
Iteration   2: 45.286 ns/op
Iteration   3: 45.236 ns/op
Iteration   4: 45.307 ns/op
Iteration   5: 45.251 ns/op

# Run progress: 1.84% complete, ETA 00:58:13
# Fork: 2 of 2
# Warmup Iteration   1: 70.603 ns/op
# Warmup Iteration   2: 65.794 ns/op
# Warmup Iteration   3: 45.199 ns/op
Iteration   1: 45.222 ns/op
Iteration   2: 45.263 ns/op
Iteration   3: 45.227 ns/op
Iteration   4: 45.334 ns/op
Iteration   5: 45.233 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.257 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (45.214, 45.257, 45.334), stdev = 0.040
  CI (99.9%): [45.197, 45.318] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 1.88% complete, ETA 00:58:11
# Fork: 1 of 2
# Warmup Iteration   1: 324.858 ns/op
# Warmup Iteration   2: 153.542 ns/op
# Warmup Iteration   3: 105.555 ns/op
Iteration   1: 105.611 ns/op
Iteration   2: 105.639 ns/op
Iteration   3: 105.614 ns/op
Iteration   4: 105.605 ns/op
Iteration   5: 105.592 ns/op

# Run progress: 1.91% complete, ETA 00:58:11
# Fork: 2 of 2
# Warmup Iteration   1: 261.467 ns/op
# Warmup Iteration   2: 177.775 ns/op
# Warmup Iteration   3: 106.522 ns/op
Iteration   1: 106.356 ns/op
Iteration   2: 106.602 ns/op
Iteration   3: 106.193 ns/op
Iteration   4: 106.882 ns/op
Iteration   5: 106.608 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  106.070 ±(99.9%) 0.777 ns/op [Average]
  (min, avg, max) = (105.592, 106.070, 106.882), stdev = 0.514
  CI (99.9%): [105.293, 106.847] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 1.94% complete, ETA 00:58:10
# Fork: 1 of 2
# Warmup Iteration   1: 68.324 ns/op
# Warmup Iteration   2: 71.862 ns/op
# Warmup Iteration   3: 47.542 ns/op
Iteration   1: 47.536 ns/op
Iteration   2: 47.543 ns/op
Iteration   3: 47.556 ns/op
Iteration   4: 47.571 ns/op
Iteration   5: 47.576 ns/op

# Run progress: 1.98% complete, ETA 00:58:09
# Fork: 2 of 2
# Warmup Iteration   1: 69.696 ns/op
# Warmup Iteration   2: 82.250 ns/op
# Warmup Iteration   3: 47.546 ns/op
Iteration   1: 47.526 ns/op
Iteration   2: 47.547 ns/op
Iteration   3: 47.505 ns/op
Iteration   4: 47.598 ns/op
Iteration   5: 47.589 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.555 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (47.505, 47.555, 47.598), stdev = 0.029
  CI (99.9%): [47.511, 47.599] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 2.01% complete, ETA 00:58:07
# Fork: 1 of 2
# Warmup Iteration   1: 171.395 ns/op
# Warmup Iteration   2: 186.056 ns/op
# Warmup Iteration   3: 98.530 ns/op
Iteration   1: 98.550 ns/op
Iteration   2: 98.570 ns/op
Iteration   3: 98.603 ns/op
Iteration   4: 105.194 ns/op
Iteration   5: 105.154 ns/op

# Run progress: 2.05% complete, ETA 00:58:06
# Fork: 2 of 2
# Warmup Iteration   1: 177.543 ns/op
# Warmup Iteration   2: 197.879 ns/op
# Warmup Iteration   3: 98.566 ns/op
Iteration   1: 98.588 ns/op
Iteration   2: 98.566 ns/op
Iteration   3: 98.592 ns/op
Iteration   4: 105.145 ns/op
Iteration   5: 105.145 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.211 ±(99.9%) 5.138 ns/op [Average]
  (min, avg, max) = (98.550, 101.211, 105.194), stdev = 3.399
  CI (99.9%): [96.072, 106.349] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 2.08% complete, ETA 00:58:05
# Fork: 1 of 2
# Warmup Iteration   1: 22.299 ns/op
# Warmup Iteration   2: 25.364 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.706 ns/op
Iteration   4: 13.874 ns/op
Iteration   5: 13.872 ns/op

# Run progress: 2.12% complete, ETA 00:58:03
# Fork: 2 of 2
# Warmup Iteration   1: 19.755 ns/op
# Warmup Iteration   2: 21.516 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.877 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.779 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (13.706, 13.779, 13.890), stdev = 0.085
  CI (99.9%): [13.650, 13.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 2.15% complete, ETA 00:58:01
# Fork: 1 of 2
# Warmup Iteration   1: 729.487 ns/op
# Warmup Iteration   2: 431.841 ns/op
# Warmup Iteration   3: 300.106 ns/op
Iteration   1: 301.064 ns/op
Iteration   2: 300.834 ns/op
Iteration   3: 298.796 ns/op
Iteration   4: 300.196 ns/op
Iteration   5: 527.727 ns/op

# Run progress: 2.19% complete, ETA 00:58:01
# Fork: 2 of 2
# Warmup Iteration   1: 654.842 ns/op
# Warmup Iteration   2: 434.544 ns/op
# Warmup Iteration   3: 303.168 ns/op
Iteration   1: 304.763 ns/op
Iteration   2: 305.000 ns/op
Iteration   3: 304.746 ns/op
Iteration   4: 301.986 ns/op
Iteration   5: 303.549 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  324.866 ±(99.9%) 107.811 ns/op [Average]
  (min, avg, max) = (298.796, 324.866, 527.727), stdev = 71.310
  CI (99.9%): [217.055, 432.677] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 2.22% complete, ETA 00:58:01
# Fork: 1 of 2
# Warmup Iteration   1: 768.600 ns/op
# Warmup Iteration   2: 710.032 ns/op
# Warmup Iteration   3: 529.210 ns/op
Iteration   1: 529.448 ns/op
Iteration   2: 529.450 ns/op
Iteration   3: 529.799 ns/op
Iteration   4: 529.357 ns/op
Iteration   5: 529.391 ns/op

# Run progress: 2.26% complete, ETA 00:58:00
# Fork: 2 of 2
# Warmup Iteration   1: 760.534 ns/op
# Warmup Iteration   2: 704.982 ns/op
# Warmup Iteration   3: 528.957 ns/op
Iteration   1: 529.304 ns/op
Iteration   2: 529.188 ns/op
Iteration   3: 529.231 ns/op
Iteration   4: 529.357 ns/op
Iteration   5: 529.298 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  529.382 ±(99.9%) 0.256 ns/op [Average]
  (min, avg, max) = (529.188, 529.382, 529.799), stdev = 0.169
  CI (99.9%): [529.126, 529.638] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 2.29% complete, ETA 00:57:58
# Fork: 1 of 2
# Warmup Iteration   1: 10187.993 ns/op
# Warmup Iteration   2: 699.600 ns/op
# Warmup Iteration   3: 488.030 ns/op
Iteration   1: 488.333 ns/op
Iteration   2: 488.139 ns/op
Iteration   3: 487.884 ns/op
Iteration   4: 488.578 ns/op
Iteration   5: 488.301 ns/op

# Run progress: 2.33% complete, ETA 00:57:57
# Fork: 2 of 2
# Warmup Iteration   1: 28987.018 ns/op
# Warmup Iteration   2: 779.214 ns/op
# Warmup Iteration   3: 548.652 ns/op
Iteration   1: 502.226 ns/op
Iteration   2: 502.370 ns/op
Iteration   3: 502.089 ns/op
Iteration   4: 502.667 ns/op
Iteration   5: 502.027 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  495.261 ±(99.9%) 11.184 ns/op [Average]
  (min, avg, max) = (487.884, 495.261, 502.667), stdev = 7.398
  CI (99.9%): [484.077, 506.446] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 2.36% complete, ETA 00:57:55
# Fork: 1 of 2
# Warmup Iteration   1: 509.631 ns/op
# Warmup Iteration   2: 446.647 ns/op
# Warmup Iteration   3: 334.963 ns/op
Iteration   1: 335.266 ns/op
Iteration   2: 335.052 ns/op
Iteration   3: 334.964 ns/op
Iteration   4: 334.943 ns/op
Iteration   5: 335.072 ns/op

# Run progress: 2.40% complete, ETA 00:57:53
# Fork: 2 of 2
# Warmup Iteration   1: 505.502 ns/op
# Warmup Iteration   2: 450.075 ns/op
# Warmup Iteration   3: 334.828 ns/op
Iteration   1: 335.137 ns/op
Iteration   2: 335.019 ns/op
Iteration   3: 335.023 ns/op
Iteration   4: 335.007 ns/op
Iteration   5: 335.098 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.058 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (334.943, 335.058, 335.266), stdev = 0.093
  CI (99.9%): [334.917, 335.199] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 2.43% complete, ETA 00:57:51
# Fork: 1 of 2
# Warmup Iteration   1: 561.134 ns/op
# Warmup Iteration   2: 417.275 ns/op
# Warmup Iteration   3: 261.493 ns/op
Iteration   1: 261.655 ns/op
Iteration   2: 261.742 ns/op
Iteration   3: 261.519 ns/op
Iteration   4: 264.579 ns/op
Iteration   5: 264.611 ns/op

# Run progress: 2.47% complete, ETA 00:57:50
# Fork: 2 of 2
# Warmup Iteration   1: 619.927 ns/op
# Warmup Iteration   2: 420.142 ns/op
# Warmup Iteration   3: 259.099 ns/op
Iteration   1: 259.107 ns/op
Iteration   2: 259.299 ns/op
Iteration   3: 259.053 ns/op
Iteration   4: 261.520 ns/op
Iteration   5: 261.479 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  261.457 ±(99.9%) 3.015 ns/op [Average]
  (min, avg, max) = (259.053, 261.457, 264.611), stdev = 1.994
  CI (99.9%): [258.442, 264.471] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 2.50% complete, ETA 00:57:48
# Fork: 1 of 2
# Warmup Iteration   1: 18.640 ns/op
# Warmup Iteration   2: 24.976 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.725 ns/op
Iteration   4: 13.895 ns/op
Iteration   5: 13.870 ns/op

# Run progress: 2.53% complete, ETA 00:57:46
# Fork: 2 of 2
# Warmup Iteration   1: 20.251 ns/op
# Warmup Iteration   2: 24.738 ns/op
# Warmup Iteration   3: 13.721 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.728 ns/op
Iteration   4: 13.877 ns/op
Iteration   5: 13.876 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (13.712, 13.785, 13.895), stdev = 0.082
  CI (99.9%): [13.662, 13.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 2.57% complete, ETA 00:57:45
# Fork: 1 of 2
# Warmup Iteration   1: 73.578 ns/op
# Warmup Iteration   2: 81.324 ns/op
# Warmup Iteration   3: 52.370 ns/op
Iteration   1: 52.361 ns/op
Iteration   2: 52.349 ns/op
Iteration   3: 52.416 ns/op
Iteration   4: 52.172 ns/op
Iteration   5: 52.186 ns/op

# Run progress: 2.60% complete, ETA 00:57:43
# Fork: 2 of 2
# Warmup Iteration   1: 76.191 ns/op
# Warmup Iteration   2: 82.639 ns/op
# Warmup Iteration   3: 52.355 ns/op
Iteration   1: 52.388 ns/op
Iteration   2: 52.385 ns/op
Iteration   3: 52.375 ns/op
Iteration   4: 52.236 ns/op
Iteration   5: 52.194 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.306 ±(99.9%) 0.146 ns/op [Average]
  (min, avg, max) = (52.172, 52.306, 52.416), stdev = 0.097
  CI (99.9%): [52.160, 52.453] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 2.64% complete, ETA 00:57:41
# Fork: 1 of 2
# Warmup Iteration   1: 66.422 ns/op
# Warmup Iteration   2: 67.042 ns/op
# Warmup Iteration   3: 45.269 ns/op
Iteration   1: 45.286 ns/op
Iteration   2: 45.240 ns/op
Iteration   3: 45.278 ns/op
Iteration   4: 45.277 ns/op
Iteration   5: 45.310 ns/op

# Run progress: 2.67% complete, ETA 00:57:40
# Fork: 2 of 2
# Warmup Iteration   1: 70.465 ns/op
# Warmup Iteration   2: 72.442 ns/op
# Warmup Iteration   3: 45.236 ns/op
Iteration   1: 45.255 ns/op
Iteration   2: 45.246 ns/op
Iteration   3: 45.242 ns/op
Iteration   4: 45.234 ns/op
Iteration   5: 45.306 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.267 ±(99.9%) 0.042 ns/op [Average]
  (min, avg, max) = (45.234, 45.267, 45.310), stdev = 0.028
  CI (99.9%): [45.225, 45.310] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 2.71% complete, ETA 00:57:38
# Fork: 1 of 2
# Warmup Iteration   1: 158.313 ns/op
# Warmup Iteration   2: 75.078 ns/op
# Warmup Iteration   3: 48.303 ns/op
Iteration   1: 48.340 ns/op
Iteration   2: 48.321 ns/op
Iteration   3: 48.331 ns/op
Iteration   4: 48.336 ns/op
Iteration   5: 48.330 ns/op

# Run progress: 2.74% complete, ETA 00:57:37
# Fork: 2 of 2
# Warmup Iteration   1: 145.717 ns/op
# Warmup Iteration   2: 68.714 ns/op
# Warmup Iteration   3: 48.302 ns/op
Iteration   1: 48.338 ns/op
Iteration   2: 48.345 ns/op
Iteration   3: 48.325 ns/op
Iteration   4: 48.344 ns/op
Iteration   5: 48.338 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.335 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (48.321, 48.335, 48.345), stdev = 0.008
  CI (99.9%): [48.323, 48.347] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 2.78% complete, ETA 00:57:35
# Fork: 1 of 2
# Warmup Iteration   1: 68.354 ns/op
# Warmup Iteration   2: 76.472 ns/op
# Warmup Iteration   3: 47.521 ns/op
Iteration   1: 47.516 ns/op
Iteration   2: 47.526 ns/op
Iteration   3: 47.558 ns/op
Iteration   4: 47.576 ns/op
Iteration   5: 47.549 ns/op

# Run progress: 2.81% complete, ETA 00:57:34
# Fork: 2 of 2
# Warmup Iteration   1: 67.853 ns/op
# Warmup Iteration   2: 71.848 ns/op
# Warmup Iteration   3: 47.552 ns/op
Iteration   1: 47.592 ns/op
Iteration   2: 47.606 ns/op
Iteration   3: 47.471 ns/op
Iteration   4: 47.608 ns/op
Iteration   5: 47.600 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.560 ±(99.9%) 0.068 ns/op [Average]
  (min, avg, max) = (47.471, 47.560, 47.608), stdev = 0.045
  CI (99.9%): [47.492, 47.629] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 2.85% complete, ETA 00:57:33
# Fork: 1 of 2
# Warmup Iteration   1: 168.456 ns/op
# Warmup Iteration   2: 183.833 ns/op
# Warmup Iteration   3: 93.953 ns/op
Iteration   1: 93.949 ns/op
Iteration   2: 93.979 ns/op
Iteration   3: 93.979 ns/op
Iteration   4: 100.266 ns/op
Iteration   5: 100.039 ns/op

# Run progress: 2.88% complete, ETA 00:57:31
# Fork: 2 of 2
# Warmup Iteration   1: 165.198 ns/op
# Warmup Iteration   2: 177.379 ns/op
# Warmup Iteration   3: 93.957 ns/op
Iteration   1: 93.993 ns/op
Iteration   2: 93.966 ns/op
Iteration   3: 94.096 ns/op
Iteration   4: 100.397 ns/op
Iteration   5: 100.139 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.480 ±(99.9%) 4.856 ns/op [Average]
  (min, avg, max) = (93.949, 96.480, 100.397), stdev = 3.212
  CI (99.9%): [91.625, 101.336] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 2.92% complete, ETA 00:57:29
# Fork: 1 of 2
# Warmup Iteration   1: 20.204 ns/op
# Warmup Iteration   2: 25.017 ns/op
# Warmup Iteration   3: 14.104 ns/op
Iteration   1: 14.106 ns/op
Iteration   2: 14.103 ns/op
Iteration   3: 14.105 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.886 ns/op

# Run progress: 2.95% complete, ETA 00:57:27
# Fork: 2 of 2
# Warmup Iteration   1: 20.903 ns/op
# Warmup Iteration   2: 24.601 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.731 ns/op
Iteration   2: 13.731 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 13.902 ns/op
Iteration   5: 13.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.906 ±(99.9%) 0.235 ns/op [Average]
  (min, avg, max) = (13.716, 13.906, 14.106), stdev = 0.155
  CI (99.9%): [13.671, 14.141] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 2.99% complete, ETA 00:57:26
# Fork: 1 of 2
# Warmup Iteration   1: 73.677 ns/op
# Warmup Iteration   2: 78.763 ns/op
# Warmup Iteration   3: 52.655 ns/op
Iteration   1: 52.740 ns/op
Iteration   2: 52.661 ns/op
Iteration   3: 52.663 ns/op
Iteration   4: 52.568 ns/op
Iteration   5: 52.539 ns/op

# Run progress: 3.02% complete, ETA 00:57:24
# Fork: 2 of 2
# Warmup Iteration   1: 72.683 ns/op
# Warmup Iteration   2: 82.091 ns/op
# Warmup Iteration   3: 52.644 ns/op
Iteration   1: 52.650 ns/op
Iteration   2: 52.646 ns/op
Iteration   3: 52.688 ns/op
Iteration   4: 52.548 ns/op
Iteration   5: 52.506 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.621 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (52.506, 52.621, 52.740), stdev = 0.076
  CI (99.9%): [52.507, 52.735] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 3.06% complete, ETA 00:57:23
# Fork: 1 of 2
# Warmup Iteration   1: 70.207 ns/op
# Warmup Iteration   2: 77.510 ns/op
# Warmup Iteration   3: 45.224 ns/op
Iteration   1: 45.189 ns/op
Iteration   2: 45.267 ns/op
Iteration   3: 45.261 ns/op
Iteration   4: 45.322 ns/op
Iteration   5: 45.281 ns/op

# Run progress: 3.09% complete, ETA 00:57:21
# Fork: 2 of 2
# Warmup Iteration   1: 68.124 ns/op
# Warmup Iteration   2: 69.940 ns/op
# Warmup Iteration   3: 45.221 ns/op
Iteration   1: 45.202 ns/op
Iteration   2: 45.281 ns/op
Iteration   3: 45.308 ns/op
Iteration   4: 45.305 ns/op
Iteration   5: 45.324 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.274 ±(99.9%) 0.071 ns/op [Average]
  (min, avg, max) = (45.189, 45.274, 45.324), stdev = 0.047
  CI (99.9%): [45.203, 45.345] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 3.13% complete, ETA 00:57:19
# Fork: 1 of 2
# Warmup Iteration   1: 241.649 ns/op
# Warmup Iteration   2: 72.832 ns/op
# Warmup Iteration   3: 48.306 ns/op
Iteration   1: 48.356 ns/op
Iteration   2: 48.330 ns/op
Iteration   3: 48.335 ns/op
Iteration   4: 48.327 ns/op
Iteration   5: 48.339 ns/op

# Run progress: 3.16% complete, ETA 00:57:18
# Fork: 2 of 2
# Warmup Iteration   1: 155.830 ns/op
# Warmup Iteration   2: 82.323 ns/op
# Warmup Iteration   3: 48.317 ns/op
Iteration   1: 48.330 ns/op
Iteration   2: 48.340 ns/op
Iteration   3: 48.327 ns/op
Iteration   4: 48.306 ns/op
Iteration   5: 48.325 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.332 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (48.306, 48.332, 48.356), stdev = 0.013
  CI (99.9%): [48.312, 48.351] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 3.19% complete, ETA 00:57:17
# Fork: 1 of 2
# Warmup Iteration   1: 68.394 ns/op
# Warmup Iteration   2: 72.494 ns/op
# Warmup Iteration   3: 47.534 ns/op
Iteration   1: 47.498 ns/op
Iteration   2: 47.512 ns/op
Iteration   3: 47.548 ns/op
Iteration   4: 47.621 ns/op
Iteration   5: 47.615 ns/op

# Run progress: 3.23% complete, ETA 00:57:16
# Fork: 2 of 2
# Warmup Iteration   1: 68.437 ns/op
# Warmup Iteration   2: 80.318 ns/op
# Warmup Iteration   3: 47.530 ns/op
Iteration   1: 47.517 ns/op
Iteration   2: 47.571 ns/op
Iteration   3: 47.593 ns/op
Iteration   4: 47.643 ns/op
Iteration   5: 47.628 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.575 ±(99.9%) 0.081 ns/op [Average]
  (min, avg, max) = (47.498, 47.575, 47.643), stdev = 0.053
  CI (99.9%): [47.494, 47.655] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 3.26% complete, ETA 00:57:14
# Fork: 1 of 2
# Warmup Iteration   1: 166.634 ns/op
# Warmup Iteration   2: 182.070 ns/op
# Warmup Iteration   3: 93.933 ns/op
Iteration   1: 93.981 ns/op
Iteration   2: 94.083 ns/op
Iteration   3: 93.967 ns/op
Iteration   4: 100.188 ns/op
Iteration   5: 100.134 ns/op

# Run progress: 3.30% complete, ETA 00:57:13
# Fork: 2 of 2
# Warmup Iteration   1: 174.392 ns/op
# Warmup Iteration   2: 172.959 ns/op
# Warmup Iteration   3: 93.961 ns/op
Iteration   1: 93.975 ns/op
Iteration   2: 93.951 ns/op
Iteration   3: 93.963 ns/op
Iteration   4: 100.443 ns/op
Iteration   5: 100.039 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.472 ±(99.9%) 4.854 ns/op [Average]
  (min, avg, max) = (93.951, 96.472, 100.443), stdev = 3.211
  CI (99.9%): [91.618, 101.327] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 3.33% complete, ETA 00:57:11
# Fork: 1 of 2
# Warmup Iteration   1: 22.433 ns/op
# Warmup Iteration   2: 23.513 ns/op
# Warmup Iteration   3: 13.722 ns/op
Iteration   1: 13.719 ns/op
Iteration   2: 13.725 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.872 ns/op
Iteration   5: 13.887 ns/op

# Run progress: 3.37% complete, ETA 00:57:10
# Fork: 2 of 2
# Warmup Iteration   1: 19.480 ns/op
# Warmup Iteration   2: 21.399 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.719 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.724 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (13.713, 13.784, 13.888), stdev = 0.085
  CI (99.9%): [13.656, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 3.40% complete, ETA 00:57:08
# Fork: 1 of 2
# Warmup Iteration   1: 80.006 ns/op
# Warmup Iteration   2: 84.103 ns/op
# Warmup Iteration   3: 56.120 ns/op
Iteration   1: 56.142 ns/op
Iteration   2: 56.134 ns/op
Iteration   3: 56.143 ns/op
Iteration   4: 55.879 ns/op
Iteration   5: 55.864 ns/op

# Run progress: 3.44% complete, ETA 00:57:07
# Fork: 2 of 2
# Warmup Iteration   1: 79.700 ns/op
# Warmup Iteration   2: 86.882 ns/op
# Warmup Iteration   3: 56.117 ns/op
Iteration   1: 56.138 ns/op
Iteration   2: 56.160 ns/op
Iteration   3: 56.139 ns/op
Iteration   4: 55.824 ns/op
Iteration   5: 55.913 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  56.034 ±(99.9%) 0.216 ns/op [Average]
  (min, avg, max) = (55.824, 56.034, 56.160), stdev = 0.143
  CI (99.9%): [55.818, 56.249] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 3.47% complete, ETA 00:57:05
# Fork: 1 of 2
# Warmup Iteration   1: 170.752 ns/op
# Warmup Iteration   2: 155.394 ns/op
# Warmup Iteration   3: 109.034 ns/op
Iteration   1: 109.072 ns/op
Iteration   2: 109.090 ns/op
Iteration   3: 109.069 ns/op
Iteration   4: 109.353 ns/op
Iteration   5: 109.386 ns/op

# Run progress: 3.51% complete, ETA 00:57:04
# Fork: 2 of 2
# Warmup Iteration   1: 155.298 ns/op
# Warmup Iteration   2: 163.748 ns/op
# Warmup Iteration   3: 119.081 ns/op
Iteration   1: 119.105 ns/op
Iteration   2: 119.194 ns/op
Iteration   3: 119.121 ns/op
Iteration   4: 119.120 ns/op
Iteration   5: 119.116 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.163 ±(99.9%) 7.920 ns/op [Average]
  (min, avg, max) = (109.069, 114.163, 119.194), stdev = 5.239
  CI (99.9%): [106.243, 122.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 3.54% complete, ETA 00:57:02
# Fork: 1 of 2
# Warmup Iteration   1: 546.885 ns/op
# Warmup Iteration   2: 98.324 ns/op
# Warmup Iteration   3: 66.304 ns/op
Iteration   1: 66.331 ns/op
Iteration   2: 66.353 ns/op
Iteration   3: 66.318 ns/op
Iteration   4: 66.389 ns/op
Iteration   5: 66.458 ns/op

# Run progress: 3.58% complete, ETA 00:57:01
# Fork: 2 of 2
# Warmup Iteration   1: 496.676 ns/op
# Warmup Iteration   2: 112.742 ns/op
# Warmup Iteration   3: 66.467 ns/op
Iteration   1: 66.473 ns/op
Iteration   2: 66.483 ns/op
Iteration   3: 66.424 ns/op
Iteration   4: 66.504 ns/op
Iteration   5: 66.511 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.425 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (66.318, 66.425, 66.511), stdev = 0.072
  CI (99.9%): [66.315, 66.534] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 3.61% complete, ETA 00:57:00
# Fork: 1 of 2
# Warmup Iteration   1: 114.533 ns/op
# Warmup Iteration   2: 120.757 ns/op
# Warmup Iteration   3: 78.572 ns/op
Iteration   1: 78.416 ns/op
Iteration   2: 78.524 ns/op
Iteration   3: 78.627 ns/op
Iteration   4: 78.775 ns/op
Iteration   5: 78.629 ns/op

# Run progress: 3.65% complete, ETA 00:56:58
# Fork: 2 of 2
# Warmup Iteration   1: 115.217 ns/op
# Warmup Iteration   2: 113.985 ns/op
# Warmup Iteration   3: 78.497 ns/op
Iteration   1: 78.499 ns/op
Iteration   2: 78.632 ns/op
Iteration   3: 78.368 ns/op
Iteration   4: 78.400 ns/op
Iteration   5: 78.503 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  78.537 ±(99.9%) 0.193 ns/op [Average]
  (min, avg, max) = (78.368, 78.537, 78.775), stdev = 0.128
  CI (99.9%): [78.344, 78.730] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 3.68% complete, ETA 00:56:57
# Fork: 1 of 2
# Warmup Iteration   1: 191.608 ns/op
# Warmup Iteration   2: 168.527 ns/op
# Warmup Iteration   3: 100.499 ns/op
Iteration   1: 100.532 ns/op
Iteration   2: 100.492 ns/op
Iteration   3: 100.401 ns/op
Iteration   4: 104.095 ns/op
Iteration   5: 104.141 ns/op

# Run progress: 3.72% complete, ETA 00:56:55
# Fork: 2 of 2
# Warmup Iteration   1: 194.254 ns/op
# Warmup Iteration   2: 189.383 ns/op
# Warmup Iteration   3: 100.434 ns/op
Iteration   1: 100.414 ns/op
Iteration   2: 100.392 ns/op
Iteration   3: 100.551 ns/op
Iteration   4: 104.138 ns/op
Iteration   5: 104.086 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.924 ±(99.9%) 2.852 ns/op [Average]
  (min, avg, max) = (100.392, 101.924, 104.141), stdev = 1.886
  CI (99.9%): [99.072, 104.776] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 3.75% complete, ETA 00:56:54
# Fork: 1 of 2
# Warmup Iteration   1: 20.266 ns/op
# Warmup Iteration   2: 25.045 ns/op
# Warmup Iteration   3: 13.736 ns/op
Iteration   1: 13.720 ns/op
Iteration   2: 13.722 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.883 ns/op

# Run progress: 3.78% complete, ETA 00:56:52
# Fork: 2 of 2
# Warmup Iteration   1: 19.838 ns/op
# Warmup Iteration   2: 24.635 ns/op
# Warmup Iteration   3: 14.098 ns/op
Iteration   1: 14.100 ns/op
Iteration   2: 14.101 ns/op
Iteration   3: 14.098 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.877 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.898 ±(99.9%) 0.236 ns/op [Average]
  (min, avg, max) = (13.716, 13.898, 14.101), stdev = 0.156
  CI (99.9%): [13.662, 14.134] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 3.82% complete, ETA 00:56:51
# Fork: 1 of 2
# Warmup Iteration   1: 516.499 ns/op
# Warmup Iteration   2: 301.127 ns/op
# Warmup Iteration   3: 203.893 ns/op
Iteration   1: 203.821 ns/op
Iteration   2: 203.733 ns/op
Iteration   3: 203.750 ns/op
Iteration   4: 204.353 ns/op
Iteration   5: 203.559 ns/op

# Run progress: 3.85% complete, ETA 00:56:49
# Fork: 2 of 2
# Warmup Iteration   1: 560.647 ns/op
# Warmup Iteration   2: 301.994 ns/op
# Warmup Iteration   3: 203.365 ns/op
Iteration   1: 203.327 ns/op
Iteration   2: 203.839 ns/op
Iteration   3: 203.548 ns/op
Iteration   4: 203.625 ns/op
Iteration   5: 203.679 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  203.723 ±(99.9%) 0.405 ns/op [Average]
  (min, avg, max) = (203.327, 203.723, 204.353), stdev = 0.268
  CI (99.9%): [203.318, 204.129] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 3.89% complete, ETA 00:56:47
# Fork: 1 of 2
# Warmup Iteration   1: 905.780 ns/op
# Warmup Iteration   2: 815.558 ns/op
# Warmup Iteration   3: 604.250 ns/op
Iteration   1: 604.247 ns/op
Iteration   2: 604.261 ns/op
Iteration   3: 604.390 ns/op
Iteration   4: 604.852 ns/op
Iteration   5: 604.833 ns/op

# Run progress: 3.92% complete, ETA 00:56:46
# Fork: 2 of 2
# Warmup Iteration   1: 862.320 ns/op
# Warmup Iteration   2: 789.534 ns/op
# Warmup Iteration   3: 604.278 ns/op
Iteration   1: 604.500 ns/op
Iteration   2: 604.205 ns/op
Iteration   3: 604.395 ns/op
Iteration   4: 604.442 ns/op
Iteration   5: 604.651 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  604.478 ±(99.9%) 0.352 ns/op [Average]
  (min, avg, max) = (604.205, 604.478, 604.852), stdev = 0.233
  CI (99.9%): [604.126, 604.829] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 3.96% complete, ETA 00:56:45
# Fork: 1 of 2
# Warmup Iteration   1: 520.127 ns/op
# Warmup Iteration   2: 229.756 ns/op
# Warmup Iteration   3: 166.502 ns/op
Iteration   1: 166.564 ns/op
Iteration   2: 166.560 ns/op
Iteration   3: 166.535 ns/op
Iteration   4: 166.565 ns/op
Iteration   5: 166.571 ns/op

# Run progress: 3.99% complete, ETA 00:56:44
# Fork: 2 of 2
# Warmup Iteration   1: 633.938 ns/op
# Warmup Iteration   2: 232.242 ns/op
# Warmup Iteration   3: 158.490 ns/op
Iteration   1: 158.540 ns/op
Iteration   2: 158.527 ns/op
Iteration   3: 158.497 ns/op
Iteration   4: 158.701 ns/op
Iteration   5: 158.659 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.572 ±(99.9%) 6.354 ns/op [Average]
  (min, avg, max) = (158.497, 162.572, 166.571), stdev = 4.203
  CI (99.9%): [156.218, 168.926] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 4.03% complete, ETA 00:56:42
# Fork: 1 of 2
# Warmup Iteration   1: 625.402 ns/op
# Warmup Iteration   2: 573.957 ns/op
# Warmup Iteration   3: 434.009 ns/op
Iteration   1: 434.134 ns/op
Iteration   2: 434.110 ns/op
Iteration   3: 434.211 ns/op
Iteration   4: 434.078 ns/op
Iteration   5: 434.251 ns/op

# Run progress: 4.06% complete, ETA 00:56:41
# Fork: 2 of 2
# Warmup Iteration   1: 633.633 ns/op
# Warmup Iteration   2: 604.416 ns/op
# Warmup Iteration   3: 434.066 ns/op
Iteration   1: 434.361 ns/op
Iteration   2: 434.115 ns/op
Iteration   3: 433.836 ns/op
Iteration   4: 433.924 ns/op
Iteration   5: 434.009 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  434.103 ±(99.9%) 0.233 ns/op [Average]
  (min, avg, max) = (433.836, 434.103, 434.361), stdev = 0.154
  CI (99.9%): [433.870, 434.336] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 4.10% complete, ETA 00:56:40
# Fork: 1 of 2
# Warmup Iteration   1: 264.962 ns/op
# Warmup Iteration   2: 246.411 ns/op
# Warmup Iteration   3: 138.735 ns/op
Iteration   1: 138.700 ns/op
Iteration   2: 138.767 ns/op
Iteration   3: 138.669 ns/op
Iteration   4: 145.152 ns/op
Iteration   5: 144.974 ns/op

# Run progress: 4.13% complete, ETA 00:56:38
# Fork: 2 of 2
# Warmup Iteration   1: 248.136 ns/op
# Warmup Iteration   2: 229.516 ns/op
# Warmup Iteration   3: 139.410 ns/op
Iteration   1: 139.626 ns/op
Iteration   2: 139.492 ns/op
Iteration   3: 139.520 ns/op
Iteration   4: 145.827 ns/op
Iteration   5: 145.865 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.659 ±(99.9%) 4.982 ns/op [Average]
  (min, avg, max) = (138.669, 141.659, 145.865), stdev = 3.295
  CI (99.9%): [136.678, 146.641] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 4.17% complete, ETA 00:56:37
# Fork: 1 of 2
# Warmup Iteration   1: 18.464 ns/op
# Warmup Iteration   2: 25.012 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.883 ns/op

# Run progress: 4.20% complete, ETA 00:56:35
# Fork: 2 of 2
# Warmup Iteration   1: 19.357 ns/op
# Warmup Iteration   2: 24.221 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.889 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.710, 13.782, 13.889), stdev = 0.088
  CI (99.9%): [13.649, 13.914] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 4.24% complete, ETA 00:56:34
# Fork: 1 of 2
# Warmup Iteration   1: 651.444 ns/op
# Warmup Iteration   2: 403.917 ns/op
# Warmup Iteration   3: 283.776 ns/op
Iteration   1: 284.747 ns/op
Iteration   2: 281.600 ns/op
Iteration   3: 282.316 ns/op
Iteration   4: 284.348 ns/op
Iteration   5: 283.364 ns/op

# Run progress: 4.27% complete, ETA 00:56:33
# Fork: 2 of 2
# Warmup Iteration   1: 656.762 ns/op
# Warmup Iteration   2: 394.011 ns/op
# Warmup Iteration   3: 280.049 ns/op
Iteration   1: 280.070 ns/op
Iteration   2: 280.400 ns/op
Iteration   3: 279.723 ns/op
Iteration   4: 280.109 ns/op
Iteration   5: 279.997 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  281.667 ±(99.9%) 2.901 ns/op [Average]
  (min, avg, max) = (279.723, 281.667, 284.747), stdev = 1.919
  CI (99.9%): [278.767, 284.568] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 4.31% complete, ETA 00:56:31
# Fork: 1 of 2
# Warmup Iteration   1: 584.809 ns/op
# Warmup Iteration   2: 546.234 ns/op
# Warmup Iteration   3: 407.407 ns/op
Iteration   1: 407.532 ns/op
Iteration   2: 407.520 ns/op
Iteration   3: 407.494 ns/op
Iteration   4: 407.328 ns/op
Iteration   5: 407.448 ns/op

# Run progress: 4.34% complete, ETA 00:56:30
# Fork: 2 of 2
# Warmup Iteration   1: 586.084 ns/op
# Warmup Iteration   2: 552.423 ns/op
# Warmup Iteration   3: 409.429 ns/op
Iteration   1: 409.461 ns/op
Iteration   2: 409.960 ns/op
Iteration   3: 409.669 ns/op
Iteration   4: 409.663 ns/op
Iteration   5: 409.664 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.574 ±(99.9%) 1.779 ns/op [Average]
  (min, avg, max) = (407.328, 408.574, 409.960), stdev = 1.177
  CI (99.9%): [406.795, 410.353] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 4.38% complete, ETA 00:56:29
# Fork: 1 of 2
# Warmup Iteration   1: 7493.421 ns/op
# Warmup Iteration   2: 517.684 ns/op
# Warmup Iteration   3: 368.099 ns/op
Iteration   1: 361.288 ns/op
Iteration   2: 360.535 ns/op
Iteration   3: 360.750 ns/op
Iteration   4: 360.658 ns/op
Iteration   5: 360.592 ns/op

# Run progress: 4.41% complete, ETA 00:56:28
# Fork: 2 of 2
# Warmup Iteration   1: 4829.858 ns/op
# Warmup Iteration   2: 603.638 ns/op
# Warmup Iteration   3: 367.465 ns/op
Iteration   1: 359.845 ns/op
Iteration   2: 359.731 ns/op
Iteration   3: 362.079 ns/op
Iteration   4: 359.609 ns/op
Iteration   5: 359.491 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  360.458 ±(99.9%) 1.237 ns/op [Average]
  (min, avg, max) = (359.491, 360.458, 362.079), stdev = 0.818
  CI (99.9%): [359.221, 361.695] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 4.44% complete, ETA 00:56:26
# Fork: 1 of 2
# Warmup Iteration   1: 459.528 ns/op
# Warmup Iteration   2: 405.686 ns/op
# Warmup Iteration   3: 298.431 ns/op
Iteration   1: 298.374 ns/op
Iteration   2: 298.757 ns/op
Iteration   3: 298.515 ns/op
Iteration   4: 298.488 ns/op
Iteration   5: 298.599 ns/op

# Run progress: 4.48% complete, ETA 00:56:25
# Fork: 2 of 2
# Warmup Iteration   1: 461.669 ns/op
# Warmup Iteration   2: 402.329 ns/op
# Warmup Iteration   3: 296.156 ns/op
Iteration   1: 296.199 ns/op
Iteration   2: 296.217 ns/op
Iteration   3: 296.122 ns/op
Iteration   4: 296.244 ns/op
Iteration   5: 296.352 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  297.387 ±(99.9%) 1.856 ns/op [Average]
  (min, avg, max) = (296.122, 297.387, 298.757), stdev = 1.227
  CI (99.9%): [295.531, 299.243] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 4.51% complete, ETA 00:56:24
# Fork: 1 of 2
# Warmup Iteration   1: 547.490 ns/op
# Warmup Iteration   2: 395.467 ns/op
# Warmup Iteration   3: 246.204 ns/op
Iteration   1: 245.918 ns/op
Iteration   2: 246.311 ns/op
Iteration   3: 246.091 ns/op
Iteration   4: 246.865 ns/op
Iteration   5: 247.159 ns/op

# Run progress: 4.55% complete, ETA 00:56:22
# Fork: 2 of 2
# Warmup Iteration   1: 657.535 ns/op
# Warmup Iteration   2: 397.632 ns/op
# Warmup Iteration   3: 246.082 ns/op
Iteration   1: 246.216 ns/op
Iteration   2: 246.207 ns/op
Iteration   3: 246.096 ns/op
Iteration   4: 247.050 ns/op
Iteration   5: 247.251 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  246.516 ±(99.9%) 0.765 ns/op [Average]
  (min, avg, max) = (245.918, 246.516, 247.251), stdev = 0.506
  CI (99.9%): [245.752, 247.281] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 4.58% complete, ETA 00:56:21
# Fork: 1 of 2
# Warmup Iteration   1: 19.839 ns/op
# Warmup Iteration   2: 23.714 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.878 ns/op

# Run progress: 4.62% complete, ETA 00:56:19
# Fork: 2 of 2
# Warmup Iteration   1: 19.645 ns/op
# Warmup Iteration   2: 24.580 ns/op
# Warmup Iteration   3: 13.719 ns/op
Iteration   1: 13.708 ns/op
Iteration   2: 13.725 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.909 ns/op
Iteration   5: 13.874 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.135 ns/op [Average]
  (min, avg, max) = (13.708, 13.783, 13.909), stdev = 0.089
  CI (99.9%): [13.648, 13.918] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 4.65% complete, ETA 00:56:18
# Fork: 1 of 2
# Warmup Iteration   1: 73.571 ns/op
# Warmup Iteration   2: 77.613 ns/op
# Warmup Iteration   3: 52.342 ns/op
Iteration   1: 52.372 ns/op
Iteration   2: 52.417 ns/op
Iteration   3: 52.399 ns/op
Iteration   4: 52.218 ns/op
Iteration   5: 52.170 ns/op

# Run progress: 4.69% complete, ETA 00:56:16
# Fork: 2 of 2
# Warmup Iteration   1: 73.687 ns/op
# Warmup Iteration   2: 81.908 ns/op
# Warmup Iteration   3: 52.321 ns/op
Iteration   1: 52.394 ns/op
Iteration   2: 52.417 ns/op
Iteration   3: 52.347 ns/op
Iteration   4: 52.187 ns/op
Iteration   5: 52.191 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.311 ±(99.9%) 0.160 ns/op [Average]
  (min, avg, max) = (52.170, 52.311, 52.417), stdev = 0.106
  CI (99.9%): [52.151, 52.471] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 4.72% complete, ETA 00:56:15
# Fork: 1 of 2
# Warmup Iteration   1: 66.997 ns/op
# Warmup Iteration   2: 77.960 ns/op
# Warmup Iteration   3: 45.227 ns/op
Iteration   1: 45.185 ns/op
Iteration   2: 45.219 ns/op
Iteration   3: 45.223 ns/op
Iteration   4: 45.271 ns/op
Iteration   5: 45.327 ns/op

# Run progress: 4.76% complete, ETA 00:56:13
# Fork: 2 of 2
# Warmup Iteration   1: 70.009 ns/op
# Warmup Iteration   2: 71.443 ns/op
# Warmup Iteration   3: 45.223 ns/op
Iteration   1: 45.228 ns/op
Iteration   2: 45.264 ns/op
Iteration   3: 45.273 ns/op
Iteration   4: 45.279 ns/op
Iteration   5: 45.320 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.259 ±(99.9%) 0.069 ns/op [Average]
  (min, avg, max) = (45.185, 45.259, 45.327), stdev = 0.045
  CI (99.9%): [45.190, 45.327] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 4.79% complete, ETA 00:56:12
# Fork: 1 of 2
# Warmup Iteration   1: 181.160 ns/op
# Warmup Iteration   2: 73.814 ns/op
# Warmup Iteration   3: 48.320 ns/op
Iteration   1: 48.337 ns/op
Iteration   2: 48.339 ns/op
Iteration   3: 48.409 ns/op
Iteration   4: 48.324 ns/op
Iteration   5: 48.343 ns/op

# Run progress: 4.83% complete, ETA 00:56:11
# Fork: 2 of 2
# Warmup Iteration   1: 181.872 ns/op
# Warmup Iteration   2: 81.441 ns/op
# Warmup Iteration   3: 48.661 ns/op
Iteration   1: 48.684 ns/op
Iteration   2: 48.689 ns/op
Iteration   3: 48.654 ns/op
Iteration   4: 48.659 ns/op
Iteration   5: 48.675 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.511 ±(99.9%) 0.259 ns/op [Average]
  (min, avg, max) = (48.324, 48.511, 48.689), stdev = 0.171
  CI (99.9%): [48.252, 48.770] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 4.86% complete, ETA 00:56:10
# Fork: 1 of 2
# Warmup Iteration   1: 69.038 ns/op
# Warmup Iteration   2: 72.709 ns/op
# Warmup Iteration   3: 47.512 ns/op
Iteration   1: 47.527 ns/op
Iteration   2: 47.504 ns/op
Iteration   3: 47.555 ns/op
Iteration   4: 47.585 ns/op
Iteration   5: 47.555 ns/op

# Run progress: 4.90% complete, ETA 00:56:09
# Fork: 2 of 2
# Warmup Iteration   1: 69.078 ns/op
# Warmup Iteration   2: 72.492 ns/op
# Warmup Iteration   3: 47.503 ns/op
Iteration   1: 47.477 ns/op
Iteration   2: 47.520 ns/op
Iteration   3: 47.478 ns/op
Iteration   4: 47.607 ns/op
Iteration   5: 47.616 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.542 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (47.477, 47.542, 47.616), stdev = 0.050
  CI (99.9%): [47.467, 47.618] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 4.93% complete, ETA 00:56:07
# Fork: 1 of 2
# Warmup Iteration   1: 171.866 ns/op
# Warmup Iteration   2: 179.099 ns/op
# Warmup Iteration   3: 94.007 ns/op
Iteration   1: 93.985 ns/op
Iteration   2: 93.962 ns/op
Iteration   3: 93.980 ns/op
Iteration   4: 100.370 ns/op
Iteration   5: 100.131 ns/op

# Run progress: 4.97% complete, ETA 00:56:06
# Fork: 2 of 2
# Warmup Iteration   1: 176.011 ns/op
# Warmup Iteration   2: 162.608 ns/op
# Warmup Iteration   3: 93.988 ns/op
Iteration   1: 93.953 ns/op
Iteration   2: 94.017 ns/op
Iteration   3: 93.955 ns/op
Iteration   4: 100.331 ns/op
Iteration   5: 100.362 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.505 ±(99.9%) 4.938 ns/op [Average]
  (min, avg, max) = (93.953, 96.505, 100.370), stdev = 3.266
  CI (99.9%): [91.567, 101.442] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 5.00% complete, ETA 00:56:05
# Fork: 1 of 2
# Warmup Iteration   1: 19.867 ns/op
# Warmup Iteration   2: 21.113 ns/op
# Warmup Iteration   3: 14.100 ns/op
Iteration   1: 14.105 ns/op
Iteration   2: 14.102 ns/op
Iteration   3: 14.103 ns/op
Iteration   4: 13.913 ns/op
Iteration   5: 13.875 ns/op

# Run progress: 5.03% complete, ETA 00:56:03
# Fork: 2 of 2
# Warmup Iteration   1: 19.008 ns/op
# Warmup Iteration   2: 25.373 ns/op
# Warmup Iteration   3: 13.727 ns/op
Iteration   1: 13.706 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.877 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.899 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (13.706, 13.899, 14.105), stdev = 0.160
  CI (99.9%): [13.657, 14.142] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 5.07% complete, ETA 00:56:02
# Fork: 1 of 2
# Warmup Iteration   1: 73.832 ns/op
# Warmup Iteration   2: 81.522 ns/op
# Warmup Iteration   3: 52.375 ns/op
Iteration   1: 52.381 ns/op
Iteration   2: 52.380 ns/op
Iteration   3: 52.402 ns/op
Iteration   4: 52.181 ns/op
Iteration   5: 52.166 ns/op

# Run progress: 5.10% complete, ETA 00:56:00
# Fork: 2 of 2
# Warmup Iteration   1: 75.080 ns/op
# Warmup Iteration   2: 83.788 ns/op
# Warmup Iteration   3: 52.346 ns/op
Iteration   1: 52.391 ns/op
Iteration   2: 52.384 ns/op
Iteration   3: 52.389 ns/op
Iteration   4: 52.210 ns/op
Iteration   5: 52.196 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.308 ±(99.9%) 0.157 ns/op [Average]
  (min, avg, max) = (52.166, 52.308, 52.402), stdev = 0.104
  CI (99.9%): [52.151, 52.465] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 5.14% complete, ETA 00:55:59
# Fork: 1 of 2
# Warmup Iteration   1: 67.350 ns/op
# Warmup Iteration   2: 69.714 ns/op
# Warmup Iteration   3: 45.199 ns/op
Iteration   1: 45.187 ns/op
Iteration   2: 45.238 ns/op
Iteration   3: 45.265 ns/op
Iteration   4: 45.326 ns/op
Iteration   5: 45.299 ns/op

# Run progress: 5.17% complete, ETA 00:55:58
# Fork: 2 of 2
# Warmup Iteration   1: 65.787 ns/op
# Warmup Iteration   2: 67.051 ns/op
# Warmup Iteration   3: 45.212 ns/op
Iteration   1: 45.191 ns/op
Iteration   2: 45.306 ns/op
Iteration   3: 45.251 ns/op
Iteration   4: 45.279 ns/op
Iteration   5: 45.314 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.266 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (45.187, 45.266, 45.326), stdev = 0.049
  CI (99.9%): [45.192, 45.340] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 5.21% complete, ETA 00:55:57
# Fork: 1 of 2
# Warmup Iteration   1: 154.151 ns/op
# Warmup Iteration   2: 77.185 ns/op
# Warmup Iteration   3: 48.601 ns/op
Iteration   1: 48.632 ns/op
Iteration   2: 48.652 ns/op
Iteration   3: 48.622 ns/op
Iteration   4: 48.653 ns/op
Iteration   5: 48.658 ns/op

# Run progress: 5.24% complete, ETA 00:55:56
# Fork: 2 of 2
# Warmup Iteration   1: 165.763 ns/op
# Warmup Iteration   2: 73.015 ns/op
# Warmup Iteration   3: 48.297 ns/op
Iteration   1: 48.323 ns/op
Iteration   2: 48.315 ns/op
Iteration   3: 48.302 ns/op
Iteration   4: 48.338 ns/op
Iteration   5: 48.341 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.484 ±(99.9%) 0.256 ns/op [Average]
  (min, avg, max) = (48.302, 48.484, 48.658), stdev = 0.169
  CI (99.9%): [48.228, 48.739] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 5.28% complete, ETA 00:55:55
# Fork: 1 of 2
# Warmup Iteration   1: 67.995 ns/op
# Warmup Iteration   2: 68.779 ns/op
# Warmup Iteration   3: 47.485 ns/op
Iteration   1: 47.522 ns/op
Iteration   2: 47.510 ns/op
Iteration   3: 47.548 ns/op
Iteration   4: 47.510 ns/op
Iteration   5: 47.562 ns/op

# Run progress: 5.31% complete, ETA 00:55:54
# Fork: 2 of 2
# Warmup Iteration   1: 68.631 ns/op
# Warmup Iteration   2: 77.150 ns/op
# Warmup Iteration   3: 47.532 ns/op
Iteration   1: 47.519 ns/op
Iteration   2: 47.510 ns/op
Iteration   3: 47.515 ns/op
Iteration   4: 47.597 ns/op
Iteration   5: 47.537 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.533 ±(99.9%) 0.043 ns/op [Average]
  (min, avg, max) = (47.510, 47.533, 47.597), stdev = 0.029
  CI (99.9%): [47.490, 47.577] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 5.35% complete, ETA 00:55:52
# Fork: 1 of 2
# Warmup Iteration   1: 169.162 ns/op
# Warmup Iteration   2: 181.039 ns/op
# Warmup Iteration   3: 93.946 ns/op
Iteration   1: 94.020 ns/op
Iteration   2: 94.014 ns/op
Iteration   3: 93.982 ns/op
Iteration   4: 100.201 ns/op
Iteration   5: 100.175 ns/op

# Run progress: 5.38% complete, ETA 00:55:51
# Fork: 2 of 2
# Warmup Iteration   1: 164.128 ns/op
# Warmup Iteration   2: 187.105 ns/op
# Warmup Iteration   3: 93.980 ns/op
Iteration   1: 93.974 ns/op
Iteration   2: 94.024 ns/op
Iteration   3: 94.053 ns/op
Iteration   4: 100.386 ns/op
Iteration   5: 100.332 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.516 ±(99.9%) 4.890 ns/op [Average]
  (min, avg, max) = (93.974, 96.516, 100.386), stdev = 3.235
  CI (99.9%): [91.626, 101.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 5.42% complete, ETA 00:55:50
# Fork: 1 of 2
# Warmup Iteration   1: 18.619 ns/op
# Warmup Iteration   2: 21.712 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.724 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.888 ns/op
Iteration   5: 13.882 ns/op

# Run progress: 5.45% complete, ETA 00:55:48
# Fork: 2 of 2
# Warmup Iteration   1: 18.577 ns/op
# Warmup Iteration   2: 25.193 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.727 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (13.709, 13.784, 13.888), stdev = 0.085
  CI (99.9%): [13.656, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 5.49% complete, ETA 00:55:47
# Fork: 1 of 2
# Warmup Iteration   1: 84.592 ns/op
# Warmup Iteration   2: 87.286 ns/op
# Warmup Iteration   3: 57.934 ns/op
Iteration   1: 57.893 ns/op
Iteration   2: 57.933 ns/op
Iteration   3: 57.922 ns/op
Iteration   4: 57.661 ns/op
Iteration   5: 57.649 ns/op

# Run progress: 5.52% complete, ETA 00:55:45
# Fork: 2 of 2
# Warmup Iteration   1: 83.445 ns/op
# Warmup Iteration   2: 81.098 ns/op
# Warmup Iteration   3: 57.888 ns/op
Iteration   1: 57.913 ns/op
Iteration   2: 57.933 ns/op
Iteration   3: 57.870 ns/op
Iteration   4: 57.615 ns/op
Iteration   5: 57.623 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  57.801 ±(99.9%) 0.216 ns/op [Average]
  (min, avg, max) = (57.615, 57.801, 57.933), stdev = 0.143
  CI (99.9%): [57.585, 58.017] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 5.56% complete, ETA 00:55:44
# Fork: 1 of 2
# Warmup Iteration   1: 156.758 ns/op
# Warmup Iteration   2: 163.944 ns/op
# Warmup Iteration   3: 102.940 ns/op
Iteration   1: 102.941 ns/op
Iteration   2: 102.799 ns/op
Iteration   3: 102.849 ns/op
Iteration   4: 103.144 ns/op
Iteration   5: 103.131 ns/op

# Run progress: 5.59% complete, ETA 00:55:43
# Fork: 2 of 2
# Warmup Iteration   1: 146.696 ns/op
# Warmup Iteration   2: 153.030 ns/op
# Warmup Iteration   3: 103.366 ns/op
Iteration   1: 103.230 ns/op
Iteration   2: 103.287 ns/op
Iteration   3: 103.311 ns/op
Iteration   4: 103.190 ns/op
Iteration   5: 103.223 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  103.111 ±(99.9%) 0.276 ns/op [Average]
  (min, avg, max) = (102.799, 103.111, 103.311), stdev = 0.183
  CI (99.9%): [102.835, 103.387] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 5.63% complete, ETA 00:55:41
# Fork: 1 of 2
# Warmup Iteration   1: 401.442 ns/op
# Warmup Iteration   2: 112.402 ns/op
# Warmup Iteration   3: 70.810 ns/op
Iteration   1: 68.133 ns/op
Iteration   2: 74.131 ns/op
Iteration   3: 68.106 ns/op
Iteration   4: 68.364 ns/op
Iteration   5: 68.280 ns/op

# Run progress: 5.66% complete, ETA 00:55:40
# Fork: 2 of 2
# Warmup Iteration   1: 372.119 ns/op
# Warmup Iteration   2: 109.934 ns/op
# Warmup Iteration   3: 67.835 ns/op
Iteration   1: 67.818 ns/op
Iteration   2: 74.852 ns/op
Iteration   3: 67.850 ns/op
Iteration   4: 74.127 ns/op
Iteration   5: 67.998 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  69.966 ±(99.9%) 4.611 ns/op [Average]
  (min, avg, max) = (67.818, 69.966, 74.852), stdev = 3.050
  CI (99.9%): [65.355, 74.577] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 5.69% complete, ETA 00:55:39
# Fork: 1 of 2
# Warmup Iteration   1: 89.464 ns/op
# Warmup Iteration   2: 91.264 ns/op
# Warmup Iteration   3: 61.097 ns/op
Iteration   1: 61.085 ns/op
Iteration   2: 61.102 ns/op
Iteration   3: 61.084 ns/op
Iteration   4: 61.075 ns/op
Iteration   5: 61.116 ns/op

# Run progress: 5.73% complete, ETA 00:55:38
# Fork: 2 of 2
# Warmup Iteration   1: 88.580 ns/op
# Warmup Iteration   2: 91.294 ns/op
# Warmup Iteration   3: 61.064 ns/op
Iteration   1: 61.101 ns/op
Iteration   2: 61.061 ns/op
Iteration   3: 61.094 ns/op
Iteration   4: 61.107 ns/op
Iteration   5: 61.117 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  61.094 ±(99.9%) 0.027 ns/op [Average]
  (min, avg, max) = (61.061, 61.094, 61.117), stdev = 0.018
  CI (99.9%): [61.067, 61.121] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 5.76% complete, ETA 00:55:37
# Fork: 1 of 2
# Warmup Iteration   1: 185.874 ns/op
# Warmup Iteration   2: 183.813 ns/op
# Warmup Iteration   3: 99.641 ns/op
Iteration   1: 99.902 ns/op
Iteration   2: 99.619 ns/op
Iteration   3: 99.814 ns/op
Iteration   4: 101.288 ns/op
Iteration   5: 100.872 ns/op

# Run progress: 5.80% complete, ETA 00:55:35
# Fork: 2 of 2
# Warmup Iteration   1: 214.415 ns/op
# Warmup Iteration   2: 186.275 ns/op
# Warmup Iteration   3: 99.995 ns/op
Iteration   1: 100.042 ns/op
Iteration   2: 99.734 ns/op
Iteration   3: 100.101 ns/op
Iteration   4: 101.347 ns/op
Iteration   5: 101.285 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  100.400 ±(99.9%) 1.076 ns/op [Average]
  (min, avg, max) = (99.619, 100.400, 101.347), stdev = 0.712
  CI (99.9%): [99.325, 101.476] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 5.83% complete, ETA 00:55:34
# Fork: 1 of 2
# Warmup Iteration   1: 20.068 ns/op
# Warmup Iteration   2: 22.141 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.707 ns/op
Iteration   4: 13.877 ns/op
Iteration   5: 13.892 ns/op

# Run progress: 5.87% complete, ETA 00:55:33
# Fork: 2 of 2
# Warmup Iteration   1: 19.975 ns/op
# Warmup Iteration   2: 23.905 ns/op
# Warmup Iteration   3: 13.719 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.706 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.706, 13.781, 13.892), stdev = 0.087
  CI (99.9%): [13.650, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 5.90% complete, ETA 00:55:31
# Fork: 1 of 2
# Warmup Iteration   1: 491.844 ns/op
# Warmup Iteration   2: 269.539 ns/op
# Warmup Iteration   3: 178.868 ns/op
Iteration   1: 178.967 ns/op
Iteration   2: 178.927 ns/op
Iteration   3: 178.891 ns/op
Iteration   4: 178.809 ns/op
Iteration   5: 178.878 ns/op

# Run progress: 5.94% complete, ETA 00:55:30
# Fork: 2 of 2
# Warmup Iteration   1: 411.353 ns/op
# Warmup Iteration   2: 269.324 ns/op
# Warmup Iteration   3: 179.042 ns/op
Iteration   1: 179.039 ns/op
Iteration   2: 178.970 ns/op
Iteration   3: 178.941 ns/op
Iteration   4: 178.865 ns/op
Iteration   5: 178.877 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  178.916 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (178.809, 178.916, 179.039), stdev = 0.066
  CI (99.9%): [178.817, 179.016] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 5.97% complete, ETA 00:55:29
# Fork: 1 of 2
# Warmup Iteration   1: 341.656 ns/op
# Warmup Iteration   2: 316.598 ns/op
# Warmup Iteration   3: 233.478 ns/op
Iteration   1: 233.547 ns/op
Iteration   2: 233.667 ns/op
Iteration   3: 233.505 ns/op
Iteration   4: 233.679 ns/op
Iteration   5: 233.664 ns/op

# Run progress: 6.01% complete, ETA 00:55:27
# Fork: 2 of 2
# Warmup Iteration   1: 342.283 ns/op
# Warmup Iteration   2: 315.956 ns/op
# Warmup Iteration   3: 233.710 ns/op
Iteration   1: 233.613 ns/op
Iteration   2: 233.596 ns/op
Iteration   3: 233.583 ns/op
Iteration   4: 233.665 ns/op
Iteration   5: 233.595 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.611 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (233.505, 233.611, 233.679), stdev = 0.058
  CI (99.9%): [233.524, 233.699] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 6.04% complete, ETA 00:55:26
# Fork: 1 of 2
# Warmup Iteration   1: 1183.449 ns/op
# Warmup Iteration   2: 382.100 ns/op
# Warmup Iteration   3: 280.311 ns/op
Iteration   1: 280.397 ns/op
Iteration   2: 280.380 ns/op
Iteration   3: 280.446 ns/op
Iteration   4: 280.761 ns/op
Iteration   5: 280.753 ns/op

# Run progress: 6.08% complete, ETA 00:55:25
# Fork: 2 of 2
# Warmup Iteration   1: 1201.116 ns/op
# Warmup Iteration   2: 377.593 ns/op
# Warmup Iteration   3: 282.926 ns/op
Iteration   1: 282.990 ns/op
Iteration   2: 283.121 ns/op
Iteration   3: 282.973 ns/op
Iteration   4: 282.519 ns/op
Iteration   5: 282.934 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  281.728 ±(99.9%) 1.905 ns/op [Average]
  (min, avg, max) = (280.380, 281.728, 283.121), stdev = 1.260
  CI (99.9%): [279.823, 283.632] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 6.11% complete, ETA 00:55:23
# Fork: 1 of 2
# Warmup Iteration   1: 301.008 ns/op
# Warmup Iteration   2: 242.152 ns/op
# Warmup Iteration   3: 174.994 ns/op
Iteration   1: 174.787 ns/op
Iteration   2: 175.395 ns/op
Iteration   3: 174.785 ns/op
Iteration   4: 174.873 ns/op
Iteration   5: 174.825 ns/op

# Run progress: 6.15% complete, ETA 00:55:22
# Fork: 2 of 2
# Warmup Iteration   1: 261.463 ns/op
# Warmup Iteration   2: 257.726 ns/op
# Warmup Iteration   3: 174.849 ns/op
Iteration   1: 174.907 ns/op
Iteration   2: 174.835 ns/op
Iteration   3: 174.850 ns/op
Iteration   4: 174.838 ns/op
Iteration   5: 174.875 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  174.897 ±(99.9%) 0.271 ns/op [Average]
  (min, avg, max) = (174.785, 174.897, 175.395), stdev = 0.179
  CI (99.9%): [174.626, 175.168] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 6.18% complete, ETA 00:55:21
# Fork: 1 of 2
# Warmup Iteration   1: 546.763 ns/op
# Warmup Iteration   2: 367.490 ns/op
# Warmup Iteration   3: 226.088 ns/op
Iteration   1: 227.348 ns/op
Iteration   2: 230.838 ns/op
Iteration   3: 226.262 ns/op
Iteration   4: 230.376 ns/op
Iteration   5: 227.506 ns/op

# Run progress: 6.22% complete, ETA 00:55:19
# Fork: 2 of 2
# Warmup Iteration   1: 524.800 ns/op
# Warmup Iteration   2: 370.697 ns/op
# Warmup Iteration   3: 226.643 ns/op
Iteration   1: 226.155 ns/op
Iteration   2: 226.649 ns/op
Iteration   3: 226.317 ns/op
Iteration   4: 227.355 ns/op
Iteration   5: 227.438 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  227.624 ±(99.9%) 2.508 ns/op [Average]
  (min, avg, max) = (226.155, 227.624, 230.838), stdev = 1.659
  CI (99.9%): [225.116, 230.133] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 6.25% complete, ETA 00:55:18
# Fork: 1 of 2
# Warmup Iteration   1: 18.376 ns/op
# Warmup Iteration   2: 21.678 ns/op
# Warmup Iteration   3: 13.718 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.728 ns/op
Iteration   3: 13.727 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.884 ns/op

# Run progress: 6.28% complete, ETA 00:55:17
# Fork: 2 of 2
# Warmup Iteration   1: 19.745 ns/op
# Warmup Iteration   2: 23.539 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.733 ns/op
Iteration   3: 13.730 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.788 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (13.715, 13.788, 13.884), stdev = 0.082
  CI (99.9%): [13.664, 13.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 6.32% complete, ETA 00:55:16
# Fork: 1 of 2
# Warmup Iteration   1: 788.922 ns/op
# Warmup Iteration   2: 421.698 ns/op
# Warmup Iteration   3: 301.336 ns/op
Iteration   1: 301.253 ns/op
Iteration   2: 301.368 ns/op
Iteration   3: 301.377 ns/op
Iteration   4: 301.104 ns/op
Iteration   5: 301.277 ns/op

# Run progress: 6.35% complete, ETA 00:55:14
# Fork: 2 of 2
# Warmup Iteration   1: 783.377 ns/op
# Warmup Iteration   2: 437.372 ns/op
# Warmup Iteration   3: 300.325 ns/op
Iteration   1: 300.988 ns/op
Iteration   2: 300.634 ns/op
Iteration   3: 300.713 ns/op
Iteration   4: 300.379 ns/op
Iteration   5: 300.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  300.925 ±(99.9%) 0.656 ns/op [Average]
  (min, avg, max) = (300.152, 300.925, 301.377), stdev = 0.434
  CI (99.9%): [300.269, 301.580] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 6.39% complete, ETA 00:55:13
# Fork: 1 of 2
# Warmup Iteration   1: 581.771 ns/op
# Warmup Iteration   2: 495.833 ns/op
# Warmup Iteration   3: 378.786 ns/op
Iteration   1: 388.278 ns/op
Iteration   2: 388.876 ns/op
Iteration   3: 378.779 ns/op
Iteration   4: 378.601 ns/op
Iteration   5: 388.791 ns/op

# Run progress: 6.42% complete, ETA 00:55:11
# Fork: 2 of 2
# Warmup Iteration   1: 584.078 ns/op
# Warmup Iteration   2: 491.981 ns/op
# Warmup Iteration   3: 374.313 ns/op
Iteration   1: 374.265 ns/op
Iteration   2: 374.297 ns/op
Iteration   3: 374.450 ns/op
Iteration   4: 374.429 ns/op
Iteration   5: 374.489 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  379.526 ±(99.9%) 9.868 ns/op [Average]
  (min, avg, max) = (374.265, 379.526, 388.876), stdev = 6.527
  CI (99.9%): [369.658, 389.393] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 6.46% complete, ETA 00:55:10
# Fork: 1 of 2
# Warmup Iteration   1: 14328.361 ns/op
# Warmup Iteration   2: 437.544 ns/op
# Warmup Iteration   3: 349.868 ns/op
Iteration   1: 317.746 ns/op
Iteration   2: 317.734 ns/op
Iteration   3: 317.710 ns/op
Iteration   4: 317.792 ns/op
Iteration   5: 317.811 ns/op

# Run progress: 6.49% complete, ETA 00:55:09
# Fork: 2 of 2
# Warmup Iteration   1: 21197.673 ns/op
# Warmup Iteration   2: 515.719 ns/op
# Warmup Iteration   3: 351.091 ns/op
Iteration   1: 325.562 ns/op
Iteration   2: 325.360 ns/op
Iteration   3: 326.124 ns/op
Iteration   4: 325.800 ns/op
Iteration   5: 326.466 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  321.811 ±(99.9%) 6.473 ns/op [Average]
  (min, avg, max) = (317.710, 321.811, 326.466), stdev = 4.281
  CI (99.9%): [315.338, 328.283] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 6.53% complete, ETA 00:55:07
# Fork: 1 of 2
# Warmup Iteration   1: 322.680 ns/op
# Warmup Iteration   2: 293.725 ns/op
# Warmup Iteration   3: 220.406 ns/op
Iteration   1: 220.504 ns/op
Iteration   2: 220.474 ns/op
Iteration   3: 220.430 ns/op
Iteration   4: 220.362 ns/op
Iteration   5: 220.462 ns/op

# Run progress: 6.56% complete, ETA 00:55:06
# Fork: 2 of 2
# Warmup Iteration   1: 375.942 ns/op
# Warmup Iteration   2: 294.069 ns/op
# Warmup Iteration   3: 220.458 ns/op
Iteration   1: 220.515 ns/op
Iteration   2: 220.522 ns/op
Iteration   3: 220.520 ns/op
Iteration   4: 220.421 ns/op
Iteration   5: 220.422 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  220.463 ±(99.9%) 0.081 ns/op [Average]
  (min, avg, max) = (220.362, 220.463, 220.522), stdev = 0.054
  CI (99.9%): [220.382, 220.544] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 6.60% complete, ETA 00:55:05
# Fork: 1 of 2
# Warmup Iteration   1: 524.672 ns/op
# Warmup Iteration   2: 371.285 ns/op
# Warmup Iteration   3: 230.120 ns/op
Iteration   1: 230.069 ns/op
Iteration   2: 230.226 ns/op
Iteration   3: 230.073 ns/op
Iteration   4: 233.237 ns/op
Iteration   5: 233.154 ns/op

# Run progress: 6.63% complete, ETA 00:55:03
# Fork: 2 of 2
# Warmup Iteration   1: 527.712 ns/op
# Warmup Iteration   2: 369.481 ns/op
# Warmup Iteration   3: 230.088 ns/op
Iteration   1: 230.114 ns/op
Iteration   2: 230.217 ns/op
Iteration   3: 230.188 ns/op
Iteration   4: 231.991 ns/op
Iteration   5: 231.635 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.090 ±(99.9%) 1.973 ns/op [Average]
  (min, avg, max) = (230.069, 231.090, 233.237), stdev = 1.305
  CI (99.9%): [229.117, 233.063] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 6.67% complete, ETA 00:55:02
# Fork: 1 of 2
# Warmup Iteration   1: 19.688 ns/op
# Warmup Iteration   2: 20.661 ns/op
# Warmup Iteration   3: 13.704 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.719 ns/op
Iteration   4: 13.898 ns/op
Iteration   5: 13.883 ns/op

# Run progress: 6.70% complete, ETA 00:55:01
# Fork: 2 of 2
# Warmup Iteration   1: 20.411 ns/op
# Warmup Iteration   2: 25.148 ns/op
# Warmup Iteration   3: 13.705 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.910 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (13.710, 13.785, 13.910), stdev = 0.093
  CI (99.9%): [13.644, 13.926] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 6.74% complete, ETA 00:54:59
# Fork: 1 of 2
# Warmup Iteration   1: 73.746 ns/op
# Warmup Iteration   2: 81.799 ns/op
# Warmup Iteration   3: 52.370 ns/op
Iteration   1: 52.371 ns/op
Iteration   2: 52.371 ns/op
Iteration   3: 52.343 ns/op
Iteration   4: 52.186 ns/op
Iteration   5: 52.178 ns/op

# Run progress: 6.77% complete, ETA 00:54:58
# Fork: 2 of 2
# Warmup Iteration   1: 74.704 ns/op
# Warmup Iteration   2: 83.327 ns/op
# Warmup Iteration   3: 52.669 ns/op
Iteration   1: 52.668 ns/op
Iteration   2: 52.614 ns/op
Iteration   3: 52.658 ns/op
Iteration   4: 52.466 ns/op
Iteration   5: 52.521 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.438 ±(99.9%) 0.271 ns/op [Average]
  (min, avg, max) = (52.178, 52.438, 52.668), stdev = 0.179
  CI (99.9%): [52.167, 52.709] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 6.81% complete, ETA 00:54:57
# Fork: 1 of 2
# Warmup Iteration   1: 67.252 ns/op
# Warmup Iteration   2: 70.380 ns/op
# Warmup Iteration   3: 45.196 ns/op
Iteration   1: 45.252 ns/op
Iteration   2: 45.204 ns/op
Iteration   3: 45.227 ns/op
Iteration   4: 45.309 ns/op
Iteration   5: 45.289 ns/op

# Run progress: 6.84% complete, ETA 00:54:55
# Fork: 2 of 2
# Warmup Iteration   1: 70.975 ns/op
# Warmup Iteration   2: 70.252 ns/op
# Warmup Iteration   3: 45.245 ns/op
Iteration   1: 45.247 ns/op
Iteration   2: 45.220 ns/op
Iteration   3: 45.191 ns/op
Iteration   4: 45.232 ns/op
Iteration   5: 45.283 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.245 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (45.191, 45.245, 45.309), stdev = 0.038
  CI (99.9%): [45.188, 45.303] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 6.88% complete, ETA 00:54:54
# Fork: 1 of 2
# Warmup Iteration   1: 154.231 ns/op
# Warmup Iteration   2: 69.406 ns/op
# Warmup Iteration   3: 48.322 ns/op
Iteration   1: 48.334 ns/op
Iteration   2: 48.342 ns/op
Iteration   3: 48.334 ns/op
Iteration   4: 48.304 ns/op
Iteration   5: 48.310 ns/op

# Run progress: 6.91% complete, ETA 00:54:53
# Fork: 2 of 2
# Warmup Iteration   1: 152.292 ns/op
# Warmup Iteration   2: 69.145 ns/op
# Warmup Iteration   3: 48.724 ns/op
Iteration   1: 48.708 ns/op
Iteration   2: 48.720 ns/op
Iteration   3: 48.698 ns/op
Iteration   4: 48.680 ns/op
Iteration   5: 48.688 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.512 ±(99.9%) 0.299 ns/op [Average]
  (min, avg, max) = (48.304, 48.512, 48.720), stdev = 0.198
  CI (99.9%): [48.213, 48.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 6.94% complete, ETA 00:54:52
# Fork: 1 of 2
# Warmup Iteration   1: 70.714 ns/op
# Warmup Iteration   2: 69.820 ns/op
# Warmup Iteration   3: 47.528 ns/op
Iteration   1: 47.521 ns/op
Iteration   2: 47.487 ns/op
Iteration   3: 47.573 ns/op
Iteration   4: 47.601 ns/op
Iteration   5: 47.590 ns/op

# Run progress: 6.98% complete, ETA 00:54:51
# Fork: 2 of 2
# Warmup Iteration   1: 68.192 ns/op
# Warmup Iteration   2: 73.078 ns/op
# Warmup Iteration   3: 47.530 ns/op
Iteration   1: 47.514 ns/op
Iteration   2: 47.532 ns/op
Iteration   3: 47.565 ns/op
Iteration   4: 47.630 ns/op
Iteration   5: 47.579 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.559 ±(99.9%) 0.067 ns/op [Average]
  (min, avg, max) = (47.487, 47.559, 47.630), stdev = 0.044
  CI (99.9%): [47.492, 47.627] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 7.01% complete, ETA 00:54:49
# Fork: 1 of 2
# Warmup Iteration   1: 169.632 ns/op
# Warmup Iteration   2: 181.583 ns/op
# Warmup Iteration   3: 93.930 ns/op
Iteration   1: 94.063 ns/op
Iteration   2: 94.014 ns/op
Iteration   3: 93.977 ns/op
Iteration   4: 100.277 ns/op
Iteration   5: 100.082 ns/op

# Run progress: 7.05% complete, ETA 00:54:48
# Fork: 2 of 2
# Warmup Iteration   1: 168.960 ns/op
# Warmup Iteration   2: 170.234 ns/op
# Warmup Iteration   3: 93.951 ns/op
Iteration   1: 94.016 ns/op
Iteration   2: 94.028 ns/op
Iteration   3: 93.997 ns/op
Iteration   4: 100.155 ns/op
Iteration   5: 100.115 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.472 ±(99.9%) 4.795 ns/op [Average]
  (min, avg, max) = (93.977, 96.472, 100.277), stdev = 3.172
  CI (99.9%): [91.677, 101.268] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 7.08% complete, ETA 00:54:47
# Fork: 1 of 2
# Warmup Iteration   1: 19.160 ns/op
# Warmup Iteration   2: 25.097 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.709 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.885 ns/op

# Run progress: 7.12% complete, ETA 00:54:45
# Fork: 2 of 2
# Warmup Iteration   1: 20.116 ns/op
# Warmup Iteration   2: 22.872 ns/op
# Warmup Iteration   3: 13.705 ns/op
Iteration   1: 13.707 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.780 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (13.707, 13.780, 13.885), stdev = 0.088
  CI (99.9%): [13.647, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 7.15% complete, ETA 00:54:44
# Fork: 1 of 2
# Warmup Iteration   1: 75.248 ns/op
# Warmup Iteration   2: 82.295 ns/op
# Warmup Iteration   3: 52.362 ns/op
Iteration   1: 52.369 ns/op
Iteration   2: 52.398 ns/op
Iteration   3: 52.368 ns/op
Iteration   4: 52.160 ns/op
Iteration   5: 52.155 ns/op

# Run progress: 7.19% complete, ETA 00:54:43
# Fork: 2 of 2
# Warmup Iteration   1: 73.744 ns/op
# Warmup Iteration   2: 74.218 ns/op
# Warmup Iteration   3: 52.375 ns/op
Iteration   1: 52.385 ns/op
Iteration   2: 52.355 ns/op
Iteration   3: 52.396 ns/op
Iteration   4: 52.202 ns/op
Iteration   5: 52.173 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.296 ±(99.9%) 0.163 ns/op [Average]
  (min, avg, max) = (52.155, 52.296, 52.398), stdev = 0.108
  CI (99.9%): [52.133, 52.459] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 7.22% complete, ETA 00:54:42
# Fork: 1 of 2
# Warmup Iteration   1: 67.185 ns/op
# Warmup Iteration   2: 79.286 ns/op
# Warmup Iteration   3: 45.242 ns/op
Iteration   1: 45.244 ns/op
Iteration   2: 45.253 ns/op
Iteration   3: 45.230 ns/op
Iteration   4: 45.294 ns/op
Iteration   5: 45.257 ns/op

# Run progress: 7.26% complete, ETA 00:54:40
# Fork: 2 of 2
# Warmup Iteration   1: 70.239 ns/op
# Warmup Iteration   2: 70.272 ns/op
# Warmup Iteration   3: 45.240 ns/op
Iteration   1: 45.216 ns/op
Iteration   2: 45.221 ns/op
Iteration   3: 45.217 ns/op
Iteration   4: 45.249 ns/op
Iteration   5: 45.274 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.245 ±(99.9%) 0.039 ns/op [Average]
  (min, avg, max) = (45.216, 45.245, 45.294), stdev = 0.026
  CI (99.9%): [45.207, 45.284] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 7.29% complete, ETA 00:54:39
# Fork: 1 of 2
# Warmup Iteration   1: 230.945 ns/op
# Warmup Iteration   2: 69.446 ns/op
# Warmup Iteration   3: 48.307 ns/op
Iteration   1: 48.332 ns/op
Iteration   2: 48.333 ns/op
Iteration   3: 48.314 ns/op
Iteration   4: 48.323 ns/op
Iteration   5: 48.326 ns/op

# Run progress: 7.33% complete, ETA 00:54:38
# Fork: 2 of 2
# Warmup Iteration   1: 157.174 ns/op
# Warmup Iteration   2: 83.849 ns/op
# Warmup Iteration   3: 48.312 ns/op
Iteration   1: 48.332 ns/op
Iteration   2: 48.333 ns/op
Iteration   3: 48.343 ns/op
Iteration   4: 48.309 ns/op
Iteration   5: 48.323 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.327 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (48.309, 48.327, 48.343), stdev = 0.010
  CI (99.9%): [48.312, 48.342] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 7.36% complete, ETA 00:54:37
# Fork: 1 of 2
# Warmup Iteration   1: 69.091 ns/op
# Warmup Iteration   2: 73.093 ns/op
# Warmup Iteration   3: 47.511 ns/op
Iteration   1: 47.563 ns/op
Iteration   2: 47.582 ns/op
Iteration   3: 47.524 ns/op
Iteration   4: 47.574 ns/op
Iteration   5: 47.590 ns/op

# Run progress: 7.40% complete, ETA 00:54:35
# Fork: 2 of 2
# Warmup Iteration   1: 68.516 ns/op
# Warmup Iteration   2: 72.446 ns/op
# Warmup Iteration   3: 47.501 ns/op
Iteration   1: 47.497 ns/op
Iteration   2: 47.550 ns/op
Iteration   3: 47.505 ns/op
Iteration   4: 47.580 ns/op
Iteration   5: 47.577 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.554 ±(99.9%) 0.051 ns/op [Average]
  (min, avg, max) = (47.497, 47.554, 47.590), stdev = 0.034
  CI (99.9%): [47.503, 47.605] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 7.43% complete, ETA 00:54:34
# Fork: 1 of 2
# Warmup Iteration   1: 167.500 ns/op
# Warmup Iteration   2: 179.139 ns/op
# Warmup Iteration   3: 93.936 ns/op
Iteration   1: 93.997 ns/op
Iteration   2: 94.026 ns/op
Iteration   3: 94.042 ns/op
Iteration   4: 100.348 ns/op
Iteration   5: 100.275 ns/op

# Run progress: 7.47% complete, ETA 00:54:33
# Fork: 2 of 2
# Warmup Iteration   1: 167.776 ns/op
# Warmup Iteration   2: 168.667 ns/op
# Warmup Iteration   3: 94.000 ns/op
Iteration   1: 94.022 ns/op
Iteration   2: 94.063 ns/op
Iteration   3: 94.000 ns/op
Iteration   4: 100.101 ns/op
Iteration   5: 100.088 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.496 ±(99.9%) 4.825 ns/op [Average]
  (min, avg, max) = (93.997, 96.496, 100.348), stdev = 3.191
  CI (99.9%): [91.671, 101.321] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 7.50% complete, ETA 00:54:31
# Fork: 1 of 2
# Warmup Iteration   1: 20.969 ns/op
# Warmup Iteration   2: 22.944 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.729 ns/op
Iteration   4: 13.902 ns/op
Iteration   5: 13.875 ns/op

# Run progress: 7.53% complete, ETA 00:54:30
# Fork: 2 of 2
# Warmup Iteration   1: 20.455 ns/op
# Warmup Iteration   2: 24.687 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.709 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.898 ns/op
Iteration   5: 13.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.787 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (13.709, 13.787, 13.902), stdev = 0.090
  CI (99.9%): [13.651, 13.923] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 7.57% complete, ETA 00:54:29
# Fork: 1 of 2
# Warmup Iteration   1: 81.234 ns/op
# Warmup Iteration   2: 89.312 ns/op
# Warmup Iteration   3: 55.912 ns/op
Iteration   1: 55.977 ns/op
Iteration   2: 55.878 ns/op
Iteration   3: 55.950 ns/op
Iteration   4: 55.731 ns/op
Iteration   5: 55.665 ns/op

# Run progress: 7.60% complete, ETA 00:54:27
# Fork: 2 of 2
# Warmup Iteration   1: 78.924 ns/op
# Warmup Iteration   2: 80.366 ns/op
# Warmup Iteration   3: 55.923 ns/op
Iteration   1: 55.951 ns/op
Iteration   2: 55.934 ns/op
Iteration   3: 55.947 ns/op
Iteration   4: 55.682 ns/op
Iteration   5: 55.669 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  55.839 ±(99.9%) 0.202 ns/op [Average]
  (min, avg, max) = (55.665, 55.839, 55.977), stdev = 0.134
  CI (99.9%): [55.636, 56.041] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 7.64% complete, ETA 00:54:26
# Fork: 1 of 2
# Warmup Iteration   1: 72.377 ns/op
# Warmup Iteration   2: 70.177 ns/op
# Warmup Iteration   3: 45.234 ns/op
Iteration   1: 45.266 ns/op
Iteration   2: 45.264 ns/op
Iteration   3: 45.261 ns/op
Iteration   4: 45.245 ns/op
Iteration   5: 45.258 ns/op

# Run progress: 7.67% complete, ETA 00:54:25
# Fork: 2 of 2
# Warmup Iteration   1: 66.228 ns/op
# Warmup Iteration   2: 84.507 ns/op
# Warmup Iteration   3: 45.264 ns/op
Iteration   1: 45.247 ns/op
Iteration   2: 45.226 ns/op
Iteration   3: 45.194 ns/op
Iteration   4: 45.322 ns/op
Iteration   5: 45.307 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.259 ±(99.9%) 0.055 ns/op [Average]
  (min, avg, max) = (45.194, 45.259, 45.322), stdev = 0.037
  CI (99.9%): [45.204, 45.314] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 7.71% complete, ETA 00:54:23
# Fork: 1 of 2
# Warmup Iteration   1: 494.950 ns/op
# Warmup Iteration   2: 98.718 ns/op
# Warmup Iteration   3: 66.644 ns/op
Iteration   1: 66.772 ns/op
Iteration   2: 66.611 ns/op
Iteration   3: 66.654 ns/op
Iteration   4: 66.558 ns/op
Iteration   5: 66.647 ns/op

# Run progress: 7.74% complete, ETA 00:54:22
# Fork: 2 of 2
# Warmup Iteration   1: 391.227 ns/op
# Warmup Iteration   2: 92.922 ns/op
# Warmup Iteration   3: 66.654 ns/op
Iteration   1: 66.649 ns/op
Iteration   2: 66.765 ns/op
Iteration   3: 66.654 ns/op
Iteration   4: 66.579 ns/op
Iteration   5: 66.645 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.653 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (66.558, 66.653, 66.772), stdev = 0.069
  CI (99.9%): [66.549, 66.758] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 7.78% complete, ETA 00:54:20
# Fork: 1 of 2
# Warmup Iteration   1: 69.109 ns/op
# Warmup Iteration   2: 73.996 ns/op
# Warmup Iteration   3: 47.518 ns/op
Iteration   1: 47.463 ns/op
Iteration   2: 47.532 ns/op
Iteration   3: 47.538 ns/op
Iteration   4: 47.621 ns/op
Iteration   5: 47.541 ns/op

# Run progress: 7.81% complete, ETA 00:54:19
# Fork: 2 of 2
# Warmup Iteration   1: 68.606 ns/op
# Warmup Iteration   2: 73.110 ns/op
# Warmup Iteration   3: 47.527 ns/op
Iteration   1: 47.522 ns/op
Iteration   2: 47.514 ns/op
Iteration   3: 47.563 ns/op
Iteration   4: 47.527 ns/op
Iteration   5: 47.538 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.536 ±(99.9%) 0.060 ns/op [Average]
  (min, avg, max) = (47.463, 47.536, 47.621), stdev = 0.040
  CI (99.9%): [47.476, 47.596] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 7.85% complete, ETA 00:54:18
# Fork: 1 of 2
# Warmup Iteration   1: 174.162 ns/op
# Warmup Iteration   2: 187.254 ns/op
# Warmup Iteration   3: 98.553 ns/op
Iteration   1: 98.583 ns/op
Iteration   2: 98.596 ns/op
Iteration   3: 98.603 ns/op
Iteration   4: 105.124 ns/op
Iteration   5: 105.120 ns/op

# Run progress: 7.88% complete, ETA 00:54:17
# Fork: 2 of 2
# Warmup Iteration   1: 189.561 ns/op
# Warmup Iteration   2: 168.560 ns/op
# Warmup Iteration   3: 98.294 ns/op
Iteration   1: 98.240 ns/op
Iteration   2: 98.337 ns/op
Iteration   3: 98.336 ns/op
Iteration   4: 105.168 ns/op
Iteration   5: 105.149 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.126 ±(99.9%) 5.227 ns/op [Average]
  (min, avg, max) = (98.240, 101.126, 105.168), stdev = 3.457
  CI (99.9%): [95.899, 106.353] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 7.92% complete, ETA 00:54:16
# Fork: 1 of 2
# Warmup Iteration   1: 20.444 ns/op
# Warmup Iteration   2: 22.646 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.730 ns/op
Iteration   2: 13.709 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.894 ns/op
Iteration   5: 13.904 ns/op

# Run progress: 7.95% complete, ETA 00:54:14
# Fork: 2 of 2
# Warmup Iteration   1: 19.841 ns/op
# Warmup Iteration   2: 20.679 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.731 ns/op
Iteration   2: 13.736 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 16.108 ns/op
Iteration   5: 16.110 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.234 ±(99.9%) 1.498 ns/op [Average]
  (min, avg, max) = (13.709, 14.234, 16.110), stdev = 0.991
  CI (99.9%): [12.736, 15.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 7.99% complete, ETA 00:54:13
# Fork: 1 of 2
# Warmup Iteration   1: 416.315 ns/op
# Warmup Iteration   2: 218.291 ns/op
# Warmup Iteration   3: 138.758 ns/op
Iteration   1: 138.800 ns/op
Iteration   2: 138.832 ns/op
Iteration   3: 138.752 ns/op
Iteration   4: 138.691 ns/op
Iteration   5: 138.668 ns/op

# Run progress: 8.02% complete, ETA 00:54:12
# Fork: 2 of 2
# Warmup Iteration   1: 423.068 ns/op
# Warmup Iteration   2: 189.701 ns/op
# Warmup Iteration   3: 138.788 ns/op
Iteration   1: 138.813 ns/op
Iteration   2: 138.753 ns/op
Iteration   3: 139.003 ns/op
Iteration   4: 138.461 ns/op
Iteration   5: 138.516 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.729 ±(99.9%) 0.237 ns/op [Average]
  (min, avg, max) = (138.461, 138.729, 139.003), stdev = 0.157
  CI (99.9%): [138.492, 138.966] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 8.06% complete, ETA 00:54:11
# Fork: 1 of 2
# Warmup Iteration   1: 376.538 ns/op
# Warmup Iteration   2: 338.559 ns/op
# Warmup Iteration   3: 252.515 ns/op
Iteration   1: 251.108 ns/op
Iteration   2: 253.184 ns/op
Iteration   3: 252.529 ns/op
Iteration   4: 252.024 ns/op
Iteration   5: 252.971 ns/op

# Run progress: 8.09% complete, ETA 00:54:09
# Fork: 2 of 2
# Warmup Iteration   1: 364.939 ns/op
# Warmup Iteration   2: 336.626 ns/op
# Warmup Iteration   3: 250.902 ns/op
Iteration   1: 250.766 ns/op
Iteration   2: 251.450 ns/op
Iteration   3: 251.029 ns/op
Iteration   4: 251.111 ns/op
Iteration   5: 250.803 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  251.697 ±(99.9%) 1.380 ns/op [Average]
  (min, avg, max) = (250.766, 251.697, 253.184), stdev = 0.913
  CI (99.9%): [250.318, 253.077] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 8.13% complete, ETA 00:54:08
# Fork: 1 of 2
# Warmup Iteration   1: 539.400 ns/op
# Warmup Iteration   2: 267.241 ns/op
# Warmup Iteration   3: 195.477 ns/op
Iteration   1: 195.593 ns/op
Iteration   2: 195.549 ns/op
Iteration   3: 195.511 ns/op
Iteration   4: 196.168 ns/op
Iteration   5: 196.120 ns/op

# Run progress: 8.16% complete, ETA 00:54:07
# Fork: 2 of 2
# Warmup Iteration   1: 553.743 ns/op
# Warmup Iteration   2: 275.604 ns/op
# Warmup Iteration   3: 198.141 ns/op
Iteration   1: 198.262 ns/op
Iteration   2: 198.178 ns/op
Iteration   3: 198.163 ns/op
Iteration   4: 198.466 ns/op
Iteration   5: 198.471 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  197.048 ±(99.9%) 2.040 ns/op [Average]
  (min, avg, max) = (195.511, 197.048, 198.471), stdev = 1.349
  CI (99.9%): [195.008, 199.089] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 8.19% complete, ETA 00:54:06
# Fork: 1 of 2
# Warmup Iteration   1: 234.472 ns/op
# Warmup Iteration   2: 223.000 ns/op
# Warmup Iteration   3: 162.491 ns/op
Iteration   1: 162.561 ns/op
Iteration   2: 162.501 ns/op
Iteration   3: 162.796 ns/op
Iteration   4: 162.422 ns/op
Iteration   5: 162.400 ns/op

# Run progress: 8.23% complete, ETA 00:54:05
# Fork: 2 of 2
# Warmup Iteration   1: 236.204 ns/op
# Warmup Iteration   2: 218.565 ns/op
# Warmup Iteration   3: 162.532 ns/op
Iteration   1: 162.648 ns/op
Iteration   2: 162.593 ns/op
Iteration   3: 162.591 ns/op
Iteration   4: 162.401 ns/op
Iteration   5: 162.422 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.534 ±(99.9%) 0.196 ns/op [Average]
  (min, avg, max) = (162.400, 162.534, 162.796), stdev = 0.129
  CI (99.9%): [162.338, 162.729] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 8.26% complete, ETA 00:54:03
# Fork: 1 of 2
# Warmup Iteration   1: 555.188 ns/op
# Warmup Iteration   2: 381.461 ns/op
# Warmup Iteration   3: 234.570 ns/op
Iteration   1: 234.639 ns/op
Iteration   2: 234.638 ns/op
Iteration   3: 234.602 ns/op
Iteration   4: 236.883 ns/op
Iteration   5: 236.923 ns/op

# Run progress: 8.30% complete, ETA 00:54:02
# Fork: 2 of 2
# Warmup Iteration   1: 647.742 ns/op
# Warmup Iteration   2: 382.010 ns/op
# Warmup Iteration   3: 240.307 ns/op
Iteration   1: 240.258 ns/op
Iteration   2: 240.409 ns/op
Iteration   3: 240.353 ns/op
Iteration   4: 240.565 ns/op
Iteration   5: 240.740 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  238.001 ±(99.9%) 4.128 ns/op [Average]
  (min, avg, max) = (234.602, 238.001, 240.740), stdev = 2.730
  CI (99.9%): [233.873, 242.129] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 8.33% complete, ETA 00:54:01
# Fork: 1 of 2
# Warmup Iteration   1: 19.676 ns/op
# Warmup Iteration   2: 23.832 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 24.016 ns/op
Iteration   4: 15.258 ns/op
Iteration   5: 15.243 ns/op

# Run progress: 8.37% complete, ETA 00:54:00
# Fork: 2 of 2
# Warmup Iteration   1: 18.727 ns/op
# Warmup Iteration   2: 24.387 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 24.755 ns/op
Iteration   4: 13.898 ns/op
Iteration   5: 13.890 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  16.191 ±(99.9%) 6.599 ns/op [Average]
  (min, avg, max) = (13.710, 16.191, 24.755), stdev = 4.365
  CI (99.9%): [9.593, 22.790] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 8.40% complete, ETA 00:53:59
# Fork: 1 of 2
# Warmup Iteration   1: 155.085 ns/op
# Warmup Iteration   2: 130.535 ns/op
# Warmup Iteration   3: 89.357 ns/op
Iteration   1: 89.397 ns/op
Iteration   2: 89.634 ns/op
Iteration   3: 160.611 ns/op
Iteration   4: 89.210 ns/op
Iteration   5: 89.211 ns/op

# Run progress: 8.44% complete, ETA 00:53:58
# Fork: 2 of 2
# Warmup Iteration   1: 164.241 ns/op
# Warmup Iteration   2: 138.659 ns/op
# Warmup Iteration   3: 89.062 ns/op
Iteration   1: 89.054 ns/op
Iteration   2: 89.043 ns/op
Iteration   3: 155.095 ns/op
Iteration   4: 88.844 ns/op
Iteration   5: 88.816 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  102.892 ±(99.9%) 43.840 ns/op [Average]
  (min, avg, max) = (88.816, 102.892, 160.611), stdev = 28.997
  CI (99.9%): [59.052, 146.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 8.47% complete, ETA 00:53:56
# Fork: 1 of 2
# Warmup Iteration   1: 65.769 ns/op
# Warmup Iteration   2: 71.285 ns/op
# Warmup Iteration   3: 45.095 ns/op
Iteration   1: 45.129 ns/op
Iteration   2: 45.155 ns/op
Iteration   3: 78.634 ns/op
Iteration   4: 45.063 ns/op
Iteration   5: 45.094 ns/op

# Run progress: 8.51% complete, ETA 00:53:55
# Fork: 2 of 2
# Warmup Iteration   1: 66.675 ns/op
# Warmup Iteration   2: 71.356 ns/op
# Warmup Iteration   3: 45.105 ns/op
Iteration   1: 45.142 ns/op
Iteration   2: 45.116 ns/op
Iteration   3: 72.855 ns/op
Iteration   4: 45.081 ns/op
Iteration   5: 45.049 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.232 ±(99.9%) 19.641 ns/op [Average]
  (min, avg, max) = (45.049, 51.232, 78.634), stdev = 12.991
  CI (99.9%): [31.591, 70.873] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 8.54% complete, ETA 00:53:54
# Fork: 1 of 2
# Warmup Iteration   1: 321.745 ns/op
# Warmup Iteration   2: 187.217 ns/op
# Warmup Iteration   3: 108.529 ns/op
Iteration   1: 108.520 ns/op
Iteration   2: 108.576 ns/op
Iteration   3: 193.882 ns/op
Iteration   4: 108.401 ns/op
Iteration   5: 108.347 ns/op

# Run progress: 8.58% complete, ETA 00:53:53
# Fork: 2 of 2
# Warmup Iteration   1: 282.512 ns/op
# Warmup Iteration   2: 163.195 ns/op
# Warmup Iteration   3: 109.191 ns/op
Iteration   1: 109.134 ns/op
Iteration   2: 109.110 ns/op
Iteration   3: 203.060 ns/op
Iteration   4: 108.999 ns/op
Iteration   5: 108.964 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.699 ±(99.9%) 57.284 ns/op [Average]
  (min, avg, max) = (108.347, 126.699, 203.060), stdev = 37.890
  CI (99.9%): [69.415, 183.983] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 8.61% complete, ETA 00:53:52
# Fork: 1 of 2
# Warmup Iteration   1: 75.146 ns/op
# Warmup Iteration   2: 72.533 ns/op
# Warmup Iteration   3: 47.447 ns/op
Iteration   1: 47.558 ns/op
Iteration   2: 47.480 ns/op
Iteration   3: 83.222 ns/op
Iteration   4: 47.351 ns/op
Iteration   5: 47.650 ns/op

# Run progress: 8.65% complete, ETA 00:53:51
# Fork: 2 of 2
# Warmup Iteration   1: 68.737 ns/op
# Warmup Iteration   2: 73.968 ns/op
# Warmup Iteration   3: 47.512 ns/op
Iteration   1: 47.508 ns/op
Iteration   2: 47.488 ns/op
Iteration   3: 77.283 ns/op
Iteration   4: 47.350 ns/op
Iteration   5: 47.626 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  54.052 ±(99.9%) 20.985 ns/op [Average]
  (min, avg, max) = (47.350, 54.052, 83.222), stdev = 13.880
  CI (99.9%): [33.067, 75.036] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 8.68% complete, ETA 00:53:50
# Fork: 1 of 2
# Warmup Iteration   1: 183.766 ns/op
# Warmup Iteration   2: 193.904 ns/op
# Warmup Iteration   3: 129.702 ns/op
Iteration   1: 129.756 ns/op
Iteration   2: 129.736 ns/op
Iteration   3: 225.183 ns/op
Iteration   4: 130.289 ns/op
Iteration   5: 130.047 ns/op

# Run progress: 8.72% complete, ETA 00:53:48
# Fork: 2 of 2
# Warmup Iteration   1: 185.701 ns/op
# Warmup Iteration   2: 183.623 ns/op
# Warmup Iteration   3: 129.994 ns/op
Iteration   1: 130.015 ns/op
Iteration   2: 129.994 ns/op
Iteration   3: 207.811 ns/op
Iteration   4: 130.727 ns/op
Iteration   5: 130.514 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  147.407 ±(99.9%) 55.401 ns/op [Average]
  (min, avg, max) = (129.736, 147.407, 225.183), stdev = 36.644
  CI (99.9%): [92.006, 202.808] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 8.75% complete, ETA 00:53:47
# Fork: 1 of 2
# Warmup Iteration   1: 19.503 ns/op
# Warmup Iteration   2: 23.515 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 15.236 ns/op
Iteration   5: 15.242 ns/op

# Run progress: 8.78% complete, ETA 00:53:46
# Fork: 2 of 2
# Warmup Iteration   1: 18.877 ns/op
# Warmup Iteration   2: 25.012 ns/op
# Warmup Iteration   3: 13.727 ns/op
Iteration   1: 13.707 ns/op
Iteration   2: 13.730 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 13.900 ns/op
Iteration   5: 13.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.056 ±(99.9%) 0.949 ns/op [Average]
  (min, avg, max) = (13.707, 14.056, 15.242), stdev = 0.628
  CI (99.9%): [13.107, 15.005] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 8.82% complete, ETA 00:53:45
# Fork: 1 of 2
# Warmup Iteration   1: 74.670 ns/op
# Warmup Iteration   2: 73.400 ns/op
# Warmup Iteration   3: 52.365 ns/op
Iteration   1: 52.405 ns/op
Iteration   2: 52.375 ns/op
Iteration   3: 52.398 ns/op
Iteration   4: 52.238 ns/op
Iteration   5: 52.228 ns/op

# Run progress: 8.85% complete, ETA 00:53:43
# Fork: 2 of 2
# Warmup Iteration   1: 73.929 ns/op
# Warmup Iteration   2: 75.550 ns/op
# Warmup Iteration   3: 52.384 ns/op
Iteration   1: 52.406 ns/op
Iteration   2: 52.406 ns/op
Iteration   3: 52.394 ns/op
Iteration   4: 52.232 ns/op
Iteration   5: 52.210 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.329 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (52.210, 52.329, 52.406), stdev = 0.089
  CI (99.9%): [52.195, 52.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 8.89% complete, ETA 00:53:42
# Fork: 1 of 2
# Warmup Iteration   1: 70.522 ns/op
# Warmup Iteration   2: 70.515 ns/op
# Warmup Iteration   3: 45.124 ns/op
Iteration   1: 45.183 ns/op
Iteration   2: 45.133 ns/op
Iteration   3: 45.148 ns/op
Iteration   4: 45.107 ns/op
Iteration   5: 45.053 ns/op

# Run progress: 8.92% complete, ETA 00:53:41
# Fork: 2 of 2
# Warmup Iteration   1: 70.701 ns/op
# Warmup Iteration   2: 73.598 ns/op
# Warmup Iteration   3: 45.140 ns/op
Iteration   1: 45.150 ns/op
Iteration   2: 45.121 ns/op
Iteration   3: 45.183 ns/op
Iteration   4: 45.034 ns/op
Iteration   5: 45.068 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.118 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (45.034, 45.118, 45.183), stdev = 0.052
  CI (99.9%): [45.039, 45.197] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 8.96% complete, ETA 00:53:39
# Fork: 1 of 2
# Warmup Iteration   1: 165.928 ns/op
# Warmup Iteration   2: 80.210 ns/op
# Warmup Iteration   3: 48.275 ns/op
Iteration   1: 48.304 ns/op
Iteration   2: 48.299 ns/op
Iteration   3: 48.284 ns/op
Iteration   4: 48.111 ns/op
Iteration   5: 48.158 ns/op

# Run progress: 8.99% complete, ETA 00:53:38
# Fork: 2 of 2
# Warmup Iteration   1: 158.096 ns/op
# Warmup Iteration   2: 75.797 ns/op
# Warmup Iteration   3: 48.286 ns/op
Iteration   1: 48.307 ns/op
Iteration   2: 48.300 ns/op
Iteration   3: 48.319 ns/op
Iteration   4: 48.108 ns/op
Iteration   5: 48.181 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.237 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (48.108, 48.237, 48.319), stdev = 0.087
  CI (99.9%): [48.106, 48.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 9.03% complete, ETA 00:53:37
# Fork: 1 of 2
# Warmup Iteration   1: 68.562 ns/op
# Warmup Iteration   2: 71.932 ns/op
# Warmup Iteration   3: 47.514 ns/op
Iteration   1: 47.491 ns/op
Iteration   2: 47.499 ns/op
Iteration   3: 47.435 ns/op
Iteration   4: 47.369 ns/op
Iteration   5: 47.584 ns/op

# Run progress: 9.06% complete, ETA 00:53:36
# Fork: 2 of 2
# Warmup Iteration   1: 69.060 ns/op
# Warmup Iteration   2: 72.573 ns/op
# Warmup Iteration   3: 47.478 ns/op
Iteration   1: 47.532 ns/op
Iteration   2: 47.500 ns/op
Iteration   3: 47.505 ns/op
Iteration   4: 47.325 ns/op
Iteration   5: 47.477 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.472 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (47.325, 47.472, 47.584), stdev = 0.077
  CI (99.9%): [47.356, 47.587] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 9.10% complete, ETA 00:53:34
# Fork: 1 of 2
# Warmup Iteration   1: 167.015 ns/op
# Warmup Iteration   2: 176.495 ns/op
# Warmup Iteration   3: 119.988 ns/op
Iteration   1: 120.035 ns/op
Iteration   2: 120.080 ns/op
Iteration   3: 120.007 ns/op
Iteration   4: 119.904 ns/op
Iteration   5: 119.977 ns/op

# Run progress: 9.13% complete, ETA 00:53:33
# Fork: 2 of 2
# Warmup Iteration   1: 166.244 ns/op
# Warmup Iteration   2: 176.157 ns/op
# Warmup Iteration   3: 119.997 ns/op
Iteration   1: 120.054 ns/op
Iteration   2: 119.974 ns/op
Iteration   3: 120.003 ns/op
Iteration   4: 119.988 ns/op
Iteration   5: 119.999 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  120.002 ±(99.9%) 0.073 ns/op [Average]
  (min, avg, max) = (119.904, 120.002, 120.080), stdev = 0.048
  CI (99.9%): [119.929, 120.075] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 9.17% complete, ETA 00:53:32
# Fork: 1 of 2
# Warmup Iteration   1: 18.596 ns/op
# Warmup Iteration   2: 22.949 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.724 ns/op
Iteration   3: 13.737 ns/op
Iteration   4: 15.250 ns/op
Iteration   5: 15.253 ns/op

# Run progress: 9.20% complete, ETA 00:53:30
# Fork: 2 of 2
# Warmup Iteration   1: 18.706 ns/op
# Warmup Iteration   2: 25.263 ns/op
# Warmup Iteration   3: 13.725 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.708 ns/op
Iteration   3: 13.733 ns/op
Iteration   4: 13.892 ns/op
Iteration   5: 13.908 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.063 ±(99.9%) 0.953 ns/op [Average]
  (min, avg, max) = (13.708, 14.063, 15.253), stdev = 0.631
  CI (99.9%): [13.110, 15.017] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 9.24% complete, ETA 00:53:29
# Fork: 1 of 2
# Warmup Iteration   1: 74.845 ns/op
# Warmup Iteration   2: 83.060 ns/op
# Warmup Iteration   3: 52.390 ns/op
Iteration   1: 52.375 ns/op
Iteration   2: 52.389 ns/op
Iteration   3: 52.370 ns/op
Iteration   4: 52.199 ns/op
Iteration   5: 52.174 ns/op

# Run progress: 9.27% complete, ETA 00:53:28
# Fork: 2 of 2
# Warmup Iteration   1: 72.827 ns/op
# Warmup Iteration   2: 82.093 ns/op
# Warmup Iteration   3: 52.379 ns/op
Iteration   1: 52.378 ns/op
Iteration   2: 52.374 ns/op
Iteration   3: 52.394 ns/op
Iteration   4: 52.189 ns/op
Iteration   5: 52.198 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.304 ±(99.9%) 0.149 ns/op [Average]
  (min, avg, max) = (52.174, 52.304, 52.394), stdev = 0.099
  CI (99.9%): [52.155, 52.453] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 9.31% complete, ETA 00:53:27
# Fork: 1 of 2
# Warmup Iteration   1: 70.443 ns/op
# Warmup Iteration   2: 69.710 ns/op
# Warmup Iteration   3: 45.119 ns/op
Iteration   1: 45.162 ns/op
Iteration   2: 45.124 ns/op
Iteration   3: 45.152 ns/op
Iteration   4: 45.014 ns/op
Iteration   5: 45.099 ns/op

# Run progress: 9.34% complete, ETA 00:53:25
# Fork: 2 of 2
# Warmup Iteration   1: 69.469 ns/op
# Warmup Iteration   2: 76.058 ns/op
# Warmup Iteration   3: 45.138 ns/op
Iteration   1: 45.101 ns/op
Iteration   2: 45.165 ns/op
Iteration   3: 45.122 ns/op
Iteration   4: 45.092 ns/op
Iteration   5: 45.085 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.112 ±(99.9%) 0.068 ns/op [Average]
  (min, avg, max) = (45.014, 45.112, 45.165), stdev = 0.045
  CI (99.9%): [45.043, 45.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 9.38% complete, ETA 00:53:24
# Fork: 1 of 2
# Warmup Iteration   1: 150.100 ns/op
# Warmup Iteration   2: 71.234 ns/op
# Warmup Iteration   3: 48.699 ns/op
Iteration   1: 48.734 ns/op
Iteration   2: 48.716 ns/op
Iteration   3: 48.673 ns/op
Iteration   4: 48.374 ns/op
Iteration   5: 48.405 ns/op

# Run progress: 9.41% complete, ETA 00:53:23
# Fork: 2 of 2
# Warmup Iteration   1: 145.790 ns/op
# Warmup Iteration   2: 70.962 ns/op
# Warmup Iteration   3: 48.298 ns/op
Iteration   1: 48.305 ns/op
Iteration   2: 48.300 ns/op
Iteration   3: 48.293 ns/op
Iteration   4: 48.115 ns/op
Iteration   5: 48.183 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.410 ±(99.9%) 0.336 ns/op [Average]
  (min, avg, max) = (48.115, 48.410, 48.734), stdev = 0.222
  CI (99.9%): [48.074, 48.746] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 9.44% complete, ETA 00:53:22
# Fork: 1 of 2
# Warmup Iteration   1: 68.269 ns/op
# Warmup Iteration   2: 78.261 ns/op
# Warmup Iteration   3: 47.475 ns/op
Iteration   1: 47.523 ns/op
Iteration   2: 47.466 ns/op
Iteration   3: 47.472 ns/op
Iteration   4: 47.353 ns/op
Iteration   5: 47.537 ns/op

# Run progress: 9.48% complete, ETA 00:53:20
# Fork: 2 of 2
# Warmup Iteration   1: 68.237 ns/op
# Warmup Iteration   2: 73.064 ns/op
# Warmup Iteration   3: 47.477 ns/op
Iteration   1: 47.502 ns/op
Iteration   2: 47.497 ns/op
Iteration   3: 47.481 ns/op
Iteration   4: 47.321 ns/op
Iteration   5: 47.588 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.474 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (47.321, 47.474, 47.588), stdev = 0.081
  CI (99.9%): [47.352, 47.596] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 9.51% complete, ETA 00:53:19
# Fork: 1 of 2
# Warmup Iteration   1: 173.760 ns/op
# Warmup Iteration   2: 185.885 ns/op
# Warmup Iteration   3: 120.032 ns/op
Iteration   1: 120.030 ns/op
Iteration   2: 120.090 ns/op
Iteration   3: 120.122 ns/op
Iteration   4: 119.804 ns/op
Iteration   5: 119.898 ns/op

# Run progress: 9.55% complete, ETA 00:53:18
# Fork: 2 of 2
# Warmup Iteration   1: 165.008 ns/op
# Warmup Iteration   2: 182.469 ns/op
# Warmup Iteration   3: 119.933 ns/op
Iteration   1: 120.063 ns/op
Iteration   2: 119.998 ns/op
Iteration   3: 120.134 ns/op
Iteration   4: 119.989 ns/op
Iteration   5: 119.934 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  120.006 ±(99.9%) 0.158 ns/op [Average]
  (min, avg, max) = (119.804, 120.006, 120.134), stdev = 0.105
  CI (99.9%): [119.848, 120.164] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 9.58% complete, ETA 00:53:16
# Fork: 1 of 2
# Warmup Iteration   1: 19.730 ns/op
# Warmup Iteration   2: 24.935 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.733 ns/op
Iteration   4: 13.898 ns/op
Iteration   5: 13.898 ns/op

# Run progress: 9.62% complete, ETA 00:53:15
# Fork: 2 of 2
# Warmup Iteration   1: 18.744 ns/op
# Warmup Iteration   2: 23.177 ns/op
# Warmup Iteration   3: 14.110 ns/op
Iteration   1: 14.107 ns/op
Iteration   2: 14.106 ns/op
Iteration   3: 14.119 ns/op
Iteration   4: 13.910 ns/op
Iteration   5: 13.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.909 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (13.711, 13.909, 14.119), stdev = 0.160
  CI (99.9%): [13.667, 14.151] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 9.65% complete, ETA 00:53:14
# Fork: 1 of 2
# Warmup Iteration   1: 80.799 ns/op
# Warmup Iteration   2: 90.578 ns/op
# Warmup Iteration   3: 55.886 ns/op
Iteration   1: 55.946 ns/op
Iteration   2: 55.934 ns/op
Iteration   3: 55.886 ns/op
Iteration   4: 55.695 ns/op
Iteration   5: 55.728 ns/op

# Run progress: 9.69% complete, ETA 00:53:12
# Fork: 2 of 2
# Warmup Iteration   1: 85.366 ns/op
# Warmup Iteration   2: 88.897 ns/op
# Warmup Iteration   3: 55.896 ns/op
Iteration   1: 56.014 ns/op
Iteration   2: 55.979 ns/op
Iteration   3: 55.910 ns/op
Iteration   4: 55.750 ns/op
Iteration   5: 55.661 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  55.850 ±(99.9%) 0.195 ns/op [Average]
  (min, avg, max) = (55.661, 55.850, 56.014), stdev = 0.129
  CI (99.9%): [55.656, 56.045] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 9.72% complete, ETA 00:53:11
# Fork: 1 of 2
# Warmup Iteration   1: 66.549 ns/op
# Warmup Iteration   2: 68.795 ns/op
# Warmup Iteration   3: 45.112 ns/op
Iteration   1: 45.157 ns/op
Iteration   2: 45.124 ns/op
Iteration   3: 45.142 ns/op
Iteration   4: 45.438 ns/op
Iteration   5: 45.432 ns/op

# Run progress: 9.76% complete, ETA 00:53:10
# Fork: 2 of 2
# Warmup Iteration   1: 64.891 ns/op
# Warmup Iteration   2: 77.032 ns/op
# Warmup Iteration   3: 45.074 ns/op
Iteration   1: 45.168 ns/op
Iteration   2: 45.129 ns/op
Iteration   3: 45.133 ns/op
Iteration   4: 45.126 ns/op
Iteration   5: 45.091 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.194 ±(99.9%) 0.194 ns/op [Average]
  (min, avg, max) = (45.091, 45.194, 45.438), stdev = 0.129
  CI (99.9%): [44.999, 45.388] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 9.79% complete, ETA 00:53:09
# Fork: 1 of 2
# Warmup Iteration   1: 440.345 ns/op
# Warmup Iteration   2: 101.186 ns/op
# Warmup Iteration   3: 66.630 ns/op
Iteration   1: 66.680 ns/op
Iteration   2: 66.751 ns/op
Iteration   3: 66.582 ns/op
Iteration   4: 66.378 ns/op
Iteration   5: 66.360 ns/op

# Run progress: 9.83% complete, ETA 00:53:07
# Fork: 2 of 2
# Warmup Iteration   1: 387.640 ns/op
# Warmup Iteration   2: 96.718 ns/op
# Warmup Iteration   3: 66.080 ns/op
Iteration   1: 66.018 ns/op
Iteration   2: 66.067 ns/op
Iteration   3: 66.088 ns/op
Iteration   4: 65.910 ns/op
Iteration   5: 65.887 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.272 ±(99.9%) 0.486 ns/op [Average]
  (min, avg, max) = (65.887, 66.272, 66.751), stdev = 0.322
  CI (99.9%): [65.786, 66.758] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 9.86% complete, ETA 00:53:06
# Fork: 1 of 2
# Warmup Iteration   1: 67.433 ns/op
# Warmup Iteration   2: 72.490 ns/op
# Warmup Iteration   3: 47.481 ns/op
Iteration   1: 47.534 ns/op
Iteration   2: 47.508 ns/op
Iteration   3: 47.523 ns/op
Iteration   4: 47.352 ns/op
Iteration   5: 47.543 ns/op

# Run progress: 9.90% complete, ETA 00:53:05
# Fork: 2 of 2
# Warmup Iteration   1: 68.894 ns/op
# Warmup Iteration   2: 72.683 ns/op
# Warmup Iteration   3: 47.483 ns/op
Iteration   1: 47.487 ns/op
Iteration   2: 47.545 ns/op
Iteration   3: 47.525 ns/op
Iteration   4: 47.368 ns/op
Iteration   5: 47.523 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.491 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (47.352, 47.491, 47.545), stdev = 0.071
  CI (99.9%): [47.383, 47.598] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 9.93% complete, ETA 00:53:04
# Fork: 1 of 2
# Warmup Iteration   1: 177.569 ns/op
# Warmup Iteration   2: 184.252 ns/op
# Warmup Iteration   3: 124.997 ns/op
Iteration   1: 125.052 ns/op
Iteration   2: 124.994 ns/op
Iteration   3: 125.048 ns/op
Iteration   4: 129.844 ns/op
Iteration   5: 129.829 ns/op

# Run progress: 9.97% complete, ETA 00:53:02
# Fork: 2 of 2
# Warmup Iteration   1: 172.469 ns/op
# Warmup Iteration   2: 187.310 ns/op
# Warmup Iteration   3: 123.880 ns/op
Iteration   1: 123.955 ns/op
Iteration   2: 123.899 ns/op
Iteration   3: 123.907 ns/op
Iteration   4: 129.515 ns/op
Iteration   5: 129.598 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.564 ±(99.9%) 4.136 ns/op [Average]
  (min, avg, max) = (123.899, 126.564, 129.844), stdev = 2.736
  CI (99.9%): [122.428, 130.700] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 10.00% complete, ETA 00:53:01
# Fork: 1 of 2
# Warmup Iteration   1: 19.526 ns/op
# Warmup Iteration   2: 24.590 ns/op
# Warmup Iteration   3: 13.723 ns/op
Iteration   1: 13.720 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.750 ns/op
Iteration   4: 13.893 ns/op
Iteration   5: 13.890 ns/op

# Run progress: 10.03% complete, ETA 00:53:00
# Fork: 2 of 2
# Warmup Iteration   1: 19.562 ns/op
# Warmup Iteration   2: 22.921 ns/op
# Warmup Iteration   3: 13.718 ns/op
Iteration   1: 13.707 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.720 ns/op
Iteration   4: 13.922 ns/op
Iteration   5: 13.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.791 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (13.707, 13.791, 13.922), stdev = 0.093
  CI (99.9%): [13.650, 13.931] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 10.07% complete, ETA 00:52:59
# Fork: 1 of 2
# Warmup Iteration   1: 169.905 ns/op
# Warmup Iteration   2: 139.935 ns/op
# Warmup Iteration   3: 90.074 ns/op
Iteration   1: 90.149 ns/op
Iteration   2: 90.128 ns/op
Iteration   3: 90.086 ns/op
Iteration   4: 90.589 ns/op
Iteration   5: 90.587 ns/op

# Run progress: 10.10% complete, ETA 00:52:57
# Fork: 2 of 2
# Warmup Iteration   1: 173.228 ns/op
# Warmup Iteration   2: 139.132 ns/op
# Warmup Iteration   3: 90.006 ns/op
Iteration   1: 89.983 ns/op
Iteration   2: 90.085 ns/op
Iteration   3: 90.105 ns/op
Iteration   4: 89.859 ns/op
Iteration   5: 89.812 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  90.138 ±(99.9%) 0.397 ns/op [Average]
  (min, avg, max) = (89.812, 90.138, 90.589), stdev = 0.262
  CI (99.9%): [89.742, 90.535] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 10.14% complete, ETA 00:52:56
# Fork: 1 of 2
# Warmup Iteration   1: 67.507 ns/op
# Warmup Iteration   2: 69.653 ns/op
# Warmup Iteration   3: 45.116 ns/op
Iteration   1: 45.107 ns/op
Iteration   2: 45.161 ns/op
Iteration   3: 45.149 ns/op
Iteration   4: 45.053 ns/op
Iteration   5: 45.049 ns/op

# Run progress: 10.17% complete, ETA 00:52:55
# Fork: 2 of 2
# Warmup Iteration   1: 71.470 ns/op
# Warmup Iteration   2: 78.321 ns/op
# Warmup Iteration   3: 45.127 ns/op
Iteration   1: 45.129 ns/op
Iteration   2: 45.113 ns/op
Iteration   3: 45.132 ns/op
Iteration   4: 45.118 ns/op
Iteration   5: 45.106 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.112 ±(99.9%) 0.055 ns/op [Average]
  (min, avg, max) = (45.049, 45.112, 45.161), stdev = 0.036
  CI (99.9%): [45.057, 45.167] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 10.21% complete, ETA 00:52:54
# Fork: 1 of 2
# Warmup Iteration   1: 278.259 ns/op
# Warmup Iteration   2: 149.075 ns/op
# Warmup Iteration   3: 107.845 ns/op
Iteration   1: 107.866 ns/op
Iteration   2: 107.867 ns/op
Iteration   3: 107.858 ns/op
Iteration   4: 107.292 ns/op
Iteration   5: 107.389 ns/op

# Run progress: 10.24% complete, ETA 00:52:53
# Fork: 2 of 2
# Warmup Iteration   1: 259.387 ns/op
# Warmup Iteration   2: 151.707 ns/op
# Warmup Iteration   3: 104.825 ns/op
Iteration   1: 104.826 ns/op
Iteration   2: 104.851 ns/op
Iteration   3: 104.908 ns/op
Iteration   4: 104.730 ns/op
Iteration   5: 104.802 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  106.239 ±(99.9%) 2.275 ns/op [Average]
  (min, avg, max) = (104.730, 106.239, 107.867), stdev = 1.505
  CI (99.9%): [103.964, 108.514] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 10.28% complete, ETA 00:52:51
# Fork: 1 of 2
# Warmup Iteration   1: 67.124 ns/op
# Warmup Iteration   2: 87.865 ns/op
# Warmup Iteration   3: 47.476 ns/op
Iteration   1: 47.582 ns/op
Iteration   2: 47.451 ns/op
Iteration   3: 47.506 ns/op
Iteration   4: 47.342 ns/op
Iteration   5: 47.617 ns/op

# Run progress: 10.31% complete, ETA 00:52:50
# Fork: 2 of 2
# Warmup Iteration   1: 69.143 ns/op
# Warmup Iteration   2: 82.655 ns/op
# Warmup Iteration   3: 47.494 ns/op
Iteration   1: 47.550 ns/op
Iteration   2: 47.514 ns/op
Iteration   3: 47.466 ns/op
Iteration   4: 47.336 ns/op
Iteration   5: 47.508 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.487 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (47.336, 47.487, 47.617), stdev = 0.093
  CI (99.9%): [47.347, 47.627] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 10.35% complete, ETA 00:52:49
# Fork: 1 of 2
# Warmup Iteration   1: 177.483 ns/op
# Warmup Iteration   2: 189.419 ns/op
# Warmup Iteration   3: 125.001 ns/op
Iteration   1: 124.950 ns/op
Iteration   2: 125.000 ns/op
Iteration   3: 125.028 ns/op
Iteration   4: 129.581 ns/op
Iteration   5: 129.546 ns/op

# Run progress: 10.38% complete, ETA 00:52:47
# Fork: 2 of 2
# Warmup Iteration   1: 173.265 ns/op
# Warmup Iteration   2: 177.995 ns/op
# Warmup Iteration   3: 124.941 ns/op
Iteration   1: 124.979 ns/op
Iteration   2: 124.985 ns/op
Iteration   3: 124.972 ns/op
Iteration   4: 129.606 ns/op
Iteration   5: 129.661 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.831 ±(99.9%) 3.602 ns/op [Average]
  (min, avg, max) = (124.950, 126.831, 129.661), stdev = 2.382
  CI (99.9%): [123.229, 130.432] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 10.42% complete, ETA 00:52:46
# Fork: 1 of 2
# Warmup Iteration   1: 19.526 ns/op
# Warmup Iteration   2: 21.650 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.730 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 14.623 ns/op
Iteration   5: 14.620 ns/op

# Run progress: 10.45% complete, ETA 00:52:45
# Fork: 2 of 2
# Warmup Iteration   1: 18.568 ns/op
# Warmup Iteration   2: 21.663 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.872 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.929 ±(99.9%) 0.560 ns/op [Average]
  (min, avg, max) = (13.712, 13.929, 14.623), stdev = 0.371
  CI (99.9%): [13.369, 14.490] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 10.49% complete, ETA 00:52:43
# Fork: 1 of 2
# Warmup Iteration   1: 1361.441 ns/op
# Warmup Iteration   2: 468.780 ns/op
# Warmup Iteration   3: 312.234 ns/op
Iteration   1: 312.293 ns/op
Iteration   2: 312.228 ns/op
Iteration   3: 312.321 ns/op
Iteration   4: 312.362 ns/op
Iteration   5: 312.272 ns/op

# Run progress: 10.52% complete, ETA 00:52:42
# Fork: 2 of 2
# Warmup Iteration   1: 1096.939 ns/op
# Warmup Iteration   2: 438.979 ns/op
# Warmup Iteration   3: 312.139 ns/op
Iteration   1: 312.427 ns/op
Iteration   2: 312.431 ns/op
Iteration   3: 312.507 ns/op
Iteration   4: 313.125 ns/op
Iteration   5: 313.079 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  312.504 ±(99.9%) 0.492 ns/op [Average]
  (min, avg, max) = (312.228, 312.504, 313.125), stdev = 0.326
  CI (99.9%): [312.012, 312.997] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 10.56% complete, ETA 00:52:41
# Fork: 1 of 2
# Warmup Iteration   1: 383.841 ns/op
# Warmup Iteration   2: 353.473 ns/op
# Warmup Iteration   3: 260.591 ns/op
Iteration   1: 260.658 ns/op
Iteration   2: 261.105 ns/op
Iteration   3: 260.748 ns/op
Iteration   4: 260.787 ns/op
Iteration   5: 260.712 ns/op

# Run progress: 10.59% complete, ETA 00:52:40
# Fork: 2 of 2
# Warmup Iteration   1: 405.939 ns/op
# Warmup Iteration   2: 354.781 ns/op
# Warmup Iteration   3: 260.805 ns/op
Iteration   1: 260.836 ns/op
Iteration   2: 260.789 ns/op
Iteration   3: 260.660 ns/op
Iteration   4: 260.933 ns/op
Iteration   5: 260.703 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  260.793 ±(99.9%) 0.208 ns/op [Average]
  (min, avg, max) = (260.658, 260.793, 261.105), stdev = 0.138
  CI (99.9%): [260.585, 261.002] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 10.63% complete, ETA 00:52:38
# Fork: 1 of 2
# Warmup Iteration   1: 10697.510 ns/op
# Warmup Iteration   2: 414.017 ns/op
# Warmup Iteration   3: 349.212 ns/op
Iteration   1: 317.973 ns/op
Iteration   2: 318.062 ns/op
Iteration   3: 318.221 ns/op
Iteration   4: 317.910 ns/op
Iteration   5: 318.050 ns/op

# Run progress: 10.66% complete, ETA 00:52:37
# Fork: 2 of 2
# Warmup Iteration   1: 7753.237 ns/op
# Warmup Iteration   2: 497.274 ns/op
# Warmup Iteration   3: 312.142 ns/op
Iteration   1: 312.107 ns/op
Iteration   2: 312.497 ns/op
Iteration   3: 312.250 ns/op
Iteration   4: 312.575 ns/op
Iteration   5: 312.445 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  315.209 ±(99.9%) 4.522 ns/op [Average]
  (min, avg, max) = (312.107, 315.209, 318.221), stdev = 2.991
  CI (99.9%): [310.687, 319.731] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 10.69% complete, ETA 00:52:36
# Fork: 1 of 2
# Warmup Iteration   1: 332.052 ns/op
# Warmup Iteration   2: 277.431 ns/op
# Warmup Iteration   3: 208.496 ns/op
Iteration   1: 208.629 ns/op
Iteration   2: 208.508 ns/op
Iteration   3: 208.482 ns/op
Iteration   4: 208.699 ns/op
Iteration   5: 208.634 ns/op

# Run progress: 10.73% complete, ETA 00:52:35
# Fork: 2 of 2
# Warmup Iteration   1: 335.660 ns/op
# Warmup Iteration   2: 285.288 ns/op
# Warmup Iteration   3: 208.279 ns/op
Iteration   1: 208.365 ns/op
Iteration   2: 208.473 ns/op
Iteration   3: 208.329 ns/op
Iteration   4: 208.358 ns/op
Iteration   5: 208.396 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  208.487 ±(99.9%) 0.197 ns/op [Average]
  (min, avg, max) = (208.329, 208.487, 208.699), stdev = 0.130
  CI (99.9%): [208.291, 208.684] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 10.76% complete, ETA 00:52:33
# Fork: 1 of 2
# Warmup Iteration   1: 1200.877 ns/op
# Warmup Iteration   2: 1074.995 ns/op
# Warmup Iteration   3: 717.816 ns/op
Iteration   1: 717.987 ns/op
Iteration   2: 717.979 ns/op
Iteration   3: 717.798 ns/op
Iteration   4: 721.755 ns/op
Iteration   5: 721.757 ns/op

# Run progress: 10.80% complete, ETA 00:52:32
# Fork: 2 of 2
# Warmup Iteration   1: 1192.250 ns/op
# Warmup Iteration   2: 1083.350 ns/op
# Warmup Iteration   3: 726.500 ns/op
Iteration   1: 726.941 ns/op
Iteration   2: 726.716 ns/op
Iteration   3: 726.863 ns/op
Iteration   4: 730.568 ns/op
Iteration   5: 730.556 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  723.892 ±(99.9%) 7.662 ns/op [Average]
  (min, avg, max) = (717.798, 723.892, 730.568), stdev = 5.068
  CI (99.9%): [716.230, 731.554] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 10.83% complete, ETA 00:52:31
# Fork: 1 of 2
# Warmup Iteration   1: 19.829 ns/op
# Warmup Iteration   2: 23.937 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.709 ns/op
Iteration   2: 13.737 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.875 ns/op
Iteration   5: 13.877 ns/op

# Run progress: 10.87% complete, ETA 00:52:29
# Fork: 2 of 2
# Warmup Iteration   1: 19.250 ns/op
# Warmup Iteration   2: 21.279 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.725 ns/op
Iteration   4: 14.622 ns/op
Iteration   5: 14.618 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.931 ±(99.9%) 0.557 ns/op [Average]
  (min, avg, max) = (13.709, 13.931, 14.622), stdev = 0.368
  CI (99.9%): [13.374, 14.488] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 10.90% complete, ETA 00:52:28
# Fork: 1 of 2
# Warmup Iteration   1: 670.111 ns/op
# Warmup Iteration   2: 314.439 ns/op
# Warmup Iteration   3: 237.460 ns/op
Iteration   1: 237.532 ns/op
Iteration   2: 237.370 ns/op
Iteration   3: 237.461 ns/op
Iteration   4: 237.183 ns/op
Iteration   5: 237.106 ns/op

# Run progress: 10.94% complete, ETA 00:52:27
# Fork: 2 of 2
# Warmup Iteration   1: 661.443 ns/op
# Warmup Iteration   2: 348.787 ns/op
# Warmup Iteration   3: 237.712 ns/op
Iteration   1: 237.731 ns/op
Iteration   2: 237.708 ns/op
Iteration   3: 237.767 ns/op
Iteration   4: 237.519 ns/op
Iteration   5: 237.574 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.495 ±(99.9%) 0.338 ns/op [Average]
  (min, avg, max) = (237.106, 237.495, 237.767), stdev = 0.223
  CI (99.9%): [237.157, 237.833] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 10.97% complete, ETA 00:52:26
# Fork: 1 of 2
# Warmup Iteration   1: 496.209 ns/op
# Warmup Iteration   2: 487.629 ns/op
# Warmup Iteration   3: 345.679 ns/op
Iteration   1: 345.439 ns/op
Iteration   2: 345.532 ns/op
Iteration   3: 345.647 ns/op
Iteration   4: 345.374 ns/op
Iteration   5: 345.101 ns/op

# Run progress: 11.01% complete, ETA 00:52:24
# Fork: 2 of 2
# Warmup Iteration   1: 500.028 ns/op
# Warmup Iteration   2: 455.131 ns/op
# Warmup Iteration   3: 336.119 ns/op
Iteration   1: 336.284 ns/op
Iteration   2: 336.244 ns/op
Iteration   3: 336.248 ns/op
Iteration   4: 336.187 ns/op
Iteration   5: 336.515 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  340.857 ±(99.9%) 7.273 ns/op [Average]
  (min, avg, max) = (336.187, 340.857, 345.647), stdev = 4.811
  CI (99.9%): [333.584, 348.131] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 11.04% complete, ETA 00:52:23
# Fork: 1 of 2
# Warmup Iteration   1: 670.350 ns/op
# Warmup Iteration   2: 336.847 ns/op
# Warmup Iteration   3: 274.445 ns/op
Iteration   1: 248.934 ns/op
Iteration   2: 249.179 ns/op
Iteration   3: 248.890 ns/op
Iteration   4: 248.946 ns/op
Iteration   5: 248.664 ns/op

# Run progress: 11.08% complete, ETA 00:52:22
# Fork: 2 of 2
# Warmup Iteration   1: 714.636 ns/op
# Warmup Iteration   2: 365.666 ns/op
# Warmup Iteration   3: 247.793 ns/op
Iteration   1: 247.955 ns/op
Iteration   2: 247.854 ns/op
Iteration   3: 247.638 ns/op
Iteration   4: 247.895 ns/op
Iteration   5: 248.389 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  248.434 ±(99.9%) 0.846 ns/op [Average]
  (min, avg, max) = (247.638, 248.434, 249.179), stdev = 0.560
  CI (99.9%): [247.588, 249.280] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 11.11% complete, ETA 00:52:21
# Fork: 1 of 2
# Warmup Iteration   1: 507.626 ns/op
# Warmup Iteration   2: 380.973 ns/op
# Warmup Iteration   3: 283.015 ns/op
Iteration   1: 282.989 ns/op
Iteration   2: 282.882 ns/op
Iteration   3: 282.962 ns/op
Iteration   4: 282.902 ns/op
Iteration   5: 282.829 ns/op

# Run progress: 11.15% complete, ETA 00:52:20
# Fork: 2 of 2
# Warmup Iteration   1: 447.030 ns/op
# Warmup Iteration   2: 398.909 ns/op
# Warmup Iteration   3: 285.788 ns/op
Iteration   1: 285.841 ns/op
Iteration   2: 285.448 ns/op
Iteration   3: 285.437 ns/op
Iteration   4: 285.740 ns/op
Iteration   5: 285.930 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.296 ±(99.9%) 2.217 ns/op [Average]
  (min, avg, max) = (282.829, 284.296, 285.930), stdev = 1.466
  CI (99.9%): [282.079, 286.513] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 11.18% complete, ETA 00:52:18
# Fork: 1 of 2
# Warmup Iteration   1: 1282.334 ns/op
# Warmup Iteration   2: 1042.869 ns/op
# Warmup Iteration   3: 699.655 ns/op
Iteration   1: 696.664 ns/op
Iteration   2: 697.764 ns/op
Iteration   3: 697.406 ns/op
Iteration   4: 699.954 ns/op
Iteration   5: 700.653 ns/op

# Run progress: 11.22% complete, ETA 00:52:17
# Fork: 2 of 2
# Warmup Iteration   1: 1340.396 ns/op
# Warmup Iteration   2: 992.791 ns/op
# Warmup Iteration   3: 703.783 ns/op
Iteration   1: 704.437 ns/op
Iteration   2: 704.058 ns/op
Iteration   3: 703.944 ns/op
Iteration   4: 708.089 ns/op
Iteration   5: 707.986 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  702.095 ±(99.9%) 6.380 ns/op [Average]
  (min, avg, max) = (696.664, 702.095, 708.089), stdev = 4.220
  CI (99.9%): [695.715, 708.476] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 11.25% complete, ETA 00:52:16
# Fork: 1 of 2
# Warmup Iteration   1: 20.172 ns/op
# Warmup Iteration   2: 23.635 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.879 ns/op

# Run progress: 11.28% complete, ETA 00:52:14
# Fork: 2 of 2
# Warmup Iteration   1: 18.335 ns/op
# Warmup Iteration   2: 22.437 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.726 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.896 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.714, 13.784, 13.896), stdev = 0.086
  CI (99.9%): [13.654, 13.915] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 11.32% complete, ETA 00:52:13
# Fork: 1 of 2
# Warmup Iteration   1: 618.267 ns/op
# Warmup Iteration   2: 343.595 ns/op
# Warmup Iteration   3: 237.359 ns/op
Iteration   1: 237.490 ns/op
Iteration   2: 237.438 ns/op
Iteration   3: 237.461 ns/op
Iteration   4: 237.249 ns/op
Iteration   5: 237.274 ns/op

# Run progress: 11.35% complete, ETA 00:52:12
# Fork: 2 of 2
# Warmup Iteration   1: 1090.862 ns/op
# Warmup Iteration   2: 334.356 ns/op
# Warmup Iteration   3: 240.368 ns/op
Iteration   1: 240.611 ns/op
Iteration   2: 239.954 ns/op
Iteration   3: 241.244 ns/op
Iteration   4: 241.463 ns/op
Iteration   5: 240.208 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  239.039 ±(99.9%) 2.722 ns/op [Average]
  (min, avg, max) = (237.249, 239.039, 241.463), stdev = 1.801
  CI (99.9%): [236.317, 241.762] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 11.39% complete, ETA 00:52:10
# Fork: 1 of 2
# Warmup Iteration   1: 488.644 ns/op
# Warmup Iteration   2: 449.322 ns/op
# Warmup Iteration   3: 332.820 ns/op
Iteration   1: 332.931 ns/op
Iteration   2: 332.952 ns/op
Iteration   3: 332.912 ns/op
Iteration   4: 333.022 ns/op
Iteration   5: 333.018 ns/op

# Run progress: 11.42% complete, ETA 00:52:09
# Fork: 2 of 2
# Warmup Iteration   1: 505.744 ns/op
# Warmup Iteration   2: 514.997 ns/op
# Warmup Iteration   3: 340.276 ns/op
Iteration   1: 340.261 ns/op
Iteration   2: 340.205 ns/op
Iteration   3: 340.328 ns/op
Iteration   4: 340.372 ns/op
Iteration   5: 340.352 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.635 ±(99.9%) 5.846 ns/op [Average]
  (min, avg, max) = (332.912, 336.635, 340.372), stdev = 3.867
  CI (99.9%): [330.789, 342.482] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 11.46% complete, ETA 00:52:08
# Fork: 1 of 2
# Warmup Iteration   1: 715.294 ns/op
# Warmup Iteration   2: 334.970 ns/op
# Warmup Iteration   3: 247.791 ns/op
Iteration   1: 247.797 ns/op
Iteration   2: 248.170 ns/op
Iteration   3: 247.796 ns/op
Iteration   4: 247.831 ns/op
Iteration   5: 247.868 ns/op

# Run progress: 11.49% complete, ETA 00:52:07
# Fork: 2 of 2
# Warmup Iteration   1: 719.085 ns/op
# Warmup Iteration   2: 342.441 ns/op
# Warmup Iteration   3: 249.323 ns/op
Iteration   1: 249.102 ns/op
Iteration   2: 249.341 ns/op
Iteration   3: 249.166 ns/op
Iteration   4: 249.600 ns/op
Iteration   5: 248.921 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  248.559 ±(99.9%) 1.105 ns/op [Average]
  (min, avg, max) = (247.796, 248.559, 249.600), stdev = 0.731
  CI (99.9%): [247.454, 249.664] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 11.53% complete, ETA 00:52:05
# Fork: 1 of 2
# Warmup Iteration   1: 441.759 ns/op
# Warmup Iteration   2: 383.846 ns/op
# Warmup Iteration   3: 285.821 ns/op
Iteration   1: 286.216 ns/op
Iteration   2: 285.610 ns/op
Iteration   3: 285.916 ns/op
Iteration   4: 285.446 ns/op
Iteration   5: 285.310 ns/op

# Run progress: 11.56% complete, ETA 00:52:04
# Fork: 2 of 2
# Warmup Iteration   1: 445.723 ns/op
# Warmup Iteration   2: 384.246 ns/op
# Warmup Iteration   3: 283.140 ns/op
Iteration   1: 283.429 ns/op
Iteration   2: 283.556 ns/op
Iteration   3: 283.577 ns/op
Iteration   4: 283.622 ns/op
Iteration   5: 283.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.657 ±(99.9%) 1.711 ns/op [Average]
  (min, avg, max) = (283.429, 284.657, 286.216), stdev = 1.132
  CI (99.9%): [282.946, 286.367] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 11.60% complete, ETA 00:52:03
# Fork: 1 of 2
# Warmup Iteration   1: 1175.728 ns/op
# Warmup Iteration   2: 1037.159 ns/op
# Warmup Iteration   3: 703.390 ns/op
Iteration   1: 703.547 ns/op
Iteration   2: 703.866 ns/op
Iteration   3: 704.924 ns/op
Iteration   4: 707.415 ns/op
Iteration   5: 707.530 ns/op

# Run progress: 11.63% complete, ETA 00:52:02
# Fork: 2 of 2
# Warmup Iteration   1: 1294.537 ns/op
# Warmup Iteration   2: 984.074 ns/op
# Warmup Iteration   3: 703.442 ns/op
Iteration   1: 703.959 ns/op
Iteration   2: 703.874 ns/op
Iteration   3: 704.025 ns/op
Iteration   4: 707.531 ns/op
Iteration   5: 707.981 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  705.465 ±(99.9%) 2.854 ns/op [Average]
  (min, avg, max) = (703.547, 705.465, 707.981), stdev = 1.888
  CI (99.9%): [702.611, 708.319] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 11.67% complete, ETA 00:52:01
# Fork: 1 of 2
# Warmup Iteration   1: 19.895 ns/op
# Warmup Iteration   2: 20.734 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.723 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 13.888 ns/op
Iteration   5: 13.886 ns/op

# Run progress: 11.70% complete, ETA 00:51:59
# Fork: 2 of 2
# Warmup Iteration   1: 20.547 ns/op
# Warmup Iteration   2: 25.058 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.708 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 14.609 ns/op
Iteration   5: 14.609 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.929 ±(99.9%) 0.552 ns/op [Average]
  (min, avg, max) = (13.708, 13.929, 14.609), stdev = 0.365
  CI (99.9%): [13.376, 14.481] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 11.74% complete, ETA 00:51:58
# Fork: 1 of 2
# Warmup Iteration   1: 568.526 ns/op
# Warmup Iteration   2: 351.947 ns/op
# Warmup Iteration   3: 238.397 ns/op
Iteration   1: 238.407 ns/op
Iteration   2: 238.367 ns/op
Iteration   3: 238.411 ns/op
Iteration   4: 238.258 ns/op
Iteration   5: 238.588 ns/op

# Run progress: 11.77% complete, ETA 00:51:57
# Fork: 2 of 2
# Warmup Iteration   1: 569.993 ns/op
# Warmup Iteration   2: 344.196 ns/op
# Warmup Iteration   3: 240.169 ns/op
Iteration   1: 239.981 ns/op
Iteration   2: 240.138 ns/op
Iteration   3: 240.242 ns/op
Iteration   4: 239.952 ns/op
Iteration   5: 239.708 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  239.205 ±(99.9%) 1.295 ns/op [Average]
  (min, avg, max) = (238.258, 239.205, 240.242), stdev = 0.857
  CI (99.9%): [237.910, 240.500] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 11.81% complete, ETA 00:51:56
# Fork: 1 of 2
# Warmup Iteration   1: 533.426 ns/op
# Warmup Iteration   2: 479.618 ns/op
# Warmup Iteration   3: 340.189 ns/op
Iteration   1: 340.370 ns/op
Iteration   2: 340.221 ns/op
Iteration   3: 340.416 ns/op
Iteration   4: 340.153 ns/op
Iteration   5: 340.169 ns/op

# Run progress: 11.84% complete, ETA 00:51:55
# Fork: 2 of 2
# Warmup Iteration   1: 501.486 ns/op
# Warmup Iteration   2: 456.214 ns/op
# Warmup Iteration   3: 340.327 ns/op
Iteration   1: 340.264 ns/op
Iteration   2: 340.346 ns/op
Iteration   3: 340.237 ns/op
Iteration   4: 340.284 ns/op
Iteration   5: 340.308 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  340.277 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (340.153, 340.277, 340.416), stdev = 0.085
  CI (99.9%): [340.148, 340.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 11.88% complete, ETA 00:51:53
# Fork: 1 of 2
# Warmup Iteration   1: 747.255 ns/op
# Warmup Iteration   2: 399.570 ns/op
# Warmup Iteration   3: 276.371 ns/op
Iteration   1: 273.809 ns/op
Iteration   2: 277.244 ns/op
Iteration   3: 273.802 ns/op
Iteration   4: 279.237 ns/op
Iteration   5: 271.273 ns/op

# Run progress: 11.91% complete, ETA 00:51:52
# Fork: 2 of 2
# Warmup Iteration   1: 831.971 ns/op
# Warmup Iteration   2: 371.613 ns/op
# Warmup Iteration   3: 275.942 ns/op
Iteration   1: 275.021 ns/op
Iteration   2: 275.397 ns/op
Iteration   3: 278.055 ns/op
Iteration   4: 269.531 ns/op
Iteration   5: 269.654 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  274.302 ±(99.9%) 5.111 ns/op [Average]
  (min, avg, max) = (269.531, 274.302, 279.237), stdev = 3.380
  CI (99.9%): [269.191, 279.413] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 11.94% complete, ETA 00:51:51
# Fork: 1 of 2
# Warmup Iteration   1: 449.893 ns/op
# Warmup Iteration   2: 380.787 ns/op
# Warmup Iteration   3: 285.793 ns/op
Iteration   1: 286.049 ns/op
Iteration   2: 285.708 ns/op
Iteration   3: 285.635 ns/op
Iteration   4: 286.098 ns/op
Iteration   5: 285.800 ns/op

# Run progress: 11.98% complete, ETA 00:51:50
# Fork: 2 of 2
# Warmup Iteration   1: 443.051 ns/op
# Warmup Iteration   2: 378.144 ns/op
# Warmup Iteration   3: 282.757 ns/op
Iteration   1: 282.824 ns/op
Iteration   2: 282.931 ns/op
Iteration   3: 282.742 ns/op
Iteration   4: 282.784 ns/op
Iteration   5: 282.945 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.352 ±(99.9%) 2.411 ns/op [Average]
  (min, avg, max) = (282.742, 284.352, 286.098), stdev = 1.595
  CI (99.9%): [281.940, 286.763] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 12.01% complete, ETA 00:51:48
# Fork: 1 of 2
# Warmup Iteration   1: 1115.748 ns/op
# Warmup Iteration   2: 1050.672 ns/op
# Warmup Iteration   3: 674.178 ns/op
Iteration   1: 673.828 ns/op
Iteration   2: 674.050 ns/op
Iteration   3: 674.224 ns/op
Iteration   4: 678.327 ns/op
Iteration   5: 678.109 ns/op

# Run progress: 12.05% complete, ETA 00:51:47
# Fork: 2 of 2
# Warmup Iteration   1: 1235.748 ns/op
# Warmup Iteration   2: 955.716 ns/op
# Warmup Iteration   3: 673.900 ns/op
Iteration   1: 674.177 ns/op
Iteration   2: 674.426 ns/op
Iteration   3: 674.310 ns/op
Iteration   4: 678.344 ns/op
Iteration   5: 678.653 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  675.845 ±(99.9%) 3.285 ns/op [Average]
  (min, avg, max) = (673.828, 675.845, 678.653), stdev = 2.173
  CI (99.9%): [672.560, 679.129] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 12.08% complete, ETA 00:51:46
# Fork: 1 of 2
# Warmup Iteration   1: 18.309 ns/op
# Warmup Iteration   2: 23.546 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.708 ns/op
Iteration   4: 13.868 ns/op
Iteration   5: 13.882 ns/op

# Run progress: 12.12% complete, ETA 00:51:44
# Fork: 2 of 2
# Warmup Iteration   1: 20.524 ns/op
# Warmup Iteration   2: 24.768 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.706 ns/op
Iteration   2: 13.726 ns/op
Iteration   3: 13.724 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.887 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.706, 13.781, 13.887), stdev = 0.086
  CI (99.9%): [13.651, 13.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 12.15% complete, ETA 00:51:43
# Fork: 1 of 2
# Warmup Iteration   1: 294.940 ns/op
# Warmup Iteration   2: 203.520 ns/op
# Warmup Iteration   3: 137.509 ns/op
Iteration   1: 137.563 ns/op
Iteration   2: 137.510 ns/op
Iteration   3: 137.513 ns/op
Iteration   4: 137.539 ns/op
Iteration   5: 137.501 ns/op

# Run progress: 12.19% complete, ETA 00:51:42
# Fork: 2 of 2
# Warmup Iteration   1: 297.786 ns/op
# Warmup Iteration   2: 192.038 ns/op
# Warmup Iteration   3: 137.434 ns/op
Iteration   1: 137.394 ns/op
Iteration   2: 137.507 ns/op
Iteration   3: 137.527 ns/op
Iteration   4: 137.291 ns/op
Iteration   5: 137.275 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.462 ±(99.9%) 0.158 ns/op [Average]
  (min, avg, max) = (137.275, 137.462, 137.563), stdev = 0.104
  CI (99.9%): [137.304, 137.620] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 12.22% complete, ETA 00:51:41
# Fork: 1 of 2
# Warmup Iteration   1: 139.358 ns/op
# Warmup Iteration   2: 141.296 ns/op
# Warmup Iteration   3: 96.292 ns/op
Iteration   1: 96.279 ns/op
Iteration   2: 96.307 ns/op
Iteration   3: 96.334 ns/op
Iteration   4: 96.581 ns/op
Iteration   5: 96.580 ns/op

# Run progress: 12.26% complete, ETA 00:51:39
# Fork: 2 of 2
# Warmup Iteration   1: 140.083 ns/op
# Warmup Iteration   2: 136.353 ns/op
# Warmup Iteration   3: 95.991 ns/op
Iteration   1: 96.021 ns/op
Iteration   2: 96.051 ns/op
Iteration   3: 95.995 ns/op
Iteration   4: 96.189 ns/op
Iteration   5: 96.168 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  96.251 ±(99.9%) 0.317 ns/op [Average]
  (min, avg, max) = (95.995, 96.251, 96.581), stdev = 0.210
  CI (99.9%): [95.933, 96.568] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 12.29% complete, ETA 00:51:38
# Fork: 1 of 2
# Warmup Iteration   1: 417.031 ns/op
# Warmup Iteration   2: 173.038 ns/op
# Warmup Iteration   3: 126.265 ns/op
Iteration   1: 126.535 ns/op
Iteration   2: 126.260 ns/op
Iteration   3: 126.219 ns/op
Iteration   4: 126.818 ns/op
Iteration   5: 126.407 ns/op

# Run progress: 12.33% complete, ETA 00:51:37
# Fork: 2 of 2
# Warmup Iteration   1: 514.839 ns/op
# Warmup Iteration   2: 173.257 ns/op
# Warmup Iteration   3: 123.692 ns/op
Iteration   1: 123.688 ns/op
Iteration   2: 123.643 ns/op
Iteration   3: 123.607 ns/op
Iteration   4: 123.715 ns/op
Iteration   5: 123.747 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  125.064 ±(99.9%) 2.220 ns/op [Average]
  (min, avg, max) = (123.607, 125.064, 126.818), stdev = 1.468
  CI (99.9%): [122.844, 127.284] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 12.36% complete, ETA 00:51:36
# Fork: 1 of 2
# Warmup Iteration   1: 110.321 ns/op
# Warmup Iteration   2: 124.430 ns/op
# Warmup Iteration   3: 76.091 ns/op
Iteration   1: 76.109 ns/op
Iteration   2: 76.105 ns/op
Iteration   3: 76.130 ns/op
Iteration   4: 76.101 ns/op
Iteration   5: 76.097 ns/op

# Run progress: 12.40% complete, ETA 00:51:35
# Fork: 2 of 2
# Warmup Iteration   1: 112.638 ns/op
# Warmup Iteration   2: 111.549 ns/op
# Warmup Iteration   3: 76.110 ns/op
Iteration   1: 76.143 ns/op
Iteration   2: 76.134 ns/op
Iteration   3: 76.118 ns/op
Iteration   4: 76.106 ns/op
Iteration   5: 76.138 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  76.118 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (76.097, 76.118, 76.143), stdev = 0.017
  CI (99.9%): [76.092, 76.143] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 12.43% complete, ETA 00:51:33
# Fork: 1 of 2
# Warmup Iteration   1: 1242.740 ns/op
# Warmup Iteration   2: 863.865 ns/op
# Warmup Iteration   3: 639.036 ns/op
Iteration   1: 639.110 ns/op
Iteration   2: 639.176 ns/op
Iteration   3: 639.301 ns/op
Iteration   4: 643.260 ns/op
Iteration   5: 643.398 ns/op

# Run progress: 12.47% complete, ETA 00:51:32
# Fork: 2 of 2
# Warmup Iteration   1: 1195.034 ns/op
# Warmup Iteration   2: 899.809 ns/op
# Warmup Iteration   3: 639.127 ns/op
Iteration   1: 639.099 ns/op
Iteration   2: 639.009 ns/op
Iteration   3: 639.019 ns/op
Iteration   4: 643.262 ns/op
Iteration   5: 643.397 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  640.803 ±(99.9%) 3.290 ns/op [Average]
  (min, avg, max) = (639.009, 640.803, 643.398), stdev = 2.176
  CI (99.9%): [637.513, 644.093] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 12.50% complete, ETA 00:51:31
# Fork: 1 of 2
# Warmup Iteration   1: 19.546 ns/op
# Warmup Iteration   2: 21.588 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.708 ns/op
Iteration   4: 14.611 ns/op
Iteration   5: 14.616 ns/op

# Run progress: 12.53% complete, ETA 00:51:30
# Fork: 2 of 2
# Warmup Iteration   1: 19.897 ns/op
# Warmup Iteration   2: 22.962 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.721 ns/op
Iteration   3: 13.735 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.873 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.927 ±(99.9%) 0.556 ns/op [Average]
  (min, avg, max) = (13.708, 13.927, 14.616), stdev = 0.367
  CI (99.9%): [13.372, 14.483] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 12.57% complete, ETA 00:51:28
# Fork: 1 of 2
# Warmup Iteration   1: 1343.430 ns/op
# Warmup Iteration   2: 439.468 ns/op
# Warmup Iteration   3: 304.231 ns/op
Iteration   1: 304.047 ns/op
Iteration   2: 304.281 ns/op
Iteration   3: 304.007 ns/op
Iteration   4: 304.415 ns/op
Iteration   5: 304.402 ns/op

# Run progress: 12.60% complete, ETA 00:51:27
# Fork: 2 of 2
# Warmup Iteration   1: 1209.501 ns/op
# Warmup Iteration   2: 442.716 ns/op
# Warmup Iteration   3: 304.255 ns/op
Iteration   1: 304.664 ns/op
Iteration   2: 304.088 ns/op
Iteration   3: 304.376 ns/op
Iteration   4: 305.069 ns/op
Iteration   5: 304.511 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  304.386 ±(99.9%) 0.483 ns/op [Average]
  (min, avg, max) = (304.007, 304.386, 305.069), stdev = 0.320
  CI (99.9%): [303.903, 304.869] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 12.64% complete, ETA 00:51:26
# Fork: 1 of 2
# Warmup Iteration   1: 497.256 ns/op
# Warmup Iteration   2: 450.968 ns/op
# Warmup Iteration   3: 334.526 ns/op
Iteration   1: 334.556 ns/op
Iteration   2: 334.591 ns/op
Iteration   3: 334.540 ns/op
Iteration   4: 334.664 ns/op
Iteration   5: 334.644 ns/op

# Run progress: 12.67% complete, ETA 00:51:24
# Fork: 2 of 2
# Warmup Iteration   1: 504.648 ns/op
# Warmup Iteration   2: 457.500 ns/op
# Warmup Iteration   3: 339.018 ns/op
Iteration   1: 339.181 ns/op
Iteration   2: 339.169 ns/op
Iteration   3: 339.111 ns/op
Iteration   4: 339.074 ns/op
Iteration   5: 339.108 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.864 ±(99.9%) 3.610 ns/op [Average]
  (min, avg, max) = (334.540, 336.864, 339.181), stdev = 2.388
  CI (99.9%): [333.254, 340.474] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 12.71% complete, ETA 00:51:23
# Fork: 1 of 2
# Warmup Iteration   1: 9729.693 ns/op
# Warmup Iteration   2: 533.533 ns/op
# Warmup Iteration   3: 306.026 ns/op
Iteration   1: 306.057 ns/op
Iteration   2: 306.134 ns/op
Iteration   3: 306.108 ns/op
Iteration   4: 305.988 ns/op
Iteration   5: 306.082 ns/op

# Run progress: 12.74% complete, ETA 00:51:22
# Fork: 2 of 2
# Warmup Iteration   1: 5931.959 ns/op
# Warmup Iteration   2: 436.851 ns/op
# Warmup Iteration   3: 314.026 ns/op
Iteration   1: 314.246 ns/op
Iteration   2: 314.211 ns/op
Iteration   3: 314.305 ns/op
Iteration   4: 314.317 ns/op
Iteration   5: 314.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  310.180 ±(99.9%) 6.545 ns/op [Average]
  (min, avg, max) = (305.988, 310.180, 314.355), stdev = 4.329
  CI (99.9%): [303.635, 316.725] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 12.78% complete, ETA 00:51:21
# Fork: 1 of 2
# Warmup Iteration   1: 388.282 ns/op
# Warmup Iteration   2: 343.842 ns/op
# Warmup Iteration   3: 260.338 ns/op
Iteration   1: 260.442 ns/op
Iteration   2: 260.310 ns/op
Iteration   3: 260.420 ns/op
Iteration   4: 260.391 ns/op
Iteration   5: 260.274 ns/op

# Run progress: 12.81% complete, ETA 00:51:19
# Fork: 2 of 2
# Warmup Iteration   1: 396.268 ns/op
# Warmup Iteration   2: 392.587 ns/op
# Warmup Iteration   3: 261.739 ns/op
Iteration   1: 262.152 ns/op
Iteration   2: 261.822 ns/op
Iteration   3: 261.761 ns/op
Iteration   4: 261.462 ns/op
Iteration   5: 261.455 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  261.049 ±(99.9%) 1.127 ns/op [Average]
  (min, avg, max) = (260.274, 261.049, 262.152), stdev = 0.745
  CI (99.9%): [259.922, 262.176] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 12.85% complete, ETA 00:51:18
# Fork: 1 of 2
# Warmup Iteration   1: 1304.225 ns/op
# Warmup Iteration   2: 667.251 ns/op
# Warmup Iteration   3: 430.725 ns/op
Iteration   1: 430.890 ns/op
Iteration   2: 430.896 ns/op
Iteration   3: 430.961 ns/op
Iteration   4: 433.210 ns/op
Iteration   5: 433.159 ns/op

# Run progress: 12.88% complete, ETA 00:51:17
# Fork: 2 of 2
# Warmup Iteration   1: 1009.694 ns/op
# Warmup Iteration   2: 681.775 ns/op
# Warmup Iteration   3: 431.146 ns/op
Iteration   1: 430.913 ns/op
Iteration   2: 430.943 ns/op
Iteration   3: 430.944 ns/op
Iteration   4: 433.461 ns/op
Iteration   5: 433.556 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  431.893 ±(99.9%) 1.899 ns/op [Average]
  (min, avg, max) = (430.890, 431.893, 433.556), stdev = 1.256
  CI (99.9%): [429.995, 433.792] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 12.92% complete, ETA 00:51:16
# Fork: 1 of 2
# Warmup Iteration   1: 19.073 ns/op
# Warmup Iteration   2: 24.047 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.872 ns/op

# Run progress: 12.95% complete, ETA 00:51:14
# Fork: 2 of 2
# Warmup Iteration   1: 21.207 ns/op
# Warmup Iteration   2: 28.062 ns/op
# Warmup Iteration   3: 13.726 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.728 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.872 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (13.711, 13.781, 13.886), stdev = 0.082
  CI (99.9%): [13.657, 13.905] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 12.99% complete, ETA 00:51:13
# Fork: 1 of 2
# Warmup Iteration   1: 581.915 ns/op
# Warmup Iteration   2: 430.917 ns/op
# Warmup Iteration   3: 301.636 ns/op
Iteration   1: 305.995 ns/op
Iteration   2: 309.043 ns/op
Iteration   3: 301.807 ns/op
Iteration   4: 302.436 ns/op
Iteration   5: 306.469 ns/op

# Run progress: 13.02% complete, ETA 00:51:12
# Fork: 2 of 2
# Warmup Iteration   1: 489.681 ns/op
# Warmup Iteration   2: 391.525 ns/op
# Warmup Iteration   3: 298.204 ns/op
Iteration   1: 294.313 ns/op
Iteration   2: 297.956 ns/op
Iteration   3: 294.406 ns/op
Iteration   4: 292.089 ns/op
Iteration   5: 298.439 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  300.295 ±(99.9%) 8.739 ns/op [Average]
  (min, avg, max) = (292.089, 300.295, 309.043), stdev = 5.780
  CI (99.9%): [291.556, 309.034] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 13.06% complete, ETA 00:51:10
# Fork: 1 of 2
# Warmup Iteration   1: 505.656 ns/op
# Warmup Iteration   2: 457.007 ns/op
# Warmup Iteration   3: 341.903 ns/op
Iteration   1: 342.066 ns/op
Iteration   2: 342.043 ns/op
Iteration   3: 342.030 ns/op
Iteration   4: 341.718 ns/op
Iteration   5: 341.467 ns/op

# Run progress: 13.09% complete, ETA 00:51:09
# Fork: 2 of 2
# Warmup Iteration   1: 502.283 ns/op
# Warmup Iteration   2: 450.064 ns/op
# Warmup Iteration   3: 338.500 ns/op
Iteration   1: 338.574 ns/op
Iteration   2: 338.416 ns/op
Iteration   3: 338.480 ns/op
Iteration   4: 338.689 ns/op
Iteration   5: 338.755 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  340.224 ±(99.9%) 2.633 ns/op [Average]
  (min, avg, max) = (338.416, 340.224, 342.066), stdev = 1.741
  CI (99.9%): [337.591, 342.856] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 13.13% complete, ETA 00:51:08
# Fork: 1 of 2
# Warmup Iteration   1: 599.954 ns/op
# Warmup Iteration   2: 294.942 ns/op
# Warmup Iteration   3: 196.866 ns/op
Iteration   1: 196.897 ns/op
Iteration   2: 196.771 ns/op
Iteration   3: 196.740 ns/op
Iteration   4: 196.823 ns/op
Iteration   5: 196.827 ns/op

# Run progress: 13.16% complete, ETA 00:51:07
# Fork: 2 of 2
# Warmup Iteration   1: 583.747 ns/op
# Warmup Iteration   2: 268.597 ns/op
# Warmup Iteration   3: 195.114 ns/op
Iteration   1: 195.180 ns/op
Iteration   2: 195.104 ns/op
Iteration   3: 195.526 ns/op
Iteration   4: 195.049 ns/op
Iteration   5: 194.932 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  195.985 ±(99.9%) 1.338 ns/op [Average]
  (min, avg, max) = (194.932, 195.985, 196.897), stdev = 0.885
  CI (99.9%): [194.647, 197.323] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 13.19% complete, ETA 00:51:06
# Fork: 1 of 2
# Warmup Iteration   1: 431.388 ns/op
# Warmup Iteration   2: 373.544 ns/op
# Warmup Iteration   3: 284.324 ns/op
Iteration   1: 284.476 ns/op
Iteration   2: 284.378 ns/op
Iteration   3: 284.375 ns/op
Iteration   4: 285.085 ns/op
Iteration   5: 285.155 ns/op

# Run progress: 13.23% complete, ETA 00:51:04
# Fork: 2 of 2
# Warmup Iteration   1: 414.383 ns/op
# Warmup Iteration   2: 375.185 ns/op
# Warmup Iteration   3: 279.166 ns/op
Iteration   1: 279.279 ns/op
Iteration   2: 279.351 ns/op
Iteration   3: 279.203 ns/op
Iteration   4: 279.867 ns/op
Iteration   5: 279.848 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  282.102 ±(99.9%) 4.162 ns/op [Average]
  (min, avg, max) = (279.203, 282.102, 285.155), stdev = 2.753
  CI (99.9%): [277.939, 286.264] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 13.26% complete, ETA 00:51:03
# Fork: 1 of 2
# Warmup Iteration   1: 1229.426 ns/op
# Warmup Iteration   2: 1096.194 ns/op
# Warmup Iteration   3: 748.880 ns/op
Iteration   1: 749.132 ns/op
Iteration   2: 748.899 ns/op
Iteration   3: 748.977 ns/op
Iteration   4: 753.788 ns/op
Iteration   5: 753.724 ns/op

# Run progress: 13.30% complete, ETA 00:51:02
# Fork: 2 of 2
# Warmup Iteration   1: 1342.535 ns/op
# Warmup Iteration   2: 1108.563 ns/op
# Warmup Iteration   3: 748.994 ns/op
Iteration   1: 749.071 ns/op
Iteration   2: 748.992 ns/op
Iteration   3: 748.847 ns/op
Iteration   4: 754.841 ns/op
Iteration   5: 753.811 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  751.008 ±(99.9%) 3.976 ns/op [Average]
  (min, avg, max) = (748.847, 751.008, 754.841), stdev = 2.630
  CI (99.9%): [747.033, 754.984] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 13.33% complete, ETA 00:51:01
# Fork: 1 of 2
# Warmup Iteration   1: 19.523 ns/op
# Warmup Iteration   2: 24.451 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.746 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.902 ns/op

# Run progress: 13.37% complete, ETA 00:50:59
# Fork: 2 of 2
# Warmup Iteration   1: 18.785 ns/op
# Warmup Iteration   2: 25.125 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.708 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.730 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.889 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.790 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.708, 13.790, 13.902), stdev = 0.087
  CI (99.9%): [13.658, 13.921] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 13.40% complete, ETA 00:50:58
# Fork: 1 of 2
# Warmup Iteration   1: 627.188 ns/op
# Warmup Iteration   2: 411.542 ns/op
# Warmup Iteration   3: 294.330 ns/op
Iteration   1: 292.191 ns/op
Iteration   2: 294.155 ns/op
Iteration   3: 293.872 ns/op
Iteration   4: 294.786 ns/op
Iteration   5: 298.164 ns/op

# Run progress: 13.44% complete, ETA 00:50:57
# Fork: 2 of 2
# Warmup Iteration   1: 635.827 ns/op
# Warmup Iteration   2: 416.217 ns/op
# Warmup Iteration   3: 305.927 ns/op
Iteration   1: 307.568 ns/op
Iteration   2: 304.019 ns/op
Iteration   3: 307.467 ns/op
Iteration   4: 303.489 ns/op
Iteration   5: 301.550 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  299.726 ±(99.9%) 8.819 ns/op [Average]
  (min, avg, max) = (292.191, 299.726, 307.568), stdev = 5.833
  CI (99.9%): [290.907, 308.545] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 13.47% complete, ETA 00:50:55
# Fork: 1 of 2
# Warmup Iteration   1: 553.682 ns/op
# Warmup Iteration   2: 483.251 ns/op
# Warmup Iteration   3: 366.497 ns/op
Iteration   1: 364.112 ns/op
Iteration   2: 366.276 ns/op
Iteration   3: 365.724 ns/op
Iteration   4: 367.121 ns/op
Iteration   5: 366.162 ns/op

# Run progress: 13.51% complete, ETA 00:50:54
# Fork: 2 of 2
# Warmup Iteration   1: 617.301 ns/op
# Warmup Iteration   2: 553.945 ns/op
# Warmup Iteration   3: 367.026 ns/op
Iteration   1: 364.626 ns/op
Iteration   2: 366.387 ns/op
Iteration   3: 364.755 ns/op
Iteration   4: 369.433 ns/op
Iteration   5: 365.509 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  366.011 ±(99.9%) 2.288 ns/op [Average]
  (min, avg, max) = (364.112, 366.011, 369.433), stdev = 1.513
  CI (99.9%): [363.723, 368.299] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 13.54% complete, ETA 00:50:53
# Fork: 1 of 2
# Warmup Iteration   1: 2484.651 ns/op
# Warmup Iteration   2: 314.862 ns/op
# Warmup Iteration   3: 236.338 ns/op
Iteration   1: 236.768 ns/op
Iteration   2: 232.623 ns/op
Iteration   3: 234.366 ns/op
Iteration   4: 233.796 ns/op
Iteration   5: 234.423 ns/op

# Run progress: 13.58% complete, ETA 00:50:52
# Fork: 2 of 2
# Warmup Iteration   1: 1678.892 ns/op
# Warmup Iteration   2: 329.601 ns/op
# Warmup Iteration   3: 229.671 ns/op
Iteration   1: 229.420 ns/op
Iteration   2: 229.893 ns/op
Iteration   3: 229.573 ns/op
Iteration   4: 230.709 ns/op
Iteration   5: 229.344 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  232.091 ±(99.9%) 4.014 ns/op [Average]
  (min, avg, max) = (229.344, 232.091, 236.768), stdev = 2.655
  CI (99.9%): [228.077, 236.105] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 13.61% complete, ETA 00:50:50
# Fork: 1 of 2
# Warmup Iteration   1: 458.656 ns/op
# Warmup Iteration   2: 379.522 ns/op
# Warmup Iteration   3: 280.964 ns/op
Iteration   1: 280.965 ns/op
Iteration   2: 280.991 ns/op
Iteration   3: 280.952 ns/op
Iteration   4: 280.892 ns/op
Iteration   5: 280.935 ns/op

# Run progress: 13.65% complete, ETA 00:50:49
# Fork: 2 of 2
# Warmup Iteration   1: 444.209 ns/op
# Warmup Iteration   2: 372.887 ns/op
# Warmup Iteration   3: 281.718 ns/op
Iteration   1: 282.035 ns/op
Iteration   2: 281.828 ns/op
Iteration   3: 283.747 ns/op
Iteration   4: 281.645 ns/op
Iteration   5: 282.845 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  281.683 ±(99.9%) 1.467 ns/op [Average]
  (min, avg, max) = (280.892, 281.683, 283.747), stdev = 0.970
  CI (99.9%): [280.217, 283.150] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 13.68% complete, ETA 00:50:48
# Fork: 1 of 2
# Warmup Iteration   1: 3146.886 ns/op
# Warmup Iteration   2: 2260.058 ns/op
# Warmup Iteration   3: 1566.333 ns/op
Iteration   1: 1573.608 ns/op
Iteration   2: 1576.218 ns/op
Iteration   3: 1566.864 ns/op
Iteration   4: 1573.757 ns/op
Iteration   5: 1575.853 ns/op

# Run progress: 13.72% complete, ETA 00:50:47
# Fork: 2 of 2
# Warmup Iteration   1: 3017.831 ns/op
# Warmup Iteration   2: 2226.624 ns/op
# Warmup Iteration   3: 1551.172 ns/op
Iteration   1: 1558.545 ns/op
Iteration   2: 1551.217 ns/op
Iteration   3: 1555.383 ns/op
Iteration   4: 1557.828 ns/op
Iteration   5: 1559.268 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1564.854 ±(99.9%) 14.308 ns/op [Average]
  (min, avg, max) = (1551.217, 1564.854, 1576.218), stdev = 9.464
  CI (99.9%): [1550.546, 1579.162] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 13.75% complete, ETA 00:50:45
# Fork: 1 of 2
# Warmup Iteration   1: 19.603 ns/op
# Warmup Iteration   2: 25.532 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.876 ns/op

# Run progress: 13.78% complete, ETA 00:50:44
# Fork: 2 of 2
# Warmup Iteration   1: 20.145 ns/op
# Warmup Iteration   2: 24.627 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.708 ns/op
Iteration   4: 15.245 ns/op
Iteration   5: 15.246 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.054 ±(99.9%) 0.955 ns/op [Average]
  (min, avg, max) = (13.708, 14.054, 15.246), stdev = 0.631
  CI (99.9%): [13.099, 15.009] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 13.82% complete, ETA 00:50:43
# Fork: 1 of 2
# Warmup Iteration   1: 83.049 ns/op
# Warmup Iteration   2: 90.138 ns/op
# Warmup Iteration   3: 57.957 ns/op
Iteration   1: 57.974 ns/op
Iteration   2: 57.967 ns/op
Iteration   3: 57.933 ns/op
Iteration   4: 57.735 ns/op
Iteration   5: 57.743 ns/op

# Run progress: 13.85% complete, ETA 00:50:41
# Fork: 2 of 2
# Warmup Iteration   1: 85.872 ns/op
# Warmup Iteration   2: 85.933 ns/op
# Warmup Iteration   3: 57.823 ns/op
Iteration   1: 57.839 ns/op
Iteration   2: 57.859 ns/op
Iteration   3: 57.857 ns/op
Iteration   4: 57.632 ns/op
Iteration   5: 57.620 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  57.816 ±(99.9%) 0.195 ns/op [Average]
  (min, avg, max) = (57.620, 57.816, 57.974), stdev = 0.129
  CI (99.9%): [57.621, 58.011] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 13.89% complete, ETA 00:50:40
# Fork: 1 of 2
# Warmup Iteration   1: 65.501 ns/op
# Warmup Iteration   2: 70.539 ns/op
# Warmup Iteration   3: 45.198 ns/op
Iteration   1: 45.204 ns/op
Iteration   2: 45.218 ns/op
Iteration   3: 45.254 ns/op
Iteration   4: 45.294 ns/op
Iteration   5: 45.277 ns/op

# Run progress: 13.92% complete, ETA 00:50:39
# Fork: 2 of 2
# Warmup Iteration   1: 65.079 ns/op
# Warmup Iteration   2: 68.457 ns/op
# Warmup Iteration   3: 45.208 ns/op
Iteration   1: 45.218 ns/op
Iteration   2: 45.240 ns/op
Iteration   3: 45.182 ns/op
Iteration   4: 45.277 ns/op
Iteration   5: 45.306 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.247 ±(99.9%) 0.062 ns/op [Average]
  (min, avg, max) = (45.182, 45.247, 45.306), stdev = 0.041
  CI (99.9%): [45.185, 45.309] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 13.96% complete, ETA 00:50:38
# Fork: 1 of 2
# Warmup Iteration   1: 252.798 ns/op
# Warmup Iteration   2: 101.656 ns/op
# Warmup Iteration   3: 68.881 ns/op
Iteration   1: 68.871 ns/op
Iteration   2: 68.836 ns/op
Iteration   3: 68.879 ns/op
Iteration   4: 68.810 ns/op
Iteration   5: 68.848 ns/op

# Run progress: 13.99% complete, ETA 00:50:36
# Fork: 2 of 2
# Warmup Iteration   1: 715.569 ns/op
# Warmup Iteration   2: 105.030 ns/op
# Warmup Iteration   3: 71.891 ns/op
Iteration   1: 71.876 ns/op
Iteration   2: 71.918 ns/op
Iteration   3: 71.897 ns/op
Iteration   4: 71.980 ns/op
Iteration   5: 72.012 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  70.393 ±(99.9%) 2.461 ns/op [Average]
  (min, avg, max) = (68.810, 70.393, 72.012), stdev = 1.628
  CI (99.9%): [67.931, 72.854] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 14.03% complete, ETA 00:50:35
# Fork: 1 of 2
# Warmup Iteration   1: 69.891 ns/op
# Warmup Iteration   2: 82.421 ns/op
# Warmup Iteration   3: 47.533 ns/op
Iteration   1: 47.536 ns/op
Iteration   2: 47.570 ns/op
Iteration   3: 47.579 ns/op
Iteration   4: 47.595 ns/op
Iteration   5: 47.540 ns/op

# Run progress: 14.06% complete, ETA 00:50:34
# Fork: 2 of 2
# Warmup Iteration   1: 76.374 ns/op
# Warmup Iteration   2: 74.008 ns/op
# Warmup Iteration   3: 47.552 ns/op
Iteration   1: 47.547 ns/op
Iteration   2: 47.511 ns/op
Iteration   3: 47.517 ns/op
Iteration   4: 47.571 ns/op
Iteration   5: 47.589 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.555 ±(99.9%) 0.045 ns/op [Average]
  (min, avg, max) = (47.511, 47.555, 47.595), stdev = 0.030
  CI (99.9%): [47.510, 47.600] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 14.10% complete, ETA 00:50:33
# Fork: 1 of 2
# Warmup Iteration   1: 177.039 ns/op
# Warmup Iteration   2: 170.428 ns/op
# Warmup Iteration   3: 98.334 ns/op
Iteration   1: 98.229 ns/op
Iteration   2: 98.322 ns/op
Iteration   3: 98.366 ns/op
Iteration   4: 105.224 ns/op
Iteration   5: 105.181 ns/op

# Run progress: 14.13% complete, ETA 00:50:32
# Fork: 2 of 2
# Warmup Iteration   1: 175.563 ns/op
# Warmup Iteration   2: 168.860 ns/op
# Warmup Iteration   3: 98.548 ns/op
Iteration   1: 98.589 ns/op
Iteration   2: 98.588 ns/op
Iteration   3: 98.570 ns/op
Iteration   4: 105.149 ns/op
Iteration   5: 105.163 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.138 ±(99.9%) 5.261 ns/op [Average]
  (min, avg, max) = (98.229, 101.138, 105.224), stdev = 3.480
  CI (99.9%): [95.877, 106.400] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 14.17% complete, ETA 00:50:30
# Fork: 1 of 2
# Warmup Iteration   1: 19.796 ns/op
# Warmup Iteration   2: 23.774 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.721 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.868 ns/op

# Run progress: 14.20% complete, ETA 00:50:29
# Fork: 2 of 2
# Warmup Iteration   1: 20.094 ns/op
# Warmup Iteration   2: 23.862 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (13.711, 13.781, 13.884), stdev = 0.084
  CI (99.9%): [13.654, 13.907] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 14.24% complete, ETA 00:50:28
# Fork: 1 of 2
# Warmup Iteration   1: 1191.727 ns/op
# Warmup Iteration   2: 388.329 ns/op
# Warmup Iteration   3: 290.845 ns/op
Iteration   1: 295.142 ns/op
Iteration   2: 293.613 ns/op
Iteration   3: 293.554 ns/op
Iteration   4: 293.389 ns/op
Iteration   5: 293.599 ns/op

# Run progress: 14.27% complete, ETA 00:50:27
# Fork: 2 of 2
# Warmup Iteration   1: 1172.229 ns/op
# Warmup Iteration   2: 452.435 ns/op
# Warmup Iteration   3: 308.754 ns/op
Iteration   1: 308.589 ns/op
Iteration   2: 307.846 ns/op
Iteration   3: 308.193 ns/op
Iteration   4: 307.797 ns/op
Iteration   5: 309.188 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  301.091 ±(99.9%) 11.562 ns/op [Average]
  (min, avg, max) = (293.389, 301.091, 309.188), stdev = 7.648
  CI (99.9%): [289.529, 312.653] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 14.31% complete, ETA 00:50:25
# Fork: 1 of 2
# Warmup Iteration   1: 315.240 ns/op
# Warmup Iteration   2: 371.327 ns/op
# Warmup Iteration   3: 222.986 ns/op
Iteration   1: 223.066 ns/op
Iteration   2: 223.585 ns/op
Iteration   3: 222.143 ns/op
Iteration   4: 223.481 ns/op
Iteration   5: 222.624 ns/op

# Run progress: 14.34% complete, ETA 00:50:24
# Fork: 2 of 2
# Warmup Iteration   1: 326.019 ns/op
# Warmup Iteration   2: 307.808 ns/op
# Warmup Iteration   3: 226.057 ns/op
Iteration   1: 225.465 ns/op
Iteration   2: 225.507 ns/op
Iteration   3: 225.369 ns/op
Iteration   4: 228.249 ns/op
Iteration   5: 225.624 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  224.511 ±(99.9%) 2.807 ns/op [Average]
  (min, avg, max) = (222.143, 224.511, 228.249), stdev = 1.857
  CI (99.9%): [221.704, 227.318] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 14.37% complete, ETA 00:50:23
# Fork: 1 of 2
# Warmup Iteration   1: 11020.794 ns/op
# Warmup Iteration   2: 517.753 ns/op
# Warmup Iteration   3: 323.989 ns/op
Iteration   1: 324.066 ns/op
Iteration   2: 324.197 ns/op
Iteration   3: 322.191 ns/op
Iteration   4: 324.402 ns/op
Iteration   5: 324.061 ns/op

# Run progress: 14.41% complete, ETA 00:50:22
# Fork: 2 of 2
# Warmup Iteration   1: 10585.624 ns/op
# Warmup Iteration   2: 488.176 ns/op
# Warmup Iteration   3: 325.018 ns/op
Iteration   1: 324.610 ns/op
Iteration   2: 324.841 ns/op
Iteration   3: 325.255 ns/op
Iteration   4: 324.166 ns/op
Iteration   5: 323.532 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  324.132 ±(99.9%) 1.256 ns/op [Average]
  (min, avg, max) = (322.191, 324.132, 325.255), stdev = 0.831
  CI (99.9%): [322.876, 325.388] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 14.44% complete, ETA 00:50:20
# Fork: 1 of 2
# Warmup Iteration   1: 333.344 ns/op
# Warmup Iteration   2: 247.691 ns/op
# Warmup Iteration   3: 184.532 ns/op
Iteration   1: 186.047 ns/op
Iteration   2: 182.812 ns/op
Iteration   3: 184.870 ns/op
Iteration   4: 185.303 ns/op
Iteration   5: 183.034 ns/op

# Run progress: 14.48% complete, ETA 00:50:19
# Fork: 2 of 2
# Warmup Iteration   1: 343.011 ns/op
# Warmup Iteration   2: 247.593 ns/op
# Warmup Iteration   3: 181.052 ns/op
Iteration   1: 181.107 ns/op
Iteration   2: 181.130 ns/op
Iteration   3: 181.145 ns/op
Iteration   4: 181.712 ns/op
Iteration   5: 181.656 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  182.882 ±(99.9%) 2.849 ns/op [Average]
  (min, avg, max) = (181.107, 182.882, 186.047), stdev = 1.885
  CI (99.9%): [180.032, 185.731] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 14.51% complete, ETA 00:50:18
# Fork: 1 of 2
# Warmup Iteration   1: 1544.230 ns/op
# Warmup Iteration   2: 903.532 ns/op
# Warmup Iteration   3: 642.635 ns/op
Iteration   1: 648.886 ns/op
Iteration   2: 642.396 ns/op
Iteration   3: 645.836 ns/op
Iteration   4: 644.889 ns/op
Iteration   5: 649.742 ns/op

# Run progress: 14.55% complete, ETA 00:50:17
# Fork: 2 of 2
# Warmup Iteration   1: 2391.524 ns/op
# Warmup Iteration   2: 971.831 ns/op
# Warmup Iteration   3: 656.027 ns/op
Iteration   1: 656.273 ns/op
Iteration   2: 657.464 ns/op
Iteration   3: 657.288 ns/op
Iteration   4: 661.022 ns/op
Iteration   5: 660.288 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  652.408 ±(99.9%) 10.329 ns/op [Average]
  (min, avg, max) = (642.396, 652.408, 661.022), stdev = 6.832
  CI (99.9%): [642.079, 662.737] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 14.58% complete, ETA 00:50:16
# Fork: 1 of 2
# Warmup Iteration   1: 19.334 ns/op
# Warmup Iteration   2: 25.151 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.705 ns/op
Iteration   2: 13.731 ns/op
Iteration   3: 13.737 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.879 ns/op

# Run progress: 14.62% complete, ETA 00:50:14
# Fork: 2 of 2
# Warmup Iteration   1: 19.834 ns/op
# Warmup Iteration   2: 21.040 ns/op
# Warmup Iteration   3: 13.718 ns/op
Iteration   1: 13.706 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.719 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (13.705, 13.783, 13.884), stdev = 0.085
  CI (99.9%): [13.655, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 14.65% complete, ETA 00:50:13
# Fork: 1 of 2
# Warmup Iteration   1: 989.613 ns/op
# Warmup Iteration   2: 438.212 ns/op
# Warmup Iteration   3: 304.185 ns/op
Iteration   1: 305.039 ns/op
Iteration   2: 305.409 ns/op
Iteration   3: 305.178 ns/op
Iteration   4: 304.875 ns/op
Iteration   5: 304.711 ns/op

# Run progress: 14.69% complete, ETA 00:50:12
# Fork: 2 of 2
# Warmup Iteration   1: 990.867 ns/op
# Warmup Iteration   2: 424.120 ns/op
# Warmup Iteration   3: 309.125 ns/op
Iteration   1: 309.072 ns/op
Iteration   2: 309.175 ns/op
Iteration   3: 309.082 ns/op
Iteration   4: 309.116 ns/op
Iteration   5: 309.188 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  307.085 ±(99.9%) 3.266 ns/op [Average]
  (min, avg, max) = (304.711, 307.085, 309.188), stdev = 2.160
  CI (99.9%): [303.818, 310.351] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 14.72% complete, ETA 00:50:11
# Fork: 1 of 2
# Warmup Iteration   1: 724.452 ns/op
# Warmup Iteration   2: 587.580 ns/op
# Warmup Iteration   3: 450.410 ns/op
Iteration   1: 450.574 ns/op
Iteration   2: 450.591 ns/op
Iteration   3: 451.081 ns/op
Iteration   4: 450.587 ns/op
Iteration   5: 450.505 ns/op

# Run progress: 14.76% complete, ETA 00:50:09
# Fork: 2 of 2
# Warmup Iteration   1: 677.184 ns/op
# Warmup Iteration   2: 634.352 ns/op
# Warmup Iteration   3: 464.753 ns/op
Iteration   1: 465.865 ns/op
Iteration   2: 464.868 ns/op
Iteration   3: 464.913 ns/op
Iteration   4: 465.412 ns/op
Iteration   5: 465.358 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  457.975 ±(99.9%) 11.656 ns/op [Average]
  (min, avg, max) = (450.505, 457.975, 465.865), stdev = 7.710
  CI (99.9%): [446.319, 469.631] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 14.79% complete, ETA 00:50:08
# Fork: 1 of 2
# Warmup Iteration   1: 26116.747 ns/op
# Warmup Iteration   2: 609.465 ns/op
# Warmup Iteration   3: 361.405 ns/op
Iteration   1: 330.974 ns/op
Iteration   2: 330.446 ns/op
Iteration   3: 330.978 ns/op
Iteration   4: 330.592 ns/op
Iteration   5: 330.546 ns/op

# Run progress: 14.83% complete, ETA 00:50:07
# Fork: 2 of 2
# Warmup Iteration   1: 20295.625 ns/op
# Warmup Iteration   2: 494.357 ns/op
# Warmup Iteration   3: 364.932 ns/op
Iteration   1: 332.598 ns/op
Iteration   2: 332.593 ns/op
Iteration   3: 332.517 ns/op
Iteration   4: 332.272 ns/op
Iteration   5: 332.286 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  331.580 ±(99.9%) 1.423 ns/op [Average]
  (min, avg, max) = (330.446, 331.580, 332.598), stdev = 0.941
  CI (99.9%): [330.157, 333.003] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 14.86% complete, ETA 00:50:05
# Fork: 1 of 2
# Warmup Iteration   1: 491.277 ns/op
# Warmup Iteration   2: 436.336 ns/op
# Warmup Iteration   3: 326.655 ns/op
Iteration   1: 326.692 ns/op
Iteration   2: 326.785 ns/op
Iteration   3: 326.599 ns/op
Iteration   4: 326.579 ns/op
Iteration   5: 326.900 ns/op

# Run progress: 14.90% complete, ETA 00:50:04
# Fork: 2 of 2
# Warmup Iteration   1: 478.081 ns/op
# Warmup Iteration   2: 428.868 ns/op
# Warmup Iteration   3: 326.550 ns/op
Iteration   1: 326.673 ns/op
Iteration   2: 326.390 ns/op
Iteration   3: 326.283 ns/op
Iteration   4: 327.543 ns/op
Iteration   5: 327.524 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  326.797 ±(99.9%) 0.645 ns/op [Average]
  (min, avg, max) = (326.283, 326.797, 327.543), stdev = 0.427
  CI (99.9%): [326.152, 327.442] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 14.93% complete, ETA 00:50:03
# Fork: 1 of 2
# Warmup Iteration   1: 1163.944 ns/op
# Warmup Iteration   2: 696.539 ns/op
# Warmup Iteration   3: 462.480 ns/op
Iteration   1: 462.594 ns/op
Iteration   2: 462.439 ns/op
Iteration   3: 462.709 ns/op
Iteration   4: 465.633 ns/op
Iteration   5: 465.804 ns/op

# Run progress: 14.97% complete, ETA 00:50:02
# Fork: 2 of 2
# Warmup Iteration   1: 1184.813 ns/op
# Warmup Iteration   2: 700.916 ns/op
# Warmup Iteration   3: 462.749 ns/op
Iteration   1: 462.942 ns/op
Iteration   2: 462.974 ns/op
Iteration   3: 462.853 ns/op
Iteration   4: 465.724 ns/op
Iteration   5: 465.661 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  463.933 ±(99.9%) 2.319 ns/op [Average]
  (min, avg, max) = (462.439, 463.933, 465.804), stdev = 1.534
  CI (99.9%): [461.614, 466.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 15.00% complete, ETA 00:50:00
# Fork: 1 of 2
# Warmup Iteration   1: 20.129 ns/op
# Warmup Iteration   2: 20.594 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.732 ns/op
Iteration   4: 15.250 ns/op
Iteration   5: 15.248 ns/op

# Run progress: 15.03% complete, ETA 00:49:59
# Fork: 2 of 2
# Warmup Iteration   1: 22.345 ns/op
# Warmup Iteration   2: 29.166 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 14.616 ns/op
Iteration   5: 14.618 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.204 ±(99.9%) 1.000 ns/op [Average]
  (min, avg, max) = (13.713, 14.204, 15.250), stdev = 0.662
  CI (99.9%): [13.204, 15.205] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 15.07% complete, ETA 00:49:58
# Fork: 1 of 2
# Warmup Iteration   1: 586.520 ns/op
# Warmup Iteration   2: 424.882 ns/op
# Warmup Iteration   3: 297.349 ns/op
Iteration   1: 297.308 ns/op
Iteration   2: 297.181 ns/op
Iteration   3: 297.362 ns/op
Iteration   4: 297.297 ns/op
Iteration   5: 298.230 ns/op

# Run progress: 15.10% complete, ETA 00:49:57
# Fork: 2 of 2
# Warmup Iteration   1: 581.784 ns/op
# Warmup Iteration   2: 424.741 ns/op
# Warmup Iteration   3: 298.892 ns/op
Iteration   1: 298.986 ns/op
Iteration   2: 299.903 ns/op
Iteration   3: 298.864 ns/op
Iteration   4: 299.654 ns/op
Iteration   5: 299.198 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  298.398 ±(99.9%) 1.596 ns/op [Average]
  (min, avg, max) = (297.181, 298.398, 299.903), stdev = 1.055
  CI (99.9%): [296.802, 299.994] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 15.14% complete, ETA 00:49:55
# Fork: 1 of 2
# Warmup Iteration   1: 563.550 ns/op
# Warmup Iteration   2: 486.989 ns/op
# Warmup Iteration   3: 366.048 ns/op
Iteration   1: 366.018 ns/op
Iteration   2: 366.255 ns/op
Iteration   3: 366.060 ns/op
Iteration   4: 367.168 ns/op
Iteration   5: 367.022 ns/op

# Run progress: 15.17% complete, ETA 00:49:54
# Fork: 2 of 2
# Warmup Iteration   1: 548.469 ns/op
# Warmup Iteration   2: 480.586 ns/op
# Warmup Iteration   3: 362.563 ns/op
Iteration   1: 362.851 ns/op
Iteration   2: 362.594 ns/op
Iteration   3: 362.524 ns/op
Iteration   4: 364.223 ns/op
Iteration   5: 364.080 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  364.879 ±(99.9%) 2.777 ns/op [Average]
  (min, avg, max) = (362.524, 364.879, 367.168), stdev = 1.837
  CI (99.9%): [362.103, 367.656] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 15.21% complete, ETA 00:49:53
# Fork: 1 of 2
# Warmup Iteration   1: 587.532 ns/op
# Warmup Iteration   2: 272.174 ns/op
# Warmup Iteration   3: 203.293 ns/op
Iteration   1: 203.533 ns/op
Iteration   2: 203.454 ns/op
Iteration   3: 203.482 ns/op
Iteration   4: 204.096 ns/op
Iteration   5: 204.162 ns/op

# Run progress: 15.24% complete, ETA 00:49:52
# Fork: 2 of 2
# Warmup Iteration   1: 611.601 ns/op
# Warmup Iteration   2: 278.536 ns/op
# Warmup Iteration   3: 204.231 ns/op
Iteration   1: 204.376 ns/op
Iteration   2: 204.325 ns/op
Iteration   3: 204.406 ns/op
Iteration   4: 204.186 ns/op
Iteration   5: 204.252 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  204.027 ±(99.9%) 0.580 ns/op [Average]
  (min, avg, max) = (203.454, 204.027, 204.406), stdev = 0.383
  CI (99.9%): [203.447, 204.607] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 15.28% complete, ETA 00:49:50
# Fork: 1 of 2
# Warmup Iteration   1: 427.771 ns/op
# Warmup Iteration   2: 439.199 ns/op
# Warmup Iteration   3: 286.488 ns/op
Iteration   1: 287.067 ns/op
Iteration   2: 286.123 ns/op
Iteration   3: 286.642 ns/op
Iteration   4: 286.493 ns/op
Iteration   5: 287.050 ns/op

# Run progress: 15.31% complete, ETA 00:49:49
# Fork: 2 of 2
# Warmup Iteration   1: 426.665 ns/op
# Warmup Iteration   2: 428.283 ns/op
# Warmup Iteration   3: 292.602 ns/op
Iteration   1: 291.946 ns/op
Iteration   2: 290.325 ns/op
Iteration   3: 290.260 ns/op
Iteration   4: 290.188 ns/op
Iteration   5: 291.235 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  288.733 ±(99.9%) 3.395 ns/op [Average]
  (min, avg, max) = (286.123, 288.733, 291.946), stdev = 2.245
  CI (99.9%): [285.338, 292.128] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 15.35% complete, ETA 00:49:48
# Fork: 1 of 2
# Warmup Iteration   1: 2151.946 ns/op
# Warmup Iteration   2: 1076.487 ns/op
# Warmup Iteration   3: 778.388 ns/op
Iteration   1: 778.740 ns/op
Iteration   2: 778.778 ns/op
Iteration   3: 778.566 ns/op
Iteration   4: 780.790 ns/op
Iteration   5: 780.469 ns/op

# Run progress: 15.38% complete, ETA 00:49:47
# Fork: 2 of 2
# Warmup Iteration   1: 2052.421 ns/op
# Warmup Iteration   2: 1085.048 ns/op
# Warmup Iteration   3: 786.968 ns/op
Iteration   1: 778.131 ns/op
Iteration   2: 778.145 ns/op
Iteration   3: 778.023 ns/op
Iteration   4: 781.826 ns/op
Iteration   5: 782.337 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  779.581 ±(99.9%) 2.462 ns/op [Average]
  (min, avg, max) = (778.023, 779.581, 782.337), stdev = 1.628
  CI (99.9%): [777.119, 782.042] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 15.42% complete, ETA 00:49:45
# Fork: 1 of 2
# Warmup Iteration   1: 20.124 ns/op
# Warmup Iteration   2: 23.413 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.709 ns/op
Iteration   2: 13.724 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.888 ns/op
Iteration   5: 13.871 ns/op

# Run progress: 15.45% complete, ETA 00:49:44
# Fork: 2 of 2
# Warmup Iteration   1: 19.674 ns/op
# Warmup Iteration   2: 23.138 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.725 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.871 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (13.709, 13.782, 13.888), stdev = 0.082
  CI (99.9%): [13.657, 13.906] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 15.49% complete, ETA 00:49:43
# Fork: 1 of 2
# Warmup Iteration   1: 572.295 ns/op
# Warmup Iteration   2: 334.383 ns/op
# Warmup Iteration   3: 243.957 ns/op
Iteration   1: 244.215 ns/op
Iteration   2: 244.244 ns/op
Iteration   3: 244.095 ns/op
Iteration   4: 243.238 ns/op
Iteration   5: 243.161 ns/op

# Run progress: 15.52% complete, ETA 00:49:42
# Fork: 2 of 2
# Warmup Iteration   1: 538.386 ns/op
# Warmup Iteration   2: 352.625 ns/op
# Warmup Iteration   3: 243.208 ns/op
Iteration   1: 245.151 ns/op
Iteration   2: 245.965 ns/op
Iteration   3: 245.268 ns/op
Iteration   4: 242.547 ns/op
Iteration   5: 241.944 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  243.983 ±(99.9%) 1.921 ns/op [Average]
  (min, avg, max) = (241.944, 243.983, 245.965), stdev = 1.270
  CI (99.9%): [242.062, 245.904] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 15.56% complete, ETA 00:49:40
# Fork: 1 of 2
# Warmup Iteration   1: 574.558 ns/op
# Warmup Iteration   2: 476.147 ns/op
# Warmup Iteration   3: 357.673 ns/op
Iteration   1: 363.195 ns/op
Iteration   2: 360.779 ns/op
Iteration   3: 362.289 ns/op
Iteration   4: 359.456 ns/op
Iteration   5: 358.624 ns/op

# Run progress: 15.59% complete, ETA 00:49:39
# Fork: 2 of 2
# Warmup Iteration   1: 553.420 ns/op
# Warmup Iteration   2: 481.958 ns/op
# Warmup Iteration   3: 357.998 ns/op
Iteration   1: 360.928 ns/op
Iteration   2: 356.332 ns/op
Iteration   3: 356.781 ns/op
Iteration   4: 358.115 ns/op
Iteration   5: 358.395 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  359.489 ±(99.9%) 3.435 ns/op [Average]
  (min, avg, max) = (356.332, 359.489, 363.195), stdev = 2.272
  CI (99.9%): [356.055, 362.924] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 15.63% complete, ETA 00:49:38
# Fork: 1 of 2
# Warmup Iteration   1: 3531.229 ns/op
# Warmup Iteration   2: 326.533 ns/op
# Warmup Iteration   3: 205.456 ns/op
Iteration   1: 205.580 ns/op
Iteration   2: 205.623 ns/op
Iteration   3: 205.508 ns/op
Iteration   4: 206.419 ns/op
Iteration   5: 205.801 ns/op

# Run progress: 15.66% complete, ETA 00:49:37
# Fork: 2 of 2
# Warmup Iteration   1: 1680.919 ns/op
# Warmup Iteration   2: 281.488 ns/op
# Warmup Iteration   3: 205.377 ns/op
Iteration   1: 205.584 ns/op
Iteration   2: 205.565 ns/op
Iteration   3: 205.524 ns/op
Iteration   4: 205.756 ns/op
Iteration   5: 205.599 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  205.696 ±(99.9%) 0.409 ns/op [Average]
  (min, avg, max) = (205.508, 205.696, 206.419), stdev = 0.271
  CI (99.9%): [205.287, 206.105] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 15.69% complete, ETA 00:49:35
# Fork: 1 of 2
# Warmup Iteration   1: 453.361 ns/op
# Warmup Iteration   2: 388.905 ns/op
# Warmup Iteration   3: 286.176 ns/op
Iteration   1: 288.222 ns/op
Iteration   2: 287.163 ns/op
Iteration   3: 288.326 ns/op
Iteration   4: 290.334 ns/op
Iteration   5: 287.729 ns/op

# Run progress: 15.73% complete, ETA 00:49:34
# Fork: 2 of 2
# Warmup Iteration   1: 467.972 ns/op
# Warmup Iteration   2: 385.272 ns/op
# Warmup Iteration   3: 293.116 ns/op
Iteration   1: 288.828 ns/op
Iteration   2: 293.273 ns/op
Iteration   3: 289.239 ns/op
Iteration   4: 292.075 ns/op
Iteration   5: 292.898 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  289.809 ±(99.9%) 3.354 ns/op [Average]
  (min, avg, max) = (287.163, 289.809, 293.273), stdev = 2.218
  CI (99.9%): [286.455, 293.162] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 15.76% complete, ETA 00:49:33
# Fork: 1 of 2
# Warmup Iteration   1: 3115.066 ns/op
# Warmup Iteration   2: 2104.880 ns/op
# Warmup Iteration   3: 1526.784 ns/op
Iteration   1: 1528.243 ns/op
Iteration   2: 1530.207 ns/op
Iteration   3: 1527.114 ns/op
Iteration   4: 1531.768 ns/op
Iteration   5: 1535.210 ns/op

# Run progress: 15.80% complete, ETA 00:49:32
# Fork: 2 of 2
# Warmup Iteration   1: 3338.979 ns/op
# Warmup Iteration   2: 2095.657 ns/op
# Warmup Iteration   3: 1530.644 ns/op
Iteration   1: 1533.036 ns/op
Iteration   2: 1531.810 ns/op
Iteration   3: 1532.074 ns/op
Iteration   4: 1543.207 ns/op
Iteration   5: 1541.751 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1533.442 ±(99.9%) 8.009 ns/op [Average]
  (min, avg, max) = (1527.114, 1533.442, 1543.207), stdev = 5.297
  CI (99.9%): [1525.433, 1541.451] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 15.83% complete, ETA 00:49:31
# Fork: 1 of 2
# Warmup Iteration   1: 20.439 ns/op
# Warmup Iteration   2: 24.161 ns/op
# Warmup Iteration   3: 13.703 ns/op
Iteration   1: 13.706 ns/op
Iteration   2: 13.737 ns/op
Iteration   3: 13.724 ns/op
Iteration   4: 13.888 ns/op
Iteration   5: 13.878 ns/op

# Run progress: 15.87% complete, ETA 00:49:29
# Fork: 2 of 2
# Warmup Iteration   1: 18.250 ns/op
# Warmup Iteration   2: 24.850 ns/op
# Warmup Iteration   3: 13.725 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.893 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.706, 13.785, 13.893), stdev = 0.087
  CI (99.9%): [13.653, 13.916] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 15.90% complete, ETA 00:49:28
# Fork: 1 of 2
# Warmup Iteration   1: 111.286 ns/op
# Warmup Iteration   2: 99.427 ns/op
# Warmup Iteration   3: 66.096 ns/op
Iteration   1: 66.111 ns/op
Iteration   2: 66.133 ns/op
Iteration   3: 66.142 ns/op
Iteration   4: 65.882 ns/op
Iteration   5: 65.845 ns/op

# Run progress: 15.94% complete, ETA 00:49:27
# Fork: 2 of 2
# Warmup Iteration   1: 107.661 ns/op
# Warmup Iteration   2: 91.145 ns/op
# Warmup Iteration   3: 66.184 ns/op
Iteration   1: 66.163 ns/op
Iteration   2: 66.190 ns/op
Iteration   3: 66.232 ns/op
Iteration   4: 65.916 ns/op
Iteration   5: 65.950 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.056 ±(99.9%) 0.215 ns/op [Average]
  (min, avg, max) = (65.845, 66.056, 66.232), stdev = 0.142
  CI (99.9%): [65.841, 66.272] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 15.97% complete, ETA 00:49:26
# Fork: 1 of 2
# Warmup Iteration   1: 266.897 ns/op
# Warmup Iteration   2: 237.708 ns/op
# Warmup Iteration   3: 166.409 ns/op
Iteration   1: 166.670 ns/op
Iteration   2: 166.529 ns/op
Iteration   3: 166.587 ns/op
Iteration   4: 167.566 ns/op
Iteration   5: 167.602 ns/op

# Run progress: 16.01% complete, ETA 00:49:24
# Fork: 2 of 2
# Warmup Iteration   1: 241.851 ns/op
# Warmup Iteration   2: 229.630 ns/op
# Warmup Iteration   3: 166.596 ns/op
Iteration   1: 166.918 ns/op
Iteration   2: 166.504 ns/op
Iteration   3: 166.502 ns/op
Iteration   4: 167.419 ns/op
Iteration   5: 167.548 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  166.984 ±(99.9%) 0.740 ns/op [Average]
  (min, avg, max) = (166.502, 166.984, 167.602), stdev = 0.490
  CI (99.9%): [166.244, 167.725] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 16.04% complete, ETA 00:49:23
# Fork: 1 of 2
# Warmup Iteration   1: 362.443 ns/op
# Warmup Iteration   2: 109.227 ns/op
# Warmup Iteration   3: 74.649 ns/op
Iteration   1: 74.675 ns/op
Iteration   2: 74.689 ns/op
Iteration   3: 74.673 ns/op
Iteration   4: 74.754 ns/op
Iteration   5: 74.766 ns/op

# Run progress: 16.08% complete, ETA 00:49:22
# Fork: 2 of 2
# Warmup Iteration   1: 423.825 ns/op
# Warmup Iteration   2: 108.498 ns/op
# Warmup Iteration   3: 74.637 ns/op
Iteration   1: 74.701 ns/op
Iteration   2: 74.691 ns/op
Iteration   3: 74.678 ns/op
Iteration   4: 74.775 ns/op
Iteration   5: 74.990 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.739 ±(99.9%) 0.146 ns/op [Average]
  (min, avg, max) = (74.673, 74.739, 74.990), stdev = 0.096
  CI (99.9%): [74.594, 74.885] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 16.11% complete, ETA 00:49:21
# Fork: 1 of 2
# Warmup Iteration   1: 148.553 ns/op
# Warmup Iteration   2: 147.214 ns/op
# Warmup Iteration   3: 104.922 ns/op
Iteration   1: 104.907 ns/op
Iteration   2: 104.932 ns/op
Iteration   3: 104.931 ns/op
Iteration   4: 104.864 ns/op
Iteration   5: 104.930 ns/op

# Run progress: 16.15% complete, ETA 00:49:19
# Fork: 2 of 2
# Warmup Iteration   1: 154.780 ns/op
# Warmup Iteration   2: 172.645 ns/op
# Warmup Iteration   3: 104.889 ns/op
Iteration   1: 104.974 ns/op
Iteration   2: 105.059 ns/op
Iteration   3: 104.930 ns/op
Iteration   4: 104.900 ns/op
Iteration   5: 104.954 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  104.938 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (104.864, 104.938, 105.059), stdev = 0.052
  CI (99.9%): [104.859, 105.017] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 16.18% complete, ETA 00:49:18
# Fork: 1 of 2
# Warmup Iteration   1: 217.410 ns/op
# Warmup Iteration   2: 186.563 ns/op
# Warmup Iteration   3: 101.971 ns/op
Iteration   1: 102.019 ns/op
Iteration   2: 102.001 ns/op
Iteration   3: 101.936 ns/op
Iteration   4: 103.483 ns/op
Iteration   5: 103.592 ns/op

# Run progress: 16.22% complete, ETA 00:49:17
# Fork: 2 of 2
# Warmup Iteration   1: 195.880 ns/op
# Warmup Iteration   2: 189.509 ns/op
# Warmup Iteration   3: 102.036 ns/op
Iteration   1: 102.150 ns/op
Iteration   2: 102.134 ns/op
Iteration   3: 102.117 ns/op
Iteration   4: 103.780 ns/op
Iteration   5: 103.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  102.683 ±(99.9%) 1.225 ns/op [Average]
  (min, avg, max) = (101.936, 102.683, 103.780), stdev = 0.810
  CI (99.9%): [101.458, 103.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 16.25% complete, ETA 00:49:16
# Fork: 1 of 2
# Warmup Iteration   1: 20.275 ns/op
# Warmup Iteration   2: 21.182 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 14.609 ns/op
Iteration   5: 14.616 ns/op

# Run progress: 16.28% complete, ETA 00:49:14
# Fork: 2 of 2
# Warmup Iteration   1: 19.544 ns/op
# Warmup Iteration   2: 24.815 ns/op
# Warmup Iteration   3: 13.722 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.888 ns/op
Iteration   5: 13.902 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.930 ±(99.9%) 0.555 ns/op [Average]
  (min, avg, max) = (13.711, 13.930, 14.616), stdev = 0.367
  CI (99.9%): [13.376, 14.485] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 16.32% complete, ETA 00:49:13
# Fork: 1 of 2
# Warmup Iteration   1: 1288.144 ns/op
# Warmup Iteration   2: 525.032 ns/op
# Warmup Iteration   3: 365.305 ns/op
Iteration   1: 367.356 ns/op
Iteration   2: 368.840 ns/op
Iteration   3: 367.900 ns/op
Iteration   4: 369.426 ns/op
Iteration   5: 366.901 ns/op

# Run progress: 16.35% complete, ETA 00:49:12
# Fork: 2 of 2
# Warmup Iteration   1: 4351.059 ns/op
# Warmup Iteration   2: 513.284 ns/op
# Warmup Iteration   3: 359.247 ns/op
Iteration   1: 361.860 ns/op
Iteration   2: 361.293 ns/op
Iteration   3: 359.347 ns/op
Iteration   4: 360.042 ns/op
Iteration   5: 361.008 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  364.397 ±(99.9%) 6.055 ns/op [Average]
  (min, avg, max) = (359.347, 364.397, 369.426), stdev = 4.005
  CI (99.9%): [358.343, 370.452] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 16.39% complete, ETA 00:49:11
# Fork: 1 of 2
# Warmup Iteration   1: 946.056 ns/op
# Warmup Iteration   2: 760.033 ns/op
# Warmup Iteration   3: 590.563 ns/op
Iteration   1: 580.763 ns/op
Iteration   2: 585.278 ns/op
Iteration   3: 583.146 ns/op
Iteration   4: 586.082 ns/op
Iteration   5: 584.084 ns/op

# Run progress: 16.42% complete, ETA 00:49:10
# Fork: 2 of 2
# Warmup Iteration   1: 846.847 ns/op
# Warmup Iteration   2: 784.261 ns/op
# Warmup Iteration   3: 588.834 ns/op
Iteration   1: 587.676 ns/op
Iteration   2: 585.246 ns/op
Iteration   3: 590.234 ns/op
Iteration   4: 591.299 ns/op
Iteration   5: 589.673 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  586.348 ±(99.9%) 5.076 ns/op [Average]
  (min, avg, max) = (580.763, 586.348, 591.299), stdev = 3.357
  CI (99.9%): [581.272, 591.424] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 16.46% complete, ETA 00:49:08
# Fork: 1 of 2
# Warmup Iteration   1: 7559.367 ns/op
# Warmup Iteration   2: 518.381 ns/op
# Warmup Iteration   3: 358.793 ns/op
Iteration   1: 356.524 ns/op
Iteration   2: 355.589 ns/op
Iteration   3: 356.014 ns/op
Iteration   4: 355.769 ns/op
Iteration   5: 355.979 ns/op

# Run progress: 16.49% complete, ETA 00:49:07
# Fork: 2 of 2
# Warmup Iteration   1: 7462.725 ns/op
# Warmup Iteration   2: 556.391 ns/op
# Warmup Iteration   3: 358.262 ns/op
Iteration   1: 360.471 ns/op
Iteration   2: 360.969 ns/op
Iteration   3: 359.012 ns/op
Iteration   4: 360.679 ns/op
Iteration   5: 357.625 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  357.863 ±(99.9%) 3.345 ns/op [Average]
  (min, avg, max) = (355.589, 357.863, 360.969), stdev = 2.213
  CI (99.9%): [354.518, 361.209] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 16.53% complete, ETA 00:49:06
# Fork: 1 of 2
# Warmup Iteration   1: 760.525 ns/op
# Warmup Iteration   2: 537.645 ns/op
# Warmup Iteration   3: 402.018 ns/op
Iteration   1: 403.461 ns/op
Iteration   2: 401.506 ns/op
Iteration   3: 402.289 ns/op
Iteration   4: 403.101 ns/op
Iteration   5: 406.953 ns/op

# Run progress: 16.56% complete, ETA 00:49:05
# Fork: 2 of 2
# Warmup Iteration   1: 866.137 ns/op
# Warmup Iteration   2: 566.879 ns/op
# Warmup Iteration   3: 405.404 ns/op
Iteration   1: 408.386 ns/op
Iteration   2: 404.773 ns/op
Iteration   3: 406.626 ns/op
Iteration   4: 402.360 ns/op
Iteration   5: 405.160 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  404.461 ±(99.9%) 3.477 ns/op [Average]
  (min, avg, max) = (401.506, 404.461, 408.386), stdev = 2.300
  CI (99.9%): [400.984, 407.938] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 16.60% complete, ETA 00:49:03
# Fork: 1 of 2
# Warmup Iteration   1: 1431.609 ns/op
# Warmup Iteration   2: 954.700 ns/op
# Warmup Iteration   3: 643.623 ns/op
Iteration   1: 644.731 ns/op
Iteration   2: 641.795 ns/op
Iteration   3: 643.043 ns/op
Iteration   4: 644.551 ns/op
Iteration   5: 644.831 ns/op

# Run progress: 16.63% complete, ETA 00:49:02
# Fork: 2 of 2
# Warmup Iteration   1: 1420.021 ns/op
# Warmup Iteration   2: 953.914 ns/op
# Warmup Iteration   3: 650.411 ns/op
Iteration   1: 648.632 ns/op
Iteration   2: 644.157 ns/op
Iteration   3: 659.881 ns/op
Iteration   4: 654.581 ns/op
Iteration   5: 653.058 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  647.926 ±(99.9%) 9.027 ns/op [Average]
  (min, avg, max) = (641.795, 647.926, 659.881), stdev = 5.971
  CI (99.9%): [638.899, 656.953] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 16.67% complete, ETA 00:49:01
# Fork: 1 of 2
# Warmup Iteration   1: 19.610 ns/op
# Warmup Iteration   2: 25.180 ns/op
# Warmup Iteration   3: 13.723 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.724 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.876 ns/op

# Run progress: 16.70% complete, ETA 00:49:00
# Fork: 2 of 2
# Warmup Iteration   1: 18.685 ns/op
# Warmup Iteration   2: 21.589 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.888 ns/op
Iteration   5: 13.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (13.710, 13.783, 13.888), stdev = 0.086
  CI (99.9%): [13.653, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 16.74% complete, ETA 00:48:58
# Fork: 1 of 2
# Warmup Iteration   1: 973.371 ns/op
# Warmup Iteration   2: 393.092 ns/op
# Warmup Iteration   3: 297.431 ns/op
Iteration   1: 297.442 ns/op
Iteration   2: 297.407 ns/op
Iteration   3: 297.420 ns/op
Iteration   4: 297.174 ns/op
Iteration   5: 297.349 ns/op

# Run progress: 16.77% complete, ETA 00:48:57
# Fork: 2 of 2
# Warmup Iteration   1: 1027.305 ns/op
# Warmup Iteration   2: 431.429 ns/op
# Warmup Iteration   3: 297.405 ns/op
Iteration   1: 297.558 ns/op
Iteration   2: 297.481 ns/op
Iteration   3: 297.518 ns/op
Iteration   4: 297.212 ns/op
Iteration   5: 297.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  297.369 ±(99.9%) 0.226 ns/op [Average]
  (min, avg, max) = (297.128, 297.369, 297.558), stdev = 0.150
  CI (99.9%): [297.143, 297.595] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 16.81% complete, ETA 00:48:56
# Fork: 1 of 2
# Warmup Iteration   1: 563.498 ns/op
# Warmup Iteration   2: 514.316 ns/op
# Warmup Iteration   3: 385.616 ns/op
Iteration   1: 385.789 ns/op
Iteration   2: 385.875 ns/op
Iteration   3: 385.868 ns/op
Iteration   4: 385.834 ns/op
Iteration   5: 385.713 ns/op

# Run progress: 16.84% complete, ETA 00:48:55
# Fork: 2 of 2
# Warmup Iteration   1: 561.556 ns/op
# Warmup Iteration   2: 586.077 ns/op
# Warmup Iteration   3: 384.707 ns/op
Iteration   1: 384.512 ns/op
Iteration   2: 384.426 ns/op
Iteration   3: 384.284 ns/op
Iteration   4: 384.236 ns/op
Iteration   5: 384.188 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  385.072 ±(99.9%) 1.194 ns/op [Average]
  (min, avg, max) = (384.188, 385.072, 385.875), stdev = 0.790
  CI (99.9%): [383.878, 386.267] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 16.88% complete, ETA 00:48:53
# Fork: 1 of 2
# Warmup Iteration   1: 3024.978 ns/op
# Warmup Iteration   2: 465.118 ns/op
# Warmup Iteration   3: 341.611 ns/op
Iteration   1: 341.828 ns/op
Iteration   2: 341.972 ns/op
Iteration   3: 341.769 ns/op
Iteration   4: 341.745 ns/op
Iteration   5: 341.427 ns/op

# Run progress: 16.91% complete, ETA 00:48:52
# Fork: 2 of 2
# Warmup Iteration   1: 7737.440 ns/op
# Warmup Iteration   2: 524.161 ns/op
# Warmup Iteration   3: 340.456 ns/op
Iteration   1: 340.543 ns/op
Iteration   2: 340.566 ns/op
Iteration   3: 340.570 ns/op
Iteration   4: 340.444 ns/op
Iteration   5: 340.463 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  341.133 ±(99.9%) 1.003 ns/op [Average]
  (min, avg, max) = (340.444, 341.133, 341.972), stdev = 0.663
  CI (99.9%): [340.130, 342.136] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 16.94% complete, ETA 00:48:51
# Fork: 1 of 2
# Warmup Iteration   1: 480.471 ns/op
# Warmup Iteration   2: 398.942 ns/op
# Warmup Iteration   3: 298.973 ns/op
Iteration   1: 299.055 ns/op
Iteration   2: 299.062 ns/op
Iteration   3: 299.034 ns/op
Iteration   4: 299.125 ns/op
Iteration   5: 299.297 ns/op

# Run progress: 16.98% complete, ETA 00:48:50
# Fork: 2 of 2
# Warmup Iteration   1: 532.926 ns/op
# Warmup Iteration   2: 408.236 ns/op
# Warmup Iteration   3: 299.924 ns/op
Iteration   1: 300.583 ns/op
Iteration   2: 299.734 ns/op
Iteration   3: 300.330 ns/op
Iteration   4: 299.694 ns/op
Iteration   5: 299.732 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  299.565 ±(99.9%) 0.837 ns/op [Average]
  (min, avg, max) = (299.034, 299.565, 300.583), stdev = 0.553
  CI (99.9%): [298.728, 300.401] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 17.01% complete, ETA 00:48:49
# Fork: 1 of 2
# Warmup Iteration   1: 1082.222 ns/op
# Warmup Iteration   2: 684.421 ns/op
# Warmup Iteration   3: 453.978 ns/op
Iteration   1: 454.216 ns/op
Iteration   2: 454.208 ns/op
Iteration   3: 453.980 ns/op
Iteration   4: 457.520 ns/op
Iteration   5: 457.508 ns/op

# Run progress: 17.05% complete, ETA 00:48:47
# Fork: 2 of 2
# Warmup Iteration   1: 1131.973 ns/op
# Warmup Iteration   2: 703.653 ns/op
# Warmup Iteration   3: 465.916 ns/op
Iteration   1: 466.015 ns/op
Iteration   2: 465.728 ns/op
Iteration   3: 466.875 ns/op
Iteration   4: 470.392 ns/op
Iteration   5: 469.989 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  461.643 ±(99.9%) 10.237 ns/op [Average]
  (min, avg, max) = (453.980, 461.643, 470.392), stdev = 6.771
  CI (99.9%): [451.406, 471.880] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 17.08% complete, ETA 00:48:46
# Fork: 1 of 2
# Warmup Iteration   1: 20.251 ns/op
# Warmup Iteration   2: 23.167 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.884 ns/op

# Run progress: 17.12% complete, ETA 00:48:45
# Fork: 2 of 2
# Warmup Iteration   1: 21.507 ns/op
# Warmup Iteration   2: 27.940 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.728 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.871 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (13.711, 13.783, 13.890), stdev = 0.085
  CI (99.9%): [13.655, 13.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 17.15% complete, ETA 00:48:43
# Fork: 1 of 2
# Warmup Iteration   1: 490.394 ns/op
# Warmup Iteration   2: 348.616 ns/op
# Warmup Iteration   3: 256.357 ns/op
Iteration   1: 256.656 ns/op
Iteration   2: 256.452 ns/op
Iteration   3: 256.781 ns/op
Iteration   4: 257.030 ns/op
Iteration   5: 256.688 ns/op

# Run progress: 17.19% complete, ETA 00:48:42
# Fork: 2 of 2
# Warmup Iteration   1: 528.215 ns/op
# Warmup Iteration   2: 379.034 ns/op
# Warmup Iteration   3: 257.664 ns/op
Iteration   1: 257.534 ns/op
Iteration   2: 257.566 ns/op
Iteration   3: 257.224 ns/op
Iteration   4: 256.860 ns/op
Iteration   5: 257.773 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  257.057 ±(99.9%) 0.677 ns/op [Average]
  (min, avg, max) = (256.452, 257.057, 257.773), stdev = 0.448
  CI (99.9%): [256.379, 257.734] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 17.22% complete, ETA 00:48:41
# Fork: 1 of 2
# Warmup Iteration   1: 510.639 ns/op
# Warmup Iteration   2: 498.822 ns/op
# Warmup Iteration   3: 346.846 ns/op
Iteration   1: 347.021 ns/op
Iteration   2: 346.985 ns/op
Iteration   3: 347.025 ns/op
Iteration   4: 346.865 ns/op
Iteration   5: 346.944 ns/op

# Run progress: 17.26% complete, ETA 00:48:40
# Fork: 2 of 2
# Warmup Iteration   1: 513.448 ns/op
# Warmup Iteration   2: 471.860 ns/op
# Warmup Iteration   3: 349.727 ns/op
Iteration   1: 349.905 ns/op
Iteration   2: 349.853 ns/op
Iteration   3: 349.939 ns/op
Iteration   4: 349.267 ns/op
Iteration   5: 349.293 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  348.310 ±(99.9%) 2.167 ns/op [Average]
  (min, avg, max) = (346.865, 348.310, 349.939), stdev = 1.433
  CI (99.9%): [346.143, 350.476] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 17.29% complete, ETA 00:48:38
# Fork: 1 of 2
# Warmup Iteration   1: 447.609 ns/op
# Warmup Iteration   2: 338.553 ns/op
# Warmup Iteration   3: 245.242 ns/op
Iteration   1: 245.683 ns/op
Iteration   2: 245.381 ns/op
Iteration   3: 246.952 ns/op
Iteration   4: 245.799 ns/op
Iteration   5: 245.509 ns/op

# Run progress: 17.33% complete, ETA 00:48:37
# Fork: 2 of 2
# Warmup Iteration   1: 454.632 ns/op
# Warmup Iteration   2: 334.450 ns/op
# Warmup Iteration   3: 245.474 ns/op
Iteration   1: 251.162 ns/op
Iteration   2: 246.272 ns/op
Iteration   3: 245.731 ns/op
Iteration   4: 245.901 ns/op
Iteration   5: 246.278 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  246.467 ±(99.9%) 2.588 ns/op [Average]
  (min, avg, max) = (245.381, 246.467, 251.162), stdev = 1.712
  CI (99.9%): [243.879, 249.055] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 17.36% complete, ETA 00:48:36
# Fork: 1 of 2
# Warmup Iteration   1: 461.275 ns/op
# Warmup Iteration   2: 393.427 ns/op
# Warmup Iteration   3: 289.808 ns/op
Iteration   1: 289.911 ns/op
Iteration   2: 289.917 ns/op
Iteration   3: 289.980 ns/op
Iteration   4: 290.568 ns/op
Iteration   5: 290.461 ns/op

# Run progress: 17.40% complete, ETA 00:48:35
# Fork: 2 of 2
# Warmup Iteration   1: 463.322 ns/op
# Warmup Iteration   2: 389.139 ns/op
# Warmup Iteration   3: 287.878 ns/op
Iteration   1: 288.141 ns/op
Iteration   2: 288.050 ns/op
Iteration   3: 287.915 ns/op
Iteration   4: 288.229 ns/op
Iteration   5: 288.150 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  289.132 ±(99.9%) 1.685 ns/op [Average]
  (min, avg, max) = (287.915, 289.132, 290.568), stdev = 1.115
  CI (99.9%): [287.447, 290.817] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 17.43% complete, ETA 00:48:34
# Fork: 1 of 2
# Warmup Iteration   1: 1532.083 ns/op
# Warmup Iteration   2: 1093.536 ns/op
# Warmup Iteration   3: 814.284 ns/op
Iteration   1: 814.437 ns/op
Iteration   2: 814.521 ns/op
Iteration   3: 814.573 ns/op
Iteration   4: 816.023 ns/op
Iteration   5: 815.975 ns/op

# Run progress: 17.47% complete, ETA 00:48:32
# Fork: 2 of 2
# Warmup Iteration   1: 1716.075 ns/op
# Warmup Iteration   2: 1202.310 ns/op
# Warmup Iteration   3: 824.728 ns/op
Iteration   1: 829.555 ns/op
Iteration   2: 813.616 ns/op
Iteration   3: 814.787 ns/op
Iteration   4: 827.721 ns/op
Iteration   5: 815.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  817.649 ±(99.9%) 8.848 ns/op [Average]
  (min, avg, max) = (813.616, 817.649, 829.555), stdev = 5.852
  CI (99.9%): [808.801, 826.497] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 17.50% complete, ETA 00:48:31
# Fork: 1 of 2
# Warmup Iteration   1: 20.209 ns/op
# Warmup Iteration   2: 21.614 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.878 ns/op

# Run progress: 17.53% complete, ETA 00:48:30
# Fork: 2 of 2
# Warmup Iteration   1: 20.391 ns/op
# Warmup Iteration   2: 22.714 ns/op
# Warmup Iteration   3: 13.722 ns/op
Iteration   1: 13.719 ns/op
Iteration   2: 13.704 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.780 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (13.704, 13.780, 13.888), stdev = 0.088
  CI (99.9%): [13.647, 13.914] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 17.57% complete, ETA 00:48:29
# Fork: 1 of 2
# Warmup Iteration   1: 655.624 ns/op
# Warmup Iteration   2: 323.101 ns/op
# Warmup Iteration   3: 240.297 ns/op
Iteration   1: 241.427 ns/op
Iteration   2: 240.284 ns/op
Iteration   3: 239.972 ns/op
Iteration   4: 240.376 ns/op
Iteration   5: 242.507 ns/op

# Run progress: 17.60% complete, ETA 00:48:27
# Fork: 2 of 2
# Warmup Iteration   1: 669.787 ns/op
# Warmup Iteration   2: 310.376 ns/op
# Warmup Iteration   3: 225.101 ns/op
Iteration   1: 226.171 ns/op
Iteration   2: 227.050 ns/op
Iteration   3: 226.679 ns/op
Iteration   4: 226.536 ns/op
Iteration   5: 226.093 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.710 ±(99.9%) 11.535 ns/op [Average]
  (min, avg, max) = (226.093, 233.710, 242.507), stdev = 7.630
  CI (99.9%): [222.175, 245.244] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 17.64% complete, ETA 00:48:26
# Fork: 1 of 2
# Warmup Iteration   1: 611.981 ns/op
# Warmup Iteration   2: 478.769 ns/op
# Warmup Iteration   3: 365.784 ns/op
Iteration   1: 363.024 ns/op
Iteration   2: 362.000 ns/op
Iteration   3: 364.228 ns/op
Iteration   4: 369.331 ns/op
Iteration   5: 362.839 ns/op

# Run progress: 17.67% complete, ETA 00:48:25
# Fork: 2 of 2
# Warmup Iteration   1: 547.439 ns/op
# Warmup Iteration   2: 478.754 ns/op
# Warmup Iteration   3: 356.576 ns/op
Iteration   1: 357.221 ns/op
Iteration   2: 358.956 ns/op
Iteration   3: 360.744 ns/op
Iteration   4: 359.635 ns/op
Iteration   5: 360.159 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  361.814 ±(99.9%) 5.109 ns/op [Average]
  (min, avg, max) = (357.221, 361.814, 369.331), stdev = 3.379
  CI (99.9%): [356.705, 366.923] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 17.71% complete, ETA 00:48:24
# Fork: 1 of 2
# Warmup Iteration   1: 5489.665 ns/op
# Warmup Iteration   2: 358.295 ns/op
# Warmup Iteration   3: 239.696 ns/op
Iteration   1: 240.458 ns/op
Iteration   2: 240.864 ns/op
Iteration   3: 239.838 ns/op
Iteration   4: 254.456 ns/op
Iteration   5: 240.279 ns/op

# Run progress: 17.74% complete, ETA 00:48:23
# Fork: 2 of 2
# Warmup Iteration   1: 3933.974 ns/op
# Warmup Iteration   2: 329.772 ns/op
# Warmup Iteration   3: 245.982 ns/op
Iteration   1: 244.145 ns/op
Iteration   2: 244.139 ns/op
Iteration   3: 246.218 ns/op
Iteration   4: 246.151 ns/op
Iteration   5: 246.017 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  244.257 ±(99.9%) 6.683 ns/op [Average]
  (min, avg, max) = (239.838, 244.257, 254.456), stdev = 4.421
  CI (99.9%): [237.573, 250.940] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 17.78% complete, ETA 00:48:21
# Fork: 1 of 2
# Warmup Iteration   1: 450.487 ns/op
# Warmup Iteration   2: 416.196 ns/op
# Warmup Iteration   3: 278.539 ns/op
Iteration   1: 279.415 ns/op
Iteration   2: 278.477 ns/op
Iteration   3: 279.774 ns/op
Iteration   4: 278.383 ns/op
Iteration   5: 278.892 ns/op

# Run progress: 17.81% complete, ETA 00:48:20
# Fork: 2 of 2
# Warmup Iteration   1: 442.748 ns/op
# Warmup Iteration   2: 396.946 ns/op
# Warmup Iteration   3: 277.740 ns/op
Iteration   1: 280.841 ns/op
Iteration   2: 277.022 ns/op
Iteration   3: 278.132 ns/op
Iteration   4: 279.830 ns/op
Iteration   5: 281.569 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  279.233 ±(99.9%) 2.030 ns/op [Average]
  (min, avg, max) = (277.022, 279.233, 281.569), stdev = 1.343
  CI (99.9%): [277.203, 281.264] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 17.85% complete, ETA 00:48:19
# Fork: 1 of 2
# Warmup Iteration   1: 3055.554 ns/op
# Warmup Iteration   2: 2227.110 ns/op
# Warmup Iteration   3: 1543.641 ns/op
Iteration   1: 1539.071 ns/op
Iteration   2: 1535.998 ns/op
Iteration   3: 1542.395 ns/op
Iteration   4: 1548.944 ns/op
Iteration   5: 1551.917 ns/op

# Run progress: 17.88% complete, ETA 00:48:17
# Fork: 2 of 2
# Warmup Iteration   1: 3256.444 ns/op
# Warmup Iteration   2: 2129.742 ns/op
# Warmup Iteration   3: 1527.009 ns/op
Iteration   1: 1526.930 ns/op
Iteration   2: 1531.759 ns/op
Iteration   3: 1526.194 ns/op
Iteration   4: 1537.561 ns/op
Iteration   5: 1541.522 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1538.229 ±(99.9%) 12.857 ns/op [Average]
  (min, avg, max) = (1526.194, 1538.229, 1551.917), stdev = 8.504
  CI (99.9%): [1525.372, 1551.086] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 17.92% complete, ETA 00:48:16
# Fork: 1 of 2
# Warmup Iteration   1: 18.651 ns/op
# Warmup Iteration   2: 25.198 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.873 ns/op
Iteration   5: 13.897 ns/op

# Run progress: 17.95% complete, ETA 00:48:15
# Fork: 2 of 2
# Warmup Iteration   1: 22.827 ns/op
# Warmup Iteration   2: 27.259 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.707 ns/op
Iteration   2: 13.723 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.881 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.707, 13.783, 13.897), stdev = 0.086
  CI (99.9%): [13.653, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 17.99% complete, ETA 00:48:14
# Fork: 1 of 2
# Warmup Iteration   1: 106.483 ns/op
# Warmup Iteration   2: 97.858 ns/op
# Warmup Iteration   3: 66.992 ns/op
Iteration   1: 67.025 ns/op
Iteration   2: 67.006 ns/op
Iteration   3: 66.988 ns/op
Iteration   4: 66.773 ns/op
Iteration   5: 66.899 ns/op

# Run progress: 18.02% complete, ETA 00:48:12
# Fork: 2 of 2
# Warmup Iteration   1: 99.828 ns/op
# Warmup Iteration   2: 99.529 ns/op
# Warmup Iteration   3: 67.011 ns/op
Iteration   1: 67.004 ns/op
Iteration   2: 67.037 ns/op
Iteration   3: 67.032 ns/op
Iteration   4: 66.737 ns/op
Iteration   5: 66.799 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.930 ±(99.9%) 0.179 ns/op [Average]
  (min, avg, max) = (66.737, 66.930, 67.037), stdev = 0.118
  CI (99.9%): [66.751, 67.109] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 18.06% complete, ETA 00:48:11
# Fork: 1 of 2
# Warmup Iteration   1: 193.279 ns/op
# Warmup Iteration   2: 185.095 ns/op
# Warmup Iteration   3: 131.111 ns/op
Iteration   1: 131.592 ns/op
Iteration   2: 131.150 ns/op
Iteration   3: 131.027 ns/op
Iteration   4: 131.313 ns/op
Iteration   5: 131.491 ns/op

# Run progress: 18.09% complete, ETA 00:48:10
# Fork: 2 of 2
# Warmup Iteration   1: 188.836 ns/op
# Warmup Iteration   2: 184.877 ns/op
# Warmup Iteration   3: 131.394 ns/op
Iteration   1: 139.395 ns/op
Iteration   2: 131.056 ns/op
Iteration   3: 130.986 ns/op
Iteration   4: 140.485 ns/op
Iteration   5: 130.915 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  132.941 ±(99.9%) 5.600 ns/op [Average]
  (min, avg, max) = (130.915, 132.941, 140.485), stdev = 3.704
  CI (99.9%): [127.341, 138.541] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 18.13% complete, ETA 00:48:09
# Fork: 1 of 2
# Warmup Iteration   1: 255.439 ns/op
# Warmup Iteration   2: 165.445 ns/op
# Warmup Iteration   3: 117.563 ns/op
Iteration   1: 117.628 ns/op
Iteration   2: 117.673 ns/op
Iteration   3: 117.597 ns/op
Iteration   4: 117.486 ns/op
Iteration   5: 117.484 ns/op

# Run progress: 18.16% complete, ETA 00:48:07
# Fork: 2 of 2
# Warmup Iteration   1: 277.407 ns/op
# Warmup Iteration   2: 164.599 ns/op
# Warmup Iteration   3: 117.286 ns/op
Iteration   1: 117.330 ns/op
Iteration   2: 117.315 ns/op
Iteration   3: 117.323 ns/op
Iteration   4: 117.359 ns/op
Iteration   5: 117.365 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.456 ±(99.9%) 0.207 ns/op [Average]
  (min, avg, max) = (117.315, 117.456, 117.673), stdev = 0.137
  CI (99.9%): [117.249, 117.663] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 18.19% complete, ETA 00:48:06
# Fork: 1 of 2
# Warmup Iteration   1: 200.543 ns/op
# Warmup Iteration   2: 151.188 ns/op
# Warmup Iteration   3: 91.307 ns/op
Iteration   1: 91.386 ns/op
Iteration   2: 91.353 ns/op
Iteration   3: 91.359 ns/op
Iteration   4: 91.332 ns/op
Iteration   5: 91.310 ns/op

# Run progress: 18.23% complete, ETA 00:48:05
# Fork: 2 of 2
# Warmup Iteration   1: 141.948 ns/op
# Warmup Iteration   2: 133.048 ns/op
# Warmup Iteration   3: 91.305 ns/op
Iteration   1: 91.391 ns/op
Iteration   2: 91.338 ns/op
Iteration   3: 91.325 ns/op
Iteration   4: 91.318 ns/op
Iteration   5: 91.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  91.346 ±(99.9%) 0.041 ns/op [Average]
  (min, avg, max) = (91.310, 91.346, 91.391), stdev = 0.027
  CI (99.9%): [91.305, 91.387] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 18.26% complete, ETA 00:48:04
# Fork: 1 of 2
# Warmup Iteration   1: 244.773 ns/op
# Warmup Iteration   2: 196.742 ns/op
# Warmup Iteration   3: 101.674 ns/op
Iteration   1: 101.773 ns/op
Iteration   2: 101.635 ns/op
Iteration   3: 101.791 ns/op
Iteration   4: 102.516 ns/op
Iteration   5: 102.569 ns/op

# Run progress: 18.30% complete, ETA 00:48:02
# Fork: 2 of 2
# Warmup Iteration   1: 215.372 ns/op
# Warmup Iteration   2: 187.108 ns/op
# Warmup Iteration   3: 101.689 ns/op
Iteration   1: 101.837 ns/op
Iteration   2: 101.609 ns/op
Iteration   3: 101.577 ns/op
Iteration   4: 102.573 ns/op
Iteration   5: 102.729 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  102.061 ±(99.9%) 0.713 ns/op [Average]
  (min, avg, max) = (101.577, 102.061, 102.729), stdev = 0.471
  CI (99.9%): [101.348, 102.773] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 18.33% complete, ETA 00:48:01
# Fork: 1 of 2
# Warmup Iteration   1: 19.803 ns/op
# Warmup Iteration   2: 23.785 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.885 ns/op

# Run progress: 18.37% complete, ETA 00:48:00
# Fork: 2 of 2
# Warmup Iteration   1: 20.261 ns/op
# Warmup Iteration   2: 21.620 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.729 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.877 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.709, 13.782, 13.885), stdev = 0.086
  CI (99.9%): [13.652, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 18.40% complete, ETA 00:47:59
# Fork: 1 of 2
# Warmup Iteration   1: 890.873 ns/op
# Warmup Iteration   2: 438.646 ns/op
# Warmup Iteration   3: 289.217 ns/op
Iteration   1: 290.733 ns/op
Iteration   2: 290.222 ns/op
Iteration   3: 289.483 ns/op
Iteration   4: 288.045 ns/op
Iteration   5: 288.334 ns/op

# Run progress: 18.44% complete, ETA 00:47:57
# Fork: 2 of 2
# Warmup Iteration   1: 982.166 ns/op
# Warmup Iteration   2: 442.808 ns/op
# Warmup Iteration   3: 291.116 ns/op
Iteration   1: 294.368 ns/op
Iteration   2: 294.287 ns/op
Iteration   3: 290.812 ns/op
Iteration   4: 291.792 ns/op
Iteration   5: 293.321 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  291.140 ±(99.9%) 3.448 ns/op [Average]
  (min, avg, max) = (288.045, 291.140, 294.368), stdev = 2.281
  CI (99.9%): [287.692, 294.588] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 18.47% complete, ETA 00:47:56
# Fork: 1 of 2
# Warmup Iteration   1: 466.402 ns/op
# Warmup Iteration   2: 439.359 ns/op
# Warmup Iteration   3: 325.400 ns/op
Iteration   1: 326.129 ns/op
Iteration   2: 328.684 ns/op
Iteration   3: 326.220 ns/op
Iteration   4: 324.117 ns/op
Iteration   5: 325.562 ns/op

# Run progress: 18.51% complete, ETA 00:47:55
# Fork: 2 of 2
# Warmup Iteration   1: 459.935 ns/op
# Warmup Iteration   2: 431.773 ns/op
# Warmup Iteration   3: 324.566 ns/op
Iteration   1: 325.103 ns/op
Iteration   2: 329.294 ns/op
Iteration   3: 324.862 ns/op
Iteration   4: 327.396 ns/op
Iteration   5: 324.870 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  326.224 ±(99.9%) 2.603 ns/op [Average]
  (min, avg, max) = (324.117, 326.224, 329.294), stdev = 1.722
  CI (99.9%): [323.620, 328.827] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 18.54% complete, ETA 00:47:54
# Fork: 1 of 2
# Warmup Iteration   1: 7088.970 ns/op
# Warmup Iteration   2: 428.613 ns/op
# Warmup Iteration   3: 333.487 ns/op
Iteration   1: 333.936 ns/op
Iteration   2: 335.830 ns/op
Iteration   3: 333.753 ns/op
Iteration   4: 334.930 ns/op
Iteration   5: 333.719 ns/op

# Run progress: 18.58% complete, ETA 00:47:53
# Fork: 2 of 2
# Warmup Iteration   1: 7381.864 ns/op
# Warmup Iteration   2: 419.940 ns/op
# Warmup Iteration   3: 333.372 ns/op
Iteration   1: 335.683 ns/op
Iteration   2: 333.852 ns/op
Iteration   3: 333.545 ns/op
Iteration   4: 333.748 ns/op
Iteration   5: 333.730 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  334.272 ±(99.9%) 1.315 ns/op [Average]
  (min, avg, max) = (333.545, 334.272, 335.830), stdev = 0.870
  CI (99.9%): [332.957, 335.588] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 18.61% complete, ETA 00:47:51
# Fork: 1 of 2
# Warmup Iteration   1: 440.899 ns/op
# Warmup Iteration   2: 362.284 ns/op
# Warmup Iteration   3: 269.357 ns/op
Iteration   1: 270.269 ns/op
Iteration   2: 267.958 ns/op
Iteration   3: 270.174 ns/op
Iteration   4: 270.695 ns/op
Iteration   5: 269.828 ns/op

# Run progress: 18.65% complete, ETA 00:47:50
# Fork: 2 of 2
# Warmup Iteration   1: 446.801 ns/op
# Warmup Iteration   2: 361.405 ns/op
# Warmup Iteration   3: 268.030 ns/op
Iteration   1: 269.048 ns/op
Iteration   2: 269.770 ns/op
Iteration   3: 268.534 ns/op
Iteration   4: 268.358 ns/op
Iteration   5: 269.641 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  269.427 ±(99.9%) 1.375 ns/op [Average]
  (min, avg, max) = (267.958, 269.427, 270.695), stdev = 0.909
  CI (99.9%): [268.053, 270.802] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 18.68% complete, ETA 00:47:49
# Fork: 1 of 2
# Warmup Iteration   1: 2694.378 ns/op
# Warmup Iteration   2: 1099.165 ns/op
# Warmup Iteration   3: 721.093 ns/op
Iteration   1: 724.041 ns/op
Iteration   2: 717.776 ns/op
Iteration   3: 720.404 ns/op
Iteration   4: 722.850 ns/op
Iteration   5: 724.916 ns/op

# Run progress: 18.72% complete, ETA 00:47:48
# Fork: 2 of 2
# Warmup Iteration   1: 2781.445 ns/op
# Warmup Iteration   2: 1051.731 ns/op
# Warmup Iteration   3: 718.882 ns/op
Iteration   1: 721.288 ns/op
Iteration   2: 718.489 ns/op
Iteration   3: 723.636 ns/op
Iteration   4: 727.252 ns/op
Iteration   5: 720.363 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  722.101 ±(99.9%) 4.492 ns/op [Average]
  (min, avg, max) = (717.776, 722.101, 727.252), stdev = 2.971
  CI (99.9%): [717.610, 726.593] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 18.75% complete, ETA 00:47:46
# Fork: 1 of 2
# Warmup Iteration   1: 19.710 ns/op
# Warmup Iteration   2: 22.764 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.742 ns/op
Iteration   4: 13.889 ns/op
Iteration   5: 13.876 ns/op

# Run progress: 18.78% complete, ETA 00:47:45
# Fork: 2 of 2
# Warmup Iteration   1: 19.112 ns/op
# Warmup Iteration   2: 23.109 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (13.710, 13.785, 13.889), stdev = 0.085
  CI (99.9%): [13.656, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 18.82% complete, ETA 00:47:44
# Fork: 1 of 2
# Warmup Iteration   1: 890.484 ns/op
# Warmup Iteration   2: 387.070 ns/op
# Warmup Iteration   3: 283.612 ns/op
Iteration   1: 283.914 ns/op
Iteration   2: 284.286 ns/op
Iteration   3: 284.285 ns/op
Iteration   4: 284.223 ns/op
Iteration   5: 283.840 ns/op

# Run progress: 18.85% complete, ETA 00:47:43
# Fork: 2 of 2
# Warmup Iteration   1: 756.766 ns/op
# Warmup Iteration   2: 419.342 ns/op
# Warmup Iteration   3: 280.825 ns/op
Iteration   1: 280.862 ns/op
Iteration   2: 280.903 ns/op
Iteration   3: 280.783 ns/op
Iteration   4: 280.511 ns/op
Iteration   5: 280.667 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  282.427 ±(99.9%) 2.694 ns/op [Average]
  (min, avg, max) = (280.511, 282.427, 284.286), stdev = 1.782
  CI (99.9%): [279.733, 285.122] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 18.89% complete, ETA 00:47:41
# Fork: 1 of 2
# Warmup Iteration   1: 520.503 ns/op
# Warmup Iteration   2: 583.663 ns/op
# Warmup Iteration   3: 360.308 ns/op
Iteration   1: 360.600 ns/op
Iteration   2: 360.385 ns/op
Iteration   3: 360.549 ns/op
Iteration   4: 360.358 ns/op
Iteration   5: 360.339 ns/op

# Run progress: 18.92% complete, ETA 00:47:40
# Fork: 2 of 2
# Warmup Iteration   1: 533.308 ns/op
# Warmup Iteration   2: 478.298 ns/op
# Warmup Iteration   3: 360.377 ns/op
Iteration   1: 360.251 ns/op
Iteration   2: 360.107 ns/op
Iteration   3: 360.254 ns/op
Iteration   4: 360.083 ns/op
Iteration   5: 360.269 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  360.320 ±(99.9%) 0.252 ns/op [Average]
  (min, avg, max) = (360.083, 360.320, 360.600), stdev = 0.167
  CI (99.9%): [360.068, 360.572] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 18.96% complete, ETA 00:47:39
# Fork: 1 of 2
# Warmup Iteration   1: 7775.678 ns/op
# Warmup Iteration   2: 537.723 ns/op
# Warmup Iteration   3: 323.609 ns/op
Iteration   1: 323.609 ns/op
Iteration   2: 323.558 ns/op
Iteration   3: 323.602 ns/op
Iteration   4: 324.193 ns/op
Iteration   5: 324.221 ns/op

# Run progress: 18.99% complete, ETA 00:47:37
# Fork: 2 of 2
# Warmup Iteration   1: 7862.461 ns/op
# Warmup Iteration   2: 551.828 ns/op
# Warmup Iteration   3: 323.380 ns/op
Iteration   1: 323.220 ns/op
Iteration   2: 323.244 ns/op
Iteration   3: 323.122 ns/op
Iteration   4: 323.330 ns/op
Iteration   5: 323.183 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.528 ±(99.9%) 0.603 ns/op [Average]
  (min, avg, max) = (323.122, 323.528, 324.221), stdev = 0.399
  CI (99.9%): [322.925, 324.132] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 19.03% complete, ETA 00:47:36
# Fork: 1 of 2
# Warmup Iteration   1: 499.494 ns/op
# Warmup Iteration   2: 370.763 ns/op
# Warmup Iteration   3: 276.283 ns/op
Iteration   1: 276.285 ns/op
Iteration   2: 276.288 ns/op
Iteration   3: 276.023 ns/op
Iteration   4: 275.782 ns/op
Iteration   5: 276.114 ns/op

# Run progress: 19.06% complete, ETA 00:47:35
# Fork: 2 of 2
# Warmup Iteration   1: 446.293 ns/op
# Warmup Iteration   2: 381.272 ns/op
# Warmup Iteration   3: 282.244 ns/op
Iteration   1: 282.647 ns/op
Iteration   2: 282.554 ns/op
Iteration   3: 282.707 ns/op
Iteration   4: 282.719 ns/op
Iteration   5: 283.033 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  279.415 ±(99.9%) 5.293 ns/op [Average]
  (min, avg, max) = (275.782, 279.415, 283.033), stdev = 3.501
  CI (99.9%): [274.122, 284.709] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 19.10% complete, ETA 00:47:34
# Fork: 1 of 2
# Warmup Iteration   1: 1093.960 ns/op
# Warmup Iteration   2: 706.696 ns/op
# Warmup Iteration   3: 471.868 ns/op
Iteration   1: 471.068 ns/op
Iteration   2: 471.024 ns/op
Iteration   3: 471.363 ns/op
Iteration   4: 475.759 ns/op
Iteration   5: 475.900 ns/op

# Run progress: 19.13% complete, ETA 00:47:33
# Fork: 2 of 2
# Warmup Iteration   1: 1123.833 ns/op
# Warmup Iteration   2: 669.469 ns/op
# Warmup Iteration   3: 468.303 ns/op
Iteration   1: 469.021 ns/op
Iteration   2: 468.498 ns/op
Iteration   3: 468.482 ns/op
Iteration   4: 471.948 ns/op
Iteration   5: 471.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  471.490 ±(99.9%) 3.984 ns/op [Average]
  (min, avg, max) = (468.482, 471.490, 475.900), stdev = 2.635
  CI (99.9%): [467.506, 475.474] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 19.17% complete, ETA 00:47:31
# Fork: 1 of 2
# Warmup Iteration   1: 18.769 ns/op
# Warmup Iteration   2: 23.629 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.723 ns/op
Iteration   2: 13.729 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.887 ns/op

# Run progress: 19.20% complete, ETA 00:47:30
# Fork: 2 of 2
# Warmup Iteration   1: 20.043 ns/op
# Warmup Iteration   2: 24.437 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (13.710, 13.785, 13.887), stdev = 0.085
  CI (99.9%): [13.657, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 19.24% complete, ETA 00:47:29
# Fork: 1 of 2
# Warmup Iteration   1: 345.252 ns/op
# Warmup Iteration   2: 236.263 ns/op
# Warmup Iteration   3: 177.557 ns/op
Iteration   1: 177.547 ns/op
Iteration   2: 177.566 ns/op
Iteration   3: 177.912 ns/op
Iteration   4: 177.994 ns/op
Iteration   5: 177.302 ns/op

# Run progress: 19.27% complete, ETA 00:47:28
# Fork: 2 of 2
# Warmup Iteration   1: 369.879 ns/op
# Warmup Iteration   2: 253.796 ns/op
# Warmup Iteration   3: 175.040 ns/op
Iteration   1: 175.020 ns/op
Iteration   2: 175.620 ns/op
Iteration   3: 175.364 ns/op
Iteration   4: 175.008 ns/op
Iteration   5: 174.700 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  176.403 ±(99.9%) 2.061 ns/op [Average]
  (min, avg, max) = (174.700, 176.403, 177.994), stdev = 1.363
  CI (99.9%): [174.342, 178.465] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 19.31% complete, ETA 00:47:26
# Fork: 1 of 2
# Warmup Iteration   1: 529.829 ns/op
# Warmup Iteration   2: 454.686 ns/op
# Warmup Iteration   3: 339.348 ns/op
Iteration   1: 339.452 ns/op
Iteration   2: 339.542 ns/op
Iteration   3: 339.406 ns/op
Iteration   4: 339.534 ns/op
Iteration   5: 339.535 ns/op

# Run progress: 19.34% complete, ETA 00:47:25
# Fork: 2 of 2
# Warmup Iteration   1: 504.952 ns/op
# Warmup Iteration   2: 445.081 ns/op
# Warmup Iteration   3: 337.593 ns/op
Iteration   1: 337.807 ns/op
Iteration   2: 337.728 ns/op
Iteration   3: 337.754 ns/op
Iteration   4: 337.013 ns/op
Iteration   5: 336.696 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.447 ±(99.9%) 1.747 ns/op [Average]
  (min, avg, max) = (336.696, 338.447, 339.542), stdev = 1.156
  CI (99.9%): [336.699, 340.194] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 19.38% complete, ETA 00:47:24
# Fork: 1 of 2
# Warmup Iteration   1: 636.012 ns/op
# Warmup Iteration   2: 271.317 ns/op
# Warmup Iteration   3: 189.233 ns/op
Iteration   1: 189.355 ns/op
Iteration   2: 189.273 ns/op
Iteration   3: 189.468 ns/op
Iteration   4: 189.504 ns/op
Iteration   5: 189.646 ns/op

# Run progress: 19.41% complete, ETA 00:47:23
# Fork: 2 of 2
# Warmup Iteration   1: 574.951 ns/op
# Warmup Iteration   2: 279.338 ns/op
# Warmup Iteration   3: 195.763 ns/op
Iteration   1: 195.759 ns/op
Iteration   2: 196.336 ns/op
Iteration   3: 197.537 ns/op
Iteration   4: 196.300 ns/op
Iteration   5: 197.201 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  193.038 ±(99.9%) 5.767 ns/op [Average]
  (min, avg, max) = (189.273, 193.038, 197.537), stdev = 3.815
  CI (99.9%): [187.270, 198.805] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 19.44% complete, ETA 00:47:21
# Fork: 1 of 2
# Warmup Iteration   1: 555.147 ns/op
# Warmup Iteration   2: 406.183 ns/op
# Warmup Iteration   3: 298.096 ns/op
Iteration   1: 298.182 ns/op
Iteration   2: 298.244 ns/op
Iteration   3: 298.377 ns/op
Iteration   4: 298.185 ns/op
Iteration   5: 298.111 ns/op

# Run progress: 19.48% complete, ETA 00:47:20
# Fork: 2 of 2
# Warmup Iteration   1: 487.199 ns/op
# Warmup Iteration   2: 395.677 ns/op
# Warmup Iteration   3: 301.892 ns/op
Iteration   1: 302.052 ns/op
Iteration   2: 301.815 ns/op
Iteration   3: 301.786 ns/op
Iteration   4: 301.492 ns/op
Iteration   5: 301.976 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  300.022 ±(99.9%) 2.882 ns/op [Average]
  (min, avg, max) = (298.111, 300.022, 302.052), stdev = 1.906
  CI (99.9%): [297.140, 302.904] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 19.51% complete, ETA 00:47:19
# Fork: 1 of 2
# Warmup Iteration   1: 1611.138 ns/op
# Warmup Iteration   2: 1160.176 ns/op
# Warmup Iteration   3: 793.704 ns/op
Iteration   1: 791.467 ns/op
Iteration   2: 791.488 ns/op
Iteration   3: 791.723 ns/op
Iteration   4: 794.285 ns/op
Iteration   5: 794.495 ns/op

# Run progress: 19.55% complete, ETA 00:47:18
# Fork: 2 of 2
# Warmup Iteration   1: 1698.243 ns/op
# Warmup Iteration   2: 1156.118 ns/op
# Warmup Iteration   3: 791.139 ns/op
Iteration   1: 791.370 ns/op
Iteration   2: 791.184 ns/op
Iteration   3: 791.183 ns/op
Iteration   4: 794.202 ns/op
Iteration   5: 794.424 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  792.582 ±(99.9%) 2.317 ns/op [Average]
  (min, avg, max) = (791.183, 792.582, 794.495), stdev = 1.533
  CI (99.9%): [790.265, 794.899] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 19.58% complete, ETA 00:47:16
# Fork: 1 of 2
# Warmup Iteration   1: 20.439 ns/op
# Warmup Iteration   2: 24.848 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.871 ns/op

# Run progress: 19.62% complete, ETA 00:47:15
# Fork: 2 of 2
# Warmup Iteration   1: 19.749 ns/op
# Warmup Iteration   2: 22.995 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.886 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.780 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (13.709, 13.780, 13.886), stdev = 0.087
  CI (99.9%): [13.649, 13.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 19.65% complete, ETA 00:47:14
# Fork: 1 of 2
# Warmup Iteration   1: 689.274 ns/op
# Warmup Iteration   2: 334.340 ns/op
# Warmup Iteration   3: 225.608 ns/op
Iteration   1: 225.790 ns/op
Iteration   2: 225.775 ns/op
Iteration   3: 225.784 ns/op
Iteration   4: 226.552 ns/op
Iteration   5: 225.444 ns/op

# Run progress: 19.69% complete, ETA 00:47:13
# Fork: 2 of 2
# Warmup Iteration   1: 664.618 ns/op
# Warmup Iteration   2: 327.458 ns/op
# Warmup Iteration   3: 227.783 ns/op
Iteration   1: 227.324 ns/op
Iteration   2: 227.275 ns/op
Iteration   3: 226.919 ns/op
Iteration   4: 227.475 ns/op
Iteration   5: 226.496 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  226.483 ±(99.9%) 1.134 ns/op [Average]
  (min, avg, max) = (225.444, 226.483, 227.475), stdev = 0.750
  CI (99.9%): [225.349, 227.618] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 19.72% complete, ETA 00:47:11
# Fork: 1 of 2
# Warmup Iteration   1: 545.373 ns/op
# Warmup Iteration   2: 484.482 ns/op
# Warmup Iteration   3: 364.334 ns/op
Iteration   1: 366.249 ns/op
Iteration   2: 365.318 ns/op
Iteration   3: 363.743 ns/op
Iteration   4: 363.401 ns/op
Iteration   5: 363.478 ns/op

# Run progress: 19.76% complete, ETA 00:47:10
# Fork: 2 of 2
# Warmup Iteration   1: 555.144 ns/op
# Warmup Iteration   2: 551.812 ns/op
# Warmup Iteration   3: 372.227 ns/op
Iteration   1: 370.441 ns/op
Iteration   2: 370.836 ns/op
Iteration   3: 374.017 ns/op
Iteration   4: 370.112 ns/op
Iteration   5: 371.577 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  367.917 ±(99.9%) 5.907 ns/op [Average]
  (min, avg, max) = (363.401, 367.917, 374.017), stdev = 3.907
  CI (99.9%): [362.010, 373.824] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 19.79% complete, ETA 00:47:09
# Fork: 1 of 2
# Warmup Iteration   1: 4061.766 ns/op
# Warmup Iteration   2: 357.774 ns/op
# Warmup Iteration   3: 225.545 ns/op
Iteration   1: 227.110 ns/op
Iteration   2: 223.913 ns/op
Iteration   3: 224.902 ns/op
Iteration   4: 225.139 ns/op
Iteration   5: 227.333 ns/op

# Run progress: 19.83% complete, ETA 00:47:08
# Fork: 2 of 2
# Warmup Iteration   1: 1537.715 ns/op
# Warmup Iteration   2: 321.849 ns/op
# Warmup Iteration   3: 226.597 ns/op
Iteration   1: 227.305 ns/op
Iteration   2: 226.383 ns/op
Iteration   3: 226.443 ns/op
Iteration   4: 226.577 ns/op
Iteration   5: 229.622 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  226.473 ±(99.9%) 2.394 ns/op [Average]
  (min, avg, max) = (223.913, 226.473, 229.622), stdev = 1.584
  CI (99.9%): [224.078, 228.867] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 19.86% complete, ETA 00:47:07
# Fork: 1 of 2
# Warmup Iteration   1: 450.101 ns/op
# Warmup Iteration   2: 376.639 ns/op
# Warmup Iteration   3: 281.660 ns/op
Iteration   1: 283.129 ns/op
Iteration   2: 281.830 ns/op
Iteration   3: 283.710 ns/op
Iteration   4: 282.995 ns/op
Iteration   5: 282.158 ns/op

# Run progress: 19.90% complete, ETA 00:47:05
# Fork: 2 of 2
# Warmup Iteration   1: 565.946 ns/op
# Warmup Iteration   2: 378.526 ns/op
# Warmup Iteration   3: 282.298 ns/op
Iteration   1: 281.518 ns/op
Iteration   2: 285.057 ns/op
Iteration   3: 281.565 ns/op
Iteration   4: 282.661 ns/op
Iteration   5: 281.755 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  282.638 ±(99.9%) 1.705 ns/op [Average]
  (min, avg, max) = (281.518, 282.638, 285.057), stdev = 1.127
  CI (99.9%): [280.933, 284.342] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 19.93% complete, ETA 00:47:04
# Fork: 1 of 2
# Warmup Iteration   1: 3171.157 ns/op
# Warmup Iteration   2: 2213.901 ns/op
# Warmup Iteration   3: 1560.911 ns/op
Iteration   1: 1554.889 ns/op
Iteration   2: 1562.800 ns/op
Iteration   3: 1558.216 ns/op
Iteration   4: 1565.410 ns/op
Iteration   5: 1566.430 ns/op

# Run progress: 19.97% complete, ETA 00:47:03
# Fork: 2 of 2
# Warmup Iteration   1: 3355.353 ns/op
# Warmup Iteration   2: 2350.948 ns/op
# Warmup Iteration   3: 1558.004 ns/op
Iteration   1: 1562.723 ns/op
Iteration   2: 1561.041 ns/op
Iteration   3: 1561.916 ns/op
Iteration   4: 1563.502 ns/op
Iteration   5: 1564.205 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1562.113 ±(99.9%) 5.169 ns/op [Average]
  (min, avg, max) = (1554.889, 1562.113, 1566.430), stdev = 3.419
  CI (99.9%): [1556.944, 1567.283] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 20.00% complete, ETA 00:47:02
# Fork: 1 of 2
# Warmup Iteration   1: 19.409 ns/op
# Warmup Iteration   2: 22.477 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.730 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.870 ns/op
Iteration   5: 13.871 ns/op

# Run progress: 20.03% complete, ETA 00:47:00
# Fork: 2 of 2
# Warmup Iteration   1: 20.557 ns/op
# Warmup Iteration   2: 22.493 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.724 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.871 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (13.715, 13.783, 13.886), stdev = 0.080
  CI (99.9%): [13.662, 13.903] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 20.07% complete, ETA 00:46:59
# Fork: 1 of 2
# Warmup Iteration   1: 90.322 ns/op
# Warmup Iteration   2: 89.715 ns/op
# Warmup Iteration   3: 57.843 ns/op
Iteration   1: 57.851 ns/op
Iteration   2: 57.854 ns/op
Iteration   3: 57.853 ns/op
Iteration   4: 57.649 ns/op
Iteration   5: 57.645 ns/op

# Run progress: 20.10% complete, ETA 00:46:58
# Fork: 2 of 2
# Warmup Iteration   1: 84.446 ns/op
# Warmup Iteration   2: 94.140 ns/op
# Warmup Iteration   3: 57.833 ns/op
Iteration   1: 57.841 ns/op
Iteration   2: 57.822 ns/op
Iteration   3: 57.836 ns/op
Iteration   4: 57.615 ns/op
Iteration   5: 57.622 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  57.759 ±(99.9%) 0.165 ns/op [Average]
  (min, avg, max) = (57.615, 57.759, 57.854), stdev = 0.109
  CI (99.9%): [57.594, 57.924] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 20.14% complete, ETA 00:46:57
# Fork: 1 of 2
# Warmup Iteration   1: 71.591 ns/op
# Warmup Iteration   2: 69.452 ns/op
# Warmup Iteration   3: 45.247 ns/op
Iteration   1: 45.270 ns/op
Iteration   2: 45.279 ns/op
Iteration   3: 45.263 ns/op
Iteration   4: 45.331 ns/op
Iteration   5: 45.293 ns/op

# Run progress: 20.17% complete, ETA 00:46:55
# Fork: 2 of 2
# Warmup Iteration   1: 67.022 ns/op
# Warmup Iteration   2: 73.656 ns/op
# Warmup Iteration   3: 45.246 ns/op
Iteration   1: 45.237 ns/op
Iteration   2: 45.198 ns/op
Iteration   3: 45.221 ns/op
Iteration   4: 45.345 ns/op
Iteration   5: 45.276 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.271 ±(99.9%) 0.069 ns/op [Average]
  (min, avg, max) = (45.198, 45.271, 45.345), stdev = 0.046
  CI (99.9%): [45.202, 45.340] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 20.21% complete, ETA 00:46:54
# Fork: 1 of 2
# Warmup Iteration   1: 276.566 ns/op
# Warmup Iteration   2: 99.104 ns/op
# Warmup Iteration   3: 68.805 ns/op
Iteration   1: 68.812 ns/op
Iteration   2: 68.854 ns/op
Iteration   3: 68.862 ns/op
Iteration   4: 68.820 ns/op
Iteration   5: 68.817 ns/op

# Run progress: 20.24% complete, ETA 00:46:53
# Fork: 2 of 2
# Warmup Iteration   1: 315.338 ns/op
# Warmup Iteration   2: 101.676 ns/op
# Warmup Iteration   3: 68.925 ns/op
Iteration   1: 68.918 ns/op
Iteration   2: 68.959 ns/op
Iteration   3: 68.983 ns/op
Iteration   4: 68.975 ns/op
Iteration   5: 68.923 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  68.892 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (68.812, 68.892, 68.983), stdev = 0.067
  CI (99.9%): [68.790, 68.994] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 20.28% complete, ETA 00:46:52
# Fork: 1 of 2
# Warmup Iteration   1: 69.373 ns/op
# Warmup Iteration   2: 73.199 ns/op
# Warmup Iteration   3: 47.518 ns/op
Iteration   1: 47.564 ns/op
Iteration   2: 47.544 ns/op
Iteration   3: 47.487 ns/op
Iteration   4: 47.636 ns/op
Iteration   5: 47.595 ns/op

# Run progress: 20.31% complete, ETA 00:46:50
# Fork: 2 of 2
# Warmup Iteration   1: 69.087 ns/op
# Warmup Iteration   2: 68.847 ns/op
# Warmup Iteration   3: 47.539 ns/op
Iteration   1: 47.472 ns/op
Iteration   2: 47.532 ns/op
Iteration   3: 47.548 ns/op
Iteration   4: 47.544 ns/op
Iteration   5: 47.556 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.548 ±(99.9%) 0.072 ns/op [Average]
  (min, avg, max) = (47.472, 47.548, 47.636), stdev = 0.047
  CI (99.9%): [47.476, 47.619] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 20.35% complete, ETA 00:46:49
# Fork: 1 of 2
# Warmup Iteration   1: 187.418 ns/op
# Warmup Iteration   2: 191.758 ns/op
# Warmup Iteration   3: 98.213 ns/op
Iteration   1: 98.249 ns/op
Iteration   2: 98.263 ns/op
Iteration   3: 98.356 ns/op
Iteration   4: 105.217 ns/op
Iteration   5: 105.162 ns/op

# Run progress: 20.38% complete, ETA 00:46:48
# Fork: 2 of 2
# Warmup Iteration   1: 173.833 ns/op
# Warmup Iteration   2: 191.967 ns/op
# Warmup Iteration   3: 98.243 ns/op
Iteration   1: 98.360 ns/op
Iteration   2: 98.208 ns/op
Iteration   3: 98.298 ns/op
Iteration   4: 105.180 ns/op
Iteration   5: 105.186 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.048 ±(99.9%) 5.385 ns/op [Average]
  (min, avg, max) = (98.208, 101.048, 105.217), stdev = 3.562
  CI (99.9%): [95.663, 106.433] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 20.42% complete, ETA 00:46:47
# Fork: 1 of 2
# Warmup Iteration   1: 19.581 ns/op
# Warmup Iteration   2: 21.179 ns/op
# Warmup Iteration   3: 13.720 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.719 ns/op
Iteration   4: 13.874 ns/op
Iteration   5: 13.879 ns/op

# Run progress: 20.45% complete, ETA 00:46:45
# Fork: 2 of 2
# Warmup Iteration   1: 19.323 ns/op
# Warmup Iteration   2: 20.199 ns/op
# Warmup Iteration   3: 13.729 ns/op
Iteration   1: 13.723 ns/op
Iteration   2: 13.733 ns/op
Iteration   3: 13.707 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.872 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (13.707, 13.782, 13.884), stdev = 0.082
  CI (99.9%): [13.657, 13.906] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 20.49% complete, ETA 00:46:44
# Fork: 1 of 2
# Warmup Iteration   1: 1063.312 ns/op
# Warmup Iteration   2: 455.332 ns/op
# Warmup Iteration   3: 313.659 ns/op
Iteration   1: 313.548 ns/op
Iteration   2: 318.461 ns/op
Iteration   3: 315.371 ns/op
Iteration   4: 317.047 ns/op
Iteration   5: 317.919 ns/op

# Run progress: 20.52% complete, ETA 00:46:43
# Fork: 2 of 2
# Warmup Iteration   1: 1344.679 ns/op
# Warmup Iteration   2: 445.752 ns/op
# Warmup Iteration   3: 314.521 ns/op
Iteration   1: 312.542 ns/op
Iteration   2: 313.792 ns/op
Iteration   3: 313.662 ns/op
Iteration   4: 314.367 ns/op
Iteration   5: 312.952 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  314.966 ±(99.9%) 3.219 ns/op [Average]
  (min, avg, max) = (312.542, 314.966, 318.461), stdev = 2.129
  CI (99.9%): [311.747, 318.185] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 20.56% complete, ETA 00:46:42
# Fork: 1 of 2
# Warmup Iteration   1: 495.867 ns/op
# Warmup Iteration   2: 448.888 ns/op
# Warmup Iteration   3: 336.847 ns/op
Iteration   1: 337.884 ns/op
Iteration   2: 340.650 ns/op
Iteration   3: 338.918 ns/op
Iteration   4: 340.738 ns/op
Iteration   5: 339.522 ns/op

# Run progress: 20.59% complete, ETA 00:46:41
# Fork: 2 of 2
# Warmup Iteration   1: 488.059 ns/op
# Warmup Iteration   2: 451.556 ns/op
# Warmup Iteration   3: 337.462 ns/op
Iteration   1: 336.258 ns/op
Iteration   2: 335.703 ns/op
Iteration   3: 335.677 ns/op
Iteration   4: 337.899 ns/op
Iteration   5: 339.340 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.259 ±(99.9%) 2.875 ns/op [Average]
  (min, avg, max) = (335.677, 338.259, 340.738), stdev = 1.901
  CI (99.9%): [335.384, 341.134] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 20.63% complete, ETA 00:46:39
# Fork: 1 of 2
# Warmup Iteration   1: 24587.273 ns/op
# Warmup Iteration   2: 662.334 ns/op
# Warmup Iteration   3: 413.257 ns/op
Iteration   1: 377.046 ns/op
Iteration   2: 377.559 ns/op
Iteration   3: 377.831 ns/op
Iteration   4: 376.321 ns/op
Iteration   5: 379.880 ns/op

# Run progress: 20.66% complete, ETA 00:46:38
# Fork: 2 of 2
# Warmup Iteration   1: 18077.843 ns/op
# Warmup Iteration   2: 714.360 ns/op
# Warmup Iteration   3: 407.191 ns/op
Iteration   1: 378.320 ns/op
Iteration   2: 378.478 ns/op
Iteration   3: 376.608 ns/op
Iteration   4: 375.995 ns/op
Iteration   5: 373.970 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  377.201 ±(99.9%) 2.450 ns/op [Average]
  (min, avg, max) = (373.970, 377.201, 379.880), stdev = 1.620
  CI (99.9%): [374.751, 379.650] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 20.69% complete, ETA 00:46:37
# Fork: 1 of 2
# Warmup Iteration   1: 467.722 ns/op
# Warmup Iteration   2: 376.187 ns/op
# Warmup Iteration   3: 254.153 ns/op
Iteration   1: 256.947 ns/op
Iteration   2: 256.000 ns/op
Iteration   3: 254.312 ns/op
Iteration   4: 255.692 ns/op
Iteration   5: 254.657 ns/op

# Run progress: 20.73% complete, ETA 00:46:35
# Fork: 2 of 2
# Warmup Iteration   1: 404.816 ns/op
# Warmup Iteration   2: 345.930 ns/op
# Warmup Iteration   3: 254.567 ns/op
Iteration   1: 254.461 ns/op
Iteration   2: 254.827 ns/op
Iteration   3: 254.861 ns/op
Iteration   4: 256.894 ns/op
Iteration   5: 255.423 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  255.408 ±(99.9%) 1.452 ns/op [Average]
  (min, avg, max) = (254.312, 255.408, 256.947), stdev = 0.961
  CI (99.9%): [253.955, 256.860] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 20.76% complete, ETA 00:46:34
# Fork: 1 of 2
# Warmup Iteration   1: 1613.585 ns/op
# Warmup Iteration   2: 1072.570 ns/op
# Warmup Iteration   3: 725.083 ns/op
Iteration   1: 728.085 ns/op
Iteration   2: 725.669 ns/op
Iteration   3: 723.749 ns/op
Iteration   4: 732.878 ns/op
Iteration   5: 737.016 ns/op

# Run progress: 20.80% complete, ETA 00:46:33
# Fork: 2 of 2
# Warmup Iteration   1: 1761.102 ns/op
# Warmup Iteration   2: 1063.288 ns/op
# Warmup Iteration   3: 724.060 ns/op
Iteration   1: 725.298 ns/op
Iteration   2: 725.060 ns/op
Iteration   3: 724.950 ns/op
Iteration   4: 741.530 ns/op
Iteration   5: 734.357 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  729.859 ±(99.9%) 9.330 ns/op [Average]
  (min, avg, max) = (723.749, 729.859, 741.530), stdev = 6.171
  CI (99.9%): [720.529, 739.189] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 20.83% complete, ETA 00:46:32
# Fork: 1 of 2
# Warmup Iteration   1: 19.242 ns/op
# Warmup Iteration   2: 24.349 ns/op
# Warmup Iteration   3: 13.723 ns/op
Iteration   1: 13.735 ns/op
Iteration   2: 19.531 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 13.912 ns/op
Iteration   5: 13.902 ns/op

# Run progress: 20.87% complete, ETA 00:46:31
# Fork: 2 of 2
# Warmup Iteration   1: 20.414 ns/op
# Warmup Iteration   2: 24.927 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 17.854 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.900 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.787 ±(99.9%) 3.172 ns/op [Average]
  (min, avg, max) = (13.713, 14.787, 19.531), stdev = 2.098
  CI (99.9%): [11.615, 17.959] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 20.90% complete, ETA 00:46:29
# Fork: 1 of 2
# Warmup Iteration   1: 275.911 ns/op
# Warmup Iteration   2: 138.402 ns/op
# Warmup Iteration   3: 95.147 ns/op
Iteration   1: 95.153 ns/op
Iteration   2: 122.414 ns/op
Iteration   3: 95.170 ns/op
Iteration   4: 95.110 ns/op
Iteration   5: 95.201 ns/op

# Run progress: 20.94% complete, ETA 00:46:28
# Fork: 2 of 2
# Warmup Iteration   1: 186.739 ns/op
# Warmup Iteration   2: 138.006 ns/op
# Warmup Iteration   3: 95.099 ns/op
Iteration   1: 95.078 ns/op
Iteration   2: 134.947 ns/op
Iteration   3: 95.125 ns/op
Iteration   4: 95.029 ns/op
Iteration   5: 95.156 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.838 ±(99.9%) 21.850 ns/op [Average]
  (min, avg, max) = (95.029, 101.838, 134.947), stdev = 14.452
  CI (99.9%): [79.989, 123.688] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 20.97% complete, ETA 00:46:27
# Fork: 1 of 2
# Warmup Iteration   1: 69.523 ns/op
# Warmup Iteration   2: 70.265 ns/op
# Warmup Iteration   3: 45.134 ns/op
Iteration   1: 45.130 ns/op
Iteration   2: 71.231 ns/op
Iteration   3: 45.193 ns/op
Iteration   4: 45.013 ns/op
Iteration   5: 45.108 ns/op

# Run progress: 21.01% complete, ETA 00:46:26
# Fork: 2 of 2
# Warmup Iteration   1: 64.963 ns/op
# Warmup Iteration   2: 74.817 ns/op
# Warmup Iteration   3: 45.129 ns/op
Iteration   1: 45.163 ns/op
Iteration   2: 70.620 ns/op
Iteration   3: 45.167 ns/op
Iteration   4: 45.068 ns/op
Iteration   5: 45.114 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  50.281 ±(99.9%) 16.452 ns/op [Average]
  (min, avg, max) = (45.013, 50.281, 71.231), stdev = 10.882
  CI (99.9%): [33.829, 66.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 21.04% complete, ETA 00:46:25
# Fork: 1 of 2
# Warmup Iteration   1: 238.784 ns/op
# Warmup Iteration   2: 163.745 ns/op
# Warmup Iteration   3: 109.773 ns/op
Iteration   1: 110.292 ns/op
Iteration   2: 155.234 ns/op
Iteration   3: 109.806 ns/op
Iteration   4: 109.570 ns/op
Iteration   5: 109.643 ns/op

# Run progress: 21.08% complete, ETA 00:46:23
# Fork: 2 of 2
# Warmup Iteration   1: 238.408 ns/op
# Warmup Iteration   2: 156.616 ns/op
# Warmup Iteration   3: 112.371 ns/op
Iteration   1: 112.277 ns/op
Iteration   2: 158.498 ns/op
Iteration   3: 112.288 ns/op
Iteration   4: 111.985 ns/op
Iteration   5: 112.111 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  120.170 ±(99.9%) 29.312 ns/op [Average]
  (min, avg, max) = (109.570, 120.170, 158.498), stdev = 19.388
  CI (99.9%): [90.858, 149.482] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 21.11% complete, ETA 00:46:22
# Fork: 1 of 2
# Warmup Iteration   1: 68.799 ns/op
# Warmup Iteration   2: 68.316 ns/op
# Warmup Iteration   3: 47.528 ns/op
Iteration   1: 47.510 ns/op
Iteration   2: 66.924 ns/op
Iteration   3: 47.453 ns/op
Iteration   4: 47.308 ns/op
Iteration   5: 47.569 ns/op

# Run progress: 21.15% complete, ETA 00:46:21
# Fork: 2 of 2
# Warmup Iteration   1: 68.593 ns/op
# Warmup Iteration   2: 73.967 ns/op
# Warmup Iteration   3: 47.480 ns/op
Iteration   1: 47.492 ns/op
Iteration   2: 74.863 ns/op
Iteration   3: 47.521 ns/op
Iteration   4: 47.348 ns/op
Iteration   5: 47.610 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.160 ±(99.9%) 15.194 ns/op [Average]
  (min, avg, max) = (47.308, 52.160, 74.863), stdev = 10.050
  CI (99.9%): [36.966, 67.353] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 21.18% complete, ETA 00:46:20
# Fork: 1 of 2
# Warmup Iteration   1: 219.347 ns/op
# Warmup Iteration   2: 152.381 ns/op
# Warmup Iteration   3: 128.442 ns/op
Iteration   1: 128.422 ns/op
Iteration   2: 169.807 ns/op
Iteration   3: 128.447 ns/op
Iteration   4: 132.848 ns/op
Iteration   5: 132.613 ns/op

# Run progress: 21.22% complete, ETA 00:46:19
# Fork: 2 of 2
# Warmup Iteration   1: 194.892 ns/op
# Warmup Iteration   2: 182.977 ns/op
# Warmup Iteration   3: 128.395 ns/op
Iteration   1: 128.420 ns/op
Iteration   2: 172.483 ns/op
Iteration   3: 128.439 ns/op
Iteration   4: 132.908 ns/op
Iteration   5: 132.610 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.700 ±(99.9%) 26.053 ns/op [Average]
  (min, avg, max) = (128.420, 138.700, 172.483), stdev = 17.232
  CI (99.9%): [112.647, 164.752] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 21.25% complete, ETA 00:46:17
# Fork: 1 of 2
# Warmup Iteration   1: 19.902 ns/op
# Warmup Iteration   2: 23.731 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.719 ns/op
Iteration   4: 14.621 ns/op
Iteration   5: 14.613 ns/op

# Run progress: 21.28% complete, ETA 00:46:16
# Fork: 2 of 2
# Warmup Iteration   1: 18.628 ns/op
# Warmup Iteration   2: 25.026 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.909 ns/op
Iteration   5: 13.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.933 ±(99.9%) 0.557 ns/op [Average]
  (min, avg, max) = (13.712, 13.933, 14.621), stdev = 0.369
  CI (99.9%): [13.376, 14.490] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 21.32% complete, ETA 00:46:15
# Fork: 1 of 2
# Warmup Iteration   1: 201.739 ns/op
# Warmup Iteration   2: 189.895 ns/op
# Warmup Iteration   3: 127.033 ns/op
Iteration   1: 128.138 ns/op
Iteration   2: 127.230 ns/op
Iteration   3: 127.072 ns/op
Iteration   4: 127.471 ns/op
Iteration   5: 127.038 ns/op

# Run progress: 21.35% complete, ETA 00:46:14
# Fork: 2 of 2
# Warmup Iteration   1: 210.791 ns/op
# Warmup Iteration   2: 184.258 ns/op
# Warmup Iteration   3: 127.170 ns/op
Iteration   1: 127.092 ns/op
Iteration   2: 127.229 ns/op
Iteration   3: 127.151 ns/op
Iteration   4: 127.040 ns/op
Iteration   5: 127.115 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  127.258 ±(99.9%) 0.507 ns/op [Average]
  (min, avg, max) = (127.038, 127.258, 128.138), stdev = 0.335
  CI (99.9%): [126.751, 127.764] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 21.39% complete, ETA 00:46:13
# Fork: 1 of 2
# Warmup Iteration   1: 66.775 ns/op
# Warmup Iteration   2: 67.769 ns/op
# Warmup Iteration   3: 45.121 ns/op
Iteration   1: 45.126 ns/op
Iteration   2: 45.129 ns/op
Iteration   3: 45.170 ns/op
Iteration   4: 45.462 ns/op
Iteration   5: 45.415 ns/op

# Run progress: 21.42% complete, ETA 00:46:11
# Fork: 2 of 2
# Warmup Iteration   1: 72.022 ns/op
# Warmup Iteration   2: 69.315 ns/op
# Warmup Iteration   3: 45.120 ns/op
Iteration   1: 45.156 ns/op
Iteration   2: 45.123 ns/op
Iteration   3: 45.103 ns/op
Iteration   4: 45.425 ns/op
Iteration   5: 45.430 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.254 ±(99.9%) 0.235 ns/op [Average]
  (min, avg, max) = (45.103, 45.254, 45.462), stdev = 0.156
  CI (99.9%): [45.019, 45.489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 21.46% complete, ETA 00:46:10
# Fork: 1 of 2
# Warmup Iteration   1: 231.739 ns/op
# Warmup Iteration   2: 162.607 ns/op
# Warmup Iteration   3: 110.977 ns/op
Iteration   1: 111.028 ns/op
Iteration   2: 111.013 ns/op
Iteration   3: 111.005 ns/op
Iteration   4: 110.762 ns/op
Iteration   5: 110.684 ns/op

# Run progress: 21.49% complete, ETA 00:46:09
# Fork: 2 of 2
# Warmup Iteration   1: 242.939 ns/op
# Warmup Iteration   2: 157.489 ns/op
# Warmup Iteration   3: 111.889 ns/op
Iteration   1: 111.950 ns/op
Iteration   2: 111.894 ns/op
Iteration   3: 111.915 ns/op
Iteration   4: 111.786 ns/op
Iteration   5: 111.609 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  111.364 ±(99.9%) 0.774 ns/op [Average]
  (min, avg, max) = (110.684, 111.364, 111.950), stdev = 0.512
  CI (99.9%): [110.591, 112.138] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 21.53% complete, ETA 00:46:08
# Fork: 1 of 2
# Warmup Iteration   1: 67.999 ns/op
# Warmup Iteration   2: 77.681 ns/op
# Warmup Iteration   3: 47.494 ns/op
Iteration   1: 47.480 ns/op
Iteration   2: 47.470 ns/op
Iteration   3: 47.516 ns/op
Iteration   4: 47.363 ns/op
Iteration   5: 47.531 ns/op

# Run progress: 21.56% complete, ETA 00:46:07
# Fork: 2 of 2
# Warmup Iteration   1: 67.978 ns/op
# Warmup Iteration   2: 69.464 ns/op
# Warmup Iteration   3: 47.475 ns/op
Iteration   1: 47.546 ns/op
Iteration   2: 47.507 ns/op
Iteration   3: 47.492 ns/op
Iteration   4: 47.879 ns/op
Iteration   5: 48.102 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.589 ±(99.9%) 0.338 ns/op [Average]
  (min, avg, max) = (47.363, 47.589, 48.102), stdev = 0.224
  CI (99.9%): [47.250, 47.927] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 21.60% complete, ETA 00:46:05
# Fork: 1 of 2
# Warmup Iteration   1: 190.853 ns/op
# Warmup Iteration   2: 193.314 ns/op
# Warmup Iteration   3: 127.829 ns/op
Iteration   1: 127.912 ns/op
Iteration   2: 127.882 ns/op
Iteration   3: 127.901 ns/op
Iteration   4: 132.672 ns/op
Iteration   5: 132.634 ns/op

# Run progress: 21.63% complete, ETA 00:46:04
# Fork: 2 of 2
# Warmup Iteration   1: 211.497 ns/op
# Warmup Iteration   2: 192.622 ns/op
# Warmup Iteration   3: 127.828 ns/op
Iteration   1: 127.886 ns/op
Iteration   2: 127.890 ns/op
Iteration   3: 127.901 ns/op
Iteration   4: 132.456 ns/op
Iteration   5: 132.402 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  129.754 ±(99.9%) 3.629 ns/op [Average]
  (min, avg, max) = (127.882, 129.754, 132.672), stdev = 2.400
  CI (99.9%): [126.125, 133.383] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 21.67% complete, ETA 00:46:03
# Fork: 1 of 2
# Warmup Iteration   1: 18.298 ns/op
# Warmup Iteration   2: 24.854 ns/op
# Warmup Iteration   3: 13.705 ns/op
Iteration   1: 13.709 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 23.889 ns/op
Iteration   4: 13.901 ns/op
Iteration   5: 13.895 ns/op

# Run progress: 21.70% complete, ETA 00:46:02
# Fork: 2 of 2
# Warmup Iteration   1: 18.259 ns/op
# Warmup Iteration   2: 21.873 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.719 ns/op
Iteration   2: 13.754 ns/op
Iteration   3: 23.751 ns/op
Iteration   4: 13.907 ns/op
Iteration   5: 13.901 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  15.814 ±(99.9%) 6.380 ns/op [Average]
  (min, avg, max) = (13.709, 15.814, 23.889), stdev = 4.220
  CI (99.9%): [9.434, 22.195] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 21.74% complete, ETA 00:46:01
# Fork: 1 of 2
# Warmup Iteration   1: 230.529 ns/op
# Warmup Iteration   2: 188.996 ns/op
# Warmup Iteration   3: 121.948 ns/op
Iteration   1: 121.982 ns/op
Iteration   2: 121.932 ns/op
Iteration   3: 212.955 ns/op
Iteration   4: 122.388 ns/op
Iteration   5: 121.911 ns/op

# Run progress: 21.77% complete, ETA 00:46:00
# Fork: 2 of 2
# Warmup Iteration   1: 218.123 ns/op
# Warmup Iteration   2: 168.937 ns/op
# Warmup Iteration   3: 122.187 ns/op
Iteration   1: 122.158 ns/op
Iteration   2: 122.267 ns/op
Iteration   3: 223.189 ns/op
Iteration   4: 122.118 ns/op
Iteration   5: 122.180 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.308 ±(99.9%) 61.276 ns/op [Average]
  (min, avg, max) = (121.911, 141.308, 223.189), stdev = 40.530
  CI (99.9%): [80.032, 202.584] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 21.81% complete, ETA 00:45:58
# Fork: 1 of 2
# Warmup Iteration   1: 70.905 ns/op
# Warmup Iteration   2: 71.886 ns/op
# Warmup Iteration   3: 45.122 ns/op
Iteration   1: 45.100 ns/op
Iteration   2: 45.093 ns/op
Iteration   3: 78.384 ns/op
Iteration   4: 45.129 ns/op
Iteration   5: 45.024 ns/op

# Run progress: 21.84% complete, ETA 00:45:57
# Fork: 2 of 2
# Warmup Iteration   1: 66.329 ns/op
# Warmup Iteration   2: 72.308 ns/op
# Warmup Iteration   3: 45.134 ns/op
Iteration   1: 45.140 ns/op
Iteration   2: 45.101 ns/op
Iteration   3: 79.519 ns/op
Iteration   4: 45.060 ns/op
Iteration   5: 45.094 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.864 ±(99.9%) 21.588 ns/op [Average]
  (min, avg, max) = (45.024, 51.864, 79.519), stdev = 14.279
  CI (99.9%): [30.277, 73.452] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 21.88% complete, ETA 00:45:56
# Fork: 1 of 2
# Warmup Iteration   1: 217.478 ns/op
# Warmup Iteration   2: 144.671 ns/op
# Warmup Iteration   3: 104.419 ns/op
Iteration   1: 104.471 ns/op
Iteration   2: 104.394 ns/op
Iteration   3: 203.923 ns/op
Iteration   4: 104.452 ns/op
Iteration   5: 104.552 ns/op

# Run progress: 21.91% complete, ETA 00:45:55
# Fork: 2 of 2
# Warmup Iteration   1: 230.295 ns/op
# Warmup Iteration   2: 150.531 ns/op
# Warmup Iteration   3: 104.411 ns/op
Iteration   1: 104.396 ns/op
Iteration   2: 104.362 ns/op
Iteration   3: 165.726 ns/op
Iteration   4: 104.370 ns/op
Iteration   5: 104.336 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  120.498 ±(99.9%) 53.033 ns/op [Average]
  (min, avg, max) = (104.336, 120.498, 203.923), stdev = 35.078
  CI (99.9%): [67.465, 173.531] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 21.94% complete, ETA 00:45:54
# Fork: 1 of 2
# Warmup Iteration   1: 68.244 ns/op
# Warmup Iteration   2: 73.244 ns/op
# Warmup Iteration   3: 47.495 ns/op
Iteration   1: 47.506 ns/op
Iteration   2: 47.550 ns/op
Iteration   3: 82.817 ns/op
Iteration   4: 47.352 ns/op
Iteration   5: 47.558 ns/op

# Run progress: 21.98% complete, ETA 00:45:53
# Fork: 2 of 2
# Warmup Iteration   1: 70.574 ns/op
# Warmup Iteration   2: 75.427 ns/op
# Warmup Iteration   3: 47.506 ns/op
Iteration   1: 47.468 ns/op
Iteration   2: 47.513 ns/op
Iteration   3: 86.494 ns/op
Iteration   4: 47.333 ns/op
Iteration   5: 47.677 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  54.927 ±(99.9%) 23.725 ns/op [Average]
  (min, avg, max) = (47.333, 54.927, 86.494), stdev = 15.693
  CI (99.9%): [31.202, 78.652] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 22.01% complete, ETA 00:45:52
# Fork: 1 of 2
# Warmup Iteration   1: 198.765 ns/op
# Warmup Iteration   2: 185.568 ns/op
# Warmup Iteration   3: 130.441 ns/op
Iteration   1: 130.480 ns/op
Iteration   2: 130.383 ns/op
Iteration   3: 240.554 ns/op
Iteration   4: 139.513 ns/op
Iteration   5: 139.506 ns/op

# Run progress: 22.05% complete, ETA 00:45:50
# Fork: 2 of 2
# Warmup Iteration   1: 197.866 ns/op
# Warmup Iteration   2: 196.967 ns/op
# Warmup Iteration   3: 130.360 ns/op
Iteration   1: 130.442 ns/op
Iteration   2: 130.317 ns/op
Iteration   3: 241.648 ns/op
Iteration   4: 139.478 ns/op
Iteration   5: 139.499 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.182 ±(99.9%) 67.976 ns/op [Average]
  (min, avg, max) = (130.317, 156.182, 241.648), stdev = 44.962
  CI (99.9%): [88.206, 224.158] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 22.08% complete, ETA 00:45:49
# Fork: 1 of 2
# Warmup Iteration   1: 19.438 ns/op
# Warmup Iteration   2: 21.728 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 15.239 ns/op
Iteration   5: 15.243 ns/op

# Run progress: 22.12% complete, ETA 00:45:48
# Fork: 2 of 2
# Warmup Iteration   1: 20.167 ns/op
# Warmup Iteration   2: 23.025 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.896 ns/op
Iteration   5: 13.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.056 ±(99.9%) 0.951 ns/op [Average]
  (min, avg, max) = (13.710, 14.056, 15.243), stdev = 0.629
  CI (99.9%): [13.105, 15.006] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 22.15% complete, ETA 00:45:47
# Fork: 1 of 2
# Warmup Iteration   1: 89.227 ns/op
# Warmup Iteration   2: 91.083 ns/op
# Warmup Iteration   3: 57.996 ns/op
Iteration   1: 57.916 ns/op
Iteration   2: 57.908 ns/op
Iteration   3: 57.901 ns/op
Iteration   4: 57.710 ns/op
Iteration   5: 57.801 ns/op

# Run progress: 22.19% complete, ETA 00:45:45
# Fork: 2 of 2
# Warmup Iteration   1: 83.683 ns/op
# Warmup Iteration   2: 93.465 ns/op
# Warmup Iteration   3: 57.835 ns/op
Iteration   1: 57.857 ns/op
Iteration   2: 57.841 ns/op
Iteration   3: 57.828 ns/op
Iteration   4: 57.638 ns/op
Iteration   5: 57.612 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  57.801 ±(99.9%) 0.168 ns/op [Average]
  (min, avg, max) = (57.612, 57.801, 57.916), stdev = 0.111
  CI (99.9%): [57.634, 57.969] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 22.22% complete, ETA 00:45:44
# Fork: 1 of 2
# Warmup Iteration   1: 70.178 ns/op
# Warmup Iteration   2: 66.095 ns/op
# Warmup Iteration   3: 45.107 ns/op
Iteration   1: 45.121 ns/op
Iteration   2: 45.100 ns/op
Iteration   3: 45.121 ns/op
Iteration   4: 45.071 ns/op
Iteration   5: 45.073 ns/op

# Run progress: 22.26% complete, ETA 00:45:43
# Fork: 2 of 2
# Warmup Iteration   1: 66.165 ns/op
# Warmup Iteration   2: 83.956 ns/op
# Warmup Iteration   3: 45.141 ns/op
Iteration   1: 45.203 ns/op
Iteration   2: 45.129 ns/op
Iteration   3: 45.107 ns/op
Iteration   4: 45.099 ns/op
Iteration   5: 45.045 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.107 ±(99.9%) 0.065 ns/op [Average]
  (min, avg, max) = (45.045, 45.107, 45.203), stdev = 0.043
  CI (99.9%): [45.042, 45.172] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 22.29% complete, ETA 00:45:42
# Fork: 1 of 2
# Warmup Iteration   1: 245.326 ns/op
# Warmup Iteration   2: 102.150 ns/op
# Warmup Iteration   3: 69.015 ns/op
Iteration   1: 69.150 ns/op
Iteration   2: 69.162 ns/op
Iteration   3: 69.108 ns/op
Iteration   4: 68.881 ns/op
Iteration   5: 68.736 ns/op

# Run progress: 22.33% complete, ETA 00:45:41
# Fork: 2 of 2
# Warmup Iteration   1: 518.392 ns/op
# Warmup Iteration   2: 102.579 ns/op
# Warmup Iteration   3: 71.165 ns/op
Iteration   1: 71.215 ns/op
Iteration   2: 71.206 ns/op
Iteration   3: 71.157 ns/op
Iteration   4: 71.001 ns/op
Iteration   5: 70.933 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  70.055 ±(99.9%) 1.685 ns/op [Average]
  (min, avg, max) = (68.736, 70.055, 71.215), stdev = 1.115
  CI (99.9%): [68.370, 71.740] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 22.36% complete, ETA 00:45:39
# Fork: 1 of 2
# Warmup Iteration   1: 68.315 ns/op
# Warmup Iteration   2: 68.353 ns/op
# Warmup Iteration   3: 47.491 ns/op
Iteration   1: 47.530 ns/op
Iteration   2: 47.496 ns/op
Iteration   3: 47.464 ns/op
Iteration   4: 47.360 ns/op
Iteration   5: 47.615 ns/op

# Run progress: 22.40% complete, ETA 00:45:38
# Fork: 2 of 2
# Warmup Iteration   1: 69.154 ns/op
# Warmup Iteration   2: 75.065 ns/op
# Warmup Iteration   3: 47.489 ns/op
Iteration   1: 47.500 ns/op
Iteration   2: 47.495 ns/op
Iteration   3: 47.434 ns/op
Iteration   4: 47.371 ns/op
Iteration   5: 47.490 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.476 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (47.360, 47.476, 47.615), stdev = 0.075
  CI (99.9%): [47.363, 47.588] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 22.43% complete, ETA 00:45:37
# Fork: 1 of 2
# Warmup Iteration   1: 181.665 ns/op
# Warmup Iteration   2: 188.206 ns/op
# Warmup Iteration   3: 124.968 ns/op
Iteration   1: 124.990 ns/op
Iteration   2: 124.988 ns/op
Iteration   3: 125.089 ns/op
Iteration   4: 129.895 ns/op
Iteration   5: 129.805 ns/op

# Run progress: 22.47% complete, ETA 00:45:36
# Fork: 2 of 2
# Warmup Iteration   1: 192.545 ns/op
# Warmup Iteration   2: 188.545 ns/op
# Warmup Iteration   3: 124.997 ns/op
Iteration   1: 124.981 ns/op
Iteration   2: 125.039 ns/op
Iteration   3: 124.946 ns/op
Iteration   4: 129.602 ns/op
Iteration   5: 129.528 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.886 ±(99.9%) 3.675 ns/op [Average]
  (min, avg, max) = (124.946, 126.886, 129.895), stdev = 2.431
  CI (99.9%): [123.212, 130.561] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 22.50% complete, ETA 00:45:34
# Fork: 1 of 2
# Warmup Iteration   1: 19.060 ns/op
# Warmup Iteration   2: 23.894 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.707 ns/op
Iteration   2: 23.732 ns/op
Iteration   3: 13.720 ns/op
Iteration   4: 15.251 ns/op
Iteration   5: 15.256 ns/op

# Run progress: 22.53% complete, ETA 00:45:33
# Fork: 2 of 2
# Warmup Iteration   1: 18.631 ns/op
# Warmup Iteration   2: 21.614 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 24.609 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.892 ns/op
Iteration   5: 13.906 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  16.151 ±(99.9%) 6.463 ns/op [Average]
  (min, avg, max) = (13.707, 16.151, 24.609), stdev = 4.275
  CI (99.9%): [9.687, 22.614] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 22.57% complete, ETA 00:45:32
# Fork: 1 of 2
# Warmup Iteration   1: 168.480 ns/op
# Warmup Iteration   2: 137.641 ns/op
# Warmup Iteration   3: 90.066 ns/op
Iteration   1: 90.167 ns/op
Iteration   2: 168.010 ns/op
Iteration   3: 90.159 ns/op
Iteration   4: 89.923 ns/op
Iteration   5: 89.961 ns/op

# Run progress: 22.60% complete, ETA 00:45:31
# Fork: 2 of 2
# Warmup Iteration   1: 171.935 ns/op
# Warmup Iteration   2: 135.333 ns/op
# Warmup Iteration   3: 90.091 ns/op
Iteration   1: 90.067 ns/op
Iteration   2: 153.616 ns/op
Iteration   3: 90.262 ns/op
Iteration   4: 89.828 ns/op
Iteration   5: 89.913 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  104.191 ±(99.9%) 45.409 ns/op [Average]
  (min, avg, max) = (89.828, 104.191, 168.010), stdev = 30.035
  CI (99.9%): [58.782, 149.599] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 22.64% complete, ETA 00:45:29
# Fork: 1 of 2
# Warmup Iteration   1: 70.462 ns/op
# Warmup Iteration   2: 66.156 ns/op
# Warmup Iteration   3: 45.121 ns/op
Iteration   1: 45.142 ns/op
Iteration   2: 84.193 ns/op
Iteration   3: 45.122 ns/op
Iteration   4: 45.020 ns/op
Iteration   5: 45.082 ns/op

# Run progress: 22.67% complete, ETA 00:45:28
# Fork: 2 of 2
# Warmup Iteration   1: 70.465 ns/op
# Warmup Iteration   2: 74.325 ns/op
# Warmup Iteration   3: 45.175 ns/op
Iteration   1: 45.143 ns/op
Iteration   2: 79.682 ns/op
Iteration   3: 45.176 ns/op
Iteration   4: 45.123 ns/op
Iteration   5: 45.178 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.486 ±(99.9%) 23.523 ns/op [Average]
  (min, avg, max) = (45.020, 52.486, 84.193), stdev = 15.559
  CI (99.9%): [28.963, 76.009] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 22.71% complete, ETA 00:45:27
# Fork: 1 of 2
# Warmup Iteration   1: 317.103 ns/op
# Warmup Iteration   2: 145.729 ns/op
# Warmup Iteration   3: 105.538 ns/op
Iteration   1: 105.579 ns/op
Iteration   2: 196.692 ns/op
Iteration   3: 105.549 ns/op
Iteration   4: 105.432 ns/op
Iteration   5: 105.535 ns/op

# Run progress: 22.74% complete, ETA 00:45:26
# Fork: 2 of 2
# Warmup Iteration   1: 280.774 ns/op
# Warmup Iteration   2: 159.959 ns/op
# Warmup Iteration   3: 105.565 ns/op
Iteration   1: 105.601 ns/op
Iteration   2: 188.356 ns/op
Iteration   3: 105.613 ns/op
Iteration   4: 105.329 ns/op
Iteration   5: 105.296 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  122.898 ±(99.9%) 55.559 ns/op [Average]
  (min, avg, max) = (105.296, 122.898, 196.692), stdev = 36.749
  CI (99.9%): [67.340, 178.457] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 22.78% complete, ETA 00:45:25
# Fork: 1 of 2
# Warmup Iteration   1: 68.328 ns/op
# Warmup Iteration   2: 72.767 ns/op
# Warmup Iteration   3: 47.454 ns/op
Iteration   1: 47.538 ns/op
Iteration   2: 88.421 ns/op
Iteration   3: 47.475 ns/op
Iteration   4: 47.852 ns/op
Iteration   5: 48.102 ns/op

# Run progress: 22.81% complete, ETA 00:45:24
# Fork: 2 of 2
# Warmup Iteration   1: 68.788 ns/op
# Warmup Iteration   2: 81.861 ns/op
# Warmup Iteration   3: 47.486 ns/op
Iteration   1: 47.488 ns/op
Iteration   2: 85.516 ns/op
Iteration   3: 47.505 ns/op
Iteration   4: 47.401 ns/op
Iteration   5: 47.529 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  55.483 ±(99.9%) 25.112 ns/op [Average]
  (min, avg, max) = (47.401, 55.483, 88.421), stdev = 16.610
  CI (99.9%): [30.371, 80.594] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 22.85% complete, ETA 00:45:22
# Fork: 1 of 2
# Warmup Iteration   1: 177.693 ns/op
# Warmup Iteration   2: 181.163 ns/op
# Warmup Iteration   3: 124.981 ns/op
Iteration   1: 124.990 ns/op
Iteration   2: 205.892 ns/op
Iteration   3: 125.002 ns/op
Iteration   4: 129.672 ns/op
Iteration   5: 129.474 ns/op

# Run progress: 22.88% complete, ETA 00:45:21
# Fork: 2 of 2
# Warmup Iteration   1: 174.306 ns/op
# Warmup Iteration   2: 171.459 ns/op
# Warmup Iteration   3: 124.949 ns/op
Iteration   1: 124.996 ns/op
Iteration   2: 210.897 ns/op
Iteration   3: 125.015 ns/op
Iteration   4: 129.618 ns/op
Iteration   5: 129.542 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  143.510 ±(99.9%) 51.835 ns/op [Average]
  (min, avg, max) = (124.990, 143.510, 210.897), stdev = 34.285
  CI (99.9%): [91.675, 195.344] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 22.92% complete, ETA 00:45:20
# Fork: 1 of 2
# Warmup Iteration   1: 20.705 ns/op
# Warmup Iteration   2: 24.609 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 15.226 ns/op
Iteration   5: 15.235 ns/op

# Run progress: 22.95% complete, ETA 00:45:19
# Fork: 2 of 2
# Warmup Iteration   1: 18.833 ns/op
# Warmup Iteration   2: 23.316 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.736 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.887 ns/op
Iteration   5: 13.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.054 ±(99.9%) 0.943 ns/op [Average]
  (min, avg, max) = (13.711, 14.054, 15.235), stdev = 0.624
  CI (99.9%): [13.111, 14.997] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 22.99% complete, ETA 00:45:17
# Fork: 1 of 2
# Warmup Iteration   1: 1163.010 ns/op
# Warmup Iteration   2: 436.510 ns/op
# Warmup Iteration   3: 303.923 ns/op
Iteration   1: 303.789 ns/op
Iteration   2: 304.010 ns/op
Iteration   3: 304.106 ns/op
Iteration   4: 303.792 ns/op
Iteration   5: 303.823 ns/op

# Run progress: 23.02% complete, ETA 00:45:16
# Fork: 2 of 2
# Warmup Iteration   1: 1159.813 ns/op
# Warmup Iteration   2: 436.766 ns/op
# Warmup Iteration   3: 303.599 ns/op
Iteration   1: 303.918 ns/op
Iteration   2: 303.815 ns/op
Iteration   3: 304.237 ns/op
Iteration   4: 303.501 ns/op
Iteration   5: 303.519 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.851 ±(99.9%) 0.352 ns/op [Average]
  (min, avg, max) = (303.501, 303.851, 304.237), stdev = 0.233
  CI (99.9%): [303.500, 304.203] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 23.06% complete, ETA 00:45:15
# Fork: 1 of 2
# Warmup Iteration   1: 500.663 ns/op
# Warmup Iteration   2: 456.182 ns/op
# Warmup Iteration   3: 336.737 ns/op
Iteration   1: 336.957 ns/op
Iteration   2: 337.254 ns/op
Iteration   3: 337.991 ns/op
Iteration   4: 339.310 ns/op
Iteration   5: 335.403 ns/op

# Run progress: 23.09% complete, ETA 00:45:14
# Fork: 2 of 2
# Warmup Iteration   1: 505.032 ns/op
# Warmup Iteration   2: 459.305 ns/op
# Warmup Iteration   3: 339.012 ns/op
Iteration   1: 339.078 ns/op
Iteration   2: 339.197 ns/op
Iteration   3: 339.547 ns/op
Iteration   4: 339.191 ns/op
Iteration   5: 339.039 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.297 ±(99.9%) 2.060 ns/op [Average]
  (min, avg, max) = (335.403, 338.297, 339.547), stdev = 1.363
  CI (99.9%): [336.236, 340.357] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 23.13% complete, ETA 00:45:12
# Fork: 1 of 2
# Warmup Iteration   1: 4679.209 ns/op
# Warmup Iteration   2: 476.369 ns/op
# Warmup Iteration   3: 308.146 ns/op
Iteration   1: 308.298 ns/op
Iteration   2: 308.205 ns/op
Iteration   3: 308.246 ns/op
Iteration   4: 308.188 ns/op
Iteration   5: 309.524 ns/op

# Run progress: 23.16% complete, ETA 00:45:11
# Fork: 2 of 2
# Warmup Iteration   1: 7478.887 ns/op
# Warmup Iteration   2: 437.353 ns/op
# Warmup Iteration   3: 313.083 ns/op
Iteration   1: 313.197 ns/op
Iteration   2: 313.079 ns/op
Iteration   3: 313.098 ns/op
Iteration   4: 313.120 ns/op
Iteration   5: 313.133 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  310.809 ±(99.9%) 3.738 ns/op [Average]
  (min, avg, max) = (308.188, 310.809, 313.197), stdev = 2.472
  CI (99.9%): [307.071, 314.547] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 23.19% complete, ETA 00:45:10
# Fork: 1 of 2
# Warmup Iteration   1: 386.295 ns/op
# Warmup Iteration   2: 344.084 ns/op
# Warmup Iteration   3: 259.854 ns/op
Iteration   1: 259.937 ns/op
Iteration   2: 259.925 ns/op
Iteration   3: 259.800 ns/op
Iteration   4: 260.005 ns/op
Iteration   5: 259.925 ns/op

# Run progress: 23.23% complete, ETA 00:45:09
# Fork: 2 of 2
# Warmup Iteration   1: 435.501 ns/op
# Warmup Iteration   2: 376.780 ns/op
# Warmup Iteration   3: 259.832 ns/op
Iteration   1: 260.055 ns/op
Iteration   2: 259.926 ns/op
Iteration   3: 259.890 ns/op
Iteration   4: 260.049 ns/op
Iteration   5: 260.435 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  259.995 ±(99.9%) 0.260 ns/op [Average]
  (min, avg, max) = (259.800, 259.995, 260.435), stdev = 0.172
  CI (99.9%): [259.734, 260.255] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 23.26% complete, ETA 00:45:07
# Fork: 1 of 2
# Warmup Iteration   1: 1035.317 ns/op
# Warmup Iteration   2: 612.031 ns/op
# Warmup Iteration   3: 420.346 ns/op
Iteration   1: 420.251 ns/op
Iteration   2: 420.462 ns/op
Iteration   3: 420.366 ns/op
Iteration   4: 422.644 ns/op
Iteration   5: 422.520 ns/op

# Run progress: 23.30% complete, ETA 00:45:06
# Fork: 2 of 2
# Warmup Iteration   1: 1194.378 ns/op
# Warmup Iteration   2: 591.835 ns/op
# Warmup Iteration   3: 431.938 ns/op
Iteration   1: 431.774 ns/op
Iteration   2: 432.181 ns/op
Iteration   3: 432.474 ns/op
Iteration   4: 434.558 ns/op
Iteration   5: 434.741 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  427.197 ±(99.9%) 9.662 ns/op [Average]
  (min, avg, max) = (420.251, 427.197, 434.741), stdev = 6.391
  CI (99.9%): [417.535, 436.859] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 23.33% complete, ETA 00:45:05
# Fork: 1 of 2
# Warmup Iteration   1: 19.534 ns/op
# Warmup Iteration   2: 25.315 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.721 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.880 ns/op

# Run progress: 23.37% complete, ETA 00:45:04
# Fork: 2 of 2
# Warmup Iteration   1: 18.719 ns/op
# Warmup Iteration   2: 24.506 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 13.894 ns/op
Iteration   5: 13.885 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (13.710, 13.783, 13.894), stdev = 0.088
  CI (99.9%): [13.650, 13.915] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 23.40% complete, ETA 00:45:02
# Fork: 1 of 2
# Warmup Iteration   1: 614.243 ns/op
# Warmup Iteration   2: 435.236 ns/op
# Warmup Iteration   3: 302.654 ns/op
Iteration   1: 302.712 ns/op
Iteration   2: 302.961 ns/op
Iteration   3: 302.966 ns/op
Iteration   4: 303.599 ns/op
Iteration   5: 303.556 ns/op

# Run progress: 23.44% complete, ETA 00:45:01
# Fork: 2 of 2
# Warmup Iteration   1: 603.573 ns/op
# Warmup Iteration   2: 440.673 ns/op
# Warmup Iteration   3: 303.633 ns/op
Iteration   1: 303.603 ns/op
Iteration   2: 303.422 ns/op
Iteration   3: 303.526 ns/op
Iteration   4: 303.500 ns/op
Iteration   5: 303.490 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.333 ±(99.9%) 0.491 ns/op [Average]
  (min, avg, max) = (302.712, 303.333, 303.603), stdev = 0.325
  CI (99.9%): [302.842, 303.825] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 23.47% complete, ETA 00:45:00
# Fork: 1 of 2
# Warmup Iteration   1: 540.265 ns/op
# Warmup Iteration   2: 501.104 ns/op
# Warmup Iteration   3: 373.768 ns/op
Iteration   1: 373.981 ns/op
Iteration   2: 373.958 ns/op
Iteration   3: 373.972 ns/op
Iteration   4: 374.127 ns/op
Iteration   5: 373.848 ns/op

# Run progress: 23.51% complete, ETA 00:44:59
# Fork: 2 of 2
# Warmup Iteration   1: 546.986 ns/op
# Warmup Iteration   2: 499.530 ns/op
# Warmup Iteration   3: 373.845 ns/op
Iteration   1: 373.964 ns/op
Iteration   2: 373.961 ns/op
Iteration   3: 373.907 ns/op
Iteration   4: 373.928 ns/op
Iteration   5: 373.784 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  373.943 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (373.784, 373.943, 374.127), stdev = 0.090
  CI (99.9%): [373.807, 374.079] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 23.54% complete, ETA 00:44:57
# Fork: 1 of 2
# Warmup Iteration   1: 1152.091 ns/op
# Warmup Iteration   2: 384.421 ns/op
# Warmup Iteration   3: 277.419 ns/op
Iteration   1: 284.999 ns/op
Iteration   2: 277.509 ns/op
Iteration   3: 277.526 ns/op
Iteration   4: 277.637 ns/op
Iteration   5: 277.734 ns/op

# Run progress: 23.58% complete, ETA 00:44:56
# Fork: 2 of 2
# Warmup Iteration   1: 983.377 ns/op
# Warmup Iteration   2: 371.828 ns/op
# Warmup Iteration   3: 278.261 ns/op
Iteration   1: 278.315 ns/op
Iteration   2: 278.314 ns/op
Iteration   3: 278.250 ns/op
Iteration   4: 278.445 ns/op
Iteration   5: 278.430 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  278.716 ±(99.9%) 3.387 ns/op [Average]
  (min, avg, max) = (277.509, 278.716, 284.999), stdev = 2.240
  CI (99.9%): [275.329, 282.103] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 23.61% complete, ETA 00:44:55
# Fork: 1 of 2
# Warmup Iteration   1: 480.187 ns/op
# Warmup Iteration   2: 414.131 ns/op
# Warmup Iteration   3: 307.207 ns/op
Iteration   1: 307.235 ns/op
Iteration   2: 307.301 ns/op
Iteration   3: 306.980 ns/op
Iteration   4: 307.124 ns/op
Iteration   5: 306.934 ns/op

# Run progress: 23.65% complete, ETA 00:44:54
# Fork: 2 of 2
# Warmup Iteration   1: 476.648 ns/op
# Warmup Iteration   2: 403.823 ns/op
# Warmup Iteration   3: 307.014 ns/op
Iteration   1: 306.914 ns/op
Iteration   2: 307.002 ns/op
Iteration   3: 307.121 ns/op
Iteration   4: 306.707 ns/op
Iteration   5: 307.040 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  307.036 ±(99.9%) 0.258 ns/op [Average]
  (min, avg, max) = (306.707, 307.036, 307.301), stdev = 0.171
  CI (99.9%): [306.777, 307.294] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 23.68% complete, ETA 00:44:53
# Fork: 1 of 2
# Warmup Iteration   1: 2964.540 ns/op
# Warmup Iteration   2: 2149.120 ns/op
# Warmup Iteration   3: 1506.292 ns/op
Iteration   1: 1514.717 ns/op
Iteration   2: 1506.593 ns/op
Iteration   3: 1506.544 ns/op
Iteration   4: 1507.827 ns/op
Iteration   5: 1507.915 ns/op

# Run progress: 23.72% complete, ETA 00:44:51
# Fork: 2 of 2
# Warmup Iteration   1: 2913.693 ns/op
# Warmup Iteration   2: 2190.705 ns/op
# Warmup Iteration   3: 1505.849 ns/op
Iteration   1: 1507.231 ns/op
Iteration   2: 1506.104 ns/op
Iteration   3: 1506.512 ns/op
Iteration   4: 1505.571 ns/op
Iteration   5: 1505.381 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1507.439 ±(99.9%) 4.071 ns/op [Average]
  (min, avg, max) = (1505.381, 1507.439, 1514.717), stdev = 2.693
  CI (99.9%): [1503.368, 1511.511] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 23.75% complete, ETA 00:44:50
# Fork: 1 of 2
# Warmup Iteration   1: 18.258 ns/op
# Warmup Iteration   2: 23.757 ns/op
# Warmup Iteration   3: 13.721 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.727 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.891 ns/op
Iteration   5: 13.883 ns/op

# Run progress: 23.78% complete, ETA 00:44:49
# Fork: 2 of 2
# Warmup Iteration   1: 22.184 ns/op
# Warmup Iteration   2: 23.545 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.728 ns/op
Iteration   2: 13.709 ns/op
Iteration   3: 13.719 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.709, 13.785, 13.891), stdev = 0.086
  CI (99.9%): [13.655, 13.915] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 23.82% complete, ETA 00:44:48
# Fork: 1 of 2
# Warmup Iteration   1: 1284.041 ns/op
# Warmup Iteration   2: 457.345 ns/op
# Warmup Iteration   3: 313.326 ns/op
Iteration   1: 312.202 ns/op
Iteration   2: 314.110 ns/op
Iteration   3: 309.479 ns/op
Iteration   4: 314.050 ns/op
Iteration   5: 310.456 ns/op

# Run progress: 23.85% complete, ETA 00:44:46
# Fork: 2 of 2
# Warmup Iteration   1: 1265.838 ns/op
# Warmup Iteration   2: 441.923 ns/op
# Warmup Iteration   3: 300.458 ns/op
Iteration   1: 300.809 ns/op
Iteration   2: 300.508 ns/op
Iteration   3: 299.994 ns/op
Iteration   4: 300.202 ns/op
Iteration   5: 300.674 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  306.248 ±(99.9%) 9.503 ns/op [Average]
  (min, avg, max) = (299.994, 306.248, 314.110), stdev = 6.285
  CI (99.9%): [296.746, 315.751] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 23.89% complete, ETA 00:44:45
# Fork: 1 of 2
# Warmup Iteration   1: 567.545 ns/op
# Warmup Iteration   2: 507.216 ns/op
# Warmup Iteration   3: 381.682 ns/op
Iteration   1: 381.340 ns/op
Iteration   2: 384.809 ns/op
Iteration   3: 381.145 ns/op
Iteration   4: 383.225 ns/op
Iteration   5: 383.125 ns/op

# Run progress: 23.92% complete, ETA 00:44:44
# Fork: 2 of 2
# Warmup Iteration   1: 548.536 ns/op
# Warmup Iteration   2: 529.755 ns/op
# Warmup Iteration   3: 381.051 ns/op
Iteration   1: 384.242 ns/op
Iteration   2: 386.876 ns/op
Iteration   3: 384.114 ns/op
Iteration   4: 381.282 ns/op
Iteration   5: 382.953 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  383.311 ±(99.9%) 2.729 ns/op [Average]
  (min, avg, max) = (381.145, 383.311, 386.876), stdev = 1.805
  CI (99.9%): [380.582, 386.040] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 23.96% complete, ETA 00:44:43
# Fork: 1 of 2
# Warmup Iteration   1: 2402.617 ns/op
# Warmup Iteration   2: 427.446 ns/op
# Warmup Iteration   3: 289.476 ns/op
Iteration   1: 287.499 ns/op
Iteration   2: 287.011 ns/op
Iteration   3: 288.446 ns/op
Iteration   4: 285.887 ns/op
Iteration   5: 286.774 ns/op

# Run progress: 23.99% complete, ETA 00:44:41
# Fork: 2 of 2
# Warmup Iteration   1: 2292.291 ns/op
# Warmup Iteration   2: 532.914 ns/op
# Warmup Iteration   3: 291.693 ns/op
Iteration   1: 289.566 ns/op
Iteration   2: 290.540 ns/op
Iteration   3: 292.605 ns/op
Iteration   4: 291.362 ns/op
Iteration   5: 438.652 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.834 ±(99.9%) 71.691 ns/op [Average]
  (min, avg, max) = (285.887, 303.834, 438.652), stdev = 47.419
  CI (99.9%): [232.143, 375.526] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 24.03% complete, ETA 00:44:40
# Fork: 1 of 2
# Warmup Iteration   1: 502.646 ns/op
# Warmup Iteration   2: 419.050 ns/op
# Warmup Iteration   3: 313.341 ns/op
Iteration   1: 313.711 ns/op
Iteration   2: 314.568 ns/op
Iteration   3: 314.814 ns/op
Iteration   4: 316.416 ns/op
Iteration   5: 314.402 ns/op

# Run progress: 24.06% complete, ETA 00:44:39
# Fork: 2 of 2
# Warmup Iteration   1: 498.073 ns/op
# Warmup Iteration   2: 484.125 ns/op
# Warmup Iteration   3: 315.850 ns/op
Iteration   1: 315.963 ns/op
Iteration   2: 316.727 ns/op
Iteration   3: 317.172 ns/op
Iteration   4: 318.375 ns/op
Iteration   5: 317.077 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  315.922 ±(99.9%) 2.258 ns/op [Average]
  (min, avg, max) = (313.711, 315.922, 318.375), stdev = 1.493
  CI (99.9%): [313.665, 318.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 24.10% complete, ETA 00:44:38
# Fork: 1 of 2
# Warmup Iteration   1: 2958.523 ns/op
# Warmup Iteration   2: 2234.911 ns/op
# Warmup Iteration   3: 1529.337 ns/op
Iteration   1: 1535.674 ns/op
Iteration   2: 1526.869 ns/op
Iteration   3: 1527.632 ns/op
Iteration   4: 1540.477 ns/op
Iteration   5: 1536.726 ns/op

# Run progress: 24.13% complete, ETA 00:44:37
# Fork: 2 of 2
# Warmup Iteration   1: 3116.332 ns/op
# Warmup Iteration   2: 2342.811 ns/op
# Warmup Iteration   3: 1561.887 ns/op
Iteration   1: 1559.383 ns/op
Iteration   2: 1559.777 ns/op
Iteration   3: 1561.081 ns/op
Iteration   4: 1564.792 ns/op
Iteration   5: 1569.703 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1548.211 ±(99.9%) 24.631 ns/op [Average]
  (min, avg, max) = (1526.869, 1548.211, 1569.703), stdev = 16.292
  CI (99.9%): [1523.580, 1572.843] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 24.17% complete, ETA 00:44:35
# Fork: 1 of 2
# Warmup Iteration   1: 18.969 ns/op
# Warmup Iteration   2: 21.735 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.876 ns/op

# Run progress: 24.20% complete, ETA 00:44:34
# Fork: 2 of 2
# Warmup Iteration   1: 18.317 ns/op
# Warmup Iteration   2: 22.930 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.710, 13.781, 13.885), stdev = 0.087
  CI (99.9%): [13.648, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 24.24% complete, ETA 00:44:33
# Fork: 1 of 2
# Warmup Iteration   1: 582.471 ns/op
# Warmup Iteration   2: 343.641 ns/op
# Warmup Iteration   3: 241.116 ns/op
Iteration   1: 241.057 ns/op
Iteration   2: 240.716 ns/op
Iteration   3: 241.010 ns/op
Iteration   4: 240.875 ns/op
Iteration   5: 240.555 ns/op

# Run progress: 24.27% complete, ETA 00:44:32
# Fork: 2 of 2
# Warmup Iteration   1: 617.561 ns/op
# Warmup Iteration   2: 357.849 ns/op
# Warmup Iteration   3: 236.476 ns/op
Iteration   1: 236.690 ns/op
Iteration   2: 236.775 ns/op
Iteration   3: 236.591 ns/op
Iteration   4: 236.443 ns/op
Iteration   5: 236.154 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  238.687 ±(99.9%) 3.451 ns/op [Average]
  (min, avg, max) = (236.154, 238.687, 241.057), stdev = 2.283
  CI (99.9%): [235.235, 242.138] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 24.31% complete, ETA 00:44:30
# Fork: 1 of 2
# Warmup Iteration   1: 498.795 ns/op
# Warmup Iteration   2: 429.868 ns/op
# Warmup Iteration   3: 323.125 ns/op
Iteration   1: 323.268 ns/op
Iteration   2: 323.143 ns/op
Iteration   3: 323.292 ns/op
Iteration   4: 323.367 ns/op
Iteration   5: 323.279 ns/op

# Run progress: 24.34% complete, ETA 00:44:29
# Fork: 2 of 2
# Warmup Iteration   1: 505.168 ns/op
# Warmup Iteration   2: 494.907 ns/op
# Warmup Iteration   3: 323.155 ns/op
Iteration   1: 323.264 ns/op
Iteration   2: 323.115 ns/op
Iteration   3: 323.236 ns/op
Iteration   4: 323.280 ns/op
Iteration   5: 323.270 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.251 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (323.115, 323.251, 323.367), stdev = 0.073
  CI (99.9%): [323.141, 323.362] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 24.38% complete, ETA 00:44:28
# Fork: 1 of 2
# Warmup Iteration   1: 751.510 ns/op
# Warmup Iteration   2: 349.542 ns/op
# Warmup Iteration   3: 263.949 ns/op
Iteration   1: 264.235 ns/op
Iteration   2: 263.791 ns/op
Iteration   3: 264.069 ns/op
Iteration   4: 264.634 ns/op
Iteration   5: 263.835 ns/op

# Run progress: 24.41% complete, ETA 00:44:27
# Fork: 2 of 2
# Warmup Iteration   1: 731.336 ns/op
# Warmup Iteration   2: 356.565 ns/op
# Warmup Iteration   3: 263.695 ns/op
Iteration   1: 263.761 ns/op
Iteration   2: 264.063 ns/op
Iteration   3: 263.935 ns/op
Iteration   4: 280.131 ns/op
Iteration   5: 292.292 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  268.475 ±(99.9%) 14.787 ns/op [Average]
  (min, avg, max) = (263.761, 268.475, 292.292), stdev = 9.781
  CI (99.9%): [253.687, 283.262] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 24.44% complete, ETA 00:44:25
# Fork: 1 of 2
# Warmup Iteration   1: 525.307 ns/op
# Warmup Iteration   2: 433.177 ns/op
# Warmup Iteration   3: 275.595 ns/op
Iteration   1: 275.745 ns/op
Iteration   2: 275.771 ns/op
Iteration   3: 275.772 ns/op
Iteration   4: 275.716 ns/op
Iteration   5: 276.018 ns/op

# Run progress: 24.48% complete, ETA 00:44:24
# Fork: 2 of 2
# Warmup Iteration   1: 536.662 ns/op
# Warmup Iteration   2: 376.800 ns/op
# Warmup Iteration   3: 277.841 ns/op
Iteration   1: 277.900 ns/op
Iteration   2: 277.976 ns/op
Iteration   3: 277.789 ns/op
Iteration   4: 278.120 ns/op
Iteration   5: 278.175 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  276.898 ±(99.9%) 1.755 ns/op [Average]
  (min, avg, max) = (275.716, 276.898, 278.175), stdev = 1.161
  CI (99.9%): [275.144, 278.653] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 24.51% complete, ETA 00:44:23
# Fork: 1 of 2
# Warmup Iteration   1: 1363.076 ns/op
# Warmup Iteration   2: 1078.168 ns/op
# Warmup Iteration   3: 703.758 ns/op
Iteration   1: 703.702 ns/op
Iteration   2: 703.907 ns/op
Iteration   3: 704.829 ns/op
Iteration   4: 707.113 ns/op
Iteration   5: 707.361 ns/op

# Run progress: 24.55% complete, ETA 00:44:22
# Fork: 2 of 2
# Warmup Iteration   1: 1259.240 ns/op
# Warmup Iteration   2: 1002.831 ns/op
# Warmup Iteration   3: 674.057 ns/op
Iteration   1: 674.134 ns/op
Iteration   2: 674.296 ns/op
Iteration   3: 674.112 ns/op
Iteration   4: 678.093 ns/op
Iteration   5: 678.284 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  690.583 ±(99.9%) 23.754 ns/op [Average]
  (min, avg, max) = (674.112, 690.583, 707.361), stdev = 15.712
  CI (99.9%): [666.829, 714.337] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 24.58% complete, ETA 00:44:20
# Fork: 1 of 2
# Warmup Iteration   1: 20.237 ns/op
# Warmup Iteration   2: 21.741 ns/op
# Warmup Iteration   3: 13.704 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.707 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.889 ns/op
Iteration   5: 13.881 ns/op

# Run progress: 24.62% complete, ETA 00:44:19
# Fork: 2 of 2
# Warmup Iteration   1: 19.223 ns/op
# Warmup Iteration   2: 25.101 ns/op
# Warmup Iteration   3: 13.723 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.875 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.707, 13.781, 13.889), stdev = 0.088
  CI (99.9%): [13.649, 13.914] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 24.65% complete, ETA 00:44:18
# Fork: 1 of 2
# Warmup Iteration   1: 932.903 ns/op
# Warmup Iteration   2: 387.916 ns/op
# Warmup Iteration   3: 293.753 ns/op
Iteration   1: 294.492 ns/op
Iteration   2: 295.086 ns/op
Iteration   3: 295.319 ns/op
Iteration   4: 295.341 ns/op
Iteration   5: 294.822 ns/op

# Run progress: 24.69% complete, ETA 00:44:17
# Fork: 2 of 2
# Warmup Iteration   1: 934.389 ns/op
# Warmup Iteration   2: 390.006 ns/op
# Warmup Iteration   3: 297.200 ns/op
Iteration   1: 295.690 ns/op
Iteration   2: 296.693 ns/op
Iteration   3: 295.521 ns/op
Iteration   4: 297.322 ns/op
Iteration   5: 296.020 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  295.631 ±(99.9%) 1.293 ns/op [Average]
  (min, avg, max) = (294.492, 295.631, 297.322), stdev = 0.855
  CI (99.9%): [294.337, 296.924] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 24.72% complete, ETA 00:44:15
# Fork: 1 of 2
# Warmup Iteration   1: 378.057 ns/op
# Warmup Iteration   2: 327.999 ns/op
# Warmup Iteration   3: 242.051 ns/op
Iteration   1: 240.015 ns/op
Iteration   2: 241.170 ns/op
Iteration   3: 240.713 ns/op
Iteration   4: 241.570 ns/op
Iteration   5: 244.583 ns/op

# Run progress: 24.76% complete, ETA 00:44:14
# Fork: 2 of 2
# Warmup Iteration   1: 333.013 ns/op
# Warmup Iteration   2: 330.742 ns/op
# Warmup Iteration   3: 240.726 ns/op
Iteration   1: 238.674 ns/op
Iteration   2: 239.433 ns/op
Iteration   3: 238.700 ns/op
Iteration   4: 239.054 ns/op
Iteration   5: 240.019 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  240.393 ±(99.9%) 2.689 ns/op [Average]
  (min, avg, max) = (238.674, 240.393, 244.583), stdev = 1.778
  CI (99.9%): [237.704, 243.082] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 24.79% complete, ETA 00:44:13
# Fork: 1 of 2
# Warmup Iteration   1: 7555.829 ns/op
# Warmup Iteration   2: 501.208 ns/op
# Warmup Iteration   3: 340.611 ns/op
Iteration   1: 342.190 ns/op
Iteration   2: 341.029 ns/op
Iteration   3: 340.832 ns/op
Iteration   4: 340.720 ns/op
Iteration   5: 340.718 ns/op

# Run progress: 24.83% complete, ETA 00:44:12
# Fork: 2 of 2
# Warmup Iteration   1: 12639.120 ns/op
# Warmup Iteration   2: 476.009 ns/op
# Warmup Iteration   3: 378.042 ns/op
Iteration   1: 343.630 ns/op
Iteration   2: 345.974 ns/op
Iteration   3: 342.171 ns/op
Iteration   4: 344.488 ns/op
Iteration   5: 345.423 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  342.718 ±(99.9%) 3.060 ns/op [Average]
  (min, avg, max) = (340.718, 342.718, 345.974), stdev = 2.024
  CI (99.9%): [339.658, 345.777] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 24.86% complete, ETA 00:44:10
# Fork: 1 of 2
# Warmup Iteration   1: 367.929 ns/op
# Warmup Iteration   2: 278.153 ns/op
# Warmup Iteration   3: 204.916 ns/op
Iteration   1: 204.703 ns/op
Iteration   2: 204.618 ns/op
Iteration   3: 206.685 ns/op
Iteration   4: 205.075 ns/op
Iteration   5: 205.373 ns/op

# Run progress: 24.90% complete, ETA 00:44:09
# Fork: 2 of 2
# Warmup Iteration   1: 360.451 ns/op
# Warmup Iteration   2: 283.777 ns/op
# Warmup Iteration   3: 203.202 ns/op
Iteration   1: 204.861 ns/op
Iteration   2: 203.073 ns/op
Iteration   3: 203.150 ns/op
Iteration   4: 203.069 ns/op
Iteration   5: 203.076 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  204.368 ±(99.9%) 1.873 ns/op [Average]
  (min, avg, max) = (203.069, 204.368, 206.685), stdev = 1.239
  CI (99.9%): [202.495, 206.241] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 24.93% complete, ETA 00:44:08
# Fork: 1 of 2
# Warmup Iteration   1: 6080.278 ns/op
# Warmup Iteration   2: 1816.084 ns/op
# Warmup Iteration   3: 1198.802 ns/op
Iteration   1: 1198.619 ns/op
Iteration   2: 1200.327 ns/op
Iteration   3: 1201.018 ns/op
Iteration   4: 1203.921 ns/op
Iteration   5: 1204.702 ns/op

# Run progress: 24.97% complete, ETA 00:44:07
# Fork: 2 of 2
# Warmup Iteration   1: 6494.098 ns/op
# Warmup Iteration   2: 1646.952 ns/op
# Warmup Iteration   3: 1140.666 ns/op
Iteration   1: 1141.768 ns/op
Iteration   2: 1141.502 ns/op
Iteration   3: 1141.023 ns/op
Iteration   4: 1145.142 ns/op
Iteration   5: 1145.367 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1172.339 ±(99.9%) 46.937 ns/op [Average]
  (min, avg, max) = (1141.023, 1172.339, 1204.702), stdev = 31.046
  CI (99.9%): [1125.402, 1219.276] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 25.00% complete, ETA 00:44:05
# Fork: 1 of 2
# Warmup Iteration   1: 18.608 ns/op
# Warmup Iteration   2: 21.733 ns/op
# Warmup Iteration   3: 13.705 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.705 ns/op
Iteration   4: 16.104 ns/op
Iteration   5: 16.105 ns/op

# Run progress: 25.03% complete, ETA 00:44:04
# Fork: 2 of 2
# Warmup Iteration   1: 21.323 ns/op
# Warmup Iteration   2: 27.929 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.735 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.887 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.229 ±(99.9%) 1.498 ns/op [Average]
  (min, avg, max) = (13.705, 14.229, 16.105), stdev = 0.991
  CI (99.9%): [12.731, 15.727] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 25.07% complete, ETA 00:44:03
# Fork: 1 of 2
# Warmup Iteration   1: 805.214 ns/op
# Warmup Iteration   2: 460.366 ns/op
# Warmup Iteration   3: 319.899 ns/op
Iteration   1: 319.826 ns/op
Iteration   2: 319.887 ns/op
Iteration   3: 320.080 ns/op
Iteration   4: 319.702 ns/op
Iteration   5: 319.779 ns/op

# Run progress: 25.10% complete, ETA 00:44:02
# Fork: 2 of 2
# Warmup Iteration   1: 1046.539 ns/op
# Warmup Iteration   2: 482.968 ns/op
# Warmup Iteration   3: 322.285 ns/op
Iteration   1: 322.384 ns/op
Iteration   2: 322.624 ns/op
Iteration   3: 322.284 ns/op
Iteration   4: 322.646 ns/op
Iteration   5: 322.569 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  321.178 ±(99.9%) 2.120 ns/op [Average]
  (min, avg, max) = (319.702, 321.178, 322.646), stdev = 1.402
  CI (99.9%): [319.058, 323.298] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 25.14% complete, ETA 00:44:00
# Fork: 1 of 2
# Warmup Iteration   1: 458.129 ns/op
# Warmup Iteration   2: 426.979 ns/op
# Warmup Iteration   3: 315.957 ns/op
Iteration   1: 315.862 ns/op
Iteration   2: 316.500 ns/op
Iteration   3: 316.044 ns/op
Iteration   4: 316.506 ns/op
Iteration   5: 316.068 ns/op

# Run progress: 25.17% complete, ETA 00:43:59
# Fork: 2 of 2
# Warmup Iteration   1: 470.188 ns/op
# Warmup Iteration   2: 421.872 ns/op
# Warmup Iteration   3: 316.223 ns/op
Iteration   1: 316.104 ns/op
Iteration   2: 316.078 ns/op
Iteration   3: 316.164 ns/op
Iteration   4: 315.925 ns/op
Iteration   5: 316.129 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  316.138 ±(99.9%) 0.321 ns/op [Average]
  (min, avg, max) = (315.862, 316.138, 316.506), stdev = 0.213
  CI (99.9%): [315.817, 316.459] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 25.21% complete, ETA 00:43:58
# Fork: 1 of 2
# Warmup Iteration   1: 7253.468 ns/op
# Warmup Iteration   2: 468.794 ns/op
# Warmup Iteration   3: 370.580 ns/op
Iteration   1: 370.925 ns/op
Iteration   2: 370.857 ns/op
Iteration   3: 370.779 ns/op
Iteration   4: 370.921 ns/op
Iteration   5: 370.965 ns/op

# Run progress: 25.24% complete, ETA 00:43:57
# Fork: 2 of 2
# Warmup Iteration   1: 7536.356 ns/op
# Warmup Iteration   2: 564.504 ns/op
# Warmup Iteration   3: 372.782 ns/op
Iteration   1: 373.091 ns/op
Iteration   2: 372.928 ns/op
Iteration   3: 372.702 ns/op
Iteration   4: 373.131 ns/op
Iteration   5: 373.079 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  371.938 ±(99.9%) 1.682 ns/op [Average]
  (min, avg, max) = (370.779, 371.938, 373.131), stdev = 1.112
  CI (99.9%): [370.256, 373.620] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 25.28% complete, ETA 00:43:55
# Fork: 1 of 2
# Warmup Iteration   1: 440.642 ns/op
# Warmup Iteration   2: 446.702 ns/op
# Warmup Iteration   3: 277.048 ns/op
Iteration   1: 277.113 ns/op
Iteration   2: 277.220 ns/op
Iteration   3: 277.111 ns/op
Iteration   4: 277.648 ns/op
Iteration   5: 277.460 ns/op

# Run progress: 25.31% complete, ETA 00:43:54
# Fork: 2 of 2
# Warmup Iteration   1: 436.031 ns/op
# Warmup Iteration   2: 372.507 ns/op
# Warmup Iteration   3: 276.590 ns/op
Iteration   1: 276.547 ns/op
Iteration   2: 276.202 ns/op
Iteration   3: 276.150 ns/op
Iteration   4: 276.568 ns/op
Iteration   5: 276.474 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  276.849 ±(99.9%) 0.798 ns/op [Average]
  (min, avg, max) = (276.150, 276.849, 277.648), stdev = 0.528
  CI (99.9%): [276.052, 277.647] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 25.35% complete, ETA 00:43:53
# Fork: 1 of 2
# Warmup Iteration   1: 2925.514 ns/op
# Warmup Iteration   2: 2005.072 ns/op
# Warmup Iteration   3: 1406.465 ns/op
Iteration   1: 1404.731 ns/op
Iteration   2: 1410.357 ns/op
Iteration   3: 1402.902 ns/op
Iteration   4: 1407.592 ns/op
Iteration   5: 1407.235 ns/op

# Run progress: 25.38% complete, ETA 00:43:52
# Fork: 2 of 2
# Warmup Iteration   1: 2817.657 ns/op
# Warmup Iteration   2: 1876.427 ns/op
# Warmup Iteration   3: 1427.362 ns/op
Iteration   1: 1426.828 ns/op
Iteration   2: 1427.283 ns/op
Iteration   3: 1428.852 ns/op
Iteration   4: 1429.595 ns/op
Iteration   5: 1428.491 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1417.387 ±(99.9%) 17.525 ns/op [Average]
  (min, avg, max) = (1402.902, 1417.387, 1429.595), stdev = 11.591
  CI (99.9%): [1399.862, 1434.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 25.42% complete, ETA 00:43:50
# Fork: 1 of 2
# Warmup Iteration   1: 19.466 ns/op
# Warmup Iteration   2: 21.635 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.719 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.707 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.872 ns/op

# Run progress: 25.45% complete, ETA 00:43:49
# Fork: 2 of 2
# Warmup Iteration   1: 19.822 ns/op
# Warmup Iteration   2: 24.821 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.719 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.728 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.875 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (13.707, 13.781, 13.885), stdev = 0.084
  CI (99.9%): [13.654, 13.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 25.49% complete, ETA 00:43:48
# Fork: 1 of 2
# Warmup Iteration   1: 805.872 ns/op
# Warmup Iteration   2: 464.229 ns/op
# Warmup Iteration   3: 327.098 ns/op
Iteration   1: 329.654 ns/op
Iteration   2: 330.311 ns/op
Iteration   3: 327.105 ns/op
Iteration   4: 330.045 ns/op
Iteration   5: 329.296 ns/op

# Run progress: 25.52% complete, ETA 00:43:47
# Fork: 2 of 2
# Warmup Iteration   1: 631.994 ns/op
# Warmup Iteration   2: 441.050 ns/op
# Warmup Iteration   3: 307.479 ns/op
Iteration   1: 307.551 ns/op
Iteration   2: 307.610 ns/op
Iteration   3: 307.601 ns/op
Iteration   4: 307.711 ns/op
Iteration   5: 307.621 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  318.451 ±(99.9%) 17.310 ns/op [Average]
  (min, avg, max) = (307.551, 318.451, 330.311), stdev = 11.449
  CI (99.9%): [301.141, 335.760] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 25.56% complete, ETA 00:43:46
# Fork: 1 of 2
# Warmup Iteration   1: 492.538 ns/op
# Warmup Iteration   2: 450.814 ns/op
# Warmup Iteration   3: 336.732 ns/op
Iteration   1: 335.580 ns/op
Iteration   2: 335.684 ns/op
Iteration   3: 352.370 ns/op
Iteration   4: 335.662 ns/op
Iteration   5: 335.712 ns/op

# Run progress: 25.59% complete, ETA 00:43:44
# Fork: 2 of 2
# Warmup Iteration   1: 485.078 ns/op
# Warmup Iteration   2: 447.829 ns/op
# Warmup Iteration   3: 334.310 ns/op
Iteration   1: 334.325 ns/op
Iteration   2: 334.209 ns/op
Iteration   3: 334.398 ns/op
Iteration   4: 334.364 ns/op
Iteration   5: 334.556 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.686 ±(99.9%) 8.388 ns/op [Average]
  (min, avg, max) = (334.209, 336.686, 352.370), stdev = 5.548
  CI (99.9%): [328.298, 345.075] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 25.62% complete, ETA 00:43:43
# Fork: 1 of 2
# Warmup Iteration   1: 7624.071 ns/op
# Warmup Iteration   2: 577.761 ns/op
# Warmup Iteration   3: 333.605 ns/op
Iteration   1: 333.177 ns/op
Iteration   2: 333.394 ns/op
Iteration   3: 333.210 ns/op
Iteration   4: 333.322 ns/op
Iteration   5: 333.094 ns/op

# Run progress: 25.66% complete, ETA 00:43:42
# Fork: 2 of 2
# Warmup Iteration   1: 7791.032 ns/op
# Warmup Iteration   2: 456.365 ns/op
# Warmup Iteration   3: 336.202 ns/op
Iteration   1: 335.784 ns/op
Iteration   2: 335.810 ns/op
Iteration   3: 335.936 ns/op
Iteration   4: 335.767 ns/op
Iteration   5: 335.809 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  334.530 ±(99.9%) 2.062 ns/op [Average]
  (min, avg, max) = (333.094, 334.530, 335.936), stdev = 1.364
  CI (99.9%): [332.468, 336.592] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 25.69% complete, ETA 00:43:41
# Fork: 1 of 2
# Warmup Iteration   1: 406.334 ns/op
# Warmup Iteration   2: 339.951 ns/op
# Warmup Iteration   3: 236.737 ns/op
Iteration   1: 236.724 ns/op
Iteration   2: 236.812 ns/op
Iteration   3: 236.951 ns/op
Iteration   4: 236.941 ns/op
Iteration   5: 236.985 ns/op

# Run progress: 25.73% complete, ETA 00:43:39
# Fork: 2 of 2
# Warmup Iteration   1: 354.021 ns/op
# Warmup Iteration   2: 341.264 ns/op
# Warmup Iteration   3: 237.528 ns/op
Iteration   1: 237.678 ns/op
Iteration   2: 237.593 ns/op
Iteration   3: 237.530 ns/op
Iteration   4: 238.694 ns/op
Iteration   5: 238.677 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.458 ±(99.9%) 1.103 ns/op [Average]
  (min, avg, max) = (236.724, 237.458, 238.694), stdev = 0.730
  CI (99.9%): [236.355, 238.562] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 25.76% complete, ETA 00:43:38
# Fork: 1 of 2
# Warmup Iteration   1: 603.765 ns/op
# Warmup Iteration   2: 603.782 ns/op
# Warmup Iteration   3: 378.973 ns/op
Iteration   1: 379.165 ns/op
Iteration   2: 379.042 ns/op
Iteration   3: 379.190 ns/op
Iteration   4: 384.746 ns/op
Iteration   5: 384.590 ns/op

# Run progress: 25.80% complete, ETA 00:43:37
# Fork: 2 of 2
# Warmup Iteration   1: 613.592 ns/op
# Warmup Iteration   2: 553.181 ns/op
# Warmup Iteration   3: 379.084 ns/op
Iteration   1: 379.178 ns/op
Iteration   2: 379.123 ns/op
Iteration   3: 379.019 ns/op
Iteration   4: 384.457 ns/op
Iteration   5: 384.669 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  381.318 ±(99.9%) 4.293 ns/op [Average]
  (min, avg, max) = (379.019, 381.318, 384.746), stdev = 2.840
  CI (99.9%): [377.025, 385.611] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 25.83% complete, ETA 00:43:36
# Fork: 1 of 2
# Warmup Iteration   1: 19.313 ns/op
# Warmup Iteration   2: 24.336 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.723 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 15.245 ns/op
Iteration   5: 15.252 ns/op

# Run progress: 25.87% complete, ETA 00:43:34
# Fork: 2 of 2
# Warmup Iteration   1: 19.285 ns/op
# Warmup Iteration   2: 22.790 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.723 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 13.894 ns/op
Iteration   5: 13.890 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.059 ±(99.9%) 0.954 ns/op [Average]
  (min, avg, max) = (13.710, 14.059, 15.252), stdev = 0.631
  CI (99.9%): [13.105, 15.013] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 25.90% complete, ETA 00:43:33
# Fork: 1 of 2
# Warmup Iteration   1: 1540.382 ns/op
# Warmup Iteration   2: 535.402 ns/op
# Warmup Iteration   3: 369.457 ns/op
Iteration   1: 368.761 ns/op
Iteration   2: 371.227 ns/op
Iteration   3: 371.184 ns/op
Iteration   4: 371.559 ns/op
Iteration   5: 368.686 ns/op

# Run progress: 25.94% complete, ETA 00:43:32
# Fork: 2 of 2
# Warmup Iteration   1: 1586.137 ns/op
# Warmup Iteration   2: 526.233 ns/op
# Warmup Iteration   3: 369.062 ns/op
Iteration   1: 368.049 ns/op
Iteration   2: 370.881 ns/op
Iteration   3: 369.395 ns/op
Iteration   4: 368.930 ns/op
Iteration   5: 371.452 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  370.012 ±(99.9%) 2.066 ns/op [Average]
  (min, avg, max) = (368.049, 370.012, 371.559), stdev = 1.366
  CI (99.9%): [367.947, 372.078] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 25.97% complete, ETA 00:43:31
# Fork: 1 of 2
# Warmup Iteration   1: 604.762 ns/op
# Warmup Iteration   2: 590.415 ns/op
# Warmup Iteration   3: 425.400 ns/op
Iteration   1: 424.112 ns/op
Iteration   2: 428.406 ns/op
Iteration   3: 424.572 ns/op
Iteration   4: 425.431 ns/op
Iteration   5: 427.889 ns/op

# Run progress: 26.01% complete, ETA 00:43:29
# Fork: 2 of 2
# Warmup Iteration   1: 607.003 ns/op
# Warmup Iteration   2: 576.003 ns/op
# Warmup Iteration   3: 429.939 ns/op
Iteration   1: 427.466 ns/op
Iteration   2: 428.728 ns/op
Iteration   3: 429.504 ns/op
Iteration   4: 426.717 ns/op
Iteration   5: 426.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.971 ±(99.9%) 2.715 ns/op [Average]
  (min, avg, max) = (424.112, 426.971, 429.504), stdev = 1.796
  CI (99.9%): [424.256, 429.686] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 26.04% complete, ETA 00:43:28
# Fork: 1 of 2
# Warmup Iteration   1: 17538.279 ns/op
# Warmup Iteration   2: 755.767 ns/op
# Warmup Iteration   3: 472.215 ns/op
Iteration   1: 429.990 ns/op
Iteration   2: 431.762 ns/op
Iteration   3: 431.320 ns/op
Iteration   4: 430.059 ns/op
Iteration   5: 431.897 ns/op

# Run progress: 26.08% complete, ETA 00:43:27
# Fork: 2 of 2
# Warmup Iteration   1: 16779.759 ns/op
# Warmup Iteration   2: 723.420 ns/op
# Warmup Iteration   3: 480.323 ns/op
Iteration   1: 431.511 ns/op
Iteration   2: 432.255 ns/op
Iteration   3: 432.161 ns/op
Iteration   4: 431.889 ns/op
Iteration   5: 432.081 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  431.492 ±(99.9%) 1.246 ns/op [Average]
  (min, avg, max) = (429.990, 431.492, 432.255), stdev = 0.824
  CI (99.9%): [430.247, 432.738] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 26.11% complete, ETA 00:43:26
# Fork: 1 of 2
# Warmup Iteration   1: 610.416 ns/op
# Warmup Iteration   2: 454.827 ns/op
# Warmup Iteration   3: 336.931 ns/op
Iteration   1: 337.075 ns/op
Iteration   2: 337.077 ns/op
Iteration   3: 338.242 ns/op
Iteration   4: 338.599 ns/op
Iteration   5: 338.265 ns/op

# Run progress: 26.15% complete, ETA 00:43:24
# Fork: 2 of 2
# Warmup Iteration   1: 700.303 ns/op
# Warmup Iteration   2: 451.391 ns/op
# Warmup Iteration   3: 335.814 ns/op
Iteration   1: 336.470 ns/op
Iteration   2: 336.077 ns/op
Iteration   3: 337.452 ns/op
Iteration   4: 337.733 ns/op
Iteration   5: 338.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  337.527 ±(99.9%) 1.279 ns/op [Average]
  (min, avg, max) = (336.077, 337.527, 338.599), stdev = 0.846
  CI (99.9%): [336.248, 338.806] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 26.18% complete, ETA 00:43:23
# Fork: 1 of 2
# Warmup Iteration   1: 3199.861 ns/op
# Warmup Iteration   2: 2336.722 ns/op
# Warmup Iteration   3: 1621.100 ns/op
Iteration   1: 1624.722 ns/op
Iteration   2: 1629.923 ns/op
Iteration   3: 1627.165 ns/op
Iteration   4: 1631.417 ns/op
Iteration   5: 1632.357 ns/op

# Run progress: 26.22% complete, ETA 00:43:22
# Fork: 2 of 2
# Warmup Iteration   1: 3637.680 ns/op
# Warmup Iteration   2: 2225.461 ns/op
# Warmup Iteration   3: 1635.684 ns/op
Iteration   1: 1638.523 ns/op
Iteration   2: 1631.779 ns/op
Iteration   3: 1637.111 ns/op
Iteration   4: 1642.963 ns/op
Iteration   5: 1644.057 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1634.002 ±(99.9%) 9.763 ns/op [Average]
  (min, avg, max) = (1624.722, 1634.002, 1644.057), stdev = 6.458
  CI (99.9%): [1624.238, 1643.765] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 26.25% complete, ETA 00:43:21
# Fork: 1 of 2
# Warmup Iteration   1: 19.600 ns/op
# Warmup Iteration   2: 21.019 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.730 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.872 ns/op
Iteration   5: 13.874 ns/op

# Run progress: 26.28% complete, ETA 00:43:20
# Fork: 2 of 2
# Warmup Iteration   1: 20.571 ns/op
# Warmup Iteration   2: 24.544 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.708 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.891 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (13.708, 13.781, 13.891), stdev = 0.084
  CI (99.9%): [13.653, 13.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 26.32% complete, ETA 00:43:18
# Fork: 1 of 2
# Warmup Iteration   1: 117.738 ns/op
# Warmup Iteration   2: 107.647 ns/op
# Warmup Iteration   3: 68.967 ns/op
Iteration   1: 68.911 ns/op
Iteration   2: 68.910 ns/op
Iteration   3: 69.022 ns/op
Iteration   4: 68.823 ns/op
Iteration   5: 68.792 ns/op

# Run progress: 26.35% complete, ETA 00:43:17
# Fork: 2 of 2
# Warmup Iteration   1: 108.708 ns/op
# Warmup Iteration   2: 101.495 ns/op
# Warmup Iteration   3: 71.019 ns/op
Iteration   1: 71.021 ns/op
Iteration   2: 73.689 ns/op
Iteration   3: 70.899 ns/op
Iteration   4: 70.652 ns/op
Iteration   5: 70.749 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  70.147 ±(99.9%) 2.385 ns/op [Average]
  (min, avg, max) = (68.792, 70.147, 73.689), stdev = 1.578
  CI (99.9%): [67.761, 72.532] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 26.39% complete, ETA 00:43:16
# Fork: 1 of 2
# Warmup Iteration   1: 70.178 ns/op
# Warmup Iteration   2: 69.800 ns/op
# Warmup Iteration   3: 45.245 ns/op
Iteration   1: 45.261 ns/op
Iteration   2: 45.250 ns/op
Iteration   3: 45.239 ns/op
Iteration   4: 45.641 ns/op
Iteration   5: 45.673 ns/op

# Run progress: 26.42% complete, ETA 00:43:15
# Fork: 2 of 2
# Warmup Iteration   1: 66.740 ns/op
# Warmup Iteration   2: 69.443 ns/op
# Warmup Iteration   3: 45.194 ns/op
Iteration   1: 45.263 ns/op
Iteration   2: 45.319 ns/op
Iteration   3: 45.227 ns/op
Iteration   4: 45.346 ns/op
Iteration   5: 45.321 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.354 ±(99.9%) 0.249 ns/op [Average]
  (min, avg, max) = (45.227, 45.354, 45.673), stdev = 0.165
  CI (99.9%): [45.105, 45.603] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 26.46% complete, ETA 00:43:13
# Fork: 1 of 2
# Warmup Iteration   1: 3778.013 ns/op
# Warmup Iteration   2: 105.866 ns/op
# Warmup Iteration   3: 75.555 ns/op
Iteration   1: 75.557 ns/op
Iteration   2: 75.596 ns/op
Iteration   3: 75.573 ns/op
Iteration   4: 75.669 ns/op
Iteration   5: 75.639 ns/op

# Run progress: 26.49% complete, ETA 00:43:12
# Fork: 2 of 2
# Warmup Iteration   1: 5122.880 ns/op
# Warmup Iteration   2: 123.205 ns/op
# Warmup Iteration   3: 76.309 ns/op
Iteration   1: 76.309 ns/op
Iteration   2: 76.374 ns/op
Iteration   3: 76.482 ns/op
Iteration   4: 76.327 ns/op
Iteration   5: 76.296 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  75.982 ±(99.9%) 0.605 ns/op [Average]
  (min, avg, max) = (75.557, 75.982, 76.482), stdev = 0.400
  CI (99.9%): [75.378, 76.587] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 26.53% complete, ETA 00:43:11
# Fork: 1 of 2
# Warmup Iteration   1: 67.878 ns/op
# Warmup Iteration   2: 68.943 ns/op
# Warmup Iteration   3: 47.530 ns/op
Iteration   1: 47.591 ns/op
Iteration   2: 47.540 ns/op
Iteration   3: 47.542 ns/op
Iteration   4: 47.592 ns/op
Iteration   5: 47.583 ns/op

# Run progress: 26.56% complete, ETA 00:43:10
# Fork: 2 of 2
# Warmup Iteration   1: 69.329 ns/op
# Warmup Iteration   2: 83.684 ns/op
# Warmup Iteration   3: 47.554 ns/op
Iteration   1: 47.516 ns/op
Iteration   2: 47.548 ns/op
Iteration   3: 47.507 ns/op
Iteration   4: 47.587 ns/op
Iteration   5: 47.555 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.556 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (47.507, 47.556, 47.592), stdev = 0.031
  CI (99.9%): [47.509, 47.603] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 26.60% complete, ETA 00:43:08
# Fork: 1 of 2
# Warmup Iteration   1: 175.232 ns/op
# Warmup Iteration   2: 173.201 ns/op
# Warmup Iteration   3: 98.341 ns/op
Iteration   1: 98.220 ns/op
Iteration   2: 98.207 ns/op
Iteration   3: 98.327 ns/op
Iteration   4: 105.171 ns/op
Iteration   5: 105.129 ns/op

# Run progress: 26.63% complete, ETA 00:43:07
# Fork: 2 of 2
# Warmup Iteration   1: 173.609 ns/op
# Warmup Iteration   2: 180.269 ns/op
# Warmup Iteration   3: 98.533 ns/op
Iteration   1: 98.599 ns/op
Iteration   2: 98.588 ns/op
Iteration   3: 98.587 ns/op
Iteration   4: 105.161 ns/op
Iteration   5: 105.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.112 ±(99.9%) 5.256 ns/op [Average]
  (min, avg, max) = (98.207, 101.112, 105.171), stdev = 3.476
  CI (99.9%): [95.856, 106.368] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 26.67% complete, ETA 00:43:06
# Fork: 1 of 2
# Warmup Iteration   1: 19.780 ns/op
# Warmup Iteration   2: 24.153 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.885 ns/op

# Run progress: 26.70% complete, ETA 00:43:05
# Fork: 2 of 2
# Warmup Iteration   1: 19.830 ns/op
# Warmup Iteration   2: 23.571 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.876 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.712, 13.781, 13.885), stdev = 0.086
  CI (99.9%): [13.651, 13.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 26.74% complete, ETA 00:43:03
# Fork: 1 of 2
# Warmup Iteration   1: 500.285 ns/op
# Warmup Iteration   2: 277.549 ns/op
# Warmup Iteration   3: 198.428 ns/op
Iteration   1: 198.477 ns/op
Iteration   2: 198.352 ns/op
Iteration   3: 198.594 ns/op
Iteration   4: 198.750 ns/op
Iteration   5: 197.804 ns/op

# Run progress: 26.77% complete, ETA 00:43:02
# Fork: 2 of 2
# Warmup Iteration   1: 639.506 ns/op
# Warmup Iteration   2: 277.338 ns/op
# Warmup Iteration   3: 188.398 ns/op
Iteration   1: 189.447 ns/op
Iteration   2: 186.483 ns/op
Iteration   3: 186.381 ns/op
Iteration   4: 188.101 ns/op
Iteration   5: 186.500 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  192.889 ±(99.9%) 8.888 ns/op [Average]
  (min, avg, max) = (186.381, 192.889, 198.750), stdev = 5.879
  CI (99.9%): [184.001, 201.777] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 26.81% complete, ETA 00:43:01
# Fork: 1 of 2
# Warmup Iteration   1: 209.831 ns/op
# Warmup Iteration   2: 189.360 ns/op
# Warmup Iteration   3: 134.576 ns/op
Iteration   1: 134.591 ns/op
Iteration   2: 134.594 ns/op
Iteration   3: 134.558 ns/op
Iteration   4: 135.033 ns/op
Iteration   5: 134.672 ns/op

# Run progress: 26.84% complete, ETA 00:43:00
# Fork: 2 of 2
# Warmup Iteration   1: 212.932 ns/op
# Warmup Iteration   2: 194.385 ns/op
# Warmup Iteration   3: 136.085 ns/op
Iteration   1: 136.289 ns/op
Iteration   2: 136.103 ns/op
Iteration   3: 136.053 ns/op
Iteration   4: 136.386 ns/op
Iteration   5: 136.229 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  135.451 ±(99.9%) 1.237 ns/op [Average]
  (min, avg, max) = (134.558, 135.451, 136.386), stdev = 0.818
  CI (99.9%): [134.214, 136.687] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 26.88% complete, ETA 00:42:59
# Fork: 1 of 2
# Warmup Iteration   1: 12899.344 ns/op
# Warmup Iteration   2: 256.596 ns/op
# Warmup Iteration   3: 196.773 ns/op
Iteration   1: 179.209 ns/op
Iteration   2: 177.907 ns/op
Iteration   3: 177.797 ns/op
Iteration   4: 177.864 ns/op
Iteration   5: 178.963 ns/op

# Run progress: 26.91% complete, ETA 00:42:57
# Fork: 2 of 2
# Warmup Iteration   1: 13586.808 ns/op
# Warmup Iteration   2: 316.982 ns/op
# Warmup Iteration   3: 202.374 ns/op
Iteration   1: 182.980 ns/op
Iteration   2: 183.289 ns/op
Iteration   3: 183.367 ns/op
Iteration   4: 182.638 ns/op
Iteration   5: 182.419 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  180.643 ±(99.9%) 3.744 ns/op [Average]
  (min, avg, max) = (177.797, 180.643, 183.367), stdev = 2.477
  CI (99.9%): [176.899, 184.388] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 26.94% complete, ETA 00:42:56
# Fork: 1 of 2
# Warmup Iteration   1: 164.888 ns/op
# Warmup Iteration   2: 139.249 ns/op
# Warmup Iteration   3: 99.584 ns/op
Iteration   1: 99.608 ns/op
Iteration   2: 99.654 ns/op
Iteration   3: 99.546 ns/op
Iteration   4: 99.756 ns/op
Iteration   5: 99.749 ns/op

# Run progress: 26.98% complete, ETA 00:42:55
# Fork: 2 of 2
# Warmup Iteration   1: 149.210 ns/op
# Warmup Iteration   2: 144.231 ns/op
# Warmup Iteration   3: 99.576 ns/op
Iteration   1: 100.212 ns/op
Iteration   2: 100.472 ns/op
Iteration   3: 100.367 ns/op
Iteration   4: 99.853 ns/op
Iteration   5: 99.768 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  99.898 ±(99.9%) 0.498 ns/op [Average]
  (min, avg, max) = (99.546, 99.898, 100.472), stdev = 0.329
  CI (99.9%): [99.400, 100.396] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 27.01% complete, ETA 00:42:54
# Fork: 1 of 2
# Warmup Iteration   1: 812.288 ns/op
# Warmup Iteration   2: 499.165 ns/op
# Warmup Iteration   3: 323.655 ns/op
Iteration   1: 323.732 ns/op
Iteration   2: 325.137 ns/op
Iteration   3: 325.200 ns/op
Iteration   4: 328.546 ns/op
Iteration   5: 327.980 ns/op

# Run progress: 27.05% complete, ETA 00:42:52
# Fork: 2 of 2
# Warmup Iteration   1: 820.842 ns/op
# Warmup Iteration   2: 477.388 ns/op
# Warmup Iteration   3: 316.680 ns/op
Iteration   1: 317.428 ns/op
Iteration   2: 316.858 ns/op
Iteration   3: 316.464 ns/op
Iteration   4: 322.005 ns/op
Iteration   5: 322.146 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  322.550 ±(99.9%) 6.699 ns/op [Average]
  (min, avg, max) = (316.464, 322.550, 328.546), stdev = 4.431
  CI (99.9%): [315.851, 329.248] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 27.08% complete, ETA 00:42:51
# Fork: 1 of 2
# Warmup Iteration   1: 20.801 ns/op
# Warmup Iteration   2: 23.305 ns/op
# Warmup Iteration   3: 13.722 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.870 ns/op
Iteration   5: 13.888 ns/op

# Run progress: 27.12% complete, ETA 00:42:50
# Fork: 2 of 2
# Warmup Iteration   1: 19.861 ns/op
# Warmup Iteration   2: 24.286 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.720 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.709, 13.781, 13.888), stdev = 0.086
  CI (99.9%): [13.651, 13.910] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 27.15% complete, ETA 00:42:49
# Fork: 1 of 2
# Warmup Iteration   1: 1057.304 ns/op
# Warmup Iteration   2: 450.019 ns/op
# Warmup Iteration   3: 312.759 ns/op
Iteration   1: 312.482 ns/op
Iteration   2: 312.975 ns/op
Iteration   3: 312.821 ns/op
Iteration   4: 312.590 ns/op
Iteration   5: 312.008 ns/op

# Run progress: 27.19% complete, ETA 00:42:47
# Fork: 2 of 2
# Warmup Iteration   1: 1167.575 ns/op
# Warmup Iteration   2: 413.829 ns/op
# Warmup Iteration   3: 314.471 ns/op
Iteration   1: 314.887 ns/op
Iteration   2: 314.716 ns/op
Iteration   3: 315.228 ns/op
Iteration   4: 314.692 ns/op
Iteration   5: 313.388 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.579 ±(99.9%) 1.788 ns/op [Average]
  (min, avg, max) = (312.008, 313.579, 315.228), stdev = 1.182
  CI (99.9%): [311.791, 315.366] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 27.22% complete, ETA 00:42:46
# Fork: 1 of 2
# Warmup Iteration   1: 794.503 ns/op
# Warmup Iteration   2: 659.666 ns/op
# Warmup Iteration   3: 502.159 ns/op
Iteration   1: 502.973 ns/op
Iteration   2: 502.229 ns/op
Iteration   3: 502.173 ns/op
Iteration   4: 502.328 ns/op
Iteration   5: 525.654 ns/op

# Run progress: 27.26% complete, ETA 00:42:45
# Fork: 2 of 2
# Warmup Iteration   1: 709.797 ns/op
# Warmup Iteration   2: 661.032 ns/op
# Warmup Iteration   3: 500.526 ns/op
Iteration   1: 500.513 ns/op
Iteration   2: 500.663 ns/op
Iteration   3: 500.630 ns/op
Iteration   4: 500.649 ns/op
Iteration   5: 500.482 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  503.829 ±(99.9%) 11.680 ns/op [Average]
  (min, avg, max) = (500.482, 503.829, 525.654), stdev = 7.726
  CI (99.9%): [492.149, 515.510] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 27.29% complete, ETA 00:42:44
# Fork: 1 of 2
# Warmup Iteration   1: 16763.457 ns/op
# Warmup Iteration   2: 586.226 ns/op
# Warmup Iteration   3: 375.278 ns/op
Iteration   1: 340.039 ns/op
Iteration   2: 339.988 ns/op
Iteration   3: 347.740 ns/op
Iteration   4: 348.336 ns/op
Iteration   5: 340.044 ns/op

# Run progress: 27.33% complete, ETA 00:42:43
# Fork: 2 of 2
# Warmup Iteration   1: 16941.304 ns/op
# Warmup Iteration   2: 565.716 ns/op
# Warmup Iteration   3: 369.893 ns/op
Iteration   1: 335.463 ns/op
Iteration   2: 335.153 ns/op
Iteration   3: 335.143 ns/op
Iteration   4: 334.850 ns/op
Iteration   5: 335.013 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  339.177 ±(99.9%) 7.834 ns/op [Average]
  (min, avg, max) = (334.850, 339.177, 348.336), stdev = 5.182
  CI (99.9%): [331.343, 347.012] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 27.36% complete, ETA 00:42:41
# Fork: 1 of 2
# Warmup Iteration   1: 823.913 ns/op
# Warmup Iteration   2: 620.821 ns/op
# Warmup Iteration   3: 411.927 ns/op
Iteration   1: 412.223 ns/op
Iteration   2: 412.513 ns/op
Iteration   3: 412.297 ns/op
Iteration   4: 411.991 ns/op
Iteration   5: 412.284 ns/op

# Run progress: 27.40% complete, ETA 00:42:40
# Fork: 2 of 2
# Warmup Iteration   1: 654.752 ns/op
# Warmup Iteration   2: 631.453 ns/op
# Warmup Iteration   3: 415.567 ns/op
Iteration   1: 415.801 ns/op
Iteration   2: 416.449 ns/op
Iteration   3: 415.726 ns/op
Iteration   4: 415.661 ns/op
Iteration   5: 415.522 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  414.047 ±(99.9%) 2.874 ns/op [Average]
  (min, avg, max) = (411.991, 414.047, 416.449), stdev = 1.901
  CI (99.9%): [411.173, 416.921] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 27.43% complete, ETA 00:42:39
# Fork: 1 of 2
# Warmup Iteration   1: 3262.411 ns/op
# Warmup Iteration   2: 2539.638 ns/op
# Warmup Iteration   3: 1770.470 ns/op
Iteration   1: 1770.775 ns/op
Iteration   2: 1770.933 ns/op
Iteration   3: 1771.505 ns/op
Iteration   4: 1793.460 ns/op
Iteration   5: 1772.036 ns/op

# Run progress: 27.47% complete, ETA 00:42:38
# Fork: 2 of 2
# Warmup Iteration   1: 3290.915 ns/op
# Warmup Iteration   2: 2305.587 ns/op
# Warmup Iteration   3: 1759.026 ns/op
Iteration   1: 1758.071 ns/op
Iteration   2: 1757.946 ns/op
Iteration   3: 1757.835 ns/op
Iteration   4: 1759.648 ns/op
Iteration   5: 1760.206 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1767.242 ±(99.9%) 16.871 ns/op [Average]
  (min, avg, max) = (1757.835, 1767.242, 1793.460), stdev = 11.159
  CI (99.9%): [1750.370, 1784.113] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 27.50% complete, ETA 00:42:36
# Fork: 1 of 2
# Warmup Iteration   1: 19.230 ns/op
# Warmup Iteration   2: 24.581 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.708 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.878 ns/op

# Run progress: 27.53% complete, ETA 00:42:35
# Fork: 2 of 2
# Warmup Iteration   1: 20.448 ns/op
# Warmup Iteration   2: 23.337 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.707 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.707, 13.781, 13.890), stdev = 0.088
  CI (99.9%): [13.648, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 27.57% complete, ETA 00:42:34
# Fork: 1 of 2
# Warmup Iteration   1: 675.238 ns/op
# Warmup Iteration   2: 384.334 ns/op
# Warmup Iteration   3: 264.341 ns/op
Iteration   1: 264.426 ns/op
Iteration   2: 264.627 ns/op
Iteration   3: 264.870 ns/op
Iteration   4: 265.029 ns/op
Iteration   5: 264.915 ns/op

# Run progress: 27.60% complete, ETA 00:42:33
# Fork: 2 of 2
# Warmup Iteration   1: 606.515 ns/op
# Warmup Iteration   2: 381.670 ns/op
# Warmup Iteration   3: 265.111 ns/op
Iteration   1: 264.964 ns/op
Iteration   2: 265.042 ns/op
Iteration   3: 264.798 ns/op
Iteration   4: 265.254 ns/op
Iteration   5: 269.631 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  265.356 ±(99.9%) 2.298 ns/op [Average]
  (min, avg, max) = (264.426, 265.356, 269.631), stdev = 1.520
  CI (99.9%): [263.058, 267.653] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 27.64% complete, ETA 00:42:31
# Fork: 1 of 2
# Warmup Iteration   1: 723.488 ns/op
# Warmup Iteration   2: 651.943 ns/op
# Warmup Iteration   3: 491.708 ns/op
Iteration   1: 491.851 ns/op
Iteration   2: 491.743 ns/op
Iteration   3: 491.606 ns/op
Iteration   4: 491.366 ns/op
Iteration   5: 491.053 ns/op

# Run progress: 27.67% complete, ETA 00:42:30
# Fork: 2 of 2
# Warmup Iteration   1: 715.190 ns/op
# Warmup Iteration   2: 684.481 ns/op
# Warmup Iteration   3: 486.046 ns/op
Iteration   1: 486.528 ns/op
Iteration   2: 486.085 ns/op
Iteration   3: 486.108 ns/op
Iteration   4: 486.928 ns/op
Iteration   5: 486.974 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  489.024 ±(99.9%) 4.019 ns/op [Average]
  (min, avg, max) = (486.085, 489.024, 491.851), stdev = 2.659
  CI (99.9%): [485.005, 493.044] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 27.71% complete, ETA 00:42:29
# Fork: 1 of 2
# Warmup Iteration   1: 5108.314 ns/op
# Warmup Iteration   2: 467.289 ns/op
# Warmup Iteration   3: 310.429 ns/op
Iteration   1: 312.862 ns/op
Iteration   2: 310.797 ns/op
Iteration   3: 312.277 ns/op
Iteration   4: 310.485 ns/op
Iteration   5: 313.420 ns/op

# Run progress: 27.74% complete, ETA 00:42:28
# Fork: 2 of 2
# Warmup Iteration   1: 2914.410 ns/op
# Warmup Iteration   2: 463.174 ns/op
# Warmup Iteration   3: 303.953 ns/op
Iteration   1: 305.375 ns/op
Iteration   2: 303.675 ns/op
Iteration   3: 303.622 ns/op
Iteration   4: 303.297 ns/op
Iteration   5: 304.093 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  307.990 ±(99.9%) 6.521 ns/op [Average]
  (min, avg, max) = (303.297, 307.990, 313.420), stdev = 4.313
  CI (99.9%): [301.469, 314.512] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 27.78% complete, ETA 00:42:26
# Fork: 1 of 2
# Warmup Iteration   1: 501.306 ns/op
# Warmup Iteration   2: 479.051 ns/op
# Warmup Iteration   3: 336.850 ns/op
Iteration   1: 337.293 ns/op
Iteration   2: 335.887 ns/op
Iteration   3: 336.138 ns/op
Iteration   4: 335.719 ns/op
Iteration   5: 336.506 ns/op

# Run progress: 27.81% complete, ETA 00:42:25
# Fork: 2 of 2
# Warmup Iteration   1: 504.902 ns/op
# Warmup Iteration   2: 452.487 ns/op
# Warmup Iteration   3: 338.699 ns/op
Iteration   1: 338.530 ns/op
Iteration   2: 338.011 ns/op
Iteration   3: 339.334 ns/op
Iteration   4: 338.552 ns/op
Iteration   5: 338.623 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  337.459 ±(99.9%) 1.997 ns/op [Average]
  (min, avg, max) = (335.719, 337.459, 339.334), stdev = 1.321
  CI (99.9%): [335.463, 339.456] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 27.85% complete, ETA 00:42:24
# Fork: 1 of 2
# Warmup Iteration   1: 836.089 ns/op
# Warmup Iteration   2: 592.539 ns/op
# Warmup Iteration   3: 396.914 ns/op
Iteration   1: 396.920 ns/op
Iteration   2: 396.812 ns/op
Iteration   3: 396.858 ns/op
Iteration   4: 398.719 ns/op
Iteration   5: 398.724 ns/op

# Run progress: 27.88% complete, ETA 00:42:23
# Fork: 2 of 2
# Warmup Iteration   1: 851.162 ns/op
# Warmup Iteration   2: 598.003 ns/op
# Warmup Iteration   3: 396.737 ns/op
Iteration   1: 396.991 ns/op
Iteration   2: 396.935 ns/op
Iteration   3: 396.998 ns/op
Iteration   4: 398.924 ns/op
Iteration   5: 398.979 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  397.686 ±(99.9%) 1.504 ns/op [Average]
  (min, avg, max) = (396.812, 397.686, 398.979), stdev = 0.995
  CI (99.9%): [396.182, 399.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 27.92% complete, ETA 00:42:21
# Fork: 1 of 2
# Warmup Iteration   1: 19.608 ns/op
# Warmup Iteration   2: 21.101 ns/op
# Warmup Iteration   3: 13.719 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.733 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.884 ns/op

# Run progress: 27.95% complete, ETA 00:42:20
# Fork: 2 of 2
# Warmup Iteration   1: 19.910 ns/op
# Warmup Iteration   2: 24.639 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.726 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.710, 13.784, 13.884), stdev = 0.086
  CI (99.9%): [13.654, 13.914] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 27.99% complete, ETA 00:42:19
# Fork: 1 of 2
# Warmup Iteration   1: 1394.936 ns/op
# Warmup Iteration   2: 553.390 ns/op
# Warmup Iteration   3: 387.390 ns/op
Iteration   1: 387.532 ns/op
Iteration   2: 388.058 ns/op
Iteration   3: 385.882 ns/op
Iteration   4: 386.821 ns/op
Iteration   5: 386.238 ns/op

# Run progress: 28.02% complete, ETA 00:42:18
# Fork: 2 of 2
# Warmup Iteration   1: 1128.117 ns/op
# Warmup Iteration   2: 502.021 ns/op
# Warmup Iteration   3: 381.928 ns/op
Iteration   1: 386.589 ns/op
Iteration   2: 379.973 ns/op
Iteration   3: 617.227 ns/op
Iteration   4: 381.562 ns/op
Iteration   5: 384.197 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.408 ±(99.9%) 110.997 ns/op [Average]
  (min, avg, max) = (379.973, 408.408, 617.227), stdev = 73.418
  CI (99.9%): [297.410, 519.405] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 28.06% complete, ETA 00:42:17
# Fork: 1 of 2
# Warmup Iteration   1: 605.140 ns/op
# Warmup Iteration   2: 553.503 ns/op
# Warmup Iteration   3: 422.760 ns/op
Iteration   1: 423.863 ns/op
Iteration   2: 424.935 ns/op
Iteration   3: 420.171 ns/op
Iteration   4: 422.532 ns/op
Iteration   5: 425.408 ns/op

# Run progress: 28.09% complete, ETA 00:42:15
# Fork: 2 of 2
# Warmup Iteration   1: 594.789 ns/op
# Warmup Iteration   2: 602.460 ns/op
# Warmup Iteration   3: 420.412 ns/op
Iteration   1: 422.303 ns/op
Iteration   2: 421.753 ns/op
Iteration   3: 421.146 ns/op
Iteration   4: 421.038 ns/op
Iteration   5: 420.815 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  422.396 ±(99.9%) 2.712 ns/op [Average]
  (min, avg, max) = (420.171, 422.396, 425.408), stdev = 1.794
  CI (99.9%): [419.684, 425.108] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 28.13% complete, ETA 00:42:14
# Fork: 1 of 2
# Warmup Iteration   1: 10833.397 ns/op
# Warmup Iteration   2: 545.425 ns/op
# Warmup Iteration   3: 444.195 ns/op
Iteration   1: 406.399 ns/op
Iteration   2: 406.297 ns/op
Iteration   3: 406.339 ns/op
Iteration   4: 406.661 ns/op
Iteration   5: 406.462 ns/op

# Run progress: 28.16% complete, ETA 00:42:13
# Fork: 2 of 2
# Warmup Iteration   1: 12546.848 ns/op
# Warmup Iteration   2: 568.556 ns/op
# Warmup Iteration   3: 449.291 ns/op
Iteration   1: 408.612 ns/op
Iteration   2: 409.941 ns/op
Iteration   3: 407.019 ns/op
Iteration   4: 408.392 ns/op
Iteration   5: 409.257 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  407.538 ±(99.9%) 2.083 ns/op [Average]
  (min, avg, max) = (406.297, 407.538, 409.941), stdev = 1.378
  CI (99.9%): [405.455, 409.621] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 28.19% complete, ETA 00:42:12
# Fork: 1 of 2
# Warmup Iteration   1: 535.942 ns/op
# Warmup Iteration   2: 450.796 ns/op
# Warmup Iteration   3: 337.647 ns/op
Iteration   1: 336.371 ns/op
Iteration   2: 337.693 ns/op
Iteration   3: 338.672 ns/op
Iteration   4: 337.443 ns/op
Iteration   5: 339.229 ns/op

# Run progress: 28.23% complete, ETA 00:42:10
# Fork: 2 of 2
# Warmup Iteration   1: 546.416 ns/op
# Warmup Iteration   2: 458.377 ns/op
# Warmup Iteration   3: 341.988 ns/op
Iteration   1: 340.160 ns/op
Iteration   2: 340.452 ns/op
Iteration   3: 341.938 ns/op
Iteration   4: 341.085 ns/op
Iteration   5: 340.690 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  339.373 ±(99.9%) 2.718 ns/op [Average]
  (min, avg, max) = (336.371, 339.373, 341.938), stdev = 1.798
  CI (99.9%): [336.655, 342.092] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 28.26% complete, ETA 00:42:09
# Fork: 1 of 2
# Warmup Iteration   1: 3337.452 ns/op
# Warmup Iteration   2: 2345.050 ns/op
# Warmup Iteration   3: 1608.257 ns/op
Iteration   1: 1612.445 ns/op
Iteration   2: 1608.255 ns/op
Iteration   3: 1605.892 ns/op
Iteration   4: 1615.765 ns/op
Iteration   5: 1623.456 ns/op

# Run progress: 28.30% complete, ETA 00:42:08
# Fork: 2 of 2
# Warmup Iteration   1: 4006.225 ns/op
# Warmup Iteration   2: 2251.420 ns/op
# Warmup Iteration   3: 1643.803 ns/op
Iteration   1: 1651.124 ns/op
Iteration   2: 1644.862 ns/op
Iteration   3: 1643.012 ns/op
Iteration   4: 1646.140 ns/op
Iteration   5: 1644.155 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1629.511 ±(99.9%) 27.151 ns/op [Average]
  (min, avg, max) = (1605.892, 1629.511, 1651.124), stdev = 17.959
  CI (99.9%): [1602.360, 1656.661] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 28.33% complete, ETA 00:42:07
# Fork: 1 of 2
# Warmup Iteration   1: 19.781 ns/op
# Warmup Iteration   2: 22.518 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.879 ns/op

# Run progress: 28.37% complete, ETA 00:42:05
# Fork: 2 of 2
# Warmup Iteration   1: 22.058 ns/op
# Warmup Iteration   2: 25.252 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 14.625 ns/op
Iteration   5: 14.618 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.929 ±(99.9%) 0.561 ns/op [Average]
  (min, avg, max) = (13.710, 13.929, 14.625), stdev = 0.371
  CI (99.9%): [13.368, 14.490] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 28.40% complete, ETA 00:42:04
# Fork: 1 of 2
# Warmup Iteration   1: 329.730 ns/op
# Warmup Iteration   2: 315.277 ns/op
# Warmup Iteration   3: 218.531 ns/op
Iteration   1: 218.606 ns/op
Iteration   2: 218.637 ns/op
Iteration   3: 218.636 ns/op
Iteration   4: 218.444 ns/op
Iteration   5: 218.432 ns/op

# Run progress: 28.44% complete, ETA 00:42:03
# Fork: 2 of 2
# Warmup Iteration   1: 318.068 ns/op
# Warmup Iteration   2: 322.223 ns/op
# Warmup Iteration   3: 218.002 ns/op
Iteration   1: 230.577 ns/op
Iteration   2: 217.992 ns/op
Iteration   3: 218.220 ns/op
Iteration   4: 218.652 ns/op
Iteration   5: 218.608 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  219.680 ±(99.9%) 5.798 ns/op [Average]
  (min, avg, max) = (217.992, 219.680, 230.577), stdev = 3.835
  CI (99.9%): [213.883, 225.478] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 28.47% complete, ETA 00:42:02
# Fork: 1 of 2
# Warmup Iteration   1: 537.511 ns/op
# Warmup Iteration   2: 469.606 ns/op
# Warmup Iteration   3: 353.411 ns/op
Iteration   1: 353.683 ns/op
Iteration   2: 353.557 ns/op
Iteration   3: 353.488 ns/op
Iteration   4: 353.994 ns/op
Iteration   5: 354.044 ns/op

# Run progress: 28.51% complete, ETA 00:42:00
# Fork: 2 of 2
# Warmup Iteration   1: 550.934 ns/op
# Warmup Iteration   2: 474.920 ns/op
# Warmup Iteration   3: 353.488 ns/op
Iteration   1: 353.330 ns/op
Iteration   2: 353.379 ns/op
Iteration   3: 353.348 ns/op
Iteration   4: 353.738 ns/op
Iteration   5: 353.714 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  353.627 ±(99.9%) 0.385 ns/op [Average]
  (min, avg, max) = (353.330, 353.627, 354.044), stdev = 0.255
  CI (99.9%): [353.243, 354.012] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 28.54% complete, ETA 00:41:59
# Fork: 1 of 2
# Warmup Iteration   1: 1515.083 ns/op
# Warmup Iteration   2: 156.127 ns/op
# Warmup Iteration   3: 108.562 ns/op
Iteration   1: 108.598 ns/op
Iteration   2: 108.611 ns/op
Iteration   3: 108.640 ns/op
Iteration   4: 108.609 ns/op
Iteration   5: 108.560 ns/op

# Run progress: 28.58% complete, ETA 00:41:58
# Fork: 2 of 2
# Warmup Iteration   1: 1531.155 ns/op
# Warmup Iteration   2: 154.167 ns/op
# Warmup Iteration   3: 108.410 ns/op
Iteration   1: 108.430 ns/op
Iteration   2: 108.465 ns/op
Iteration   3: 108.422 ns/op
Iteration   4: 108.592 ns/op
Iteration   5: 108.585 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.551 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (108.422, 108.551, 108.640), stdev = 0.081
  CI (99.9%): [108.429, 108.673] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 28.61% complete, ETA 00:41:57
# Fork: 1 of 2
# Warmup Iteration   1: 339.960 ns/op
# Warmup Iteration   2: 317.224 ns/op
# Warmup Iteration   3: 236.044 ns/op
Iteration   1: 236.156 ns/op
Iteration   2: 236.213 ns/op
Iteration   3: 236.125 ns/op
Iteration   4: 236.230 ns/op
Iteration   5: 236.152 ns/op

# Run progress: 28.65% complete, ETA 00:41:56
# Fork: 2 of 2
# Warmup Iteration   1: 339.240 ns/op
# Warmup Iteration   2: 316.917 ns/op
# Warmup Iteration   3: 236.107 ns/op
Iteration   1: 236.199 ns/op
Iteration   2: 236.154 ns/op
Iteration   3: 236.179 ns/op
Iteration   4: 236.200 ns/op
Iteration   5: 236.227 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  236.184 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (236.125, 236.184, 236.230), stdev = 0.036
  CI (99.9%): [236.130, 236.237] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 28.68% complete, ETA 00:41:54
# Fork: 1 of 2
# Warmup Iteration   1: 239.148 ns/op
# Warmup Iteration   2: 219.173 ns/op
# Warmup Iteration   3: 124.784 ns/op
Iteration   1: 124.768 ns/op
Iteration   2: 124.779 ns/op
Iteration   3: 124.889 ns/op
Iteration   4: 128.058 ns/op
Iteration   5: 127.999 ns/op

# Run progress: 28.72% complete, ETA 00:41:53
# Fork: 2 of 2
# Warmup Iteration   1: 238.291 ns/op
# Warmup Iteration   2: 236.984 ns/op
# Warmup Iteration   3: 124.745 ns/op
Iteration   1: 124.944 ns/op
Iteration   2: 124.895 ns/op
Iteration   3: 124.785 ns/op
Iteration   4: 127.981 ns/op
Iteration   5: 127.958 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.106 ±(99.9%) 2.466 ns/op [Average]
  (min, avg, max) = (124.768, 126.106, 128.058), stdev = 1.631
  CI (99.9%): [123.640, 128.571] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 28.75% complete, ETA 00:41:52
# Fork: 1 of 2
# Warmup Iteration   1: 20.441 ns/op
# Warmup Iteration   2: 22.714 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.705 ns/op
Iteration   2: 13.722 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 14.614 ns/op
Iteration   5: 14.618 ns/op

# Run progress: 28.78% complete, ETA 00:41:51
# Fork: 2 of 2
# Warmup Iteration   1: 20.316 ns/op
# Warmup Iteration   2: 25.082 ns/op
# Warmup Iteration   3: 13.718 ns/op
Iteration   1: 13.726 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.881 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.930 ±(99.9%) 0.556 ns/op [Average]
  (min, avg, max) = (13.705, 13.930, 14.618), stdev = 0.368
  CI (99.9%): [13.373, 14.486] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 28.82% complete, ETA 00:41:49
# Fork: 1 of 2
# Warmup Iteration   1: 1022.644 ns/op
# Warmup Iteration   2: 380.830 ns/op
# Warmup Iteration   3: 270.201 ns/op
Iteration   1: 268.416 ns/op
Iteration   2: 271.205 ns/op
Iteration   3: 270.198 ns/op
Iteration   4: 269.429 ns/op
Iteration   5: 270.570 ns/op

# Run progress: 28.85% complete, ETA 00:41:48
# Fork: 2 of 2
# Warmup Iteration   1: 1434.395 ns/op
# Warmup Iteration   2: 357.258 ns/op
# Warmup Iteration   3: 256.356 ns/op
Iteration   1: 256.376 ns/op
Iteration   2: 256.012 ns/op
Iteration   3: 257.178 ns/op
Iteration   4: 256.435 ns/op
Iteration   5: 255.673 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  263.149 ±(99.9%) 10.929 ns/op [Average]
  (min, avg, max) = (255.673, 263.149, 271.205), stdev = 7.229
  CI (99.9%): [252.220, 274.078] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 28.89% complete, ETA 00:41:47
# Fork: 1 of 2
# Warmup Iteration   1: 1091.551 ns/op
# Warmup Iteration   2: 921.570 ns/op
# Warmup Iteration   3: 672.783 ns/op
Iteration   1: 674.042 ns/op
Iteration   2: 676.685 ns/op
Iteration   3: 673.283 ns/op
Iteration   4: 676.953 ns/op
Iteration   5: 678.933 ns/op

# Run progress: 28.92% complete, ETA 00:41:46
# Fork: 2 of 2
# Warmup Iteration   1: 1074.389 ns/op
# Warmup Iteration   2: 948.675 ns/op
# Warmup Iteration   3: 675.431 ns/op
Iteration   1: 668.933 ns/op
Iteration   2: 674.095 ns/op
Iteration   3: 672.998 ns/op
Iteration   4: 672.188 ns/op
Iteration   5: 673.754 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  674.186 ±(99.9%) 4.231 ns/op [Average]
  (min, avg, max) = (668.933, 674.186, 678.933), stdev = 2.798
  CI (99.9%): [669.956, 678.417] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 28.96% complete, ETA 00:41:44
# Fork: 1 of 2
# Warmup Iteration   1: 7491.569 ns/op
# Warmup Iteration   2: 427.534 ns/op
# Warmup Iteration   3: 278.330 ns/op
Iteration   1: 279.446 ns/op
Iteration   2: 278.424 ns/op
Iteration   3: 277.944 ns/op
Iteration   4: 277.971 ns/op
Iteration   5: 277.576 ns/op

# Run progress: 28.99% complete, ETA 00:41:43
# Fork: 2 of 2
# Warmup Iteration   1: 7641.962 ns/op
# Warmup Iteration   2: 444.365 ns/op
# Warmup Iteration   3: 298.634 ns/op
Iteration   1: 298.629 ns/op
Iteration   2: 298.139 ns/op
Iteration   3: 298.144 ns/op
Iteration   4: 300.227 ns/op
Iteration   5: 299.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  288.638 ±(99.9%) 16.565 ns/op [Average]
  (min, avg, max) = (277.576, 288.638, 300.227), stdev = 10.957
  CI (99.9%): [272.073, 305.203] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 29.03% complete, ETA 00:41:42
# Fork: 1 of 2
# Warmup Iteration   1: 750.223 ns/op
# Warmup Iteration   2: 527.816 ns/op
# Warmup Iteration   3: 390.524 ns/op
Iteration   1: 390.752 ns/op
Iteration   2: 392.674 ns/op
Iteration   3: 391.643 ns/op
Iteration   4: 392.179 ns/op
Iteration   5: 391.201 ns/op

# Run progress: 29.06% complete, ETA 00:41:41
# Fork: 2 of 2
# Warmup Iteration   1: 633.137 ns/op
# Warmup Iteration   2: 523.510 ns/op
# Warmup Iteration   3: 388.744 ns/op
Iteration   1: 389.294 ns/op
Iteration   2: 389.352 ns/op
Iteration   3: 388.565 ns/op
Iteration   4: 386.416 ns/op
Iteration   5: 389.472 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  390.155 ±(99.9%) 2.871 ns/op [Average]
  (min, avg, max) = (386.416, 390.155, 392.674), stdev = 1.899
  CI (99.9%): [387.283, 393.026] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 29.10% complete, ETA 00:41:40
# Fork: 1 of 2
# Warmup Iteration   1: 682.883 ns/op
# Warmup Iteration   2: 541.470 ns/op
# Warmup Iteration   3: 347.184 ns/op
Iteration   1: 348.990 ns/op
Iteration   2: 348.386 ns/op
Iteration   3: 347.035 ns/op
Iteration   4: 353.391 ns/op
Iteration   5: 349.741 ns/op

# Run progress: 29.13% complete, ETA 00:41:38
# Fork: 2 of 2
# Warmup Iteration   1: 922.282 ns/op
# Warmup Iteration   2: 538.204 ns/op
# Warmup Iteration   3: 346.796 ns/op
Iteration   1: 348.165 ns/op
Iteration   2: 346.803 ns/op
Iteration   3: 347.633 ns/op
Iteration   4: 349.929 ns/op
Iteration   5: 350.208 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  349.028 ±(99.9%) 2.929 ns/op [Average]
  (min, avg, max) = (346.803, 349.028, 353.391), stdev = 1.937
  CI (99.9%): [346.099, 351.957] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 29.17% complete, ETA 00:41:37
# Fork: 1 of 2
# Warmup Iteration   1: 19.172 ns/op
# Warmup Iteration   2: 24.250 ns/op
# Warmup Iteration   3: 14.105 ns/op
Iteration   1: 14.102 ns/op
Iteration   2: 14.106 ns/op
Iteration   3: 14.101 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.893 ns/op

# Run progress: 29.20% complete, ETA 00:41:36
# Fork: 2 of 2
# Warmup Iteration   1: 18.244 ns/op
# Warmup Iteration   2: 21.835 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.868 ns/op
Iteration   5: 13.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.899 ±(99.9%) 0.241 ns/op [Average]
  (min, avg, max) = (13.713, 13.899, 14.106), stdev = 0.159
  CI (99.9%): [13.659, 14.140] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 29.24% complete, ETA 00:41:35
# Fork: 1 of 2
# Warmup Iteration   1: 777.877 ns/op
# Warmup Iteration   2: 472.966 ns/op
# Warmup Iteration   3: 336.456 ns/op
Iteration   1: 332.992 ns/op
Iteration   2: 333.778 ns/op
Iteration   3: 337.252 ns/op
Iteration   4: 338.407 ns/op
Iteration   5: 335.929 ns/op

# Run progress: 29.27% complete, ETA 00:41:33
# Fork: 2 of 2
# Warmup Iteration   1: 770.529 ns/op
# Warmup Iteration   2: 503.945 ns/op
# Warmup Iteration   3: 348.013 ns/op
Iteration   1: 348.199 ns/op
Iteration   2: 348.845 ns/op
Iteration   3: 348.309 ns/op
Iteration   4: 348.706 ns/op
Iteration   5: 348.859 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  342.127 ±(99.9%) 10.547 ns/op [Average]
  (min, avg, max) = (332.992, 342.127, 348.859), stdev = 6.976
  CI (99.9%): [331.581, 352.674] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 29.31% complete, ETA 00:41:32
# Fork: 1 of 2
# Warmup Iteration   1: 542.604 ns/op
# Warmup Iteration   2: 522.556 ns/op
# Warmup Iteration   3: 371.876 ns/op
Iteration   1: 372.101 ns/op
Iteration   2: 371.924 ns/op
Iteration   3: 371.830 ns/op
Iteration   4: 371.892 ns/op
Iteration   5: 372.131 ns/op

# Run progress: 29.34% complete, ETA 00:41:31
# Fork: 2 of 2
# Warmup Iteration   1: 551.969 ns/op
# Warmup Iteration   2: 504.441 ns/op
# Warmup Iteration   3: 381.568 ns/op
Iteration   1: 382.447 ns/op
Iteration   2: 381.878 ns/op
Iteration   3: 381.570 ns/op
Iteration   4: 381.939 ns/op
Iteration   5: 382.057 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  376.977 ±(99.9%) 7.978 ns/op [Average]
  (min, avg, max) = (371.830, 376.977, 382.447), stdev = 5.277
  CI (99.9%): [368.999, 384.955] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 29.38% complete, ETA 00:41:30
# Fork: 1 of 2
# Warmup Iteration   1: 9892.487 ns/op
# Warmup Iteration   2: 552.883 ns/op
# Warmup Iteration   3: 389.232 ns/op
Iteration   1: 389.493 ns/op
Iteration   2: 389.746 ns/op
Iteration   3: 389.180 ns/op
Iteration   4: 390.008 ns/op
Iteration   5: 389.942 ns/op

# Run progress: 29.41% complete, ETA 00:41:28
# Fork: 2 of 2
# Warmup Iteration   1: 11176.895 ns/op
# Warmup Iteration   2: 613.938 ns/op
# Warmup Iteration   3: 388.769 ns/op
Iteration   1: 389.045 ns/op
Iteration   2: 388.963 ns/op
Iteration   3: 388.842 ns/op
Iteration   4: 388.866 ns/op
Iteration   5: 388.860 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  389.294 ±(99.9%) 0.701 ns/op [Average]
  (min, avg, max) = (388.842, 389.294, 390.008), stdev = 0.464
  CI (99.9%): [388.594, 389.995] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 29.44% complete, ETA 00:41:27
# Fork: 1 of 2
# Warmup Iteration   1: 547.278 ns/op
# Warmup Iteration   2: 457.241 ns/op
# Warmup Iteration   3: 341.699 ns/op
Iteration   1: 341.919 ns/op
Iteration   2: 341.856 ns/op
Iteration   3: 341.836 ns/op
Iteration   4: 342.362 ns/op
Iteration   5: 342.506 ns/op

# Run progress: 29.48% complete, ETA 00:41:26
# Fork: 2 of 2
# Warmup Iteration   1: 547.741 ns/op
# Warmup Iteration   2: 462.301 ns/op
# Warmup Iteration   3: 343.842 ns/op
Iteration   1: 343.764 ns/op
Iteration   2: 343.686 ns/op
Iteration   3: 343.779 ns/op
Iteration   4: 344.151 ns/op
Iteration   5: 344.556 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  343.042 ±(99.9%) 1.584 ns/op [Average]
  (min, avg, max) = (341.836, 343.042, 344.556), stdev = 1.047
  CI (99.9%): [341.458, 344.625] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 29.51% complete, ETA 00:41:25
# Fork: 1 of 2
# Warmup Iteration   1: 3150.621 ns/op
# Warmup Iteration   2: 2188.965 ns/op
# Warmup Iteration   3: 1551.292 ns/op
Iteration   1: 1550.093 ns/op
Iteration   2: 1550.433 ns/op
Iteration   3: 1547.233 ns/op
Iteration   4: 1549.173 ns/op
Iteration   5: 1552.442 ns/op

# Run progress: 29.55% complete, ETA 00:41:24
# Fork: 2 of 2
# Warmup Iteration   1: 3203.504 ns/op
# Warmup Iteration   2: 2304.254 ns/op
# Warmup Iteration   3: 1539.445 ns/op
Iteration   1: 1540.237 ns/op
Iteration   2: 1540.704 ns/op
Iteration   3: 1541.638 ns/op
Iteration   4: 1541.780 ns/op
Iteration   5: 1541.975 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1545.571 ±(99.9%) 7.161 ns/op [Average]
  (min, avg, max) = (1540.237, 1545.571, 1552.442), stdev = 4.737
  CI (99.9%): [1538.409, 1552.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 29.58% complete, ETA 00:41:22
# Fork: 1 of 2
# Warmup Iteration   1: 19.571 ns/op
# Warmup Iteration   2: 25.218 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.726 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.875 ns/op
Iteration   5: 13.879 ns/op

# Run progress: 29.62% complete, ETA 00:41:21
# Fork: 2 of 2
# Warmup Iteration   1: 19.627 ns/op
# Warmup Iteration   2: 24.245 ns/op
# Warmup Iteration   3: 13.718 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.875 ns/op
Iteration   5: 13.875 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.780 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (13.710, 13.780, 13.879), stdev = 0.082
  CI (99.9%): [13.655, 13.905] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 29.65% complete, ETA 00:41:20
# Fork: 1 of 2
# Warmup Iteration   1: 803.671 ns/op
# Warmup Iteration   2: 494.489 ns/op
# Warmup Iteration   3: 345.598 ns/op
Iteration   1: 345.661 ns/op
Iteration   2: 345.518 ns/op
Iteration   3: 345.404 ns/op
Iteration   4: 345.930 ns/op
Iteration   5: 345.942 ns/op

# Run progress: 29.69% complete, ETA 00:41:19
# Fork: 2 of 2
# Warmup Iteration   1: 735.949 ns/op
# Warmup Iteration   2: 477.579 ns/op
# Warmup Iteration   3: 345.461 ns/op
Iteration   1: 345.478 ns/op
Iteration   2: 345.581 ns/op
Iteration   3: 345.779 ns/op
Iteration   4: 346.074 ns/op
Iteration   5: 345.970 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  345.734 ±(99.9%) 0.358 ns/op [Average]
  (min, avg, max) = (345.404, 345.734, 346.074), stdev = 0.237
  CI (99.9%): [345.376, 346.092] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 29.72% complete, ETA 00:41:17
# Fork: 1 of 2
# Warmup Iteration   1: 635.327 ns/op
# Warmup Iteration   2: 538.251 ns/op
# Warmup Iteration   3: 397.768 ns/op
Iteration   1: 398.247 ns/op
Iteration   2: 397.963 ns/op
Iteration   3: 397.912 ns/op
Iteration   4: 398.010 ns/op
Iteration   5: 397.909 ns/op

# Run progress: 29.76% complete, ETA 00:41:16
# Fork: 2 of 2
# Warmup Iteration   1: 624.986 ns/op
# Warmup Iteration   2: 530.096 ns/op
# Warmup Iteration   3: 398.554 ns/op
Iteration   1: 398.380 ns/op
Iteration   2: 398.168 ns/op
Iteration   3: 398.032 ns/op
Iteration   4: 398.537 ns/op
Iteration   5: 398.556 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  398.171 ±(99.9%) 0.376 ns/op [Average]
  (min, avg, max) = (397.909, 398.171, 398.556), stdev = 0.249
  CI (99.9%): [397.796, 398.547] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 29.79% complete, ETA 00:41:15
# Fork: 1 of 2
# Warmup Iteration   1: 7802.253 ns/op
# Warmup Iteration   2: 563.964 ns/op
# Warmup Iteration   3: 327.905 ns/op
Iteration   1: 328.012 ns/op
Iteration   2: 327.997 ns/op
Iteration   3: 327.972 ns/op
Iteration   4: 328.303 ns/op
Iteration   5: 328.147 ns/op

# Run progress: 29.83% complete, ETA 00:41:14
# Fork: 2 of 2
# Warmup Iteration   1: 4637.229 ns/op
# Warmup Iteration   2: 462.704 ns/op
# Warmup Iteration   3: 330.746 ns/op
Iteration   1: 330.989 ns/op
Iteration   2: 330.733 ns/op
Iteration   3: 330.932 ns/op
Iteration   4: 330.793 ns/op
Iteration   5: 330.838 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  329.472 ±(99.9%) 2.215 ns/op [Average]
  (min, avg, max) = (327.972, 329.472, 330.989), stdev = 1.465
  CI (99.9%): [327.257, 331.686] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 29.86% complete, ETA 00:41:12
# Fork: 1 of 2
# Warmup Iteration   1: 535.566 ns/op
# Warmup Iteration   2: 408.112 ns/op
# Warmup Iteration   3: 302.512 ns/op
Iteration   1: 302.579 ns/op
Iteration   2: 303.144 ns/op
Iteration   3: 302.724 ns/op
Iteration   4: 302.721 ns/op
Iteration   5: 303.226 ns/op

# Run progress: 29.90% complete, ETA 00:41:11
# Fork: 2 of 2
# Warmup Iteration   1: 477.440 ns/op
# Warmup Iteration   2: 403.864 ns/op
# Warmup Iteration   3: 301.909 ns/op
Iteration   1: 302.428 ns/op
Iteration   2: 302.753 ns/op
Iteration   3: 302.446 ns/op
Iteration   4: 302.312 ns/op
Iteration   5: 301.962 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  302.630 ±(99.9%) 0.570 ns/op [Average]
  (min, avg, max) = (301.962, 302.630, 303.226), stdev = 0.377
  CI (99.9%): [302.060, 303.199] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 29.93% complete, ETA 00:41:10
# Fork: 1 of 2
# Warmup Iteration   1: 1963.999 ns/op
# Warmup Iteration   2: 696.234 ns/op
# Warmup Iteration   3: 440.560 ns/op
Iteration   1: 439.774 ns/op
Iteration   2: 442.407 ns/op
Iteration   3: 441.808 ns/op
Iteration   4: 443.500 ns/op
Iteration   5: 444.194 ns/op

# Run progress: 29.97% complete, ETA 00:41:09
# Fork: 2 of 2
# Warmup Iteration   1: 1572.932 ns/op
# Warmup Iteration   2: 705.426 ns/op
# Warmup Iteration   3: 442.998 ns/op
Iteration   1: 441.960 ns/op
Iteration   2: 441.872 ns/op
Iteration   3: 441.996 ns/op
Iteration   4: 444.293 ns/op
Iteration   5: 444.048 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  442.585 ±(99.9%) 2.154 ns/op [Average]
  (min, avg, max) = (439.774, 442.585, 444.293), stdev = 1.425
  CI (99.9%): [440.431, 444.739] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 30.00% complete, ETA 00:41:07
# Fork: 1 of 2
# Warmup Iteration   1: 19.547 ns/op
# Warmup Iteration   2: 22.279 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.887 ns/op
Iteration   5: 13.905 ns/op

# Run progress: 30.03% complete, ETA 00:41:06
# Fork: 2 of 2
# Warmup Iteration   1: 19.338 ns/op
# Warmup Iteration   2: 24.766 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.733 ns/op
Iteration   2: 13.726 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 15.244 ns/op
Iteration   5: 15.243 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.060 ±(99.9%) 0.949 ns/op [Average]
  (min, avg, max) = (13.713, 14.060, 15.244), stdev = 0.628
  CI (99.9%): [13.111, 15.010] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 30.07% complete, ETA 00:41:05
# Fork: 1 of 2
# Warmup Iteration   1: 1390.796 ns/op
# Warmup Iteration   2: 540.273 ns/op
# Warmup Iteration   3: 366.837 ns/op
Iteration   1: 366.250 ns/op
Iteration   2: 364.920 ns/op
Iteration   3: 366.465 ns/op
Iteration   4: 367.176 ns/op
Iteration   5: 364.175 ns/op

# Run progress: 30.10% complete, ETA 00:41:04
# Fork: 2 of 2
# Warmup Iteration   1: 1343.270 ns/op
# Warmup Iteration   2: 493.273 ns/op
# Warmup Iteration   3: 360.199 ns/op
Iteration   1: 362.556 ns/op
Iteration   2: 361.938 ns/op
Iteration   3: 362.869 ns/op
Iteration   4: 360.054 ns/op
Iteration   5: 362.590 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  363.899 ±(99.9%) 3.461 ns/op [Average]
  (min, avg, max) = (360.054, 363.899, 367.176), stdev = 2.290
  CI (99.9%): [360.438, 367.361] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 30.14% complete, ETA 00:41:02
# Fork: 1 of 2
# Warmup Iteration   1: 604.104 ns/op
# Warmup Iteration   2: 571.723 ns/op
# Warmup Iteration   3: 422.616 ns/op
Iteration   1: 429.474 ns/op
Iteration   2: 425.313 ns/op
Iteration   3: 428.752 ns/op
Iteration   4: 428.389 ns/op
Iteration   5: 427.200 ns/op

# Run progress: 30.17% complete, ETA 00:41:01
# Fork: 2 of 2
# Warmup Iteration   1: 607.504 ns/op
# Warmup Iteration   2: 573.166 ns/op
# Warmup Iteration   3: 429.754 ns/op
Iteration   1: 421.386 ns/op
Iteration   2: 428.429 ns/op
Iteration   3: 425.002 ns/op
Iteration   4: 429.067 ns/op
Iteration   5: 427.050 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  427.006 ±(99.9%) 3.766 ns/op [Average]
  (min, avg, max) = (421.386, 427.006, 429.474), stdev = 2.491
  CI (99.9%): [423.240, 430.772] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 30.21% complete, ETA 00:41:00
# Fork: 1 of 2
# Warmup Iteration   1: 14803.630 ns/op
# Warmup Iteration   2: 595.735 ns/op
# Warmup Iteration   3: 418.707 ns/op
Iteration   1: 376.020 ns/op
Iteration   2: 377.163 ns/op
Iteration   3: 376.597 ns/op
Iteration   4: 376.767 ns/op
Iteration   5: 376.543 ns/op

# Run progress: 30.24% complete, ETA 00:40:59
# Fork: 2 of 2
# Warmup Iteration   1: 10366.684 ns/op
# Warmup Iteration   2: 630.871 ns/op
# Warmup Iteration   3: 372.638 ns/op
Iteration   1: 375.596 ns/op
Iteration   2: 374.726 ns/op
Iteration   3: 373.011 ns/op
Iteration   4: 373.612 ns/op
Iteration   5: 375.366 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  375.540 ±(99.9%) 2.096 ns/op [Average]
  (min, avg, max) = (373.011, 375.540, 377.163), stdev = 1.386
  CI (99.9%): [373.444, 377.636] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 30.28% complete, ETA 00:40:57
# Fork: 1 of 2
# Warmup Iteration   1: 616.036 ns/op
# Warmup Iteration   2: 464.165 ns/op
# Warmup Iteration   3: 326.630 ns/op
Iteration   1: 326.390 ns/op
Iteration   2: 326.453 ns/op
Iteration   3: 326.445 ns/op
Iteration   4: 326.243 ns/op
Iteration   5: 326.384 ns/op

# Run progress: 30.31% complete, ETA 00:40:56
# Fork: 2 of 2
# Warmup Iteration   1: 608.954 ns/op
# Warmup Iteration   2: 488.225 ns/op
# Warmup Iteration   3: 327.854 ns/op
Iteration   1: 327.297 ns/op
Iteration   2: 327.944 ns/op
Iteration   3: 328.370 ns/op
Iteration   4: 328.565 ns/op
Iteration   5: 326.536 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  327.063 ±(99.9%) 1.372 ns/op [Average]
  (min, avg, max) = (326.243, 327.063, 328.565), stdev = 0.908
  CI (99.9%): [325.691, 328.435] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 30.35% complete, ETA 00:40:55
# Fork: 1 of 2
# Warmup Iteration   1: 4141.847 ns/op
# Warmup Iteration   2: 2334.240 ns/op
# Warmup Iteration   3: 1623.878 ns/op
Iteration   1: 1610.840 ns/op
Iteration   2: 1616.969 ns/op
Iteration   3: 1618.396 ns/op
Iteration   4: 1622.855 ns/op
Iteration   5: 1621.691 ns/op

# Run progress: 30.38% complete, ETA 00:40:54
# Fork: 2 of 2
# Warmup Iteration   1: 3195.969 ns/op
# Warmup Iteration   2: 2317.758 ns/op
# Warmup Iteration   3: 1619.691 ns/op
Iteration   1: 1619.347 ns/op
Iteration   2: 1625.090 ns/op
Iteration   3: 1621.432 ns/op
Iteration   4: 1625.849 ns/op
Iteration   5: 1621.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1620.362 ±(99.9%) 6.557 ns/op [Average]
  (min, avg, max) = (1610.840, 1620.362, 1625.849), stdev = 4.337
  CI (99.9%): [1613.805, 1626.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 30.42% complete, ETA 00:40:52
# Fork: 1 of 2
# Warmup Iteration   1: 19.165 ns/op
# Warmup Iteration   2: 25.478 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.732 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.885 ns/op
Iteration   5: 13.891 ns/op

# Run progress: 30.45% complete, ETA 00:40:51
# Fork: 2 of 2
# Warmup Iteration   1: 19.870 ns/op
# Warmup Iteration   2: 23.347 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.726 ns/op
Iteration   4: 13.896 ns/op
Iteration   5: 13.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.786 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (13.711, 13.786, 13.896), stdev = 0.088
  CI (99.9%): [13.653, 13.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 30.49% complete, ETA 00:40:50
# Fork: 1 of 2
# Warmup Iteration   1: 263.059 ns/op
# Warmup Iteration   2: 215.208 ns/op
# Warmup Iteration   3: 150.894 ns/op
Iteration   1: 151.970 ns/op
Iteration   2: 159.607 ns/op
Iteration   3: 160.529 ns/op
Iteration   4: 150.607 ns/op
Iteration   5: 150.265 ns/op

# Run progress: 30.52% complete, ETA 00:40:49
# Fork: 2 of 2
# Warmup Iteration   1: 264.889 ns/op
# Warmup Iteration   2: 201.844 ns/op
# Warmup Iteration   3: 157.607 ns/op
Iteration   1: 151.437 ns/op
Iteration   2: 154.566 ns/op
Iteration   3: 156.214 ns/op
Iteration   4: 153.865 ns/op
Iteration   5: 152.435 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  154.149 ±(99.9%) 5.467 ns/op [Average]
  (min, avg, max) = (150.265, 154.149, 160.529), stdev = 3.616
  CI (99.9%): [148.682, 159.616] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 30.56% complete, ETA 00:40:48
# Fork: 1 of 2
# Warmup Iteration   1: 300.360 ns/op
# Warmup Iteration   2: 282.182 ns/op
# Warmup Iteration   3: 207.941 ns/op
Iteration   1: 208.002 ns/op
Iteration   2: 207.936 ns/op
Iteration   3: 208.004 ns/op
Iteration   4: 208.094 ns/op
Iteration   5: 208.031 ns/op

# Run progress: 30.59% complete, ETA 00:40:46
# Fork: 2 of 2
# Warmup Iteration   1: 304.660 ns/op
# Warmup Iteration   2: 327.030 ns/op
# Warmup Iteration   3: 207.989 ns/op
Iteration   1: 208.061 ns/op
Iteration   2: 207.982 ns/op
Iteration   3: 208.020 ns/op
Iteration   4: 208.256 ns/op
Iteration   5: 208.119 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  208.050 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (207.936, 208.050, 208.256), stdev = 0.090
  CI (99.9%): [207.915, 208.186] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 30.63% complete, ETA 00:40:45
# Fork: 1 of 2
# Warmup Iteration   1: 603.911 ns/op
# Warmup Iteration   2: 299.448 ns/op
# Warmup Iteration   3: 223.976 ns/op
Iteration   1: 224.117 ns/op
Iteration   2: 224.076 ns/op
Iteration   3: 224.063 ns/op
Iteration   4: 223.741 ns/op
Iteration   5: 223.798 ns/op

# Run progress: 30.66% complete, ETA 00:40:44
# Fork: 2 of 2
# Warmup Iteration   1: 645.223 ns/op
# Warmup Iteration   2: 296.357 ns/op
# Warmup Iteration   3: 224.034 ns/op
Iteration   1: 224.137 ns/op
Iteration   2: 224.039 ns/op
Iteration   3: 224.180 ns/op
Iteration   4: 223.848 ns/op
Iteration   5: 223.810 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  223.981 ±(99.9%) 0.247 ns/op [Average]
  (min, avg, max) = (223.741, 223.981, 224.180), stdev = 0.163
  CI (99.9%): [223.734, 224.228] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 30.69% complete, ETA 00:40:43
# Fork: 1 of 2
# Warmup Iteration   1: 253.667 ns/op
# Warmup Iteration   2: 218.305 ns/op
# Warmup Iteration   3: 160.938 ns/op
Iteration   1: 160.778 ns/op
Iteration   2: 160.910 ns/op
Iteration   3: 160.930 ns/op
Iteration   4: 160.952 ns/op
Iteration   5: 160.924 ns/op

# Run progress: 30.73% complete, ETA 00:40:41
# Fork: 2 of 2
# Warmup Iteration   1: 243.164 ns/op
# Warmup Iteration   2: 218.989 ns/op
# Warmup Iteration   3: 160.789 ns/op
Iteration   1: 160.896 ns/op
Iteration   2: 160.913 ns/op
Iteration   3: 160.777 ns/op
Iteration   4: 160.913 ns/op
Iteration   5: 160.843 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  160.883 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (160.777, 160.883, 160.952), stdev = 0.063
  CI (99.9%): [160.789, 160.978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 30.76% complete, ETA 00:40:40
# Fork: 1 of 2
# Warmup Iteration   1: 216.598 ns/op
# Warmup Iteration   2: 205.456 ns/op
# Warmup Iteration   3: 114.677 ns/op
Iteration   1: 115.055 ns/op
Iteration   2: 114.986 ns/op
Iteration   3: 115.054 ns/op
Iteration   4: 114.990 ns/op
Iteration   5: 114.986 ns/op

# Run progress: 30.80% complete, ETA 00:40:39
# Fork: 2 of 2
# Warmup Iteration   1: 222.514 ns/op
# Warmup Iteration   2: 212.564 ns/op
# Warmup Iteration   3: 115.075 ns/op
Iteration   1: 115.045 ns/op
Iteration   2: 115.406 ns/op
Iteration   3: 115.083 ns/op
Iteration   4: 115.453 ns/op
Iteration   5: 115.545 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.160 ±(99.9%) 0.329 ns/op [Average]
  (min, avg, max) = (114.986, 115.160, 115.545), stdev = 0.217
  CI (99.9%): [114.832, 115.489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 30.83% complete, ETA 00:40:38
# Fork: 1 of 2
# Warmup Iteration   1: 19.798 ns/op
# Warmup Iteration   2: 21.957 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.878 ns/op

# Run progress: 30.87% complete, ETA 00:40:36
# Fork: 2 of 2
# Warmup Iteration   1: 19.453 ns/op
# Warmup Iteration   2: 21.315 ns/op
# Warmup Iteration   3: 14.103 ns/op
Iteration   1: 14.104 ns/op
Iteration   2: 14.100 ns/op
Iteration   3: 14.099 ns/op
Iteration   4: 13.873 ns/op
Iteration   5: 13.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.896 ±(99.9%) 0.240 ns/op [Average]
  (min, avg, max) = (13.712, 13.896, 14.104), stdev = 0.158
  CI (99.9%): [13.657, 14.136] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 30.90% complete, ETA 00:40:35
# Fork: 1 of 2
# Warmup Iteration   1: 867.387 ns/op
# Warmup Iteration   2: 344.521 ns/op
# Warmup Iteration   3: 236.355 ns/op
Iteration   1: 236.276 ns/op
Iteration   2: 236.186 ns/op
Iteration   3: 236.287 ns/op
Iteration   4: 236.075 ns/op
Iteration   5: 235.947 ns/op

# Run progress: 30.94% complete, ETA 00:40:34
# Fork: 2 of 2
# Warmup Iteration   1: 720.230 ns/op
# Warmup Iteration   2: 312.310 ns/op
# Warmup Iteration   3: 230.139 ns/op
Iteration   1: 230.252 ns/op
Iteration   2: 230.426 ns/op
Iteration   3: 230.346 ns/op
Iteration   4: 229.541 ns/op
Iteration   5: 229.761 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.110 ±(99.9%) 4.870 ns/op [Average]
  (min, avg, max) = (229.541, 233.110, 236.287), stdev = 3.221
  CI (99.9%): [228.240, 237.980] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 30.97% complete, ETA 00:40:33
# Fork: 1 of 2
# Warmup Iteration   1: 514.235 ns/op
# Warmup Iteration   2: 386.454 ns/op
# Warmup Iteration   3: 285.800 ns/op
Iteration   1: 285.941 ns/op
Iteration   2: 285.954 ns/op
Iteration   3: 286.016 ns/op
Iteration   4: 286.180 ns/op
Iteration   5: 286.906 ns/op

# Run progress: 31.01% complete, ETA 00:40:32
# Fork: 2 of 2
# Warmup Iteration   1: 406.096 ns/op
# Warmup Iteration   2: 395.887 ns/op
# Warmup Iteration   3: 284.433 ns/op
Iteration   1: 284.563 ns/op
Iteration   2: 284.486 ns/op
Iteration   3: 284.483 ns/op
Iteration   4: 284.603 ns/op
Iteration   5: 284.627 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  285.376 ±(99.9%) 1.376 ns/op [Average]
  (min, avg, max) = (284.483, 285.376, 286.906), stdev = 0.910
  CI (99.9%): [284.000, 286.752] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 31.04% complete, ETA 00:40:30
# Fork: 1 of 2
# Warmup Iteration   1: 16995.272 ns/op
# Warmup Iteration   2: 506.156 ns/op
# Warmup Iteration   3: 330.938 ns/op
Iteration   1: 285.528 ns/op
Iteration   2: 284.558 ns/op
Iteration   3: 286.217 ns/op
Iteration   4: 287.367 ns/op
Iteration   5: 285.974 ns/op

# Run progress: 31.08% complete, ETA 00:40:29
# Fork: 2 of 2
# Warmup Iteration   1: 17831.475 ns/op
# Warmup Iteration   2: 464.288 ns/op
# Warmup Iteration   3: 323.916 ns/op
Iteration   1: 298.010 ns/op
Iteration   2: 299.404 ns/op
Iteration   3: 296.306 ns/op
Iteration   4: 295.756 ns/op
Iteration   5: 298.967 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  291.809 ±(99.9%) 9.565 ns/op [Average]
  (min, avg, max) = (284.558, 291.809, 299.404), stdev = 6.327
  CI (99.9%): [282.244, 301.374] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 31.11% complete, ETA 00:40:28
# Fork: 1 of 2
# Warmup Iteration   1: 392.881 ns/op
# Warmup Iteration   2: 344.608 ns/op
# Warmup Iteration   3: 226.282 ns/op
Iteration   1: 225.788 ns/op
Iteration   2: 226.316 ns/op
Iteration   3: 226.517 ns/op
Iteration   4: 224.701 ns/op
Iteration   5: 225.202 ns/op

# Run progress: 31.15% complete, ETA 00:40:27
# Fork: 2 of 2
# Warmup Iteration   1: 352.182 ns/op
# Warmup Iteration   2: 300.431 ns/op
# Warmup Iteration   3: 225.756 ns/op
Iteration   1: 226.027 ns/op
Iteration   2: 226.130 ns/op
Iteration   3: 225.870 ns/op
Iteration   4: 225.375 ns/op
Iteration   5: 225.391 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  225.732 ±(99.9%) 0.845 ns/op [Average]
  (min, avg, max) = (224.701, 225.732, 226.517), stdev = 0.559
  CI (99.9%): [224.887, 226.577] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 31.18% complete, ETA 00:40:25
# Fork: 1 of 2
# Warmup Iteration   1: 2560.782 ns/op
# Warmup Iteration   2: 643.105 ns/op
# Warmup Iteration   3: 407.827 ns/op
Iteration   1: 407.331 ns/op
Iteration   2: 407.627 ns/op
Iteration   3: 407.529 ns/op
Iteration   4: 410.904 ns/op
Iteration   5: 410.565 ns/op

# Run progress: 31.22% complete, ETA 00:40:24
# Fork: 2 of 2
# Warmup Iteration   1: 1002.906 ns/op
# Warmup Iteration   2: 607.685 ns/op
# Warmup Iteration   3: 404.117 ns/op
Iteration   1: 407.629 ns/op
Iteration   2: 407.275 ns/op
Iteration   3: 406.097 ns/op
Iteration   4: 410.761 ns/op
Iteration   5: 407.161 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.288 ±(99.9%) 2.648 ns/op [Average]
  (min, avg, max) = (406.097, 408.288, 410.904), stdev = 1.751
  CI (99.9%): [405.640, 410.935] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 31.25% complete, ETA 00:40:23
# Fork: 1 of 2
# Warmup Iteration   1: 19.997 ns/op
# Warmup Iteration   2: 24.625 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.708 ns/op
Iteration   2: 13.728 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.873 ns/op
Iteration   5: 13.888 ns/op

# Run progress: 31.28% complete, ETA 00:40:22
# Fork: 2 of 2
# Warmup Iteration   1: 19.792 ns/op
# Warmup Iteration   2: 20.846 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.732 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 14.619 ns/op
Iteration   5: 14.619 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.931 ±(99.9%) 0.558 ns/op [Average]
  (min, avg, max) = (13.708, 13.931, 14.619), stdev = 0.369
  CI (99.9%): [13.373, 14.489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 31.32% complete, ETA 00:40:20
# Fork: 1 of 2
# Warmup Iteration   1: 714.731 ns/op
# Warmup Iteration   2: 447.227 ns/op
# Warmup Iteration   3: 304.941 ns/op
Iteration   1: 304.502 ns/op
Iteration   2: 305.097 ns/op
Iteration   3: 304.708 ns/op
Iteration   4: 304.787 ns/op
Iteration   5: 304.831 ns/op

# Run progress: 31.35% complete, ETA 00:40:19
# Fork: 2 of 2
# Warmup Iteration   1: 757.739 ns/op
# Warmup Iteration   2: 452.268 ns/op
# Warmup Iteration   3: 303.854 ns/op
Iteration   1: 303.434 ns/op
Iteration   2: 303.321 ns/op
Iteration   3: 304.007 ns/op
Iteration   4: 303.369 ns/op
Iteration   5: 304.290 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  304.235 ±(99.9%) 1.005 ns/op [Average]
  (min, avg, max) = (303.321, 304.235, 305.097), stdev = 0.665
  CI (99.9%): [303.229, 305.240] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 31.39% complete, ETA 00:40:18
# Fork: 1 of 2
# Warmup Iteration   1: 521.586 ns/op
# Warmup Iteration   2: 483.079 ns/op
# Warmup Iteration   3: 357.118 ns/op
Iteration   1: 357.187 ns/op
Iteration   2: 357.249 ns/op
Iteration   3: 357.294 ns/op
Iteration   4: 357.293 ns/op
Iteration   5: 357.072 ns/op

# Run progress: 31.42% complete, ETA 00:40:17
# Fork: 2 of 2
# Warmup Iteration   1: 555.636 ns/op
# Warmup Iteration   2: 485.770 ns/op
# Warmup Iteration   3: 362.663 ns/op
Iteration   1: 362.859 ns/op
Iteration   2: 362.758 ns/op
Iteration   3: 362.687 ns/op
Iteration   4: 362.655 ns/op
Iteration   5: 362.855 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  359.991 ±(99.9%) 4.419 ns/op [Average]
  (min, avg, max) = (357.072, 359.991, 362.859), stdev = 2.923
  CI (99.9%): [355.571, 364.410] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 31.46% complete, ETA 00:40:15
# Fork: 1 of 2
# Warmup Iteration   1: 7895.413 ns/op
# Warmup Iteration   2: 547.131 ns/op
# Warmup Iteration   3: 308.457 ns/op
Iteration   1: 308.434 ns/op
Iteration   2: 308.701 ns/op
Iteration   3: 308.683 ns/op
Iteration   4: 308.691 ns/op
Iteration   5: 308.704 ns/op

# Run progress: 31.49% complete, ETA 00:40:14
# Fork: 2 of 2
# Warmup Iteration   1: 7593.329 ns/op
# Warmup Iteration   2: 488.605 ns/op
# Warmup Iteration   3: 308.451 ns/op
Iteration   1: 308.529 ns/op
Iteration   2: 308.609 ns/op
Iteration   3: 308.457 ns/op
Iteration   4: 308.456 ns/op
Iteration   5: 308.358 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  308.562 ±(99.9%) 0.198 ns/op [Average]
  (min, avg, max) = (308.358, 308.562, 308.704), stdev = 0.131
  CI (99.9%): [308.364, 308.760] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 31.53% complete, ETA 00:40:13
# Fork: 1 of 2
# Warmup Iteration   1: 689.836 ns/op
# Warmup Iteration   2: 441.321 ns/op
# Warmup Iteration   3: 294.640 ns/op
Iteration   1: 294.583 ns/op
Iteration   2: 294.539 ns/op
Iteration   3: 294.534 ns/op
Iteration   4: 294.590 ns/op
Iteration   5: 294.422 ns/op

# Run progress: 31.56% complete, ETA 00:40:12
# Fork: 2 of 2
# Warmup Iteration   1: 491.338 ns/op
# Warmup Iteration   2: 413.465 ns/op
# Warmup Iteration   3: 304.592 ns/op
Iteration   1: 304.188 ns/op
Iteration   2: 303.947 ns/op
Iteration   3: 303.381 ns/op
Iteration   4: 302.996 ns/op
Iteration   5: 303.055 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  299.023 ±(99.9%) 7.176 ns/op [Average]
  (min, avg, max) = (294.422, 299.023, 304.188), stdev = 4.746
  CI (99.9%): [291.848, 306.199] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 31.60% complete, ETA 00:40:10
# Fork: 1 of 2
# Warmup Iteration   1: 2949.846 ns/op
# Warmup Iteration   2: 2253.811 ns/op
# Warmup Iteration   3: 1501.784 ns/op
Iteration   1: 1503.022 ns/op
Iteration   2: 1502.524 ns/op
Iteration   3: 1500.981 ns/op
Iteration   4: 1502.686 ns/op
Iteration   5: 1504.074 ns/op

# Run progress: 31.63% complete, ETA 00:40:09
# Fork: 2 of 2
# Warmup Iteration   1: 4375.310 ns/op
# Warmup Iteration   2: 2220.051 ns/op
# Warmup Iteration   3: 1533.273 ns/op
Iteration   1: 1532.708 ns/op
Iteration   2: 1532.914 ns/op
Iteration   3: 1533.145 ns/op
Iteration   4: 1533.412 ns/op
Iteration   5: 1533.169 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1517.864 ±(99.9%) 24.260 ns/op [Average]
  (min, avg, max) = (1500.981, 1517.864, 1533.412), stdev = 16.047
  CI (99.9%): [1493.603, 1542.124] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 31.67% complete, ETA 00:40:08
# Fork: 1 of 2
# Warmup Iteration   1: 20.043 ns/op
# Warmup Iteration   2: 20.548 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.870 ns/op

# Run progress: 31.70% complete, ETA 00:40:07
# Fork: 2 of 2
# Warmup Iteration   1: 19.829 ns/op
# Warmup Iteration   2: 23.936 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.734 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.869 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.780 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (13.711, 13.780, 13.879), stdev = 0.081
  CI (99.9%): [13.658, 13.902] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 31.74% complete, ETA 00:40:06
# Fork: 1 of 2
# Warmup Iteration   1: 990.099 ns/op
# Warmup Iteration   2: 426.887 ns/op
# Warmup Iteration   3: 296.084 ns/op
Iteration   1: 296.130 ns/op
Iteration   2: 296.035 ns/op
Iteration   3: 296.197 ns/op
Iteration   4: 296.024 ns/op
Iteration   5: 296.150 ns/op

# Run progress: 31.77% complete, ETA 00:40:04
# Fork: 2 of 2
# Warmup Iteration   1: 979.618 ns/op
# Warmup Iteration   2: 392.929 ns/op
# Warmup Iteration   3: 294.790 ns/op
Iteration   1: 295.081 ns/op
Iteration   2: 295.023 ns/op
Iteration   3: 295.091 ns/op
Iteration   4: 295.123 ns/op
Iteration   5: 295.491 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  295.634 ±(99.9%) 0.780 ns/op [Average]
  (min, avg, max) = (295.023, 295.634, 296.197), stdev = 0.516
  CI (99.9%): [294.854, 296.415] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 31.81% complete, ETA 00:40:03
# Fork: 1 of 2
# Warmup Iteration   1: 501.359 ns/op
# Warmup Iteration   2: 463.456 ns/op
# Warmup Iteration   3: 346.348 ns/op
Iteration   1: 346.522 ns/op
Iteration   2: 346.508 ns/op
Iteration   3: 346.456 ns/op
Iteration   4: 346.531 ns/op
Iteration   5: 346.291 ns/op

# Run progress: 31.84% complete, ETA 00:40:02
# Fork: 2 of 2
# Warmup Iteration   1: 540.741 ns/op
# Warmup Iteration   2: 492.840 ns/op
# Warmup Iteration   3: 346.324 ns/op
Iteration   1: 346.414 ns/op
Iteration   2: 346.505 ns/op
Iteration   3: 346.459 ns/op
Iteration   4: 346.221 ns/op
Iteration   5: 346.312 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  346.422 ±(99.9%) 0.166 ns/op [Average]
  (min, avg, max) = (346.221, 346.422, 346.531), stdev = 0.110
  CI (99.9%): [346.256, 346.588] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 31.87% complete, ETA 00:40:01
# Fork: 1 of 2
# Warmup Iteration   1: 3799.077 ns/op
# Warmup Iteration   2: 508.963 ns/op
# Warmup Iteration   3: 335.718 ns/op
Iteration   1: 335.800 ns/op
Iteration   2: 335.866 ns/op
Iteration   3: 335.972 ns/op
Iteration   4: 336.024 ns/op
Iteration   5: 335.931 ns/op

# Run progress: 31.91% complete, ETA 00:39:59
# Fork: 2 of 2
# Warmup Iteration   1: 7728.406 ns/op
# Warmup Iteration   2: 536.096 ns/op
# Warmup Iteration   3: 335.426 ns/op
Iteration   1: 335.409 ns/op
Iteration   2: 335.271 ns/op
Iteration   3: 335.319 ns/op
Iteration   4: 335.417 ns/op
Iteration   5: 335.591 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.660 ±(99.9%) 0.439 ns/op [Average]
  (min, avg, max) = (335.271, 335.660, 336.024), stdev = 0.290
  CI (99.9%): [335.221, 336.099] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 31.94% complete, ETA 00:39:58
# Fork: 1 of 2
# Warmup Iteration   1: 382.778 ns/op
# Warmup Iteration   2: 349.249 ns/op
# Warmup Iteration   3: 240.608 ns/op
Iteration   1: 240.608 ns/op
Iteration   2: 240.916 ns/op
Iteration   3: 240.694 ns/op
Iteration   4: 240.844 ns/op
Iteration   5: 240.974 ns/op

# Run progress: 31.98% complete, ETA 00:39:57
# Fork: 2 of 2
# Warmup Iteration   1: 446.994 ns/op
# Warmup Iteration   2: 354.312 ns/op
# Warmup Iteration   3: 239.630 ns/op
Iteration   1: 239.631 ns/op
Iteration   2: 239.624 ns/op
Iteration   3: 239.721 ns/op
Iteration   4: 239.572 ns/op
Iteration   5: 239.478 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  240.206 ±(99.9%) 0.974 ns/op [Average]
  (min, avg, max) = (239.478, 240.206, 240.974), stdev = 0.644
  CI (99.9%): [239.232, 241.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 32.01% complete, ETA 00:39:56
# Fork: 1 of 2
# Warmup Iteration   1: 1259.092 ns/op
# Warmup Iteration   2: 703.738 ns/op
# Warmup Iteration   3: 459.951 ns/op
Iteration   1: 460.312 ns/op
Iteration   2: 458.758 ns/op
Iteration   3: 459.981 ns/op
Iteration   4: 461.238 ns/op
Iteration   5: 462.268 ns/op

# Run progress: 32.05% complete, ETA 00:39:54
# Fork: 2 of 2
# Warmup Iteration   1: 1082.799 ns/op
# Warmup Iteration   2: 705.609 ns/op
# Warmup Iteration   3: 459.612 ns/op
Iteration   1: 459.467 ns/op
Iteration   2: 458.795 ns/op
Iteration   3: 459.134 ns/op
Iteration   4: 463.813 ns/op
Iteration   5: 463.572 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  460.734 ±(99.9%) 2.882 ns/op [Average]
  (min, avg, max) = (458.758, 460.734, 463.813), stdev = 1.907
  CI (99.9%): [457.851, 463.616] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 32.08% complete, ETA 00:39:53
# Fork: 1 of 2
# Warmup Iteration   1: 20.307 ns/op
# Warmup Iteration   2: 21.232 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.887 ns/op

# Run progress: 32.12% complete, ETA 00:39:52
# Fork: 2 of 2
# Warmup Iteration   1: 19.659 ns/op
# Warmup Iteration   2: 21.405 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.711, 13.781, 13.887), stdev = 0.086
  CI (99.9%): [13.651, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 32.15% complete, ETA 00:39:51
# Fork: 1 of 2
# Warmup Iteration   1: 4432.023 ns/op
# Warmup Iteration   2: 521.026 ns/op
# Warmup Iteration   3: 335.778 ns/op
Iteration   1: 335.698 ns/op
Iteration   2: 339.592 ns/op
Iteration   3: 336.081 ns/op
Iteration   4: 335.935 ns/op
Iteration   5: 336.136 ns/op

# Run progress: 32.19% complete, ETA 00:39:50
# Fork: 2 of 2
# Warmup Iteration   1: 7640.344 ns/op
# Warmup Iteration   2: 497.037 ns/op
# Warmup Iteration   3: 339.543 ns/op
Iteration   1: 337.809 ns/op
Iteration   2: 336.134 ns/op
Iteration   3: 333.555 ns/op
Iteration   4: 333.541 ns/op
Iteration   5: 336.607 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.109 ±(99.9%) 2.694 ns/op [Average]
  (min, avg, max) = (333.541, 336.109, 339.592), stdev = 1.782
  CI (99.9%): [333.415, 338.803] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 32.22% complete, ETA 00:39:48
# Fork: 1 of 2
# Warmup Iteration   1: 699.296 ns/op
# Warmup Iteration   2: 572.368 ns/op
# Warmup Iteration   3: 431.058 ns/op
Iteration   1: 429.497 ns/op
Iteration   2: 432.035 ns/op
Iteration   3: 429.007 ns/op
Iteration   4: 433.825 ns/op
Iteration   5: 430.682 ns/op

# Run progress: 32.26% complete, ETA 00:39:47
# Fork: 2 of 2
# Warmup Iteration   1: 696.902 ns/op
# Warmup Iteration   2: 602.522 ns/op
# Warmup Iteration   3: 435.554 ns/op
Iteration   1: 434.018 ns/op
Iteration   2: 434.807 ns/op
Iteration   3: 437.695 ns/op
Iteration   4: 435.210 ns/op
Iteration   5: 436.770 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  433.355 ±(99.9%) 4.490 ns/op [Average]
  (min, avg, max) = (429.007, 433.355, 437.695), stdev = 2.970
  CI (99.9%): [428.864, 437.845] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 32.29% complete, ETA 00:39:46
# Fork: 1 of 2
# Warmup Iteration   1: 12312.473 ns/op
# Warmup Iteration   2: 585.335 ns/op
# Warmup Iteration   3: 465.571 ns/op
Iteration   1: 422.612 ns/op
Iteration   2: 424.040 ns/op
Iteration   3: 423.648 ns/op
Iteration   4: 422.820 ns/op
Iteration   5: 421.187 ns/op

# Run progress: 32.33% complete, ETA 00:39:45
# Fork: 2 of 2
# Warmup Iteration   1: 16048.847 ns/op
# Warmup Iteration   2: 669.877 ns/op
# Warmup Iteration   3: 465.192 ns/op
Iteration   1: 422.264 ns/op
Iteration   2: 423.560 ns/op
Iteration   3: 421.601 ns/op
Iteration   4: 423.808 ns/op
Iteration   5: 423.274 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  422.881 ±(99.9%) 1.458 ns/op [Average]
  (min, avg, max) = (421.187, 422.881, 424.040), stdev = 0.965
  CI (99.9%): [421.423, 424.340] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 32.36% complete, ETA 00:39:43
# Fork: 1 of 2
# Warmup Iteration   1: 542.072 ns/op
# Warmup Iteration   2: 462.903 ns/op
# Warmup Iteration   3: 341.846 ns/op
Iteration   1: 341.105 ns/op
Iteration   2: 341.208 ns/op
Iteration   3: 342.048 ns/op
Iteration   4: 340.839 ns/op
Iteration   5: 341.984 ns/op

# Run progress: 32.40% complete, ETA 00:39:42
# Fork: 2 of 2
# Warmup Iteration   1: 537.119 ns/op
# Warmup Iteration   2: 451.695 ns/op
# Warmup Iteration   3: 340.566 ns/op
Iteration   1: 342.577 ns/op
Iteration   2: 338.424 ns/op
Iteration   3: 339.577 ns/op
Iteration   4: 341.422 ns/op
Iteration   5: 339.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  340.834 ±(99.9%) 2.054 ns/op [Average]
  (min, avg, max) = (338.424, 340.834, 342.577), stdev = 1.359
  CI (99.9%): [338.780, 342.888] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 32.43% complete, ETA 00:39:41
# Fork: 1 of 2
# Warmup Iteration   1: 3410.373 ns/op
# Warmup Iteration   2: 2347.180 ns/op
# Warmup Iteration   3: 1630.786 ns/op
Iteration   1: 1626.828 ns/op
Iteration   2: 1634.336 ns/op
Iteration   3: 1632.010 ns/op
Iteration   4: 1629.682 ns/op
Iteration   5: 1643.338 ns/op

# Run progress: 32.47% complete, ETA 00:39:40
# Fork: 2 of 2
# Warmup Iteration   1: 3297.389 ns/op
# Warmup Iteration   2: 2458.788 ns/op
# Warmup Iteration   3: 1650.265 ns/op
Iteration   1: 1652.464 ns/op
Iteration   2: 1648.787 ns/op
Iteration   3: 1654.079 ns/op
Iteration   4: 1654.362 ns/op
Iteration   5: 1658.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1643.423 ±(99.9%) 17.771 ns/op [Average]
  (min, avg, max) = (1626.828, 1643.423, 1658.348), stdev = 11.755
  CI (99.9%): [1625.652, 1661.195] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 32.50% complete, ETA 00:39:38
# Fork: 1 of 2
# Warmup Iteration   1: 18.560 ns/op
# Warmup Iteration   2: 24.453 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.874 ns/op
Iteration   5: 13.881 ns/op

# Run progress: 32.53% complete, ETA 00:39:37
# Fork: 2 of 2
# Warmup Iteration   1: 20.481 ns/op
# Warmup Iteration   2: 24.712 ns/op
# Warmup Iteration   3: 13.703 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.709 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 14.611 ns/op
Iteration   5: 14.616 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.928 ±(99.9%) 0.555 ns/op [Average]
  (min, avg, max) = (13.709, 13.928, 14.616), stdev = 0.367
  CI (99.9%): [13.373, 14.483] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 32.57% complete, ETA 00:39:36
# Fork: 1 of 2
# Warmup Iteration   1: 114.267 ns/op
# Warmup Iteration   2: 116.790 ns/op
# Warmup Iteration   3: 71.057 ns/op
Iteration   1: 71.263 ns/op
Iteration   2: 71.133 ns/op
Iteration   3: 71.117 ns/op
Iteration   4: 70.788 ns/op
Iteration   5: 70.657 ns/op

# Run progress: 32.60% complete, ETA 00:39:35
# Fork: 2 of 2
# Warmup Iteration   1: 115.523 ns/op
# Warmup Iteration   2: 98.716 ns/op
# Warmup Iteration   3: 69.064 ns/op
Iteration   1: 68.987 ns/op
Iteration   2: 68.904 ns/op
Iteration   3: 69.050 ns/op
Iteration   4: 68.775 ns/op
Iteration   5: 68.783 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  69.946 ±(99.9%) 1.691 ns/op [Average]
  (min, avg, max) = (68.775, 69.946, 71.263), stdev = 1.119
  CI (99.9%): [68.255, 71.637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 32.64% complete, ETA 00:39:34
# Fork: 1 of 2
# Warmup Iteration   1: 66.049 ns/op
# Warmup Iteration   2: 71.841 ns/op
# Warmup Iteration   3: 45.211 ns/op
Iteration   1: 45.180 ns/op
Iteration   2: 45.254 ns/op
Iteration   3: 45.264 ns/op
Iteration   4: 45.300 ns/op
Iteration   5: 45.331 ns/op

# Run progress: 32.67% complete, ETA 00:39:32
# Fork: 2 of 2
# Warmup Iteration   1: 70.968 ns/op
# Warmup Iteration   2: 64.895 ns/op
# Warmup Iteration   3: 45.231 ns/op
Iteration   1: 45.275 ns/op
Iteration   2: 45.269 ns/op
Iteration   3: 45.238 ns/op
Iteration   4: 45.289 ns/op
Iteration   5: 45.253 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.265 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (45.180, 45.265, 45.331), stdev = 0.040
  CI (99.9%): [45.205, 45.326] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 32.71% complete, ETA 00:39:31
# Fork: 1 of 2
# Warmup Iteration   1: 718.955 ns/op
# Warmup Iteration   2: 103.733 ns/op
# Warmup Iteration   3: 75.575 ns/op
Iteration   1: 75.601 ns/op
Iteration   2: 75.556 ns/op
Iteration   3: 75.611 ns/op
Iteration   4: 75.720 ns/op
Iteration   5: 75.739 ns/op

# Run progress: 32.74% complete, ETA 00:39:30
# Fork: 2 of 2
# Warmup Iteration   1: 2231.757 ns/op
# Warmup Iteration   2: 123.196 ns/op
# Warmup Iteration   3: 76.285 ns/op
Iteration   1: 76.300 ns/op
Iteration   2: 76.320 ns/op
Iteration   3: 76.339 ns/op
Iteration   4: 76.533 ns/op
Iteration   5: 76.314 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  76.003 ±(99.9%) 0.584 ns/op [Average]
  (min, avg, max) = (75.556, 76.003, 76.533), stdev = 0.387
  CI (99.9%): [75.419, 76.588] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 32.78% complete, ETA 00:39:29
# Fork: 1 of 2
# Warmup Iteration   1: 68.471 ns/op
# Warmup Iteration   2: 72.199 ns/op
# Warmup Iteration   3: 47.577 ns/op
Iteration   1: 47.550 ns/op
Iteration   2: 47.461 ns/op
Iteration   3: 47.591 ns/op
Iteration   4: 47.584 ns/op
Iteration   5: 47.583 ns/op

# Run progress: 32.81% complete, ETA 00:39:27
# Fork: 2 of 2
# Warmup Iteration   1: 69.454 ns/op
# Warmup Iteration   2: 71.263 ns/op
# Warmup Iteration   3: 47.536 ns/op
Iteration   1: 47.466 ns/op
Iteration   2: 47.574 ns/op
Iteration   3: 47.506 ns/op
Iteration   4: 48.150 ns/op
Iteration   5: 48.108 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.657 ±(99.9%) 0.383 ns/op [Average]
  (min, avg, max) = (47.461, 47.657, 48.150), stdev = 0.253
  CI (99.9%): [47.275, 48.040] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 32.85% complete, ETA 00:39:26
# Fork: 1 of 2
# Warmup Iteration   1: 175.588 ns/op
# Warmup Iteration   2: 185.397 ns/op
# Warmup Iteration   3: 98.563 ns/op
Iteration   1: 98.572 ns/op
Iteration   2: 98.591 ns/op
Iteration   3: 98.575 ns/op
Iteration   4: 105.147 ns/op
Iteration   5: 105.189 ns/op

# Run progress: 32.88% complete, ETA 00:39:25
# Fork: 2 of 2
# Warmup Iteration   1: 178.401 ns/op
# Warmup Iteration   2: 175.385 ns/op
# Warmup Iteration   3: 98.555 ns/op
Iteration   1: 98.579 ns/op
Iteration   2: 98.556 ns/op
Iteration   3: 98.591 ns/op
Iteration   4: 105.263 ns/op
Iteration   5: 105.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.220 ±(99.9%) 5.158 ns/op [Average]
  (min, avg, max) = (98.556, 101.220, 105.263), stdev = 3.412
  CI (99.9%): [96.062, 106.378] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 32.92% complete, ETA 00:39:24
# Fork: 1 of 2
# Warmup Iteration   1: 18.591 ns/op
# Warmup Iteration   2: 22.632 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.724 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.874 ns/op

# Run progress: 32.95% complete, ETA 00:39:22
# Fork: 2 of 2
# Warmup Iteration   1: 20.094 ns/op
# Warmup Iteration   2: 24.575 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.720 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (13.711, 13.782, 13.880), stdev = 0.083
  CI (99.9%): [13.656, 13.907] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 32.99% complete, ETA 00:39:21
# Fork: 1 of 2
# Warmup Iteration   1: 885.726 ns/op
# Warmup Iteration   2: 355.980 ns/op
# Warmup Iteration   3: 242.910 ns/op
Iteration   1: 242.841 ns/op
Iteration   2: 242.991 ns/op
Iteration   3: 241.431 ns/op
Iteration   4: 240.742 ns/op
Iteration   5: 242.019 ns/op

# Run progress: 33.02% complete, ETA 00:39:20
# Fork: 2 of 2
# Warmup Iteration   1: 792.036 ns/op
# Warmup Iteration   2: 356.508 ns/op
# Warmup Iteration   3: 251.640 ns/op
Iteration   1: 251.967 ns/op
Iteration   2: 253.642 ns/op
Iteration   3: 253.051 ns/op
Iteration   4: 252.419 ns/op
Iteration   5: 251.322 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  247.243 ±(99.9%) 8.451 ns/op [Average]
  (min, avg, max) = (240.742, 247.243, 253.642), stdev = 5.590
  CI (99.9%): [238.792, 255.694] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 33.06% complete, ETA 00:39:19
# Fork: 1 of 2
# Warmup Iteration   1: 401.978 ns/op
# Warmup Iteration   2: 377.864 ns/op
# Warmup Iteration   3: 280.431 ns/op
Iteration   1: 280.596 ns/op
Iteration   2: 280.911 ns/op
Iteration   3: 280.437 ns/op
Iteration   4: 282.584 ns/op
Iteration   5: 283.652 ns/op

# Run progress: 33.09% complete, ETA 00:39:18
# Fork: 2 of 2
# Warmup Iteration   1: 408.739 ns/op
# Warmup Iteration   2: 384.041 ns/op
# Warmup Iteration   3: 283.143 ns/op
Iteration   1: 283.862 ns/op
Iteration   2: 282.890 ns/op
Iteration   3: 284.685 ns/op
Iteration   4: 284.197 ns/op
Iteration   5: 284.207 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  282.802 ±(99.9%) 2.438 ns/op [Average]
  (min, avg, max) = (280.437, 282.802, 284.685), stdev = 1.613
  CI (99.9%): [280.364, 285.240] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 33.13% complete, ETA 00:39:16
# Fork: 1 of 2
# Warmup Iteration   1: 10998.743 ns/op
# Warmup Iteration   2: 434.707 ns/op
# Warmup Iteration   3: 284.360 ns/op
Iteration   1: 283.992 ns/op
Iteration   2: 285.302 ns/op
Iteration   3: 284.152 ns/op
Iteration   4: 285.214 ns/op
Iteration   5: 284.211 ns/op

# Run progress: 33.16% complete, ETA 00:39:15
# Fork: 2 of 2
# Warmup Iteration   1: 7397.421 ns/op
# Warmup Iteration   2: 404.513 ns/op
# Warmup Iteration   3: 284.612 ns/op
Iteration   1: 285.151 ns/op
Iteration   2: 285.449 ns/op
Iteration   3: 285.528 ns/op
Iteration   4: 284.819 ns/op
Iteration   5: 285.633 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.945 ±(99.9%) 0.929 ns/op [Average]
  (min, avg, max) = (283.992, 284.945, 285.633), stdev = 0.615
  CI (99.9%): [284.016, 285.874] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 33.19% complete, ETA 00:39:14
# Fork: 1 of 2
# Warmup Iteration   1: 312.321 ns/op
# Warmup Iteration   2: 265.084 ns/op
# Warmup Iteration   3: 194.439 ns/op
Iteration   1: 194.342 ns/op
Iteration   2: 194.269 ns/op
Iteration   3: 194.322 ns/op
Iteration   4: 194.601 ns/op
Iteration   5: 194.318 ns/op

# Run progress: 33.23% complete, ETA 00:39:13
# Fork: 2 of 2
# Warmup Iteration   1: 314.750 ns/op
# Warmup Iteration   2: 264.916 ns/op
# Warmup Iteration   3: 193.915 ns/op
Iteration   1: 194.017 ns/op
Iteration   2: 193.878 ns/op
Iteration   3: 193.994 ns/op
Iteration   4: 194.192 ns/op
Iteration   5: 194.258 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  194.219 ±(99.9%) 0.316 ns/op [Average]
  (min, avg, max) = (193.878, 194.219, 194.601), stdev = 0.209
  CI (99.9%): [193.903, 194.535] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 33.26% complete, ETA 00:39:11
# Fork: 1 of 2
# Warmup Iteration   1: 986.636 ns/op
# Warmup Iteration   2: 627.480 ns/op
# Warmup Iteration   3: 413.599 ns/op
Iteration   1: 413.544 ns/op
Iteration   2: 413.555 ns/op
Iteration   3: 416.107 ns/op
Iteration   4: 417.333 ns/op
Iteration   5: 418.023 ns/op

# Run progress: 33.30% complete, ETA 00:39:10
# Fork: 2 of 2
# Warmup Iteration   1: 1183.094 ns/op
# Warmup Iteration   2: 634.863 ns/op
# Warmup Iteration   3: 410.894 ns/op
Iteration   1: 412.068 ns/op
Iteration   2: 412.098 ns/op
Iteration   3: 413.935 ns/op
Iteration   4: 415.829 ns/op
Iteration   5: 416.269 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  414.876 ±(99.9%) 3.200 ns/op [Average]
  (min, avg, max) = (412.068, 414.876, 418.023), stdev = 2.116
  CI (99.9%): [411.676, 418.076] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 33.33% complete, ETA 00:39:09
# Fork: 1 of 2
# Warmup Iteration   1: 20.875 ns/op
# Warmup Iteration   2: 22.830 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.736 ns/op
Iteration   2: 21.184 ns/op
Iteration   3: 13.721 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.897 ns/op

# Run progress: 33.37% complete, ETA 00:39:08
# Fork: 2 of 2
# Warmup Iteration   1: 20.019 ns/op
# Warmup Iteration   2: 23.848 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 20.958 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.899 ns/op
Iteration   5: 13.899 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  15.263 ±(99.9%) 4.630 ns/op [Average]
  (min, avg, max) = (13.721, 15.263, 21.184), stdev = 3.063
  CI (99.9%): [10.632, 19.893] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 33.40% complete, ETA 00:39:07
# Fork: 1 of 2
# Warmup Iteration   1: 169.019 ns/op
# Warmup Iteration   2: 139.176 ns/op
# Warmup Iteration   3: 90.106 ns/op
Iteration   1: 90.131 ns/op
Iteration   2: 168.082 ns/op
Iteration   3: 90.162 ns/op
Iteration   4: 89.899 ns/op
Iteration   5: 89.902 ns/op

# Run progress: 33.44% complete, ETA 00:39:05
# Fork: 2 of 2
# Warmup Iteration   1: 168.497 ns/op
# Warmup Iteration   2: 141.238 ns/op
# Warmup Iteration   3: 89.991 ns/op
Iteration   1: 90.119 ns/op
Iteration   2: 154.320 ns/op
Iteration   3: 90.100 ns/op
Iteration   4: 89.844 ns/op
Iteration   5: 89.971 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  104.253 ±(99.9%) 45.642 ns/op [Average]
  (min, avg, max) = (89.844, 104.253, 168.082), stdev = 30.189
  CI (99.9%): [58.611, 149.895] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 33.47% complete, ETA 00:39:04
# Fork: 1 of 2
# Warmup Iteration   1: 71.429 ns/op
# Warmup Iteration   2: 68.257 ns/op
# Warmup Iteration   3: 45.104 ns/op
Iteration   1: 45.140 ns/op
Iteration   2: 80.877 ns/op
Iteration   3: 45.139 ns/op
Iteration   4: 45.429 ns/op
Iteration   5: 45.428 ns/op

# Run progress: 33.51% complete, ETA 00:39:03
# Fork: 2 of 2
# Warmup Iteration   1: 66.318 ns/op
# Warmup Iteration   2: 67.577 ns/op
# Warmup Iteration   3: 45.115 ns/op
Iteration   1: 45.132 ns/op
Iteration   2: 77.544 ns/op
Iteration   3: 45.067 ns/op
Iteration   4: 45.419 ns/op
Iteration   5: 45.434 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.061 ±(99.9%) 21.667 ns/op [Average]
  (min, avg, max) = (45.067, 52.061, 80.877), stdev = 14.331
  CI (99.9%): [30.394, 73.728] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 33.54% complete, ETA 00:39:02
# Fork: 1 of 2
# Warmup Iteration   1: 269.787 ns/op
# Warmup Iteration   2: 155.720 ns/op
# Warmup Iteration   3: 106.926 ns/op
Iteration   1: 106.950 ns/op
Iteration   2: 199.423 ns/op
Iteration   3: 106.931 ns/op
Iteration   4: 106.670 ns/op
Iteration   5: 106.629 ns/op

# Run progress: 33.58% complete, ETA 00:39:01
# Fork: 2 of 2
# Warmup Iteration   1: 255.799 ns/op
# Warmup Iteration   2: 147.100 ns/op
# Warmup Iteration   3: 104.906 ns/op
Iteration   1: 104.748 ns/op
Iteration   2: 195.458 ns/op
Iteration   3: 104.914 ns/op
Iteration   4: 104.740 ns/op
Iteration   5: 104.735 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  124.120 ±(99.9%) 58.459 ns/op [Average]
  (min, avg, max) = (104.735, 124.120, 199.423), stdev = 38.667
  CI (99.9%): [65.661, 182.578] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 33.61% complete, ETA 00:38:59
# Fork: 1 of 2
# Warmup Iteration   1: 68.085 ns/op
# Warmup Iteration   2: 76.542 ns/op
# Warmup Iteration   3: 47.492 ns/op
Iteration   1: 47.482 ns/op
Iteration   2: 88.606 ns/op
Iteration   3: 47.484 ns/op
Iteration   4: 47.374 ns/op
Iteration   5: 47.524 ns/op

# Run progress: 33.65% complete, ETA 00:38:58
# Fork: 2 of 2
# Warmup Iteration   1: 68.183 ns/op
# Warmup Iteration   2: 74.451 ns/op
# Warmup Iteration   3: 47.489 ns/op
Iteration   1: 47.510 ns/op
Iteration   2: 82.740 ns/op
Iteration   3: 47.517 ns/op
Iteration   4: 47.355 ns/op
Iteration   5: 47.496 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  55.109 ±(99.9%) 24.444 ns/op [Average]
  (min, avg, max) = (47.355, 55.109, 88.606), stdev = 16.168
  CI (99.9%): [30.665, 79.553] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 33.68% complete, ETA 00:38:57
# Fork: 1 of 2
# Warmup Iteration   1: 179.366 ns/op
# Warmup Iteration   2: 187.897 ns/op
# Warmup Iteration   3: 124.986 ns/op
Iteration   1: 124.963 ns/op
Iteration   2: 201.788 ns/op
Iteration   3: 125.016 ns/op
Iteration   4: 129.696 ns/op
Iteration   5: 129.598 ns/op

# Run progress: 33.72% complete, ETA 00:38:56
# Fork: 2 of 2
# Warmup Iteration   1: 177.462 ns/op
# Warmup Iteration   2: 193.361 ns/op
# Warmup Iteration   3: 124.991 ns/op
Iteration   1: 125.014 ns/op
Iteration   2: 189.335 ns/op
Iteration   3: 124.943 ns/op
Iteration   4: 129.612 ns/op
Iteration   5: 129.535 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.950 ±(99.9%) 43.865 ns/op [Average]
  (min, avg, max) = (124.943, 140.950, 201.788), stdev = 29.014
  CI (99.9%): [97.085, 184.815] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 33.75% complete, ETA 00:38:54
# Fork: 1 of 2
# Warmup Iteration   1: 18.453 ns/op
# Warmup Iteration   2: 21.442 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 20.971 ns/op
Iteration   3: 13.721 ns/op
Iteration   4: 13.892 ns/op
Iteration   5: 13.888 ns/op

# Run progress: 33.78% complete, ETA 00:38:53
# Fork: 2 of 2
# Warmup Iteration   1: 19.375 ns/op
# Warmup Iteration   2: 23.150 ns/op
# Warmup Iteration   3: 13.720 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 19.705 ns/op
Iteration   3: 13.730 ns/op
Iteration   4: 15.250 ns/op
Iteration   5: 15.256 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  15.384 ±(99.9%) 4.077 ns/op [Average]
  (min, avg, max) = (13.715, 15.384, 20.971), stdev = 2.697
  CI (99.9%): [11.307, 19.461] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 33.82% complete, ETA 00:38:52
# Fork: 1 of 2
# Warmup Iteration   1: 167.713 ns/op
# Warmup Iteration   2: 139.641 ns/op
# Warmup Iteration   3: 90.454 ns/op
Iteration   1: 90.464 ns/op
Iteration   2: 154.970 ns/op
Iteration   3: 90.572 ns/op
Iteration   4: 90.203 ns/op
Iteration   5: 90.066 ns/op

# Run progress: 33.85% complete, ETA 00:38:51
# Fork: 2 of 2
# Warmup Iteration   1: 168.087 ns/op
# Warmup Iteration   2: 137.078 ns/op
# Warmup Iteration   3: 90.131 ns/op
Iteration   1: 90.138 ns/op
Iteration   2: 155.499 ns/op
Iteration   3: 90.149 ns/op
Iteration   4: 90.566 ns/op
Iteration   5: 90.554 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  103.318 ±(99.9%) 41.369 ns/op [Average]
  (min, avg, max) = (90.066, 103.318, 155.499), stdev = 27.363
  CI (99.9%): [61.949, 144.688] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 33.89% complete, ETA 00:38:50
# Fork: 1 of 2
# Warmup Iteration   1: 66.716 ns/op
# Warmup Iteration   2: 77.981 ns/op
# Warmup Iteration   3: 45.134 ns/op
Iteration   1: 45.104 ns/op
Iteration   2: 77.443 ns/op
Iteration   3: 45.091 ns/op
Iteration   4: 45.080 ns/op
Iteration   5: 45.093 ns/op

# Run progress: 33.92% complete, ETA 00:38:48
# Fork: 2 of 2
# Warmup Iteration   1: 70.379 ns/op
# Warmup Iteration   2: 73.055 ns/op
# Warmup Iteration   3: 45.136 ns/op
Iteration   1: 45.086 ns/op
Iteration   2: 70.335 ns/op
Iteration   3: 45.188 ns/op
Iteration   4: 45.122 ns/op
Iteration   5: 45.078 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  50.862 ±(99.9%) 18.523 ns/op [Average]
  (min, avg, max) = (45.078, 50.862, 77.443), stdev = 12.252
  CI (99.9%): [32.339, 69.385] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 33.96% complete, ETA 00:38:47
# Fork: 1 of 2
# Warmup Iteration   1: 308.238 ns/op
# Warmup Iteration   2: 159.023 ns/op
# Warmup Iteration   3: 109.432 ns/op
Iteration   1: 109.400 ns/op
Iteration   2: 187.329 ns/op
Iteration   3: 109.383 ns/op
Iteration   4: 109.419 ns/op
Iteration   5: 109.475 ns/op

# Run progress: 33.99% complete, ETA 00:38:46
# Fork: 2 of 2
# Warmup Iteration   1: 229.030 ns/op
# Warmup Iteration   2: 160.589 ns/op
# Warmup Iteration   3: 109.283 ns/op
Iteration   1: 109.307 ns/op
Iteration   2: 189.078 ns/op
Iteration   3: 109.303 ns/op
Iteration   4: 109.349 ns/op
Iteration   5: 109.367 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  125.141 ±(99.9%) 50.253 ns/op [Average]
  (min, avg, max) = (109.303, 125.141, 189.078), stdev = 33.240
  CI (99.9%): [74.888, 175.395] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 34.03% complete, ETA 00:38:45
# Fork: 1 of 2
# Warmup Iteration   1: 68.548 ns/op
# Warmup Iteration   2: 69.008 ns/op
# Warmup Iteration   3: 47.551 ns/op
Iteration   1: 47.461 ns/op
Iteration   2: 81.130 ns/op
Iteration   3: 47.501 ns/op
Iteration   4: 47.350 ns/op
Iteration   5: 47.640 ns/op

# Run progress: 34.06% complete, ETA 00:38:43
# Fork: 2 of 2
# Warmup Iteration   1: 68.116 ns/op
# Warmup Iteration   2: 72.838 ns/op
# Warmup Iteration   3: 47.452 ns/op
Iteration   1: 47.442 ns/op
Iteration   2: 81.760 ns/op
Iteration   3: 47.518 ns/op
Iteration   4: 47.347 ns/op
Iteration   5: 47.521 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  54.267 ±(99.9%) 21.657 ns/op [Average]
  (min, avg, max) = (47.347, 54.267, 81.760), stdev = 14.325
  CI (99.9%): [32.609, 75.924] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 34.10% complete, ETA 00:38:42
# Fork: 1 of 2
# Warmup Iteration   1: 192.585 ns/op
# Warmup Iteration   2: 190.946 ns/op
# Warmup Iteration   3: 129.022 ns/op
Iteration   1: 128.970 ns/op
Iteration   2: 231.485 ns/op
Iteration   3: 129.032 ns/op
Iteration   4: 133.250 ns/op
Iteration   5: 132.965 ns/op

# Run progress: 34.13% complete, ETA 00:38:41
# Fork: 2 of 2
# Warmup Iteration   1: 207.312 ns/op
# Warmup Iteration   2: 196.612 ns/op
# Warmup Iteration   3: 129.006 ns/op
Iteration   1: 128.990 ns/op
Iteration   2: 235.049 ns/op
Iteration   3: 128.938 ns/op
Iteration   4: 133.053 ns/op
Iteration   5: 132.904 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  151.464 ±(99.9%) 65.259 ns/op [Average]
  (min, avg, max) = (128.938, 151.464, 235.049), stdev = 43.165
  CI (99.9%): [86.204, 216.723] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 34.17% complete, ETA 00:38:40
# Fork: 1 of 2
# Warmup Iteration   1: 18.727 ns/op
# Warmup Iteration   2: 23.343 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 25.352 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 14.621 ns/op
Iteration   5: 14.613 ns/op

# Run progress: 34.20% complete, ETA 00:38:39
# Fork: 2 of 2
# Warmup Iteration   1: 19.137 ns/op
# Warmup Iteration   2: 21.665 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 21.898 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 13.897 ns/op
Iteration   5: 13.893 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  15.914 ±(99.9%) 6.288 ns/op [Average]
  (min, avg, max) = (13.715, 15.914, 25.352), stdev = 4.159
  CI (99.9%): [9.626, 22.202] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 34.24% complete, ETA 00:38:37
# Fork: 1 of 2
# Warmup Iteration   1: 288.495 ns/op
# Warmup Iteration   2: 138.460 ns/op
# Warmup Iteration   3: 111.125 ns/op
Iteration   1: 194.622 ns/op
Iteration   2: 109.047 ns/op
Iteration   3: 111.106 ns/op
Iteration   4: 109.353 ns/op
Iteration   5: 109.750 ns/op

# Run progress: 34.27% complete, ETA 00:38:36
# Fork: 2 of 2
# Warmup Iteration   1: 327.422 ns/op
# Warmup Iteration   2: 155.724 ns/op
# Warmup Iteration   3: 108.298 ns/op
Iteration   1: 209.745 ns/op
Iteration   2: 108.139 ns/op
Iteration   3: 108.132 ns/op
Iteration   4: 108.794 ns/op
Iteration   5: 108.255 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  127.694 ±(99.9%) 59.614 ns/op [Average]
  (min, avg, max) = (108.132, 127.694, 209.745), stdev = 39.431
  CI (99.9%): [68.080, 187.308] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 34.31% complete, ETA 00:38:35
# Fork: 1 of 2
# Warmup Iteration   1: 66.383 ns/op
# Warmup Iteration   2: 66.236 ns/op
# Warmup Iteration   3: 45.098 ns/op
Iteration   1: 77.604 ns/op
Iteration   2: 45.111 ns/op
Iteration   3: 45.116 ns/op
Iteration   4: 45.451 ns/op
Iteration   5: 45.429 ns/op

# Run progress: 34.34% complete, ETA 00:38:34
# Fork: 2 of 2
# Warmup Iteration   1: 66.340 ns/op
# Warmup Iteration   2: 66.110 ns/op
# Warmup Iteration   3: 45.135 ns/op
Iteration   1: 78.328 ns/op
Iteration   2: 45.121 ns/op
Iteration   3: 45.128 ns/op
Iteration   4: 45.030 ns/op
Iteration   5: 45.049 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.737 ±(99.9%) 20.903 ns/op [Average]
  (min, avg, max) = (45.030, 51.737, 78.328), stdev = 13.826
  CI (99.9%): [30.834, 72.639] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 34.38% complete, ETA 00:38:33
# Fork: 1 of 2
# Warmup Iteration   1: 254.434 ns/op
# Warmup Iteration   2: 156.406 ns/op
# Warmup Iteration   3: 109.596 ns/op
Iteration   1: 204.446 ns/op
Iteration   2: 109.403 ns/op
Iteration   3: 109.413 ns/op
Iteration   4: 109.488 ns/op
Iteration   5: 109.449 ns/op

# Run progress: 34.41% complete, ETA 00:38:32
# Fork: 2 of 2
# Warmup Iteration   1: 223.841 ns/op
# Warmup Iteration   2: 166.100 ns/op
# Warmup Iteration   3: 110.880 ns/op
Iteration   1: 186.760 ns/op
Iteration   2: 109.465 ns/op
Iteration   3: 109.455 ns/op
Iteration   4: 109.506 ns/op
Iteration   5: 110.470 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.786 ±(99.9%) 55.198 ns/op [Average]
  (min, avg, max) = (109.403, 126.786, 204.446), stdev = 36.510
  CI (99.9%): [71.588, 181.983] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 34.44% complete, ETA 00:38:30
# Fork: 1 of 2
# Warmup Iteration   1: 68.475 ns/op
# Warmup Iteration   2: 68.102 ns/op
# Warmup Iteration   3: 47.468 ns/op
Iteration   1: 76.015 ns/op
Iteration   2: 47.440 ns/op
Iteration   3: 47.523 ns/op
Iteration   4: 47.340 ns/op
Iteration   5: 47.589 ns/op

# Run progress: 34.48% complete, ETA 00:38:29
# Fork: 2 of 2
# Warmup Iteration   1: 68.577 ns/op
# Warmup Iteration   2: 74.294 ns/op
# Warmup Iteration   3: 47.502 ns/op
Iteration   1: 91.038 ns/op
Iteration   2: 47.508 ns/op
Iteration   3: 47.483 ns/op
Iteration   4: 47.377 ns/op
Iteration   5: 47.536 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  54.685 ±(99.9%) 23.597 ns/op [Average]
  (min, avg, max) = (47.340, 54.685, 91.038), stdev = 15.608
  CI (99.9%): [31.088, 78.282] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 34.51% complete, ETA 00:38:28
# Fork: 1 of 2
# Warmup Iteration   1: 182.819 ns/op
# Warmup Iteration   2: 181.392 ns/op
# Warmup Iteration   3: 119.864 ns/op
Iteration   1: 220.459 ns/op
Iteration   2: 119.895 ns/op
Iteration   3: 119.835 ns/op
Iteration   4: 121.236 ns/op
Iteration   5: 121.215 ns/op

# Run progress: 34.55% complete, ETA 00:38:27
# Fork: 2 of 2
# Warmup Iteration   1: 173.965 ns/op
# Warmup Iteration   2: 179.951 ns/op
# Warmup Iteration   3: 119.815 ns/op
Iteration   1: 226.679 ns/op
Iteration   2: 119.962 ns/op
Iteration   3: 119.927 ns/op
Iteration   4: 121.610 ns/op
Iteration   5: 121.559 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.238 ±(99.9%) 65.649 ns/op [Average]
  (min, avg, max) = (119.835, 141.238, 226.679), stdev = 43.423
  CI (99.9%): [75.589, 206.887] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 34.58% complete, ETA 00:38:26
# Fork: 1 of 2
# Warmup Iteration   1: 19.427 ns/op
# Warmup Iteration   2: 24.564 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 13.897 ns/op
Iteration   5: 13.895 ns/op

# Run progress: 34.62% complete, ETA 00:38:24
# Fork: 2 of 2
# Warmup Iteration   1: 19.774 ns/op
# Warmup Iteration   2: 25.374 ns/op
# Warmup Iteration   3: 13.722 ns/op
Iteration   1: 13.723 ns/op
Iteration   2: 13.724 ns/op
Iteration   3: 13.727 ns/op
Iteration   4: 13.900 ns/op
Iteration   5: 13.893 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.791 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (13.713, 13.791, 13.900), stdev = 0.091
  CI (99.9%): [13.654, 13.928] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 34.65% complete, ETA 00:38:23
# Fork: 1 of 2
# Warmup Iteration   1: 120.444 ns/op
# Warmup Iteration   2: 111.177 ns/op
# Warmup Iteration   3: 68.916 ns/op
Iteration   1: 68.964 ns/op
Iteration   2: 68.932 ns/op
Iteration   3: 68.879 ns/op
Iteration   4: 68.779 ns/op
Iteration   5: 68.780 ns/op

# Run progress: 34.69% complete, ETA 00:38:22
# Fork: 2 of 2
# Warmup Iteration   1: 121.056 ns/op
# Warmup Iteration   2: 107.999 ns/op
# Warmup Iteration   3: 70.963 ns/op
Iteration   1: 71.249 ns/op
Iteration   2: 71.076 ns/op
Iteration   3: 70.948 ns/op
Iteration   4: 70.817 ns/op
Iteration   5: 70.488 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  69.891 ±(99.9%) 1.660 ns/op [Average]
  (min, avg, max) = (68.779, 69.891, 71.249), stdev = 1.098
  CI (99.9%): [68.231, 71.552] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 34.72% complete, ETA 00:38:21
# Fork: 1 of 2
# Warmup Iteration   1: 67.238 ns/op
# Warmup Iteration   2: 72.172 ns/op
# Warmup Iteration   3: 45.122 ns/op
Iteration   1: 45.131 ns/op
Iteration   2: 45.163 ns/op
Iteration   3: 45.142 ns/op
Iteration   4: 45.069 ns/op
Iteration   5: 45.045 ns/op

# Run progress: 34.76% complete, ETA 00:38:19
# Fork: 2 of 2
# Warmup Iteration   1: 66.447 ns/op
# Warmup Iteration   2: 71.365 ns/op
# Warmup Iteration   3: 45.174 ns/op
Iteration   1: 45.125 ns/op
Iteration   2: 45.154 ns/op
Iteration   3: 45.150 ns/op
Iteration   4: 45.082 ns/op
Iteration   5: 45.049 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.111 ±(99.9%) 0.068 ns/op [Average]
  (min, avg, max) = (45.045, 45.111, 45.163), stdev = 0.045
  CI (99.9%): [45.043, 45.179] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 34.79% complete, ETA 00:38:18
# Fork: 1 of 2
# Warmup Iteration   1: 1113.528 ns/op
# Warmup Iteration   2: 110.517 ns/op
# Warmup Iteration   3: 75.574 ns/op
Iteration   1: 75.564 ns/op
Iteration   2: 75.554 ns/op
Iteration   3: 75.579 ns/op
Iteration   4: 75.451 ns/op
Iteration   5: 75.379 ns/op

# Run progress: 34.83% complete, ETA 00:38:17
# Fork: 2 of 2
# Warmup Iteration   1: 1129.669 ns/op
# Warmup Iteration   2: 109.456 ns/op
# Warmup Iteration   3: 75.568 ns/op
Iteration   1: 75.601 ns/op
Iteration   2: 75.589 ns/op
Iteration   3: 75.588 ns/op
Iteration   4: 75.428 ns/op
Iteration   5: 75.403 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  75.514 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (75.379, 75.514, 75.601), stdev = 0.087
  CI (99.9%): [75.382, 75.645] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 34.86% complete, ETA 00:38:16
# Fork: 1 of 2
# Warmup Iteration   1: 68.262 ns/op
# Warmup Iteration   2: 72.823 ns/op
# Warmup Iteration   3: 47.477 ns/op
Iteration   1: 47.506 ns/op
Iteration   2: 47.405 ns/op
Iteration   3: 47.511 ns/op
Iteration   4: 47.340 ns/op
Iteration   5: 47.558 ns/op

# Run progress: 34.90% complete, ETA 00:38:14
# Fork: 2 of 2
# Warmup Iteration   1: 69.057 ns/op
# Warmup Iteration   2: 82.050 ns/op
# Warmup Iteration   3: 47.486 ns/op
Iteration   1: 47.512 ns/op
Iteration   2: 47.514 ns/op
Iteration   3: 47.492 ns/op
Iteration   4: 47.291 ns/op
Iteration   5: 47.494 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.462 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (47.291, 47.462, 47.558), stdev = 0.087
  CI (99.9%): [47.331, 47.594] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 34.93% complete, ETA 00:38:13
# Fork: 1 of 2
# Warmup Iteration   1: 176.755 ns/op
# Warmup Iteration   2: 189.305 ns/op
# Warmup Iteration   3: 123.852 ns/op
Iteration   1: 123.925 ns/op
Iteration   2: 123.938 ns/op
Iteration   3: 123.940 ns/op
Iteration   4: 129.664 ns/op
Iteration   5: 129.559 ns/op

# Run progress: 34.97% complete, ETA 00:38:12
# Fork: 2 of 2
# Warmup Iteration   1: 175.354 ns/op
# Warmup Iteration   2: 188.936 ns/op
# Warmup Iteration   3: 125.003 ns/op
Iteration   1: 125.002 ns/op
Iteration   2: 125.155 ns/op
Iteration   3: 125.042 ns/op
Iteration   4: 129.722 ns/op
Iteration   5: 129.518 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.547 ±(99.9%) 4.056 ns/op [Average]
  (min, avg, max) = (123.925, 126.547, 129.722), stdev = 2.683
  CI (99.9%): [122.491, 130.602] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 35.00% complete, ETA 00:38:11
# Fork: 1 of 2
# Warmup Iteration   1: 20.347 ns/op
# Warmup Iteration   2: 21.545 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.727 ns/op
Iteration   4: 13.902 ns/op
Iteration   5: 15.056 ns/op

# Run progress: 35.03% complete, ETA 00:38:09
# Fork: 2 of 2
# Warmup Iteration   1: 23.058 ns/op
# Warmup Iteration   2: 29.238 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.708 ns/op
Iteration   3: 13.729 ns/op
Iteration   4: 13.897 ns/op
Iteration   5: 14.689 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.985 ±(99.9%) 0.728 ns/op [Average]
  (min, avg, max) = (13.708, 13.985, 15.056), stdev = 0.482
  CI (99.9%): [13.257, 14.713] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 35.07% complete, ETA 00:38:08
# Fork: 1 of 2
# Warmup Iteration   1: 155.162 ns/op
# Warmup Iteration   2: 140.143 ns/op
# Warmup Iteration   3: 90.011 ns/op
Iteration   1: 90.048 ns/op
Iteration   2: 90.064 ns/op
Iteration   3: 90.022 ns/op
Iteration   4: 89.792 ns/op
Iteration   5: 91.762 ns/op

# Run progress: 35.10% complete, ETA 00:38:07
# Fork: 2 of 2
# Warmup Iteration   1: 169.469 ns/op
# Warmup Iteration   2: 139.726 ns/op
# Warmup Iteration   3: 90.113 ns/op
Iteration   1: 90.135 ns/op
Iteration   2: 90.113 ns/op
Iteration   3: 90.124 ns/op
Iteration   4: 89.880 ns/op
Iteration   5: 90.322 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  90.226 ±(99.9%) 0.844 ns/op [Average]
  (min, avg, max) = (89.792, 90.226, 91.762), stdev = 0.558
  CI (99.9%): [89.382, 91.071] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 35.14% complete, ETA 00:38:06
# Fork: 1 of 2
# Warmup Iteration   1: 67.062 ns/op
# Warmup Iteration   2: 68.369 ns/op
# Warmup Iteration   3: 45.067 ns/op
Iteration   1: 45.129 ns/op
Iteration   2: 45.158 ns/op
Iteration   3: 45.128 ns/op
Iteration   4: 45.064 ns/op
Iteration   5: 45.682 ns/op

# Run progress: 35.17% complete, ETA 00:38:05
# Fork: 2 of 2
# Warmup Iteration   1: 66.987 ns/op
# Warmup Iteration   2: 76.640 ns/op
# Warmup Iteration   3: 45.109 ns/op
Iteration   1: 45.099 ns/op
Iteration   2: 45.109 ns/op
Iteration   3: 45.145 ns/op
Iteration   4: 45.126 ns/op
Iteration   5: 45.333 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.197 ±(99.9%) 0.279 ns/op [Average]
  (min, avg, max) = (45.064, 45.197, 45.682), stdev = 0.185
  CI (99.9%): [44.918, 45.477] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 35.21% complete, ETA 00:38:03
# Fork: 1 of 2
# Warmup Iteration   1: 255.301 ns/op
# Warmup Iteration   2: 148.555 ns/op
# Warmup Iteration   3: 105.728 ns/op
Iteration   1: 105.695 ns/op
Iteration   2: 105.695 ns/op
Iteration   3: 105.616 ns/op
Iteration   4: 105.222 ns/op
Iteration   5: 106.720 ns/op

# Run progress: 35.24% complete, ETA 00:38:02
# Fork: 2 of 2
# Warmup Iteration   1: 278.657 ns/op
# Warmup Iteration   2: 170.766 ns/op
# Warmup Iteration   3: 106.769 ns/op
Iteration   1: 106.875 ns/op
Iteration   2: 106.679 ns/op
Iteration   3: 106.622 ns/op
Iteration   4: 106.510 ns/op
Iteration   5: 112.363 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  106.800 ±(99.9%) 3.083 ns/op [Average]
  (min, avg, max) = (105.222, 106.800, 112.363), stdev = 2.039
  CI (99.9%): [103.717, 109.883] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 35.28% complete, ETA 00:38:01
# Fork: 1 of 2
# Warmup Iteration   1: 68.539 ns/op
# Warmup Iteration   2: 73.866 ns/op
# Warmup Iteration   3: 47.517 ns/op
Iteration   1: 47.516 ns/op
Iteration   2: 47.481 ns/op
Iteration   3: 47.415 ns/op
Iteration   4: 47.367 ns/op
Iteration   5: 48.021 ns/op

# Run progress: 35.31% complete, ETA 00:38:00
# Fork: 2 of 2
# Warmup Iteration   1: 68.975 ns/op
# Warmup Iteration   2: 73.053 ns/op
# Warmup Iteration   3: 47.501 ns/op
Iteration   1: 47.511 ns/op
Iteration   2: 47.480 ns/op
Iteration   3: 47.488 ns/op
Iteration   4: 47.424 ns/op
Iteration   5: 47.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.560 ±(99.9%) 0.327 ns/op [Average]
  (min, avg, max) = (47.367, 47.560, 48.021), stdev = 0.216
  CI (99.9%): [47.232, 47.887] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 35.35% complete, ETA 00:37:59
# Fork: 1 of 2
# Warmup Iteration   1: 174.306 ns/op
# Warmup Iteration   2: 188.073 ns/op
# Warmup Iteration   3: 124.981 ns/op
Iteration   1: 125.006 ns/op
Iteration   2: 125.023 ns/op
Iteration   3: 125.005 ns/op
Iteration   4: 129.619 ns/op
Iteration   5: 129.561 ns/op

# Run progress: 35.38% complete, ETA 00:37:57
# Fork: 2 of 2
# Warmup Iteration   1: 179.863 ns/op
# Warmup Iteration   2: 185.256 ns/op
# Warmup Iteration   3: 124.975 ns/op
Iteration   1: 125.029 ns/op
Iteration   2: 125.004 ns/op
Iteration   3: 124.988 ns/op
Iteration   4: 129.627 ns/op
Iteration   5: 135.154 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  127.402 ±(99.9%) 5.261 ns/op [Average]
  (min, avg, max) = (124.988, 127.402, 135.154), stdev = 3.480
  CI (99.9%): [122.141, 132.662] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 35.42% complete, ETA 00:37:56
# Fork: 1 of 2
# Warmup Iteration   1: 19.325 ns/op
# Warmup Iteration   2: 21.889 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.709 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.869 ns/op
Iteration   5: 13.886 ns/op

# Run progress: 35.45% complete, ETA 00:37:55
# Fork: 2 of 2
# Warmup Iteration   1: 19.858 ns/op
# Warmup Iteration   2: 23.386 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.724 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 15.227 ns/op
Iteration   5: 15.226 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.050 ±(99.9%) 0.943 ns/op [Average]
  (min, avg, max) = (13.709, 14.050, 15.227), stdev = 0.624
  CI (99.9%): [13.107, 14.993] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 35.49% complete, ETA 00:37:54
# Fork: 1 of 2
# Warmup Iteration   1: 724.271 ns/op
# Warmup Iteration   2: 430.847 ns/op
# Warmup Iteration   3: 315.576 ns/op
Iteration   1: 315.808 ns/op
Iteration   2: 315.715 ns/op
Iteration   3: 315.920 ns/op
Iteration   4: 316.916 ns/op
Iteration   5: 316.880 ns/op

# Run progress: 35.52% complete, ETA 00:37:53
# Fork: 2 of 2
# Warmup Iteration   1: 684.962 ns/op
# Warmup Iteration   2: 459.185 ns/op
# Warmup Iteration   3: 315.538 ns/op
Iteration   1: 315.707 ns/op
Iteration   2: 315.675 ns/op
Iteration   3: 315.631 ns/op
Iteration   4: 316.025 ns/op
Iteration   5: 316.071 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  316.035 ±(99.9%) 0.723 ns/op [Average]
  (min, avg, max) = (315.631, 316.035, 316.916), stdev = 0.478
  CI (99.9%): [315.312, 316.758] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 35.56% complete, ETA 00:37:51
# Fork: 1 of 2
# Warmup Iteration   1: 549.899 ns/op
# Warmup Iteration   2: 453.552 ns/op
# Warmup Iteration   3: 336.151 ns/op
Iteration   1: 336.338 ns/op
Iteration   2: 336.296 ns/op
Iteration   3: 336.312 ns/op
Iteration   4: 336.354 ns/op
Iteration   5: 336.386 ns/op

# Run progress: 35.59% complete, ETA 00:37:50
# Fork: 2 of 2
# Warmup Iteration   1: 499.368 ns/op
# Warmup Iteration   2: 502.864 ns/op
# Warmup Iteration   3: 339.932 ns/op
Iteration   1: 340.087 ns/op
Iteration   2: 340.270 ns/op
Iteration   3: 340.037 ns/op
Iteration   4: 340.005 ns/op
Iteration   5: 340.177 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.226 ±(99.9%) 3.013 ns/op [Average]
  (min, avg, max) = (336.296, 338.226, 340.270), stdev = 1.993
  CI (99.9%): [335.213, 341.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 35.63% complete, ETA 00:37:49
# Fork: 1 of 2
# Warmup Iteration   1: 12822.228 ns/op
# Warmup Iteration   2: 560.309 ns/op
# Warmup Iteration   3: 388.554 ns/op
Iteration   1: 350.242 ns/op
Iteration   2: 350.667 ns/op
Iteration   3: 350.293 ns/op
Iteration   4: 350.386 ns/op
Iteration   5: 350.815 ns/op

# Run progress: 35.66% complete, ETA 00:37:48
# Fork: 2 of 2
# Warmup Iteration   1: 7579.750 ns/op
# Warmup Iteration   2: 476.244 ns/op
# Warmup Iteration   3: 376.442 ns/op
Iteration   1: 376.679 ns/op
Iteration   2: 376.773 ns/op
Iteration   3: 376.635 ns/op
Iteration   4: 376.924 ns/op
Iteration   5: 376.916 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  363.633 ±(99.9%) 20.962 ns/op [Average]
  (min, avg, max) = (350.242, 363.633, 376.924), stdev = 13.865
  CI (99.9%): [342.671, 384.595] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 35.69% complete, ETA 00:37:46
# Fork: 1 of 2
# Warmup Iteration   1: 546.092 ns/op
# Warmup Iteration   2: 446.017 ns/op
# Warmup Iteration   3: 294.516 ns/op
Iteration   1: 294.534 ns/op
Iteration   2: 294.586 ns/op
Iteration   3: 294.588 ns/op
Iteration   4: 295.131 ns/op
Iteration   5: 295.136 ns/op

# Run progress: 35.73% complete, ETA 00:37:45
# Fork: 2 of 2
# Warmup Iteration   1: 527.721 ns/op
# Warmup Iteration   2: 397.058 ns/op
# Warmup Iteration   3: 292.590 ns/op
Iteration   1: 292.715 ns/op
Iteration   2: 292.730 ns/op
Iteration   3: 292.656 ns/op
Iteration   4: 293.270 ns/op
Iteration   5: 293.113 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  293.846 ±(99.9%) 1.569 ns/op [Average]
  (min, avg, max) = (292.656, 293.846, 295.136), stdev = 1.038
  CI (99.9%): [292.277, 295.415] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 35.76% complete, ETA 00:37:44
# Fork: 1 of 2
# Warmup Iteration   1: 2577.936 ns/op
# Warmup Iteration   2: 2050.554 ns/op
# Warmup Iteration   3: 1419.872 ns/op
Iteration   1: 1419.823 ns/op
Iteration   2: 1418.395 ns/op
Iteration   3: 1420.180 ns/op
Iteration   4: 1420.553 ns/op
Iteration   5: 1420.707 ns/op

# Run progress: 35.80% complete, ETA 00:37:43
# Fork: 2 of 2
# Warmup Iteration   1: 2739.400 ns/op
# Warmup Iteration   2: 2103.843 ns/op
# Warmup Iteration   3: 1457.957 ns/op
Iteration   1: 1458.541 ns/op
Iteration   2: 1458.367 ns/op
Iteration   3: 1458.002 ns/op
Iteration   4: 1460.722 ns/op
Iteration   5: 1458.788 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1439.408 ±(99.9%) 31.070 ns/op [Average]
  (min, avg, max) = (1418.395, 1439.408, 1460.722), stdev = 20.551
  CI (99.9%): [1408.337, 1470.478] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 35.83% complete, ETA 00:37:41
# Fork: 1 of 2
# Warmup Iteration   1: 18.533 ns/op
# Warmup Iteration   2: 23.427 ns/op
# Warmup Iteration   3: 14.098 ns/op
Iteration   1: 14.103 ns/op
Iteration   2: 14.105 ns/op
Iteration   3: 14.104 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.878 ns/op

# Run progress: 35.87% complete, ETA 00:37:40
# Fork: 2 of 2
# Warmup Iteration   1: 18.282 ns/op
# Warmup Iteration   2: 24.791 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.707 ns/op
Iteration   2: 13.708 ns/op
Iteration   3: 13.728 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.898 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (13.707, 13.898, 14.105), stdev = 0.160
  CI (99.9%): [13.656, 14.140] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 35.90% complete, ETA 00:37:39
# Fork: 1 of 2
# Warmup Iteration   1: 1189.277 ns/op
# Warmup Iteration   2: 491.979 ns/op
# Warmup Iteration   3: 335.878 ns/op
Iteration   1: 335.972 ns/op
Iteration   2: 335.881 ns/op
Iteration   3: 335.936 ns/op
Iteration   4: 335.473 ns/op
Iteration   5: 335.459 ns/op

# Run progress: 35.94% complete, ETA 00:37:38
# Fork: 2 of 2
# Warmup Iteration   1: 1208.479 ns/op
# Warmup Iteration   2: 490.475 ns/op
# Warmup Iteration   3: 338.513 ns/op
Iteration   1: 338.369 ns/op
Iteration   2: 338.537 ns/op
Iteration   3: 338.288 ns/op
Iteration   4: 337.813 ns/op
Iteration   5: 338.140 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.987 ±(99.9%) 2.016 ns/op [Average]
  (min, avg, max) = (335.459, 336.987, 338.537), stdev = 1.333
  CI (99.9%): [334.971, 339.003] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 35.97% complete, ETA 00:37:36
# Fork: 1 of 2
# Warmup Iteration   1: 512.795 ns/op
# Warmup Iteration   2: 568.326 ns/op
# Warmup Iteration   3: 352.763 ns/op
Iteration   1: 352.880 ns/op
Iteration   2: 352.635 ns/op
Iteration   3: 352.847 ns/op
Iteration   4: 353.337 ns/op
Iteration   5: 353.312 ns/op

# Run progress: 36.01% complete, ETA 00:37:35
# Fork: 2 of 2
# Warmup Iteration   1: 510.713 ns/op
# Warmup Iteration   2: 468.692 ns/op
# Warmup Iteration   3: 347.500 ns/op
Iteration   1: 347.578 ns/op
Iteration   2: 347.477 ns/op
Iteration   3: 347.555 ns/op
Iteration   4: 348.313 ns/op
Iteration   5: 348.317 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  350.425 ±(99.9%) 4.141 ns/op [Average]
  (min, avg, max) = (347.477, 350.425, 353.337), stdev = 2.739
  CI (99.9%): [346.284, 354.566] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 36.04% complete, ETA 00:37:34
# Fork: 1 of 2
# Warmup Iteration   1: 5262.406 ns/op
# Warmup Iteration   2: 489.736 ns/op
# Warmup Iteration   3: 341.128 ns/op
Iteration   1: 341.136 ns/op
Iteration   2: 341.180 ns/op
Iteration   3: 341.376 ns/op
Iteration   4: 341.417 ns/op
Iteration   5: 341.253 ns/op

# Run progress: 36.08% complete, ETA 00:37:33
# Fork: 2 of 2
# Warmup Iteration   1: 7651.673 ns/op
# Warmup Iteration   2: 510.716 ns/op
# Warmup Iteration   3: 340.828 ns/op
Iteration   1: 341.192 ns/op
Iteration   2: 341.180 ns/op
Iteration   3: 341.029 ns/op
Iteration   4: 340.872 ns/op
Iteration   5: 341.112 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  341.175 ±(99.9%) 0.239 ns/op [Average]
  (min, avg, max) = (340.872, 341.175, 341.417), stdev = 0.158
  CI (99.9%): [340.936, 341.413] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 36.11% complete, ETA 00:37:32
# Fork: 1 of 2
# Warmup Iteration   1: 419.125 ns/op
# Warmup Iteration   2: 366.200 ns/op
# Warmup Iteration   3: 269.496 ns/op
Iteration   1: 269.677 ns/op
Iteration   2: 269.791 ns/op
Iteration   3: 269.558 ns/op
Iteration   4: 269.555 ns/op
Iteration   5: 269.591 ns/op

# Run progress: 36.15% complete, ETA 00:37:30
# Fork: 2 of 2
# Warmup Iteration   1: 422.705 ns/op
# Warmup Iteration   2: 354.802 ns/op
# Warmup Iteration   3: 268.857 ns/op
Iteration   1: 269.019 ns/op
Iteration   2: 268.944 ns/op
Iteration   3: 269.037 ns/op
Iteration   4: 268.897 ns/op
Iteration   5: 268.829 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  269.290 ±(99.9%) 0.565 ns/op [Average]
  (min, avg, max) = (268.829, 269.290, 269.791), stdev = 0.374
  CI (99.9%): [268.725, 269.855] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 36.18% complete, ETA 00:37:29
# Fork: 1 of 2
# Warmup Iteration   1: 1609.428 ns/op
# Warmup Iteration   2: 1049.996 ns/op
# Warmup Iteration   3: 707.996 ns/op
Iteration   1: 720.690 ns/op
Iteration   2: 708.175 ns/op
Iteration   3: 708.453 ns/op
Iteration   4: 710.732 ns/op
Iteration   5: 710.728 ns/op

# Run progress: 36.22% complete, ETA 00:37:28
# Fork: 2 of 2
# Warmup Iteration   1: 1848.065 ns/op
# Warmup Iteration   2: 1029.385 ns/op
# Warmup Iteration   3: 708.229 ns/op
Iteration   1: 707.957 ns/op
Iteration   2: 708.033 ns/op
Iteration   3: 715.549 ns/op
Iteration   4: 710.704 ns/op
Iteration   5: 710.448 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  711.147 ±(99.9%) 6.119 ns/op [Average]
  (min, avg, max) = (707.957, 711.147, 720.690), stdev = 4.048
  CI (99.9%): [705.028, 717.266] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 36.25% complete, ETA 00:37:27
# Fork: 1 of 2
# Warmup Iteration   1: 19.673 ns/op
# Warmup Iteration   2: 22.729 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.885 ns/op

# Run progress: 36.28% complete, ETA 00:37:25
# Fork: 2 of 2
# Warmup Iteration   1: 20.388 ns/op
# Warmup Iteration   2: 24.838 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.877 ns/op
Iteration   5: 13.877 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.781 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (13.714, 13.781, 13.885), stdev = 0.084
  CI (99.9%): [13.654, 13.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 36.32% complete, ETA 00:37:24
# Fork: 1 of 2
# Warmup Iteration   1: 1287.274 ns/op
# Warmup Iteration   2: 523.286 ns/op
# Warmup Iteration   3: 365.945 ns/op
Iteration   1: 364.890 ns/op
Iteration   2: 363.024 ns/op
Iteration   3: 364.508 ns/op
Iteration   4: 364.071 ns/op
Iteration   5: 362.891 ns/op

# Run progress: 36.35% complete, ETA 00:37:23
# Fork: 2 of 2
# Warmup Iteration   1: 1991.926 ns/op
# Warmup Iteration   2: 543.071 ns/op
# Warmup Iteration   3: 361.384 ns/op
Iteration   1: 358.944 ns/op
Iteration   2: 360.939 ns/op
Iteration   3: 361.834 ns/op
Iteration   4: 360.486 ns/op
Iteration   5: 361.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  362.347 ±(99.9%) 2.867 ns/op [Average]
  (min, avg, max) = (358.944, 362.347, 364.890), stdev = 1.896
  CI (99.9%): [359.479, 365.214] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 36.39% complete, ETA 00:37:22
# Fork: 1 of 2
# Warmup Iteration   1: 608.711 ns/op
# Warmup Iteration   2: 568.239 ns/op
# Warmup Iteration   3: 420.631 ns/op
Iteration   1: 422.688 ns/op
Iteration   2: 418.522 ns/op
Iteration   3: 420.529 ns/op
Iteration   4: 419.602 ns/op
Iteration   5: 424.075 ns/op

# Run progress: 36.42% complete, ETA 00:37:20
# Fork: 2 of 2
# Warmup Iteration   1: 680.081 ns/op
# Warmup Iteration   2: 561.463 ns/op
# Warmup Iteration   3: 419.619 ns/op
Iteration   1: 421.155 ns/op
Iteration   2: 420.418 ns/op
Iteration   3: 419.442 ns/op
Iteration   4: 419.390 ns/op
Iteration   5: 419.661 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  420.548 ±(99.9%) 2.557 ns/op [Average]
  (min, avg, max) = (418.522, 420.548, 424.075), stdev = 1.692
  CI (99.9%): [417.991, 423.106] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 36.46% complete, ETA 00:37:19
# Fork: 1 of 2
# Warmup Iteration   1: 17338.553 ns/op
# Warmup Iteration   2: 633.920 ns/op
# Warmup Iteration   3: 418.452 ns/op
Iteration   1: 380.070 ns/op
Iteration   2: 379.436 ns/op
Iteration   3: 381.216 ns/op
Iteration   4: 381.602 ns/op
Iteration   5: 379.401 ns/op

# Run progress: 36.49% complete, ETA 00:37:18
# Fork: 2 of 2
# Warmup Iteration   1: 16355.156 ns/op
# Warmup Iteration   2: 800.208 ns/op
# Warmup Iteration   3: 436.749 ns/op
Iteration   1: 390.534 ns/op
Iteration   2: 396.738 ns/op
Iteration   3: 393.830 ns/op
Iteration   4: 393.952 ns/op
Iteration   5: 392.745 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  386.952 ±(99.9%) 10.818 ns/op [Average]
  (min, avg, max) = (379.401, 386.952, 396.738), stdev = 7.156
  CI (99.9%): [376.134, 397.771] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 36.53% complete, ETA 00:37:17
# Fork: 1 of 2
# Warmup Iteration   1: 807.686 ns/op
# Warmup Iteration   2: 469.363 ns/op
# Warmup Iteration   3: 331.368 ns/op
Iteration   1: 331.450 ns/op
Iteration   2: 332.568 ns/op
Iteration   3: 331.362 ns/op
Iteration   4: 333.254 ns/op
Iteration   5: 332.448 ns/op

# Run progress: 36.56% complete, ETA 00:37:16
# Fork: 2 of 2
# Warmup Iteration   1: 724.051 ns/op
# Warmup Iteration   2: 439.032 ns/op
# Warmup Iteration   3: 327.809 ns/op
Iteration   1: 326.595 ns/op
Iteration   2: 326.305 ns/op
Iteration   3: 327.826 ns/op
Iteration   4: 327.873 ns/op
Iteration   5: 326.598 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  329.628 ±(99.9%) 4.271 ns/op [Average]
  (min, avg, max) = (326.305, 329.628, 333.254), stdev = 2.825
  CI (99.9%): [325.357, 333.899] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 36.60% complete, ETA 00:37:14
# Fork: 1 of 2
# Warmup Iteration   1: 3257.125 ns/op
# Warmup Iteration   2: 2331.088 ns/op
# Warmup Iteration   3: 1632.885 ns/op
Iteration   1: 1633.227 ns/op
Iteration   2: 1632.268 ns/op
Iteration   3: 1631.512 ns/op
Iteration   4: 1643.115 ns/op
Iteration   5: 1640.128 ns/op

# Run progress: 36.63% complete, ETA 00:37:13
# Fork: 2 of 2
# Warmup Iteration   1: 3079.533 ns/op
# Warmup Iteration   2: 2283.512 ns/op
# Warmup Iteration   3: 1623.824 ns/op
Iteration   1: 1621.427 ns/op
Iteration   2: 1624.156 ns/op
Iteration   3: 1624.548 ns/op
Iteration   4: 1626.104 ns/op
Iteration   5: 1631.207 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1630.769 ±(99.9%) 10.577 ns/op [Average]
  (min, avg, max) = (1621.427, 1630.769, 1643.115), stdev = 6.996
  CI (99.9%): [1620.192, 1641.347] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 36.67% complete, ETA 00:37:12
# Fork: 1 of 2
# Warmup Iteration   1: 18.820 ns/op
# Warmup Iteration   2: 24.944 ns/op
# Warmup Iteration   3: 13.721 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.734 ns/op
Iteration   3: 13.729 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.892 ns/op

# Run progress: 36.70% complete, ETA 00:37:11
# Fork: 2 of 2
# Warmup Iteration   1: 18.284 ns/op
# Warmup Iteration   2: 24.818 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.736 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.789 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (13.713, 13.789, 13.892), stdev = 0.083
  CI (99.9%): [13.663, 13.914] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 36.74% complete, ETA 00:37:09
# Fork: 1 of 2
# Warmup Iteration   1: 572.535 ns/op
# Warmup Iteration   2: 340.063 ns/op
# Warmup Iteration   3: 233.586 ns/op
Iteration   1: 233.704 ns/op
Iteration   2: 233.615 ns/op
Iteration   3: 233.625 ns/op
Iteration   4: 233.667 ns/op
Iteration   5: 233.432 ns/op

# Run progress: 36.77% complete, ETA 00:37:08
# Fork: 2 of 2
# Warmup Iteration   1: 732.936 ns/op
# Warmup Iteration   2: 323.759 ns/op
# Warmup Iteration   3: 233.968 ns/op
Iteration   1: 234.094 ns/op
Iteration   2: 234.221 ns/op
Iteration   3: 234.524 ns/op
Iteration   4: 233.974 ns/op
Iteration   5: 234.104 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.896 ±(99.9%) 0.516 ns/op [Average]
  (min, avg, max) = (233.432, 233.896, 234.524), stdev = 0.341
  CI (99.9%): [233.380, 234.412] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 36.81% complete, ETA 00:37:07
# Fork: 1 of 2
# Warmup Iteration   1: 349.492 ns/op
# Warmup Iteration   2: 313.154 ns/op
# Warmup Iteration   3: 231.491 ns/op
Iteration   1: 231.533 ns/op
Iteration   2: 231.409 ns/op
Iteration   3: 231.443 ns/op
Iteration   4: 231.561 ns/op
Iteration   5: 231.574 ns/op

# Run progress: 36.84% complete, ETA 00:37:06
# Fork: 2 of 2
# Warmup Iteration   1: 345.452 ns/op
# Warmup Iteration   2: 316.393 ns/op
# Warmup Iteration   3: 231.340 ns/op
Iteration   1: 231.344 ns/op
Iteration   2: 231.338 ns/op
Iteration   3: 231.446 ns/op
Iteration   4: 231.500 ns/op
Iteration   5: 231.487 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.463 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (231.338, 231.463, 231.574), stdev = 0.083
  CI (99.9%): [231.338, 231.589] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 36.88% complete, ETA 00:37:04
# Fork: 1 of 2
# Warmup Iteration   1: 485.044 ns/op
# Warmup Iteration   2: 390.195 ns/op
# Warmup Iteration   3: 260.109 ns/op
Iteration   1: 260.261 ns/op
Iteration   2: 260.176 ns/op
Iteration   3: 260.187 ns/op
Iteration   4: 260.396 ns/op
Iteration   5: 260.346 ns/op

# Run progress: 36.91% complete, ETA 00:37:03
# Fork: 2 of 2
# Warmup Iteration   1: 464.154 ns/op
# Warmup Iteration   2: 339.725 ns/op
# Warmup Iteration   3: 248.136 ns/op
Iteration   1: 248.301 ns/op
Iteration   2: 248.292 ns/op
Iteration   3: 248.246 ns/op
Iteration   4: 248.466 ns/op
Iteration   5: 248.476 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  254.315 ±(99.9%) 9.496 ns/op [Average]
  (min, avg, max) = (248.246, 254.315, 260.396), stdev = 6.281
  CI (99.9%): [244.818, 263.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 36.94% complete, ETA 00:37:02
# Fork: 1 of 2
# Warmup Iteration   1: 331.306 ns/op
# Warmup Iteration   2: 282.841 ns/op
# Warmup Iteration   3: 206.856 ns/op
Iteration   1: 207.018 ns/op
Iteration   2: 206.931 ns/op
Iteration   3: 206.945 ns/op
Iteration   4: 206.923 ns/op
Iteration   5: 206.889 ns/op

# Run progress: 36.98% complete, ETA 00:37:01
# Fork: 2 of 2
# Warmup Iteration   1: 330.064 ns/op
# Warmup Iteration   2: 276.777 ns/op
# Warmup Iteration   3: 208.886 ns/op
Iteration   1: 208.986 ns/op
Iteration   2: 208.894 ns/op
Iteration   3: 208.996 ns/op
Iteration   4: 209.112 ns/op
Iteration   5: 209.126 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  207.982 ±(99.9%) 1.662 ns/op [Average]
  (min, avg, max) = (206.889, 207.982, 209.126), stdev = 1.099
  CI (99.9%): [206.320, 209.644] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 37.01% complete, ETA 00:37:00
# Fork: 1 of 2
# Warmup Iteration   1: 1300.576 ns/op
# Warmup Iteration   2: 1030.164 ns/op
# Warmup Iteration   3: 693.070 ns/op
Iteration   1: 693.407 ns/op
Iteration   2: 693.633 ns/op
Iteration   3: 693.477 ns/op
Iteration   4: 697.261 ns/op
Iteration   5: 697.420 ns/op

# Run progress: 37.05% complete, ETA 00:36:58
# Fork: 2 of 2
# Warmup Iteration   1: 1331.399 ns/op
# Warmup Iteration   2: 1032.074 ns/op
# Warmup Iteration   3: 693.155 ns/op
Iteration   1: 693.458 ns/op
Iteration   2: 693.502 ns/op
Iteration   3: 693.390 ns/op
Iteration   4: 697.353 ns/op
Iteration   5: 697.090 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  694.999 ±(99.9%) 2.973 ns/op [Average]
  (min, avg, max) = (693.390, 694.999, 697.420), stdev = 1.967
  CI (99.9%): [692.026, 697.973] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 37.08% complete, ETA 00:36:57
# Fork: 1 of 2
# Warmup Iteration   1: 20.022 ns/op
# Warmup Iteration   2: 23.217 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.729 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.876 ns/op

# Run progress: 37.12% complete, ETA 00:36:56
# Fork: 2 of 2
# Warmup Iteration   1: 18.872 ns/op
# Warmup Iteration   2: 24.883 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.725 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.876 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (13.714, 13.784, 13.881), stdev = 0.081
  CI (99.9%): [13.661, 13.906] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 37.15% complete, ETA 00:36:55
# Fork: 1 of 2
# Warmup Iteration   1: 725.537 ns/op
# Warmup Iteration   2: 312.213 ns/op
# Warmup Iteration   3: 210.672 ns/op
Iteration   1: 210.599 ns/op
Iteration   2: 210.498 ns/op
Iteration   3: 211.655 ns/op
Iteration   4: 209.765 ns/op
Iteration   5: 211.817 ns/op

# Run progress: 37.19% complete, ETA 00:36:53
# Fork: 2 of 2
# Warmup Iteration   1: 678.459 ns/op
# Warmup Iteration   2: 299.154 ns/op
# Warmup Iteration   3: 207.025 ns/op
Iteration   1: 207.457 ns/op
Iteration   2: 207.729 ns/op
Iteration   3: 207.090 ns/op
Iteration   4: 205.315 ns/op
Iteration   5: 205.827 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  208.775 ±(99.9%) 3.604 ns/op [Average]
  (min, avg, max) = (205.315, 208.775, 211.817), stdev = 2.384
  CI (99.9%): [205.171, 212.380] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 37.22% complete, ETA 00:36:52
# Fork: 1 of 2
# Warmup Iteration   1: 242.296 ns/op
# Warmup Iteration   2: 216.687 ns/op
# Warmup Iteration   3: 155.118 ns/op
Iteration   1: 154.645 ns/op
Iteration   2: 154.730 ns/op
Iteration   3: 154.783 ns/op
Iteration   4: 155.814 ns/op
Iteration   5: 155.601 ns/op

# Run progress: 37.26% complete, ETA 00:36:51
# Fork: 2 of 2
# Warmup Iteration   1: 244.764 ns/op
# Warmup Iteration   2: 227.583 ns/op
# Warmup Iteration   3: 154.853 ns/op
Iteration   1: 154.448 ns/op
Iteration   2: 154.954 ns/op
Iteration   3: 155.453 ns/op
Iteration   4: 155.926 ns/op
Iteration   5: 155.645 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  155.200 ±(99.9%) 0.821 ns/op [Average]
  (min, avg, max) = (154.448, 155.200, 155.926), stdev = 0.543
  CI (99.9%): [154.379, 156.021] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 37.29% complete, ETA 00:36:50
# Fork: 1 of 2
# Warmup Iteration   1: 12288.692 ns/op
# Warmup Iteration   2: 304.684 ns/op
# Warmup Iteration   3: 214.486 ns/op
Iteration   1: 199.058 ns/op
Iteration   2: 198.173 ns/op
Iteration   3: 198.675 ns/op
Iteration   4: 196.845 ns/op
Iteration   5: 199.082 ns/op

# Run progress: 37.33% complete, ETA 00:36:48
# Fork: 2 of 2
# Warmup Iteration   1: 8686.746 ns/op
# Warmup Iteration   2: 333.892 ns/op
# Warmup Iteration   3: 191.556 ns/op
Iteration   1: 190.497 ns/op
Iteration   2: 190.744 ns/op
Iteration   3: 190.058 ns/op
Iteration   4: 191.568 ns/op
Iteration   5: 192.628 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  194.733 ±(99.9%) 5.955 ns/op [Average]
  (min, avg, max) = (190.058, 194.733, 199.082), stdev = 3.939
  CI (99.9%): [188.778, 200.687] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 37.36% complete, ETA 00:36:47
# Fork: 1 of 2
# Warmup Iteration   1: 236.805 ns/op
# Warmup Iteration   2: 200.621 ns/op
# Warmup Iteration   3: 132.449 ns/op
Iteration   1: 132.611 ns/op
Iteration   2: 132.544 ns/op
Iteration   3: 132.523 ns/op
Iteration   4: 132.373 ns/op
Iteration   5: 132.392 ns/op

# Run progress: 37.40% complete, ETA 00:36:46
# Fork: 2 of 2
# Warmup Iteration   1: 239.646 ns/op
# Warmup Iteration   2: 183.353 ns/op
# Warmup Iteration   3: 132.429 ns/op
Iteration   1: 132.437 ns/op
Iteration   2: 132.557 ns/op
Iteration   3: 132.487 ns/op
Iteration   4: 132.502 ns/op
Iteration   5: 132.390 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  132.482 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (132.373, 132.482, 132.611), stdev = 0.081
  CI (99.9%): [132.360, 132.604] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 37.43% complete, ETA 00:36:45
# Fork: 1 of 2
# Warmup Iteration   1: 1553.678 ns/op
# Warmup Iteration   2: 1066.789 ns/op
# Warmup Iteration   3: 724.038 ns/op
Iteration   1: 724.346 ns/op
Iteration   2: 726.019 ns/op
Iteration   3: 728.996 ns/op
Iteration   4: 730.661 ns/op
Iteration   5: 730.467 ns/op

# Run progress: 37.47% complete, ETA 00:36:44
# Fork: 2 of 2
# Warmup Iteration   1: 1285.163 ns/op
# Warmup Iteration   2: 1025.151 ns/op
# Warmup Iteration   3: 731.629 ns/op
Iteration   1: 729.224 ns/op
Iteration   2: 728.905 ns/op
Iteration   3: 733.522 ns/op
Iteration   4: 731.845 ns/op
Iteration   5: 733.373 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  729.736 ±(99.9%) 4.444 ns/op [Average]
  (min, avg, max) = (724.346, 729.736, 733.522), stdev = 2.939
  CI (99.9%): [725.292, 734.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 37.50% complete, ETA 00:36:42
# Fork: 1 of 2
# Warmup Iteration   1: 20.271 ns/op
# Warmup Iteration   2: 22.509 ns/op
# Warmup Iteration   3: 13.722 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.876 ns/op

# Run progress: 37.53% complete, ETA 00:36:41
# Fork: 2 of 2
# Warmup Iteration   1: 20.296 ns/op
# Warmup Iteration   2: 22.939 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.897 ns/op
Iteration   5: 13.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (13.711, 13.783, 13.897), stdev = 0.089
  CI (99.9%): [13.649, 13.917] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 37.57% complete, ETA 00:36:40
# Fork: 1 of 2
# Warmup Iteration   1: 840.388 ns/op
# Warmup Iteration   2: 429.758 ns/op
# Warmup Iteration   3: 295.920 ns/op
Iteration   1: 297.135 ns/op
Iteration   2: 297.331 ns/op
Iteration   3: 296.820 ns/op
Iteration   4: 296.363 ns/op
Iteration   5: 295.693 ns/op

# Run progress: 37.60% complete, ETA 00:36:39
# Fork: 2 of 2
# Warmup Iteration   1: 753.770 ns/op
# Warmup Iteration   2: 450.142 ns/op
# Warmup Iteration   3: 295.710 ns/op
Iteration   1: 295.868 ns/op
Iteration   2: 296.079 ns/op
Iteration   3: 295.217 ns/op
Iteration   4: 296.018 ns/op
Iteration   5: 295.839 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  296.236 ±(99.9%) 1.015 ns/op [Average]
  (min, avg, max) = (295.217, 296.236, 297.331), stdev = 0.672
  CI (99.9%): [295.221, 297.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 37.64% complete, ETA 00:36:37
# Fork: 1 of 2
# Warmup Iteration   1: 594.553 ns/op
# Warmup Iteration   2: 520.690 ns/op
# Warmup Iteration   3: 386.485 ns/op
Iteration   1: 386.620 ns/op
Iteration   2: 386.562 ns/op
Iteration   3: 386.707 ns/op
Iteration   4: 386.944 ns/op
Iteration   5: 386.772 ns/op

# Run progress: 37.67% complete, ETA 00:36:36
# Fork: 2 of 2
# Warmup Iteration   1: 571.567 ns/op
# Warmup Iteration   2: 527.237 ns/op
# Warmup Iteration   3: 392.809 ns/op
Iteration   1: 393.075 ns/op
Iteration   2: 393.021 ns/op
Iteration   3: 393.178 ns/op
Iteration   4: 393.645 ns/op
Iteration   5: 393.649 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  390.017 ±(99.9%) 5.264 ns/op [Average]
  (min, avg, max) = (386.562, 390.017, 393.649), stdev = 3.482
  CI (99.9%): [384.753, 395.282] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 37.71% complete, ETA 00:36:35
# Fork: 1 of 2
# Warmup Iteration   1: 7565.219 ns/op
# Warmup Iteration   2: 538.277 ns/op
# Warmup Iteration   3: 324.061 ns/op
Iteration   1: 324.131 ns/op
Iteration   2: 324.237 ns/op
Iteration   3: 324.099 ns/op
Iteration   4: 324.396 ns/op
Iteration   5: 324.215 ns/op

# Run progress: 37.74% complete, ETA 00:36:34
# Fork: 2 of 2
# Warmup Iteration   1: 7312.379 ns/op
# Warmup Iteration   2: 440.308 ns/op
# Warmup Iteration   3: 319.196 ns/op
Iteration   1: 319.127 ns/op
Iteration   2: 319.047 ns/op
Iteration   3: 318.992 ns/op
Iteration   4: 323.697 ns/op
Iteration   5: 318.810 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  322.075 ±(99.9%) 4.020 ns/op [Average]
  (min, avg, max) = (318.810, 322.075, 324.396), stdev = 2.659
  CI (99.9%): [318.055, 326.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 37.78% complete, ETA 00:36:32
# Fork: 1 of 2
# Warmup Iteration   1: 489.278 ns/op
# Warmup Iteration   2: 424.655 ns/op
# Warmup Iteration   3: 312.685 ns/op
Iteration   1: 312.732 ns/op
Iteration   2: 312.737 ns/op
Iteration   3: 312.772 ns/op
Iteration   4: 312.695 ns/op
Iteration   5: 312.651 ns/op

# Run progress: 37.81% complete, ETA 00:36:31
# Fork: 2 of 2
# Warmup Iteration   1: 496.291 ns/op
# Warmup Iteration   2: 413.343 ns/op
# Warmup Iteration   3: 313.994 ns/op
Iteration   1: 314.132 ns/op
Iteration   2: 313.957 ns/op
Iteration   3: 314.124 ns/op
Iteration   4: 313.859 ns/op
Iteration   5: 314.018 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.368 ±(99.9%) 1.044 ns/op [Average]
  (min, avg, max) = (312.651, 313.368, 314.132), stdev = 0.691
  CI (99.9%): [312.324, 314.412] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 37.85% complete, ETA 00:36:30
# Fork: 1 of 2
# Warmup Iteration   1: 2953.966 ns/op
# Warmup Iteration   2: 2317.482 ns/op
# Warmup Iteration   3: 1557.438 ns/op
Iteration   1: 1559.667 ns/op
Iteration   2: 1558.162 ns/op
Iteration   3: 1560.712 ns/op
Iteration   4: 1560.133 ns/op
Iteration   5: 1556.863 ns/op

# Run progress: 37.88% complete, ETA 00:36:29
# Fork: 2 of 2
# Warmup Iteration   1: 2981.543 ns/op
# Warmup Iteration   2: 2250.812 ns/op
# Warmup Iteration   3: 1566.005 ns/op
Iteration   1: 1562.804 ns/op
Iteration   2: 1565.990 ns/op
Iteration   3: 1565.696 ns/op
Iteration   4: 1563.503 ns/op
Iteration   5: 1561.395 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1561.493 ±(99.9%) 4.563 ns/op [Average]
  (min, avg, max) = (1556.863, 1561.493, 1565.990), stdev = 3.018
  CI (99.9%): [1556.929, 1566.056] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 37.92% complete, ETA 00:36:27
# Fork: 1 of 2
# Warmup Iteration   1: 20.958 ns/op
# Warmup Iteration   2: 25.116 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.730 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.882 ns/op

# Run progress: 37.95% complete, ETA 00:36:26
# Fork: 2 of 2
# Warmup Iteration   1: 18.680 ns/op
# Warmup Iteration   2: 25.324 ns/op
# Warmup Iteration   3: 13.718 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.721 ns/op
Iteration   3: 13.721 ns/op
Iteration   4: 13.903 ns/op
Iteration   5: 13.904 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.788 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (13.710, 13.788, 13.904), stdev = 0.090
  CI (99.9%): [13.651, 13.924] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 37.99% complete, ETA 00:36:25
# Fork: 1 of 2
# Warmup Iteration   1: 169.825 ns/op
# Warmup Iteration   2: 139.185 ns/op
# Warmup Iteration   3: 90.133 ns/op
Iteration   1: 89.954 ns/op
Iteration   2: 90.178 ns/op
Iteration   3: 90.100 ns/op
Iteration   4: 89.733 ns/op
Iteration   5: 89.965 ns/op

# Run progress: 38.02% complete, ETA 00:36:24
# Fork: 2 of 2
# Warmup Iteration   1: 167.549 ns/op
# Warmup Iteration   2: 138.231 ns/op
# Warmup Iteration   3: 90.002 ns/op
Iteration   1: 90.222 ns/op
Iteration   2: 89.945 ns/op
Iteration   3: 90.127 ns/op
Iteration   4: 90.000 ns/op
Iteration   5: 89.756 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.998 ±(99.9%) 0.249 ns/op [Average]
  (min, avg, max) = (89.733, 89.998, 90.222), stdev = 0.165
  CI (99.9%): [89.749, 90.247] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 38.06% complete, ETA 00:36:23
# Fork: 1 of 2
# Warmup Iteration   1: 68.867 ns/op
# Warmup Iteration   2: 70.193 ns/op
# Warmup Iteration   3: 45.229 ns/op
Iteration   1: 45.247 ns/op
Iteration   2: 45.288 ns/op
Iteration   3: 45.248 ns/op
Iteration   4: 45.294 ns/op
Iteration   5: 45.335 ns/op

# Run progress: 38.09% complete, ETA 00:36:21
# Fork: 2 of 2
# Warmup Iteration   1: 66.089 ns/op
# Warmup Iteration   2: 69.278 ns/op
# Warmup Iteration   3: 45.248 ns/op
Iteration   1: 45.294 ns/op
Iteration   2: 45.201 ns/op
Iteration   3: 45.251 ns/op
Iteration   4: 45.299 ns/op
Iteration   5: 45.272 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.273 ±(99.9%) 0.056 ns/op [Average]
  (min, avg, max) = (45.201, 45.273, 45.335), stdev = 0.037
  CI (99.9%): [45.216, 45.329] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 38.13% complete, ETA 00:36:20
# Fork: 1 of 2
# Warmup Iteration   1: 251.461 ns/op
# Warmup Iteration   2: 160.290 ns/op
# Warmup Iteration   3: 106.745 ns/op
Iteration   1: 106.757 ns/op
Iteration   2: 106.721 ns/op
Iteration   3: 106.661 ns/op
Iteration   4: 106.823 ns/op
Iteration   5: 106.863 ns/op

# Run progress: 38.16% complete, ETA 00:36:19
# Fork: 2 of 2
# Warmup Iteration   1: 271.457 ns/op
# Warmup Iteration   2: 151.823 ns/op
# Warmup Iteration   3: 106.918 ns/op
Iteration   1: 106.854 ns/op
Iteration   2: 106.886 ns/op
Iteration   3: 106.872 ns/op
Iteration   4: 106.893 ns/op
Iteration   5: 107.076 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  106.841 ±(99.9%) 0.171 ns/op [Average]
  (min, avg, max) = (106.661, 106.841, 107.076), stdev = 0.113
  CI (99.9%): [106.669, 107.012] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 38.19% complete, ETA 00:36:18
# Fork: 1 of 2
# Warmup Iteration   1: 68.273 ns/op
# Warmup Iteration   2: 73.162 ns/op
# Warmup Iteration   3: 47.554 ns/op
Iteration   1: 47.552 ns/op
Iteration   2: 47.501 ns/op
Iteration   3: 47.512 ns/op
Iteration   4: 47.571 ns/op
Iteration   5: 47.611 ns/op

# Run progress: 38.23% complete, ETA 00:36:16
# Fork: 2 of 2
# Warmup Iteration   1: 68.050 ns/op
# Warmup Iteration   2: 72.380 ns/op
# Warmup Iteration   3: 47.514 ns/op
Iteration   1: 47.531 ns/op
Iteration   2: 47.536 ns/op
Iteration   3: 47.546 ns/op
Iteration   4: 48.133 ns/op
Iteration   5: 48.147 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.664 ±(99.9%) 0.382 ns/op [Average]
  (min, avg, max) = (47.501, 47.664, 48.147), stdev = 0.253
  CI (99.9%): [47.282, 48.046] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 38.26% complete, ETA 00:36:15
# Fork: 1 of 2
# Warmup Iteration   1: 173.101 ns/op
# Warmup Iteration   2: 184.387 ns/op
# Warmup Iteration   3: 98.216 ns/op
Iteration   1: 98.240 ns/op
Iteration   2: 98.353 ns/op
Iteration   3: 98.342 ns/op
Iteration   4: 105.160 ns/op
Iteration   5: 105.184 ns/op

# Run progress: 38.30% complete, ETA 00:36:14
# Fork: 2 of 2
# Warmup Iteration   1: 176.392 ns/op
# Warmup Iteration   2: 196.395 ns/op
# Warmup Iteration   3: 98.378 ns/op
Iteration   1: 98.379 ns/op
Iteration   2: 98.388 ns/op
Iteration   3: 98.394 ns/op
Iteration   4: 105.126 ns/op
Iteration   5: 105.088 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.065 ±(99.9%) 5.302 ns/op [Average]
  (min, avg, max) = (98.240, 101.065, 105.184), stdev = 3.507
  CI (99.9%): [95.764, 106.367] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 38.33% complete, ETA 00:36:13
# Fork: 1 of 2
# Warmup Iteration   1: 19.762 ns/op
# Warmup Iteration   2: 21.203 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.728 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.877 ns/op

# Run progress: 38.37% complete, ETA 00:36:11
# Fork: 2 of 2
# Warmup Iteration   1: 19.109 ns/op
# Warmup Iteration   2: 23.422 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.722 ns/op
Iteration   3: 13.728 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (13.712, 13.784, 13.890), stdev = 0.084
  CI (99.9%): [13.657, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 38.40% complete, ETA 00:36:10
# Fork: 1 of 2
# Warmup Iteration   1: 2868.690 ns/op
# Warmup Iteration   2: 506.093 ns/op
# Warmup Iteration   3: 357.070 ns/op
Iteration   1: 356.483 ns/op
Iteration   2: 350.803 ns/op
Iteration   3: 351.948 ns/op
Iteration   4: 350.888 ns/op
Iteration   5: 352.526 ns/op

# Run progress: 38.44% complete, ETA 00:36:09
# Fork: 2 of 2
# Warmup Iteration   1: 3931.804 ns/op
# Warmup Iteration   2: 457.216 ns/op
# Warmup Iteration   3: 348.644 ns/op
Iteration   1: 348.201 ns/op
Iteration   2: 346.943 ns/op
Iteration   3: 349.703 ns/op
Iteration   4: 349.773 ns/op
Iteration   5: 347.755 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  350.502 ±(99.9%) 4.182 ns/op [Average]
  (min, avg, max) = (346.943, 350.502, 356.483), stdev = 2.766
  CI (99.9%): [346.320, 354.685] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 38.47% complete, ETA 00:36:08
# Fork: 1 of 2
# Warmup Iteration   1: 696.514 ns/op
# Warmup Iteration   2: 601.072 ns/op
# Warmup Iteration   3: 442.489 ns/op
Iteration   1: 441.039 ns/op
Iteration   2: 440.799 ns/op
Iteration   3: 445.595 ns/op
Iteration   4: 444.485 ns/op
Iteration   5: 441.149 ns/op

# Run progress: 38.51% complete, ETA 00:36:07
# Fork: 2 of 2
# Warmup Iteration   1: 634.523 ns/op
# Warmup Iteration   2: 582.213 ns/op
# Warmup Iteration   3: 443.676 ns/op
Iteration   1: 441.610 ns/op
Iteration   2: 443.493 ns/op
Iteration   3: 446.598 ns/op
Iteration   4: 450.223 ns/op
Iteration   5: 441.434 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  443.643 ±(99.9%) 4.692 ns/op [Average]
  (min, avg, max) = (440.799, 443.643, 450.223), stdev = 3.103
  CI (99.9%): [438.951, 448.334] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 38.54% complete, ETA 00:36:05
# Fork: 1 of 2
# Warmup Iteration   1: 11469.977 ns/op
# Warmup Iteration   2: 658.877 ns/op
# Warmup Iteration   3: 421.857 ns/op
Iteration   1: 421.007 ns/op
Iteration   2: 420.759 ns/op
Iteration   3: 419.852 ns/op
Iteration   4: 419.986 ns/op
Iteration   5: 420.328 ns/op

# Run progress: 38.58% complete, ETA 00:36:04
# Fork: 2 of 2
# Warmup Iteration   1: 20489.613 ns/op
# Warmup Iteration   2: 609.409 ns/op
# Warmup Iteration   3: 464.907 ns/op
Iteration   1: 420.368 ns/op
Iteration   2: 420.911 ns/op
Iteration   3: 420.480 ns/op
Iteration   4: 418.296 ns/op
Iteration   5: 418.600 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  420.059 ±(99.9%) 1.402 ns/op [Average]
  (min, avg, max) = (418.296, 420.059, 421.007), stdev = 0.928
  CI (99.9%): [418.656, 421.461] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 38.61% complete, ETA 00:36:03
# Fork: 1 of 2
# Warmup Iteration   1: 599.385 ns/op
# Warmup Iteration   2: 462.551 ns/op
# Warmup Iteration   3: 345.825 ns/op
Iteration   1: 344.567 ns/op
Iteration   2: 348.833 ns/op
Iteration   3: 345.799 ns/op
Iteration   4: 346.206 ns/op
Iteration   5: 346.232 ns/op

# Run progress: 38.65% complete, ETA 00:36:02
# Fork: 2 of 2
# Warmup Iteration   1: 550.986 ns/op
# Warmup Iteration   2: 464.878 ns/op
# Warmup Iteration   3: 344.506 ns/op
Iteration   1: 344.854 ns/op
Iteration   2: 344.702 ns/op
Iteration   3: 344.867 ns/op
Iteration   4: 346.133 ns/op
Iteration   5: 346.604 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  345.880 ±(99.9%) 1.934 ns/op [Average]
  (min, avg, max) = (344.567, 345.880, 348.833), stdev = 1.280
  CI (99.9%): [343.945, 347.814] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 38.68% complete, ETA 00:36:00
# Fork: 1 of 2
# Warmup Iteration   1: 3396.962 ns/op
# Warmup Iteration   2: 2411.458 ns/op
# Warmup Iteration   3: 1685.409 ns/op
Iteration   1: 1683.363 ns/op
Iteration   2: 1678.989 ns/op
Iteration   3: 1683.977 ns/op
Iteration   4: 1690.356 ns/op
Iteration   5: 1686.038 ns/op

# Run progress: 38.72% complete, ETA 00:35:59
# Fork: 2 of 2
# Warmup Iteration   1: 3370.987 ns/op
# Warmup Iteration   2: 2416.420 ns/op
# Warmup Iteration   3: 1671.361 ns/op
Iteration   1: 1672.202 ns/op
Iteration   2: 1670.215 ns/op
Iteration   3: 1675.707 ns/op
Iteration   4: 1671.098 ns/op
Iteration   5: 1675.030 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1678.697 ±(99.9%) 10.497 ns/op [Average]
  (min, avg, max) = (1670.215, 1678.697, 1690.356), stdev = 6.943
  CI (99.9%): [1668.201, 1689.194] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 38.75% complete, ETA 00:35:58
# Fork: 1 of 2
# Warmup Iteration   1: 19.799 ns/op
# Warmup Iteration   2: 22.696 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.874 ns/op
Iteration   5: 13.895 ns/op

# Run progress: 38.78% complete, ETA 00:35:57
# Fork: 2 of 2
# Warmup Iteration   1: 19.873 ns/op
# Warmup Iteration   2: 24.951 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.888 ns/op
Iteration   5: 13.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.710, 13.783, 13.895), stdev = 0.088
  CI (99.9%): [13.650, 13.915] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 38.82% complete, ETA 00:35:56
# Fork: 1 of 2
# Warmup Iteration   1: 168.911 ns/op
# Warmup Iteration   2: 139.191 ns/op
# Warmup Iteration   3: 89.964 ns/op
Iteration   1: 89.976 ns/op
Iteration   2: 89.952 ns/op
Iteration   3: 89.955 ns/op
Iteration   4: 89.804 ns/op
Iteration   5: 89.779 ns/op

# Run progress: 38.85% complete, ETA 00:35:54
# Fork: 2 of 2
# Warmup Iteration   1: 154.597 ns/op
# Warmup Iteration   2: 124.818 ns/op
# Warmup Iteration   3: 90.025 ns/op
Iteration   1: 90.101 ns/op
Iteration   2: 90.065 ns/op
Iteration   3: 90.050 ns/op
Iteration   4: 91.014 ns/op
Iteration   5: 91.025 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  90.172 ±(99.9%) 0.693 ns/op [Average]
  (min, avg, max) = (89.779, 90.172, 91.025), stdev = 0.458
  CI (99.9%): [89.479, 90.865] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 38.89% complete, ETA 00:35:53
# Fork: 1 of 2
# Warmup Iteration   1: 71.055 ns/op
# Warmup Iteration   2: 66.606 ns/op
# Warmup Iteration   3: 45.206 ns/op
Iteration   1: 45.190 ns/op
Iteration   2: 45.231 ns/op
Iteration   3: 45.238 ns/op
Iteration   4: 45.333 ns/op
Iteration   5: 45.283 ns/op

# Run progress: 38.92% complete, ETA 00:35:52
# Fork: 2 of 2
# Warmup Iteration   1: 66.690 ns/op
# Warmup Iteration   2: 69.200 ns/op
# Warmup Iteration   3: 45.238 ns/op
Iteration   1: 45.153 ns/op
Iteration   2: 45.250 ns/op
Iteration   3: 45.312 ns/op
Iteration   4: 45.287 ns/op
Iteration   5: 45.270 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.255 ±(99.9%) 0.083 ns/op [Average]
  (min, avg, max) = (45.153, 45.255, 45.333), stdev = 0.055
  CI (99.9%): [45.172, 45.337] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 38.96% complete, ETA 00:35:51
# Fork: 1 of 2
# Warmup Iteration   1: 266.817 ns/op
# Warmup Iteration   2: 153.338 ns/op
# Warmup Iteration   3: 105.584 ns/op
Iteration   1: 105.602 ns/op
Iteration   2: 105.644 ns/op
Iteration   3: 105.607 ns/op
Iteration   4: 105.597 ns/op
Iteration   5: 105.608 ns/op

# Run progress: 38.99% complete, ETA 00:35:49
# Fork: 2 of 2
# Warmup Iteration   1: 321.693 ns/op
# Warmup Iteration   2: 152.184 ns/op
# Warmup Iteration   3: 106.756 ns/op
Iteration   1: 106.795 ns/op
Iteration   2: 106.921 ns/op
Iteration   3: 106.729 ns/op
Iteration   4: 106.922 ns/op
Iteration   5: 106.780 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  106.221 ±(99.9%) 0.974 ns/op [Average]
  (min, avg, max) = (105.597, 106.221, 106.922), stdev = 0.644
  CI (99.9%): [105.246, 107.195] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 39.03% complete, ETA 00:35:48
# Fork: 1 of 2
# Warmup Iteration   1: 68.608 ns/op
# Warmup Iteration   2: 76.172 ns/op
# Warmup Iteration   3: 47.545 ns/op
Iteration   1: 47.507 ns/op
Iteration   2: 47.543 ns/op
Iteration   3: 47.587 ns/op
Iteration   4: 47.596 ns/op
Iteration   5: 47.582 ns/op

# Run progress: 39.06% complete, ETA 00:35:47
# Fork: 2 of 2
# Warmup Iteration   1: 68.329 ns/op
# Warmup Iteration   2: 79.029 ns/op
# Warmup Iteration   3: 47.529 ns/op
Iteration   1: 47.502 ns/op
Iteration   2: 47.529 ns/op
Iteration   3: 47.502 ns/op
Iteration   4: 47.612 ns/op
Iteration   5: 47.604 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.556 ±(99.9%) 0.067 ns/op [Average]
  (min, avg, max) = (47.502, 47.556, 47.612), stdev = 0.045
  CI (99.9%): [47.489, 47.624] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 39.10% complete, ETA 00:35:46
# Fork: 1 of 2
# Warmup Iteration   1: 174.143 ns/op
# Warmup Iteration   2: 190.858 ns/op
# Warmup Iteration   3: 98.523 ns/op
Iteration   1: 98.583 ns/op
Iteration   2: 98.558 ns/op
Iteration   3: 98.579 ns/op
Iteration   4: 105.179 ns/op
Iteration   5: 105.136 ns/op

# Run progress: 39.13% complete, ETA 00:35:45
# Fork: 2 of 2
# Warmup Iteration   1: 179.774 ns/op
# Warmup Iteration   2: 178.689 ns/op
# Warmup Iteration   3: 98.529 ns/op
Iteration   1: 98.588 ns/op
Iteration   2: 98.599 ns/op
Iteration   3: 98.589 ns/op
Iteration   4: 105.152 ns/op
Iteration   5: 105.175 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.214 ±(99.9%) 5.135 ns/op [Average]
  (min, avg, max) = (98.558, 101.214, 105.179), stdev = 3.397
  CI (99.9%): [96.079, 106.350] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 39.17% complete, ETA 00:35:43
# Fork: 1 of 2
# Warmup Iteration   1: 19.077 ns/op
# Warmup Iteration   2: 21.494 ns/op
# Warmup Iteration   3: 13.724 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.891 ns/op

# Run progress: 39.20% complete, ETA 00:35:42
# Fork: 2 of 2
# Warmup Iteration   1: 20.177 ns/op
# Warmup Iteration   2: 22.239 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 16.107 ns/op
Iteration   5: 16.109 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.227 ±(99.9%) 1.503 ns/op [Average]
  (min, avg, max) = (13.710, 14.227, 16.109), stdev = 0.994
  CI (99.9%): [12.724, 15.730] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 39.24% complete, ETA 00:35:41
# Fork: 1 of 2
# Warmup Iteration   1: 768.976 ns/op
# Warmup Iteration   2: 231.026 ns/op
# Warmup Iteration   3: 160.216 ns/op
Iteration   1: 159.042 ns/op
Iteration   2: 157.682 ns/op
Iteration   3: 158.259 ns/op
Iteration   4: 159.000 ns/op
Iteration   5: 159.346 ns/op

# Run progress: 39.27% complete, ETA 00:35:40
# Fork: 2 of 2
# Warmup Iteration   1: 1153.573 ns/op
# Warmup Iteration   2: 236.645 ns/op
# Warmup Iteration   3: 156.920 ns/op
Iteration   1: 157.031 ns/op
Iteration   2: 157.107 ns/op
Iteration   3: 156.989 ns/op
Iteration   4: 156.841 ns/op
Iteration   5: 157.054 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  157.835 ±(99.9%) 1.494 ns/op [Average]
  (min, avg, max) = (156.841, 157.835, 159.346), stdev = 0.988
  CI (99.9%): [156.341, 159.329] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 39.31% complete, ETA 00:35:38
# Fork: 1 of 2
# Warmup Iteration   1: 187.963 ns/op
# Warmup Iteration   2: 165.268 ns/op
# Warmup Iteration   3: 116.483 ns/op
Iteration   1: 116.398 ns/op
Iteration   2: 115.767 ns/op
Iteration   3: 115.165 ns/op
Iteration   4: 114.910 ns/op
Iteration   5: 115.228 ns/op

# Run progress: 39.34% complete, ETA 00:35:37
# Fork: 2 of 2
# Warmup Iteration   1: 186.029 ns/op
# Warmup Iteration   2: 168.891 ns/op
# Warmup Iteration   3: 117.733 ns/op
Iteration   1: 117.235 ns/op
Iteration   2: 117.065 ns/op
Iteration   3: 117.137 ns/op
Iteration   4: 117.060 ns/op
Iteration   5: 116.732 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.270 ±(99.9%) 1.387 ns/op [Average]
  (min, avg, max) = (114.910, 116.270, 117.235), stdev = 0.918
  CI (99.9%): [114.882, 117.657] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 39.38% complete, ETA 00:35:36
# Fork: 1 of 2
# Warmup Iteration   1: 643.598 ns/op
# Warmup Iteration   2: 224.157 ns/op
# Warmup Iteration   3: 147.132 ns/op
Iteration   1: 147.642 ns/op
Iteration   2: 147.332 ns/op
Iteration   3: 147.360 ns/op
Iteration   4: 146.404 ns/op
Iteration   5: 146.707 ns/op

# Run progress: 39.41% complete, ETA 00:35:35
# Fork: 2 of 2
# Warmup Iteration   1: 588.585 ns/op
# Warmup Iteration   2: 205.259 ns/op
# Warmup Iteration   3: 147.090 ns/op
Iteration   1: 147.141 ns/op
Iteration   2: 148.209 ns/op
Iteration   3: 147.056 ns/op
Iteration   4: 146.605 ns/op
Iteration   5: 147.474 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  147.193 ±(99.9%) 0.810 ns/op [Average]
  (min, avg, max) = (146.404, 147.193, 148.209), stdev = 0.536
  CI (99.9%): [146.383, 148.003] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 39.44% complete, ETA 00:35:34
# Fork: 1 of 2
# Warmup Iteration   1: 135.782 ns/op
# Warmup Iteration   2: 123.571 ns/op
# Warmup Iteration   3: 79.244 ns/op
Iteration   1: 79.258 ns/op
Iteration   2: 79.343 ns/op
Iteration   3: 79.239 ns/op
Iteration   4: 79.270 ns/op
Iteration   5: 79.262 ns/op

# Run progress: 39.48% complete, ETA 00:35:32
# Fork: 2 of 2
# Warmup Iteration   1: 119.086 ns/op
# Warmup Iteration   2: 119.872 ns/op
# Warmup Iteration   3: 79.253 ns/op
Iteration   1: 79.285 ns/op
Iteration   2: 79.256 ns/op
Iteration   3: 79.233 ns/op
Iteration   4: 79.233 ns/op
Iteration   5: 79.269 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  79.265 ±(99.9%) 0.049 ns/op [Average]
  (min, avg, max) = (79.233, 79.265, 79.343), stdev = 0.032
  CI (99.9%): [79.216, 79.314] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 39.51% complete, ETA 00:35:31
# Fork: 1 of 2
# Warmup Iteration   1: 559.347 ns/op
# Warmup Iteration   2: 344.390 ns/op
# Warmup Iteration   3: 212.535 ns/op
Iteration   1: 212.502 ns/op
Iteration   2: 212.702 ns/op
Iteration   3: 212.564 ns/op
Iteration   4: 215.828 ns/op
Iteration   5: 215.817 ns/op

# Run progress: 39.55% complete, ETA 00:35:30
# Fork: 2 of 2
# Warmup Iteration   1: 594.753 ns/op
# Warmup Iteration   2: 370.188 ns/op
# Warmup Iteration   3: 220.313 ns/op
Iteration   1: 221.284 ns/op
Iteration   2: 220.463 ns/op
Iteration   3: 220.618 ns/op
Iteration   4: 224.386 ns/op
Iteration   5: 224.941 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  218.110 ±(99.9%) 7.300 ns/op [Average]
  (min, avg, max) = (212.502, 218.110, 224.941), stdev = 4.829
  CI (99.9%): [210.810, 225.411] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 39.58% complete, ETA 00:35:29
# Fork: 1 of 2
# Warmup Iteration   1: 18.965 ns/op
# Warmup Iteration   2: 22.142 ns/op
# Warmup Iteration   3: 13.730 ns/op
Iteration   1: 13.735 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.904 ns/op
Iteration   5: 13.895 ns/op

# Run progress: 39.62% complete, ETA 00:35:27
# Fork: 2 of 2
# Warmup Iteration   1: 19.688 ns/op
# Warmup Iteration   2: 24.741 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.719 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.877 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.788 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (13.709, 13.788, 13.904), stdev = 0.088
  CI (99.9%): [13.656, 13.921] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 39.65% complete, ETA 00:35:26
# Fork: 1 of 2
# Warmup Iteration   1: 868.794 ns/op
# Warmup Iteration   2: 449.499 ns/op
# Warmup Iteration   3: 311.340 ns/op
Iteration   1: 311.589 ns/op
Iteration   2: 311.330 ns/op
Iteration   3: 311.582 ns/op
Iteration   4: 311.215 ns/op
Iteration   5: 311.040 ns/op

# Run progress: 39.69% complete, ETA 00:35:25
# Fork: 2 of 2
# Warmup Iteration   1: 815.996 ns/op
# Warmup Iteration   2: 469.033 ns/op
# Warmup Iteration   3: 310.808 ns/op
Iteration   1: 310.664 ns/op
Iteration   2: 310.641 ns/op
Iteration   3: 310.723 ns/op
Iteration   4: 310.697 ns/op
Iteration   5: 310.625 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  311.011 ±(99.9%) 0.595 ns/op [Average]
  (min, avg, max) = (310.625, 311.011, 311.589), stdev = 0.393
  CI (99.9%): [310.416, 311.605] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 39.72% complete, ETA 00:35:24
# Fork: 1 of 2
# Warmup Iteration   1: 618.017 ns/op
# Warmup Iteration   2: 568.198 ns/op
# Warmup Iteration   3: 427.745 ns/op
Iteration   1: 428.538 ns/op
Iteration   2: 428.037 ns/op
Iteration   3: 427.905 ns/op
Iteration   4: 427.796 ns/op
Iteration   5: 428.218 ns/op

# Run progress: 39.76% complete, ETA 00:35:22
# Fork: 2 of 2
# Warmup Iteration   1: 621.906 ns/op
# Warmup Iteration   2: 569.115 ns/op
# Warmup Iteration   3: 425.044 ns/op
Iteration   1: 425.596 ns/op
Iteration   2: 425.377 ns/op
Iteration   3: 425.405 ns/op
Iteration   4: 425.846 ns/op
Iteration   5: 425.681 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.840 ±(99.9%) 2.037 ns/op [Average]
  (min, avg, max) = (425.377, 426.840, 428.538), stdev = 1.348
  CI (99.9%): [424.803, 428.877] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 39.79% complete, ETA 00:35:21
# Fork: 1 of 2
# Warmup Iteration   1: 7889.158 ns/op
# Warmup Iteration   2: 599.379 ns/op
# Warmup Iteration   3: 425.680 ns/op
Iteration   1: 425.808 ns/op
Iteration   2: 422.828 ns/op
Iteration   3: 427.349 ns/op
Iteration   4: 413.448 ns/op
Iteration   5: 420.794 ns/op

# Run progress: 39.83% complete, ETA 00:35:20
# Fork: 2 of 2
# Warmup Iteration   1: 7727.321 ns/op
# Warmup Iteration   2: 628.929 ns/op
# Warmup Iteration   3: 406.422 ns/op
Iteration   1: 422.712 ns/op
Iteration   2: 400.899 ns/op
Iteration   3: 401.136 ns/op
Iteration   4: 421.109 ns/op
Iteration   5: 401.230 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  415.731 ±(99.9%) 16.241 ns/op [Average]
  (min, avg, max) = (400.899, 415.731, 427.349), stdev = 10.743
  CI (99.9%): [399.490, 431.973] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 39.86% complete, ETA 00:35:19
# Fork: 1 of 2
# Warmup Iteration   1: 736.934 ns/op
# Warmup Iteration   2: 433.092 ns/op
# Warmup Iteration   3: 323.862 ns/op
Iteration   1: 319.486 ns/op
Iteration   2: 322.217 ns/op
Iteration   3: 322.756 ns/op
Iteration   4: 325.292 ns/op
Iteration   5: 324.142 ns/op

# Run progress: 39.90% complete, ETA 00:35:18
# Fork: 2 of 2
# Warmup Iteration   1: 502.472 ns/op
# Warmup Iteration   2: 428.369 ns/op
# Warmup Iteration   3: 318.185 ns/op
Iteration   1: 318.230 ns/op
Iteration   2: 319.050 ns/op
Iteration   3: 318.591 ns/op
Iteration   4: 319.260 ns/op
Iteration   5: 317.850 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  320.687 ±(99.9%) 4.044 ns/op [Average]
  (min, avg, max) = (317.850, 320.687, 325.292), stdev = 2.675
  CI (99.9%): [316.643, 324.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 39.93% complete, ETA 00:35:16
# Fork: 1 of 2
# Warmup Iteration   1: 4217.134 ns/op
# Warmup Iteration   2: 2351.816 ns/op
# Warmup Iteration   3: 1632.677 ns/op
Iteration   1: 1633.544 ns/op
Iteration   2: 1634.782 ns/op
Iteration   3: 1633.994 ns/op
Iteration   4: 1633.189 ns/op
Iteration   5: 1634.358 ns/op

# Run progress: 39.97% complete, ETA 00:35:15
# Fork: 2 of 2
# Warmup Iteration   1: 3768.537 ns/op
# Warmup Iteration   2: 2197.699 ns/op
# Warmup Iteration   3: 1627.789 ns/op
Iteration   1: 1629.324 ns/op
Iteration   2: 1631.119 ns/op
Iteration   3: 1628.813 ns/op
Iteration   4: 1628.683 ns/op
Iteration   5: 1631.521 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1631.933 ±(99.9%) 3.576 ns/op [Average]
  (min, avg, max) = (1628.683, 1631.933, 1634.782), stdev = 2.365
  CI (99.9%): [1628.357, 1635.509] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 40.00% complete, ETA 00:35:14
# Fork: 1 of 2
# Warmup Iteration   1: 19.386 ns/op
# Warmup Iteration   2: 23.500 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.874 ns/op

# Run progress: 40.03% complete, ETA 00:35:13
# Fork: 2 of 2
# Warmup Iteration   1: 18.279 ns/op
# Warmup Iteration   2: 24.890 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.708 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 15.251 ns/op
Iteration   5: 15.248 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.052 ±(99.9%) 0.959 ns/op [Average]
  (min, avg, max) = (13.708, 14.052, 15.251), stdev = 0.634
  CI (99.9%): [13.093, 15.012] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 40.07% complete, ETA 00:35:11
# Fork: 1 of 2
# Warmup Iteration   1: 527.315 ns/op
# Warmup Iteration   2: 297.614 ns/op
# Warmup Iteration   3: 204.428 ns/op
Iteration   1: 204.277 ns/op
Iteration   2: 204.043 ns/op
Iteration   3: 204.350 ns/op
Iteration   4: 204.052 ns/op
Iteration   5: 203.773 ns/op

# Run progress: 40.10% complete, ETA 00:35:10
# Fork: 2 of 2
# Warmup Iteration   1: 464.052 ns/op
# Warmup Iteration   2: 290.973 ns/op
# Warmup Iteration   3: 205.543 ns/op
Iteration   1: 205.881 ns/op
Iteration   2: 205.727 ns/op
Iteration   3: 205.378 ns/op
Iteration   4: 205.100 ns/op
Iteration   5: 205.105 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  204.769 ±(99.9%) 1.149 ns/op [Average]
  (min, avg, max) = (203.773, 204.769, 205.881), stdev = 0.760
  CI (99.9%): [203.620, 205.917] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 40.14% complete, ETA 00:35:09
# Fork: 1 of 2
# Warmup Iteration   1: 905.686 ns/op
# Warmup Iteration   2: 803.187 ns/op
# Warmup Iteration   3: 604.268 ns/op
Iteration   1: 607.039 ns/op
Iteration   2: 608.148 ns/op
Iteration   3: 604.342 ns/op
Iteration   4: 604.583 ns/op
Iteration   5: 609.238 ns/op

# Run progress: 40.17% complete, ETA 00:35:08
# Fork: 2 of 2
# Warmup Iteration   1: 895.115 ns/op
# Warmup Iteration   2: 919.743 ns/op
# Warmup Iteration   3: 604.331 ns/op
Iteration   1: 604.294 ns/op
Iteration   2: 604.328 ns/op
Iteration   3: 604.207 ns/op
Iteration   4: 604.655 ns/op
Iteration   5: 604.566 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  605.540 ±(99.9%) 2.833 ns/op [Average]
  (min, avg, max) = (604.207, 605.540, 609.238), stdev = 1.874
  CI (99.9%): [602.707, 608.373] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 40.21% complete, ETA 00:35:06
# Fork: 1 of 2
# Warmup Iteration   1: 538.007 ns/op
# Warmup Iteration   2: 236.086 ns/op
# Warmup Iteration   3: 168.324 ns/op
Iteration   1: 168.476 ns/op
Iteration   2: 168.481 ns/op
Iteration   3: 168.515 ns/op
Iteration   4: 168.285 ns/op
Iteration   5: 168.308 ns/op

# Run progress: 40.24% complete, ETA 00:35:05
# Fork: 2 of 2
# Warmup Iteration   1: 676.678 ns/op
# Warmup Iteration   2: 231.482 ns/op
# Warmup Iteration   3: 170.478 ns/op
Iteration   1: 170.576 ns/op
Iteration   2: 170.598 ns/op
Iteration   3: 170.591 ns/op
Iteration   4: 170.590 ns/op
Iteration   5: 170.730 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  169.515 ±(99.9%) 1.761 ns/op [Average]
  (min, avg, max) = (168.285, 169.515, 170.730), stdev = 1.165
  CI (99.9%): [167.754, 171.276] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 40.28% complete, ETA 00:35:04
# Fork: 1 of 2
# Warmup Iteration   1: 661.827 ns/op
# Warmup Iteration   2: 606.656 ns/op
# Warmup Iteration   3: 434.106 ns/op
Iteration   1: 434.371 ns/op
Iteration   2: 434.081 ns/op
Iteration   3: 434.052 ns/op
Iteration   4: 434.150 ns/op
Iteration   5: 433.970 ns/op

# Run progress: 40.31% complete, ETA 00:35:03
# Fork: 2 of 2
# Warmup Iteration   1: 631.113 ns/op
# Warmup Iteration   2: 584.203 ns/op
# Warmup Iteration   3: 434.000 ns/op
Iteration   1: 434.335 ns/op
Iteration   2: 434.081 ns/op
Iteration   3: 434.196 ns/op
Iteration   4: 434.037 ns/op
Iteration   5: 434.186 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  434.146 ±(99.9%) 0.196 ns/op [Average]
  (min, avg, max) = (433.970, 434.146, 434.371), stdev = 0.129
  CI (99.9%): [433.950, 434.341] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 40.35% complete, ETA 00:35:02
# Fork: 1 of 2
# Warmup Iteration   1: 286.069 ns/op
# Warmup Iteration   2: 219.724 ns/op
# Warmup Iteration   3: 139.600 ns/op
Iteration   1: 139.544 ns/op
Iteration   2: 139.553 ns/op
Iteration   3: 139.547 ns/op
Iteration   4: 145.758 ns/op
Iteration   5: 145.828 ns/op

# Run progress: 40.38% complete, ETA 00:35:00
# Fork: 2 of 2
# Warmup Iteration   1: 283.620 ns/op
# Warmup Iteration   2: 254.341 ns/op
# Warmup Iteration   3: 139.495 ns/op
Iteration   1: 139.558 ns/op
Iteration   2: 139.662 ns/op
Iteration   3: 139.574 ns/op
Iteration   4: 145.804 ns/op
Iteration   5: 145.787 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  142.062 ±(99.9%) 4.857 ns/op [Average]
  (min, avg, max) = (139.544, 142.062, 145.828), stdev = 3.213
  CI (99.9%): [137.204, 146.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 40.42% complete, ETA 00:34:59
# Fork: 1 of 2
# Warmup Iteration   1: 18.785 ns/op
# Warmup Iteration   2: 21.496 ns/op
# Warmup Iteration   3: 13.704 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.721 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.891 ns/op
Iteration   5: 13.890 ns/op

# Run progress: 40.45% complete, ETA 00:34:58
# Fork: 2 of 2
# Warmup Iteration   1: 20.243 ns/op
# Warmup Iteration   2: 25.452 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.726 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.718 ns/op
Iteration   4: 13.887 ns/op
Iteration   5: 13.875 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.712, 13.785, 13.891), stdev = 0.087
  CI (99.9%): [13.653, 13.916] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 40.49% complete, ETA 00:34:57
# Fork: 1 of 2
# Warmup Iteration   1: 1758.545 ns/op
# Warmup Iteration   2: 610.176 ns/op
# Warmup Iteration   3: 419.522 ns/op
Iteration   1: 422.441 ns/op
Iteration   2: 422.774 ns/op
Iteration   3: 420.884 ns/op
Iteration   4: 420.872 ns/op
Iteration   5: 421.587 ns/op

# Run progress: 40.52% complete, ETA 00:34:55
# Fork: 2 of 2
# Warmup Iteration   1: 1473.711 ns/op
# Warmup Iteration   2: 574.195 ns/op
# Warmup Iteration   3: 395.590 ns/op
Iteration   1: 393.218 ns/op
Iteration   2: 395.624 ns/op
Iteration   3: 395.424 ns/op
Iteration   4: 394.442 ns/op
Iteration   5: 398.944 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.621 ±(99.9%) 20.991 ns/op [Average]
  (min, avg, max) = (393.218, 408.621, 422.774), stdev = 13.884
  CI (99.9%): [387.630, 429.612] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 40.56% complete, ETA 00:34:54
# Fork: 1 of 2
# Warmup Iteration   1: 764.276 ns/op
# Warmup Iteration   2: 575.255 ns/op
# Warmup Iteration   3: 434.968 ns/op
Iteration   1: 430.731 ns/op
Iteration   2: 436.965 ns/op
Iteration   3: 435.674 ns/op
Iteration   4: 437.815 ns/op
Iteration   5: 434.933 ns/op

# Run progress: 40.59% complete, ETA 00:34:53
# Fork: 2 of 2
# Warmup Iteration   1: 638.767 ns/op
# Warmup Iteration   2: 575.676 ns/op
# Warmup Iteration   3: 437.126 ns/op
Iteration   1: 433.736 ns/op
Iteration   2: 436.519 ns/op
Iteration   3: 438.422 ns/op
Iteration   4: 434.823 ns/op
Iteration   5: 433.172 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  435.279 ±(99.9%) 3.516 ns/op [Average]
  (min, avg, max) = (430.731, 435.279, 438.422), stdev = 2.326
  CI (99.9%): [431.763, 438.795] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 40.63% complete, ETA 00:34:52
# Fork: 1 of 2
# Warmup Iteration   1: 16916.080 ns/op
# Warmup Iteration   2: 572.320 ns/op
# Warmup Iteration   3: 451.753 ns/op
Iteration   1: 413.019 ns/op
Iteration   2: 412.459 ns/op
Iteration   3: 412.277 ns/op
Iteration   4: 414.703 ns/op
Iteration   5: 413.608 ns/op

# Run progress: 40.66% complete, ETA 00:34:51
# Fork: 2 of 2
# Warmup Iteration   1: 16710.791 ns/op
# Warmup Iteration   2: 627.936 ns/op
# Warmup Iteration   3: 461.165 ns/op
Iteration   1: 417.917 ns/op
Iteration   2: 418.253 ns/op
Iteration   3: 417.841 ns/op
Iteration   4: 418.226 ns/op
Iteration   5: 417.809 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  415.611 ±(99.9%) 3.953 ns/op [Average]
  (min, avg, max) = (412.277, 415.611, 418.253), stdev = 2.615
  CI (99.9%): [411.658, 419.565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 40.69% complete, ETA 00:34:49
# Fork: 1 of 2
# Warmup Iteration   1: 565.584 ns/op
# Warmup Iteration   2: 495.607 ns/op
# Warmup Iteration   3: 348.003 ns/op
Iteration   1: 347.253 ns/op
Iteration   2: 347.471 ns/op
Iteration   3: 348.789 ns/op
Iteration   4: 348.381 ns/op
Iteration   5: 347.117 ns/op

# Run progress: 40.73% complete, ETA 00:34:48
# Fork: 2 of 2
# Warmup Iteration   1: 632.912 ns/op
# Warmup Iteration   2: 478.271 ns/op
# Warmup Iteration   3: 348.019 ns/op
Iteration   1: 349.582 ns/op
Iteration   2: 349.629 ns/op
Iteration   3: 353.172 ns/op
Iteration   4: 350.522 ns/op
Iteration   5: 350.478 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  349.239 ±(99.9%) 2.825 ns/op [Average]
  (min, avg, max) = (347.117, 349.239, 353.172), stdev = 1.869
  CI (99.9%): [346.414, 352.065] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 40.76% complete, ETA 00:34:47
# Fork: 1 of 2
# Warmup Iteration   1: 3389.086 ns/op
# Warmup Iteration   2: 2204.369 ns/op
# Warmup Iteration   3: 1643.046 ns/op
Iteration   1: 1643.260 ns/op
Iteration   2: 1641.005 ns/op
Iteration   3: 1642.815 ns/op
Iteration   4: 1641.615 ns/op
Iteration   5: 1646.234 ns/op

# Run progress: 40.80% complete, ETA 00:34:46
# Fork: 2 of 2
# Warmup Iteration   1: 3236.011 ns/op
# Warmup Iteration   2: 2364.862 ns/op
# Warmup Iteration   3: 1644.096 ns/op
Iteration   1: 1644.312 ns/op
Iteration   2: 1648.619 ns/op
Iteration   3: 1645.200 ns/op
Iteration   4: 1643.302 ns/op
Iteration   5: 1649.373 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1644.573 ±(99.9%) 4.233 ns/op [Average]
  (min, avg, max) = (1641.005, 1644.573, 1649.373), stdev = 2.800
  CI (99.9%): [1640.341, 1648.806] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 40.83% complete, ETA 00:34:44
# Fork: 1 of 2
# Warmup Iteration   1: 19.036 ns/op
# Warmup Iteration   2: 24.552 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.710 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.882 ns/op

# Run progress: 40.87% complete, ETA 00:34:43
# Fork: 2 of 2
# Warmup Iteration   1: 22.426 ns/op
# Warmup Iteration   2: 28.269 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.724 ns/op
Iteration   2: 13.727 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (13.710, 13.784, 13.892), stdev = 0.087
  CI (99.9%): [13.652, 13.915] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 40.90% complete, ETA 00:34:42
# Fork: 1 of 2
# Warmup Iteration   1: 525.626 ns/op
# Warmup Iteration   2: 292.225 ns/op
# Warmup Iteration   3: 207.127 ns/op
Iteration   1: 207.094 ns/op
Iteration   2: 206.707 ns/op
Iteration   3: 207.071 ns/op
Iteration   4: 207.874 ns/op
Iteration   5: 208.392 ns/op

# Run progress: 40.94% complete, ETA 00:34:41
# Fork: 2 of 2
# Warmup Iteration   1: 515.559 ns/op
# Warmup Iteration   2: 299.051 ns/op
# Warmup Iteration   3: 205.167 ns/op
Iteration   1: 205.047 ns/op
Iteration   2: 204.937 ns/op
Iteration   3: 204.938 ns/op
Iteration   4: 204.600 ns/op
Iteration   5: 205.148 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  206.181 ±(99.9%) 2.115 ns/op [Average]
  (min, avg, max) = (204.600, 206.181, 208.392), stdev = 1.399
  CI (99.9%): [204.066, 208.295] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 40.97% complete, ETA 00:34:39
# Fork: 1 of 2
# Warmup Iteration   1: 859.981 ns/op
# Warmup Iteration   2: 807.799 ns/op
# Warmup Iteration   3: 604.288 ns/op
Iteration   1: 604.417 ns/op
Iteration   2: 604.423 ns/op
Iteration   3: 604.215 ns/op
Iteration   4: 604.656 ns/op
Iteration   5: 604.624 ns/op

# Run progress: 41.01% complete, ETA 00:34:38
# Fork: 2 of 2
# Warmup Iteration   1: 895.434 ns/op
# Warmup Iteration   2: 788.259 ns/op
# Warmup Iteration   3: 604.066 ns/op
Iteration   1: 604.392 ns/op
Iteration   2: 604.246 ns/op
Iteration   3: 604.365 ns/op
Iteration   4: 604.732 ns/op
Iteration   5: 604.664 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  604.474 ±(99.9%) 0.277 ns/op [Average]
  (min, avg, max) = (604.215, 604.474, 604.732), stdev = 0.183
  CI (99.9%): [604.197, 604.751] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 41.04% complete, ETA 00:34:37
# Fork: 1 of 2
# Warmup Iteration   1: 582.534 ns/op
# Warmup Iteration   2: 232.372 ns/op
# Warmup Iteration   3: 158.625 ns/op
Iteration   1: 158.582 ns/op
Iteration   2: 158.614 ns/op
Iteration   3: 158.694 ns/op
Iteration   4: 158.696 ns/op
Iteration   5: 158.718 ns/op

# Run progress: 41.08% complete, ETA 00:34:36
# Fork: 2 of 2
# Warmup Iteration   1: 602.333 ns/op
# Warmup Iteration   2: 219.819 ns/op
# Warmup Iteration   3: 158.469 ns/op
Iteration   1: 158.552 ns/op
Iteration   2: 158.482 ns/op
Iteration   3: 158.506 ns/op
Iteration   4: 158.544 ns/op
Iteration   5: 158.573 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  158.596 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (158.482, 158.596, 158.718), stdev = 0.082
  CI (99.9%): [158.472, 158.721] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 41.11% complete, ETA 00:34:35
# Fork: 1 of 2
# Warmup Iteration   1: 630.661 ns/op
# Warmup Iteration   2: 568.971 ns/op
# Warmup Iteration   3: 433.964 ns/op
Iteration   1: 434.348 ns/op
Iteration   2: 434.167 ns/op
Iteration   3: 434.210 ns/op
Iteration   4: 434.176 ns/op
Iteration   5: 433.898 ns/op

# Run progress: 41.15% complete, ETA 00:34:33
# Fork: 2 of 2
# Warmup Iteration   1: 617.980 ns/op
# Warmup Iteration   2: 582.877 ns/op
# Warmup Iteration   3: 433.957 ns/op
Iteration   1: 434.027 ns/op
Iteration   2: 434.078 ns/op
Iteration   3: 434.225 ns/op
Iteration   4: 436.235 ns/op
Iteration   5: 436.644 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  434.601 ±(99.9%) 1.483 ns/op [Average]
  (min, avg, max) = (433.898, 434.601, 436.644), stdev = 0.981
  CI (99.9%): [433.117, 436.084] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 41.18% complete, ETA 00:34:32
# Fork: 1 of 2
# Warmup Iteration   1: 254.325 ns/op
# Warmup Iteration   2: 244.627 ns/op
# Warmup Iteration   3: 138.817 ns/op
Iteration   1: 138.794 ns/op
Iteration   2: 138.816 ns/op
Iteration   3: 138.779 ns/op
Iteration   4: 145.084 ns/op
Iteration   5: 145.288 ns/op

# Run progress: 41.22% complete, ETA 00:34:31
# Fork: 2 of 2
# Warmup Iteration   1: 278.740 ns/op
# Warmup Iteration   2: 234.527 ns/op
# Warmup Iteration   3: 139.576 ns/op
Iteration   1: 139.655 ns/op
Iteration   2: 139.576 ns/op
Iteration   3: 139.633 ns/op
Iteration   4: 145.833 ns/op
Iteration   5: 145.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.730 ±(99.9%) 4.959 ns/op [Average]
  (min, avg, max) = (138.779, 141.730, 145.842), stdev = 3.280
  CI (99.9%): [136.771, 146.689] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 41.25% complete, ETA 00:34:30
# Fork: 1 of 2
# Warmup Iteration   1: 18.740 ns/op
# Warmup Iteration   2: 25.112 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.715 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.886 ns/op

# Run progress: 41.28% complete, ETA 00:34:28
# Fork: 2 of 2
# Warmup Iteration   1: 20.181 ns/op
# Warmup Iteration   2: 21.674 ns/op
# Warmup Iteration   3: 13.724 ns/op
Iteration   1: 13.733 ns/op
Iteration   2: 13.745 ns/op
Iteration   3: 13.706 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.869 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (13.706, 13.783, 13.886), stdev = 0.082
  CI (99.9%): [13.659, 13.907] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 41.32% complete, ETA 00:34:27
# Fork: 1 of 2
# Warmup Iteration   1: 695.050 ns/op
# Warmup Iteration   2: 341.479 ns/op
# Warmup Iteration   3: 230.225 ns/op
Iteration   1: 230.306 ns/op
Iteration   2: 230.300 ns/op
Iteration   3: 230.720 ns/op
Iteration   4: 230.039 ns/op
Iteration   5: 230.151 ns/op

# Run progress: 41.35% complete, ETA 00:34:26
# Fork: 2 of 2
# Warmup Iteration   1: 694.286 ns/op
# Warmup Iteration   2: 341.042 ns/op
# Warmup Iteration   3: 231.484 ns/op
Iteration   1: 230.395 ns/op
Iteration   2: 230.528 ns/op
Iteration   3: 230.435 ns/op
Iteration   4: 230.333 ns/op
Iteration   5: 230.253 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  230.346 ±(99.9%) 0.288 ns/op [Average]
  (min, avg, max) = (230.039, 230.346, 230.720), stdev = 0.191
  CI (99.9%): [230.058, 230.635] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 41.39% complete, ETA 00:34:25
# Fork: 1 of 2
# Warmup Iteration   1: 1080.624 ns/op
# Warmup Iteration   2: 1027.268 ns/op
# Warmup Iteration   3: 678.144 ns/op
Iteration   1: 676.863 ns/op
Iteration   2: 676.933 ns/op
Iteration   3: 678.477 ns/op
Iteration   4: 679.692 ns/op
Iteration   5: 678.153 ns/op

# Run progress: 41.42% complete, ETA 00:34:23
# Fork: 2 of 2
# Warmup Iteration   1: 978.944 ns/op
# Warmup Iteration   2: 910.267 ns/op
# Warmup Iteration   3: 679.323 ns/op
Iteration   1: 677.132 ns/op
Iteration   2: 678.076 ns/op
Iteration   3: 678.408 ns/op
Iteration   4: 677.284 ns/op
Iteration   5: 679.184 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  678.020 ±(99.9%) 1.459 ns/op [Average]
  (min, avg, max) = (676.863, 678.020, 679.692), stdev = 0.965
  CI (99.9%): [676.561, 679.479] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 41.46% complete, ETA 00:34:22
# Fork: 1 of 2
# Warmup Iteration   1: 10974.202 ns/op
# Warmup Iteration   2: 363.258 ns/op
# Warmup Iteration   3: 237.312 ns/op
Iteration   1: 237.341 ns/op
Iteration   2: 237.324 ns/op
Iteration   3: 237.475 ns/op
Iteration   4: 237.466 ns/op
Iteration   5: 237.211 ns/op

# Run progress: 41.49% complete, ETA 00:34:21
# Fork: 2 of 2
# Warmup Iteration   1: 14543.060 ns/op
# Warmup Iteration   2: 338.333 ns/op
# Warmup Iteration   3: 265.547 ns/op
Iteration   1: 238.407 ns/op
Iteration   2: 238.252 ns/op
Iteration   3: 237.665 ns/op
Iteration   4: 238.027 ns/op
Iteration   5: 238.362 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.753 ±(99.9%) 0.701 ns/op [Average]
  (min, avg, max) = (237.211, 237.753, 238.407), stdev = 0.464
  CI (99.9%): [237.052, 238.454] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 41.53% complete, ETA 00:34:20
# Fork: 1 of 2
# Warmup Iteration   1: 614.924 ns/op
# Warmup Iteration   2: 521.597 ns/op
# Warmup Iteration   3: 387.251 ns/op
Iteration   1: 387.428 ns/op
Iteration   2: 387.569 ns/op
Iteration   3: 387.411 ns/op
Iteration   4: 387.591 ns/op
Iteration   5: 387.500 ns/op

# Run progress: 41.56% complete, ETA 00:34:19
# Fork: 2 of 2
# Warmup Iteration   1: 604.222 ns/op
# Warmup Iteration   2: 515.291 ns/op
# Warmup Iteration   3: 387.372 ns/op
Iteration   1: 388.538 ns/op
Iteration   2: 387.581 ns/op
Iteration   3: 388.730 ns/op
Iteration   4: 388.740 ns/op
Iteration   5: 390.275 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  388.136 ±(99.9%) 1.409 ns/op [Average]
  (min, avg, max) = (387.411, 388.136, 390.275), stdev = 0.932
  CI (99.9%): [386.728, 389.545] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 41.60% complete, ETA 00:34:17
# Fork: 1 of 2
# Warmup Iteration   1: 577.089 ns/op
# Warmup Iteration   2: 382.841 ns/op
# Warmup Iteration   3: 252.802 ns/op
Iteration   1: 252.067 ns/op
Iteration   2: 251.847 ns/op
Iteration   3: 254.354 ns/op
Iteration   4: 256.125 ns/op
Iteration   5: 256.470 ns/op

# Run progress: 41.63% complete, ETA 00:34:16
# Fork: 2 of 2
# Warmup Iteration   1: 563.945 ns/op
# Warmup Iteration   2: 402.544 ns/op
# Warmup Iteration   3: 252.975 ns/op
Iteration   1: 251.967 ns/op
Iteration   2: 252.312 ns/op
Iteration   3: 252.106 ns/op
Iteration   4: 256.370 ns/op
Iteration   5: 255.259 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  253.888 ±(99.9%) 3.055 ns/op [Average]
  (min, avg, max) = (251.847, 253.888, 256.470), stdev = 2.021
  CI (99.9%): [250.832, 256.943] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 41.67% complete, ETA 00:34:15
# Fork: 1 of 2
# Warmup Iteration   1: 20.792 ns/op
# Warmup Iteration   2: 23.133 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.725 ns/op
Iteration   2: 13.711 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.876 ns/op

# Run progress: 41.70% complete, ETA 00:34:14
# Fork: 2 of 2
# Warmup Iteration   1: 20.488 ns/op
# Warmup Iteration   2: 24.906 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.726 ns/op
Iteration   2: 13.721 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.884 ns/op
Iteration   5: 13.881 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (13.710, 13.783, 13.890), stdev = 0.086
  CI (99.9%): [13.654, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 41.74% complete, ETA 00:34:12
# Fork: 1 of 2
# Warmup Iteration   1: 631.009 ns/op
# Warmup Iteration   2: 412.059 ns/op
# Warmup Iteration   3: 278.245 ns/op
Iteration   1: 278.454 ns/op
Iteration   2: 278.449 ns/op
Iteration   3: 278.641 ns/op
Iteration   4: 278.452 ns/op
Iteration   5: 278.457 ns/op

# Run progress: 41.77% complete, ETA 00:34:11
# Fork: 2 of 2
# Warmup Iteration   1: 620.618 ns/op
# Warmup Iteration   2: 406.899 ns/op
# Warmup Iteration   3: 279.876 ns/op
Iteration   1: 280.104 ns/op
Iteration   2: 280.118 ns/op
Iteration   3: 280.360 ns/op
Iteration   4: 279.873 ns/op
Iteration   5: 280.067 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  279.297 ±(99.9%) 1.301 ns/op [Average]
  (min, avg, max) = (278.449, 279.297, 280.360), stdev = 0.860
  CI (99.9%): [277.997, 280.598] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 41.81% complete, ETA 00:34:10
# Fork: 1 of 2
# Warmup Iteration   1: 655.489 ns/op
# Warmup Iteration   2: 612.226 ns/op
# Warmup Iteration   3: 411.472 ns/op
Iteration   1: 411.767 ns/op
Iteration   2: 411.576 ns/op
Iteration   3: 411.531 ns/op
Iteration   4: 411.466 ns/op
Iteration   5: 411.772 ns/op

# Run progress: 41.84% complete, ETA 00:34:09
# Fork: 2 of 2
# Warmup Iteration   1: 595.256 ns/op
# Warmup Iteration   2: 574.716 ns/op
# Warmup Iteration   3: 413.196 ns/op
Iteration   1: 413.452 ns/op
Iteration   2: 413.624 ns/op
Iteration   3: 413.375 ns/op
Iteration   4: 414.301 ns/op
Iteration   5: 414.362 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  412.722 ±(99.9%) 1.823 ns/op [Average]
  (min, avg, max) = (411.466, 412.722, 414.362), stdev = 1.206
  CI (99.9%): [410.900, 414.545] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 41.88% complete, ETA 00:34:08
# Fork: 1 of 2
# Warmup Iteration   1: 7595.547 ns/op
# Warmup Iteration   2: 608.155 ns/op
# Warmup Iteration   3: 426.220 ns/op
Iteration   1: 426.275 ns/op
Iteration   2: 426.467 ns/op
Iteration   3: 426.000 ns/op
Iteration   4: 426.906 ns/op
Iteration   5: 427.032 ns/op

# Run progress: 41.91% complete, ETA 00:34:06
# Fork: 2 of 2
# Warmup Iteration   1: 4557.731 ns/op
# Warmup Iteration   2: 553.468 ns/op
# Warmup Iteration   3: 431.852 ns/op
Iteration   1: 436.541 ns/op
Iteration   2: 436.291 ns/op
Iteration   3: 436.249 ns/op
Iteration   4: 429.474 ns/op
Iteration   5: 436.313 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  430.755 ±(99.9%) 7.417 ns/op [Average]
  (min, avg, max) = (426.000, 430.755, 436.541), stdev = 4.906
  CI (99.9%): [423.338, 438.172] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 41.94% complete, ETA 00:34:05
# Fork: 1 of 2
# Warmup Iteration   1: 729.786 ns/op
# Warmup Iteration   2: 509.386 ns/op
# Warmup Iteration   3: 337.535 ns/op
Iteration   1: 339.319 ns/op
Iteration   2: 339.374 ns/op
Iteration   3: 338.360 ns/op
Iteration   4: 338.040 ns/op
Iteration   5: 338.367 ns/op

# Run progress: 41.98% complete, ETA 00:34:04
# Fork: 2 of 2
# Warmup Iteration   1: 536.400 ns/op
# Warmup Iteration   2: 519.075 ns/op
# Warmup Iteration   3: 338.826 ns/op
Iteration   1: 338.539 ns/op
Iteration   2: 337.765 ns/op
Iteration   3: 338.759 ns/op
Iteration   4: 338.946 ns/op
Iteration   5: 338.735 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.621 ±(99.9%) 0.781 ns/op [Average]
  (min, avg, max) = (337.765, 338.621, 339.374), stdev = 0.516
  CI (99.9%): [337.840, 339.401] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 42.01% complete, ETA 00:34:03
# Fork: 1 of 2
# Warmup Iteration   1: 3370.982 ns/op
# Warmup Iteration   2: 2165.988 ns/op
# Warmup Iteration   3: 1550.782 ns/op
Iteration   1: 1551.764 ns/op
Iteration   2: 1551.265 ns/op
Iteration   3: 1550.069 ns/op
Iteration   4: 1551.919 ns/op
Iteration   5: 1552.541 ns/op

# Run progress: 42.05% complete, ETA 00:34:01
# Fork: 2 of 2
# Warmup Iteration   1: 3114.689 ns/op
# Warmup Iteration   2: 2240.416 ns/op
# Warmup Iteration   3: 1565.952 ns/op
Iteration   1: 1550.997 ns/op
Iteration   2: 1550.897 ns/op
Iteration   3: 1550.970 ns/op
Iteration   4: 1573.169 ns/op
Iteration   5: 1551.504 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1553.510 ±(99.9%) 10.492 ns/op [Average]
  (min, avg, max) = (1550.069, 1553.510, 1573.169), stdev = 6.940
  CI (99.9%): [1543.017, 1564.002] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 42.08% complete, ETA 00:34:00
# Fork: 1 of 2
# Warmup Iteration   1: 18.471 ns/op
# Warmup Iteration   2: 24.593 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.726 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.726 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.872 ns/op

# Run progress: 42.12% complete, ETA 00:33:59
# Fork: 2 of 2
# Warmup Iteration   1: 19.663 ns/op
# Warmup Iteration   2: 23.878 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.723 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.882 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (13.714, 13.785, 13.886), stdev = 0.083
  CI (99.9%): [13.659, 13.910] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 42.15% complete, ETA 00:33:58
# Fork: 1 of 2
# Warmup Iteration   1: 394.496 ns/op
# Warmup Iteration   2: 270.222 ns/op
# Warmup Iteration   3: 178.944 ns/op
Iteration   1: 179.264 ns/op
Iteration   2: 179.031 ns/op
Iteration   3: 179.042 ns/op
Iteration   4: 178.946 ns/op
Iteration   5: 179.015 ns/op

# Run progress: 42.19% complete, ETA 00:33:56
# Fork: 2 of 2
# Warmup Iteration   1: 417.827 ns/op
# Warmup Iteration   2: 263.371 ns/op
# Warmup Iteration   3: 178.852 ns/op
Iteration   1: 178.907 ns/op
Iteration   2: 178.918 ns/op
Iteration   3: 178.895 ns/op
Iteration   4: 178.776 ns/op
Iteration   5: 178.846 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  178.964 ±(99.9%) 0.203 ns/op [Average]
  (min, avg, max) = (178.776, 178.964, 179.264), stdev = 0.135
  CI (99.9%): [178.761, 179.167] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 42.22% complete, ETA 00:33:55
# Fork: 1 of 2
# Warmup Iteration   1: 342.013 ns/op
# Warmup Iteration   2: 321.315 ns/op
# Warmup Iteration   3: 233.489 ns/op
Iteration   1: 233.778 ns/op
Iteration   2: 233.678 ns/op
Iteration   3: 233.725 ns/op
Iteration   4: 233.787 ns/op
Iteration   5: 233.712 ns/op

# Run progress: 42.26% complete, ETA 00:33:54
# Fork: 2 of 2
# Warmup Iteration   1: 358.080 ns/op
# Warmup Iteration   2: 314.480 ns/op
# Warmup Iteration   3: 233.570 ns/op
Iteration   1: 233.743 ns/op
Iteration   2: 233.811 ns/op
Iteration   3: 233.826 ns/op
Iteration   4: 233.734 ns/op
Iteration   5: 233.765 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.756 ±(99.9%) 0.070 ns/op [Average]
  (min, avg, max) = (233.678, 233.756, 233.826), stdev = 0.046
  CI (99.9%): [233.686, 233.826] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 42.29% complete, ETA 00:33:53
# Fork: 1 of 2
# Warmup Iteration   1: 983.696 ns/op
# Warmup Iteration   2: 379.336 ns/op
# Warmup Iteration   3: 280.575 ns/op
Iteration   1: 280.670 ns/op
Iteration   2: 280.855 ns/op
Iteration   3: 280.651 ns/op
Iteration   4: 280.979 ns/op
Iteration   5: 280.950 ns/op

# Run progress: 42.33% complete, ETA 00:33:51
# Fork: 2 of 2
# Warmup Iteration   1: 1529.689 ns/op
# Warmup Iteration   2: 375.326 ns/op
# Warmup Iteration   3: 280.389 ns/op
Iteration   1: 280.349 ns/op
Iteration   2: 280.464 ns/op
Iteration   3: 280.509 ns/op
Iteration   4: 280.707 ns/op
Iteration   5: 280.747 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  280.688 ±(99.9%) 0.312 ns/op [Average]
  (min, avg, max) = (280.349, 280.688, 280.979), stdev = 0.207
  CI (99.9%): [280.376, 281.001] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 42.36% complete, ETA 00:33:50
# Fork: 1 of 2
# Warmup Iteration   1: 264.203 ns/op
# Warmup Iteration   2: 267.123 ns/op
# Warmup Iteration   3: 174.910 ns/op
Iteration   1: 174.871 ns/op
Iteration   2: 174.870 ns/op
Iteration   3: 174.791 ns/op
Iteration   4: 174.866 ns/op
Iteration   5: 174.958 ns/op

# Run progress: 42.40% complete, ETA 00:33:49
# Fork: 2 of 2
# Warmup Iteration   1: 285.587 ns/op
# Warmup Iteration   2: 238.667 ns/op
# Warmup Iteration   3: 174.774 ns/op
Iteration   1: 174.821 ns/op
Iteration   2: 174.799 ns/op
Iteration   3: 174.912 ns/op
Iteration   4: 174.952 ns/op
Iteration   5: 174.931 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  174.877 ±(99.9%) 0.092 ns/op [Average]
  (min, avg, max) = (174.791, 174.877, 174.958), stdev = 0.061
  CI (99.9%): [174.785, 174.969] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 42.43% complete, ETA 00:33:48
# Fork: 1 of 2
# Warmup Iteration   1: 525.617 ns/op
# Warmup Iteration   2: 364.866 ns/op
# Warmup Iteration   3: 230.201 ns/op
Iteration   1: 226.561 ns/op
Iteration   2: 226.265 ns/op
Iteration   3: 236.240 ns/op
Iteration   4: 227.858 ns/op
Iteration   5: 227.208 ns/op

# Run progress: 42.47% complete, ETA 00:33:47
# Fork: 2 of 2
# Warmup Iteration   1: 512.215 ns/op
# Warmup Iteration   2: 381.234 ns/op
# Warmup Iteration   3: 225.705 ns/op
Iteration   1: 230.504 ns/op
Iteration   2: 225.818 ns/op
Iteration   3: 225.879 ns/op
Iteration   4: 226.312 ns/op
Iteration   5: 226.201 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  227.885 ±(99.9%) 4.915 ns/op [Average]
  (min, avg, max) = (225.818, 227.885, 236.240), stdev = 3.251
  CI (99.9%): [222.970, 232.799] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 42.50% complete, ETA 00:33:45
# Fork: 1 of 2
# Warmup Iteration   1: 19.581 ns/op
# Warmup Iteration   2: 21.725 ns/op
# Warmup Iteration   3: 13.720 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.723 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.885 ns/op

# Run progress: 42.53% complete, ETA 00:33:44
# Fork: 2 of 2
# Warmup Iteration   1: 20.346 ns/op
# Warmup Iteration   2: 24.911 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.709 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.876 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.709, 13.782, 13.885), stdev = 0.086
  CI (99.9%): [13.652, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 42.57% complete, ETA 00:33:43
# Fork: 1 of 2
# Warmup Iteration   1: 1388.596 ns/op
# Warmup Iteration   2: 467.358 ns/op
# Warmup Iteration   3: 344.076 ns/op
Iteration   1: 343.038 ns/op
Iteration   2: 342.116 ns/op
Iteration   3: 343.725 ns/op
Iteration   4: 342.002 ns/op
Iteration   5: 343.489 ns/op

# Run progress: 42.60% complete, ETA 00:33:42
# Fork: 2 of 2
# Warmup Iteration   1: 1209.811 ns/op
# Warmup Iteration   2: 461.162 ns/op
# Warmup Iteration   3: 345.109 ns/op
Iteration   1: 344.289 ns/op
Iteration   2: 347.093 ns/op
Iteration   3: 346.699 ns/op
Iteration   4: 347.015 ns/op
Iteration   5: 345.499 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  344.497 ±(99.9%) 2.965 ns/op [Average]
  (min, avg, max) = (342.002, 344.497, 347.093), stdev = 1.961
  CI (99.9%): [341.532, 347.461] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 42.64% complete, ETA 00:33:40
# Fork: 1 of 2
# Warmup Iteration   1: 624.001 ns/op
# Warmup Iteration   2: 577.484 ns/op
# Warmup Iteration   3: 440.786 ns/op
Iteration   1: 444.035 ns/op
Iteration   2: 437.667 ns/op
Iteration   3: 443.980 ns/op
Iteration   4: 439.133 ns/op
Iteration   5: 438.122 ns/op

# Run progress: 42.67% complete, ETA 00:33:39
# Fork: 2 of 2
# Warmup Iteration   1: 690.506 ns/op
# Warmup Iteration   2: 609.739 ns/op
# Warmup Iteration   3: 431.670 ns/op
Iteration   1: 435.404 ns/op
Iteration   2: 434.318 ns/op
Iteration   3: 436.416 ns/op
Iteration   4: 432.970 ns/op
Iteration   5: 434.151 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  437.620 ±(99.9%) 5.857 ns/op [Average]
  (min, avg, max) = (432.970, 437.620, 444.035), stdev = 3.874
  CI (99.9%): [431.763, 443.476] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 42.71% complete, ETA 00:33:38
# Fork: 1 of 2
# Warmup Iteration   1: 16946.381 ns/op
# Warmup Iteration   2: 572.995 ns/op
# Warmup Iteration   3: 450.989 ns/op
Iteration   1: 403.711 ns/op
Iteration   2: 405.718 ns/op
Iteration   3: 405.497 ns/op
Iteration   4: 404.189 ns/op
Iteration   5: 403.641 ns/op

# Run progress: 42.74% complete, ETA 00:33:37
# Fork: 2 of 2
# Warmup Iteration   1: 13142.144 ns/op
# Warmup Iteration   2: 624.792 ns/op
# Warmup Iteration   3: 449.733 ns/op
Iteration   1: 410.026 ns/op
Iteration   2: 408.922 ns/op
Iteration   3: 411.817 ns/op
Iteration   4: 410.509 ns/op
Iteration   5: 412.451 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  407.648 ±(99.9%) 5.232 ns/op [Average]
  (min, avg, max) = (403.641, 407.648, 412.451), stdev = 3.461
  CI (99.9%): [402.416, 412.880] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 42.78% complete, ETA 00:33:36
# Fork: 1 of 2
# Warmup Iteration   1: 800.792 ns/op
# Warmup Iteration   2: 454.296 ns/op
# Warmup Iteration   3: 335.654 ns/op
Iteration   1: 335.773 ns/op
Iteration   2: 336.318 ns/op
Iteration   3: 334.974 ns/op
Iteration   4: 334.643 ns/op
Iteration   5: 333.647 ns/op

# Run progress: 42.81% complete, ETA 00:33:34
# Fork: 2 of 2
# Warmup Iteration   1: 669.076 ns/op
# Warmup Iteration   2: 503.815 ns/op
# Warmup Iteration   3: 330.745 ns/op
Iteration   1: 329.898 ns/op
Iteration   2: 330.210 ns/op
Iteration   3: 329.625 ns/op
Iteration   4: 330.821 ns/op
Iteration   5: 329.705 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  332.561 ±(99.9%) 4.162 ns/op [Average]
  (min, avg, max) = (329.625, 332.561, 336.318), stdev = 2.753
  CI (99.9%): [328.400, 336.723] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 42.85% complete, ETA 00:33:33
# Fork: 1 of 2
# Warmup Iteration   1: 3245.886 ns/op
# Warmup Iteration   2: 2388.674 ns/op
# Warmup Iteration   3: 1651.901 ns/op
Iteration   1: 1649.143 ns/op
Iteration   2: 1645.481 ns/op
Iteration   3: 1651.658 ns/op
Iteration   4: 1649.024 ns/op
Iteration   5: 1652.467 ns/op

# Run progress: 42.88% complete, ETA 00:33:32
# Fork: 2 of 2
# Warmup Iteration   1: 3252.970 ns/op
# Warmup Iteration   2: 2369.570 ns/op
# Warmup Iteration   3: 1643.869 ns/op
Iteration   1: 1646.391 ns/op
Iteration   2: 1652.926 ns/op
Iteration   3: 1655.981 ns/op
Iteration   4: 1644.425 ns/op
Iteration   5: 1646.427 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1649.392 ±(99.9%) 5.712 ns/op [Average]
  (min, avg, max) = (1644.425, 1649.392, 1655.981), stdev = 3.778
  CI (99.9%): [1643.681, 1655.104] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 42.92% complete, ETA 00:33:31
# Fork: 1 of 2
# Warmup Iteration   1: 19.599 ns/op
# Warmup Iteration   2: 21.051 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.720 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.877 ns/op

# Run progress: 42.95% complete, ETA 00:33:29
# Fork: 2 of 2
# Warmup Iteration   1: 20.586 ns/op
# Warmup Iteration   2: 23.711 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 15.237 ns/op
Iteration   5: 15.231 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.052 ±(99.9%) 0.947 ns/op [Average]
  (min, avg, max) = (13.713, 14.052, 15.237), stdev = 0.626
  CI (99.9%): [13.105, 14.999] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 42.99% complete, ETA 00:33:28
# Fork: 1 of 2
# Warmup Iteration   1: 398.752 ns/op
# Warmup Iteration   2: 278.883 ns/op
# Warmup Iteration   3: 178.613 ns/op
Iteration   1: 178.673 ns/op
Iteration   2: 178.651 ns/op
Iteration   3: 178.655 ns/op
Iteration   4: 178.552 ns/op
Iteration   5: 178.580 ns/op

# Run progress: 43.02% complete, ETA 00:33:27
# Fork: 2 of 2
# Warmup Iteration   1: 409.148 ns/op
# Warmup Iteration   2: 248.886 ns/op
# Warmup Iteration   3: 184.128 ns/op
Iteration   1: 184.170 ns/op
Iteration   2: 184.189 ns/op
Iteration   3: 184.150 ns/op
Iteration   4: 183.855 ns/op
Iteration   5: 183.934 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  181.341 ±(99.9%) 4.336 ns/op [Average]
  (min, avg, max) = (178.552, 181.341, 184.189), stdev = 2.868
  CI (99.9%): [177.005, 185.677] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 43.06% complete, ETA 00:33:26
# Fork: 1 of 2
# Warmup Iteration   1: 342.510 ns/op
# Warmup Iteration   2: 313.326 ns/op
# Warmup Iteration   3: 233.561 ns/op
Iteration   1: 233.591 ns/op
Iteration   2: 233.632 ns/op
Iteration   3: 233.567 ns/op
Iteration   4: 233.648 ns/op
Iteration   5: 233.637 ns/op

# Run progress: 43.09% complete, ETA 00:33:25
# Fork: 2 of 2
# Warmup Iteration   1: 345.770 ns/op
# Warmup Iteration   2: 313.897 ns/op
# Warmup Iteration   3: 233.539 ns/op
Iteration   1: 233.600 ns/op
Iteration   2: 233.583 ns/op
Iteration   3: 233.617 ns/op
Iteration   4: 233.646 ns/op
Iteration   5: 233.710 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.623 ±(99.9%) 0.062 ns/op [Average]
  (min, avg, max) = (233.567, 233.623, 233.710), stdev = 0.041
  CI (99.9%): [233.561, 233.686] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 43.13% complete, ETA 00:33:23
# Fork: 1 of 2
# Warmup Iteration   1: 1147.784 ns/op
# Warmup Iteration   2: 454.174 ns/op
# Warmup Iteration   3: 279.304 ns/op
Iteration   1: 279.382 ns/op
Iteration   2: 279.532 ns/op
Iteration   3: 279.404 ns/op
Iteration   4: 279.275 ns/op
Iteration   5: 279.271 ns/op

# Run progress: 43.16% complete, ETA 00:33:22
# Fork: 2 of 2
# Warmup Iteration   1: 1384.609 ns/op
# Warmup Iteration   2: 375.212 ns/op
# Warmup Iteration   3: 281.628 ns/op
Iteration   1: 281.733 ns/op
Iteration   2: 281.726 ns/op
Iteration   3: 281.839 ns/op
Iteration   4: 281.787 ns/op
Iteration   5: 281.775 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  280.572 ±(99.9%) 1.915 ns/op [Average]
  (min, avg, max) = (279.271, 280.572, 281.839), stdev = 1.267
  CI (99.9%): [278.657, 282.488] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 43.19% complete, ETA 00:33:21
# Fork: 1 of 2
# Warmup Iteration   1: 262.527 ns/op
# Warmup Iteration   2: 282.998 ns/op
# Warmup Iteration   3: 174.840 ns/op
Iteration   1: 174.875 ns/op
Iteration   2: 174.954 ns/op
Iteration   3: 174.992 ns/op
Iteration   4: 174.888 ns/op
Iteration   5: 174.908 ns/op

# Run progress: 43.23% complete, ETA 00:33:20
# Fork: 2 of 2
# Warmup Iteration   1: 261.237 ns/op
# Warmup Iteration   2: 238.729 ns/op
# Warmup Iteration   3: 174.835 ns/op
Iteration   1: 174.919 ns/op
Iteration   2: 174.955 ns/op
Iteration   3: 174.861 ns/op
Iteration   4: 174.843 ns/op
Iteration   5: 174.934 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  174.913 ±(99.9%) 0.071 ns/op [Average]
  (min, avg, max) = (174.843, 174.913, 174.992), stdev = 0.047
  CI (99.9%): [174.842, 174.984] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 43.26% complete, ETA 00:33:18
# Fork: 1 of 2
# Warmup Iteration   1: 523.790 ns/op
# Warmup Iteration   2: 344.325 ns/op
# Warmup Iteration   3: 225.925 ns/op
Iteration   1: 226.011 ns/op
Iteration   2: 226.125 ns/op
Iteration   3: 226.006 ns/op
Iteration   4: 226.989 ns/op
Iteration   5: 226.717 ns/op

# Run progress: 43.30% complete, ETA 00:33:17
# Fork: 2 of 2
# Warmup Iteration   1: 642.492 ns/op
# Warmup Iteration   2: 360.502 ns/op
# Warmup Iteration   3: 225.719 ns/op
Iteration   1: 225.606 ns/op
Iteration   2: 225.579 ns/op
Iteration   3: 225.760 ns/op
Iteration   4: 226.812 ns/op
Iteration   5: 226.191 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  226.180 ±(99.9%) 0.760 ns/op [Average]
  (min, avg, max) = (225.579, 226.180, 226.989), stdev = 0.503
  CI (99.9%): [225.420, 226.939] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 43.33% complete, ETA 00:33:16
# Fork: 1 of 2
# Warmup Iteration   1: 19.168 ns/op
# Warmup Iteration   2: 24.554 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.734 ns/op
Iteration   4: 14.618 ns/op
Iteration   5: 14.617 ns/op

# Run progress: 43.37% complete, ETA 00:33:15
# Fork: 2 of 2
# Warmup Iteration   1: 19.037 ns/op
# Warmup Iteration   2: 24.569 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.731 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 15.234 ns/op
Iteration   5: 15.233 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.203 ±(99.9%) 0.991 ns/op [Average]
  (min, avg, max) = (13.711, 14.203, 15.234), stdev = 0.655
  CI (99.9%): [13.212, 15.193] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 43.40% complete, ETA 00:33:13
# Fork: 1 of 2
# Warmup Iteration   1: 736.829 ns/op
# Warmup Iteration   2: 317.988 ns/op
# Warmup Iteration   3: 217.382 ns/op
Iteration   1: 216.979 ns/op
Iteration   2: 216.706 ns/op
Iteration   3: 217.421 ns/op
Iteration   4: 216.409 ns/op
Iteration   5: 216.955 ns/op

# Run progress: 43.44% complete, ETA 00:33:12
# Fork: 2 of 2
# Warmup Iteration   1: 758.480 ns/op
# Warmup Iteration   2: 323.953 ns/op
# Warmup Iteration   3: 218.049 ns/op
Iteration   1: 219.027 ns/op
Iteration   2: 217.795 ns/op
Iteration   3: 219.622 ns/op
Iteration   4: 220.033 ns/op
Iteration   5: 218.929 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  217.988 ±(99.9%) 1.977 ns/op [Average]
  (min, avg, max) = (216.409, 217.988, 220.033), stdev = 1.308
  CI (99.9%): [216.011, 219.965] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 43.47% complete, ETA 00:33:11
# Fork: 1 of 2
# Warmup Iteration   1: 399.532 ns/op
# Warmup Iteration   2: 369.613 ns/op
# Warmup Iteration   3: 274.813 ns/op
Iteration   1: 274.682 ns/op
Iteration   2: 276.126 ns/op
Iteration   3: 274.429 ns/op
Iteration   4: 275.307 ns/op
Iteration   5: 274.700 ns/op

# Run progress: 43.51% complete, ETA 00:33:10
# Fork: 2 of 2
# Warmup Iteration   1: 397.578 ns/op
# Warmup Iteration   2: 368.531 ns/op
# Warmup Iteration   3: 274.042 ns/op
Iteration   1: 274.492 ns/op
Iteration   2: 274.891 ns/op
Iteration   3: 274.565 ns/op
Iteration   4: 274.955 ns/op
Iteration   5: 275.251 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  274.940 ±(99.9%) 0.775 ns/op [Average]
  (min, avg, max) = (274.429, 274.940, 276.126), stdev = 0.513
  CI (99.9%): [274.164, 275.715] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 43.54% complete, ETA 00:33:09
# Fork: 1 of 2
# Warmup Iteration   1: 8023.841 ns/op
# Warmup Iteration   2: 460.166 ns/op
# Warmup Iteration   3: 302.938 ns/op
Iteration   1: 304.147 ns/op
Iteration   2: 304.168 ns/op
Iteration   3: 302.945 ns/op
Iteration   4: 304.305 ns/op
Iteration   5: 304.485 ns/op

# Run progress: 43.58% complete, ETA 00:33:07
# Fork: 2 of 2
# Warmup Iteration   1: 4615.344 ns/op
# Warmup Iteration   2: 426.119 ns/op
# Warmup Iteration   3: 302.953 ns/op
Iteration   1: 302.677 ns/op
Iteration   2: 302.918 ns/op
Iteration   3: 302.864 ns/op
Iteration   4: 303.229 ns/op
Iteration   5: 302.384 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.412 ±(99.9%) 1.177 ns/op [Average]
  (min, avg, max) = (302.384, 303.412, 304.485), stdev = 0.778
  CI (99.9%): [302.235, 304.589] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 43.61% complete, ETA 00:33:06
# Fork: 1 of 2
# Warmup Iteration   1: 395.569 ns/op
# Warmup Iteration   2: 282.224 ns/op
# Warmup Iteration   3: 208.302 ns/op
Iteration   1: 208.241 ns/op
Iteration   2: 208.306 ns/op
Iteration   3: 208.231 ns/op
Iteration   4: 208.453 ns/op
Iteration   5: 208.391 ns/op

# Run progress: 43.65% complete, ETA 00:33:05
# Fork: 2 of 2
# Warmup Iteration   1: 332.074 ns/op
# Warmup Iteration   2: 277.815 ns/op
# Warmup Iteration   3: 207.981 ns/op
Iteration   1: 207.956 ns/op
Iteration   2: 207.933 ns/op
Iteration   3: 207.857 ns/op
Iteration   4: 207.661 ns/op
Iteration   5: 207.681 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  208.071 ±(99.9%) 0.438 ns/op [Average]
  (min, avg, max) = (207.661, 208.071, 208.453), stdev = 0.290
  CI (99.9%): [207.633, 208.509] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 43.68% complete, ETA 00:33:04
# Fork: 1 of 2
# Warmup Iteration   1: 989.441 ns/op
# Warmup Iteration   2: 510.309 ns/op
# Warmup Iteration   3: 329.635 ns/op
Iteration   1: 329.735 ns/op
Iteration   2: 331.182 ns/op
Iteration   3: 330.357 ns/op
Iteration   4: 333.841 ns/op
Iteration   5: 333.896 ns/op

# Run progress: 43.72% complete, ETA 00:33:02
# Fork: 2 of 2
# Warmup Iteration   1: 950.084 ns/op
# Warmup Iteration   2: 486.726 ns/op
# Warmup Iteration   3: 329.640 ns/op
Iteration   1: 329.764 ns/op
Iteration   2: 330.041 ns/op
Iteration   3: 330.437 ns/op
Iteration   4: 333.559 ns/op
Iteration   5: 333.540 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  331.635 ±(99.9%) 2.771 ns/op [Average]
  (min, avg, max) = (329.735, 331.635, 333.896), stdev = 1.833
  CI (99.9%): [328.864, 334.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 43.75% complete, ETA 00:33:01
# Fork: 1 of 2
# Warmup Iteration   1: 19.882 ns/op
# Warmup Iteration   2: 21.755 ns/op
# Warmup Iteration   3: 13.712 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.729 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.887 ns/op

# Run progress: 43.78% complete, ETA 00:33:00
# Fork: 2 of 2
# Warmup Iteration   1: 20.401 ns/op
# Warmup Iteration   2: 24.786 ns/op
# Warmup Iteration   3: 13.718 ns/op
Iteration   1: 13.705 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 13.880 ns/op
Iteration   5: 13.881 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (13.705, 13.783, 13.887), stdev = 0.085
  CI (99.9%): [13.654, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 43.82% complete, ETA 00:32:59
# Fork: 1 of 2
# Warmup Iteration   1: 1543.449 ns/op
# Warmup Iteration   2: 370.820 ns/op
# Warmup Iteration   3: 268.470 ns/op
Iteration   1: 268.778 ns/op
Iteration   2: 268.535 ns/op
Iteration   3: 269.311 ns/op
Iteration   4: 268.809 ns/op
Iteration   5: 268.555 ns/op

# Run progress: 43.85% complete, ETA 00:32:57
# Fork: 2 of 2
# Warmup Iteration   1: 992.598 ns/op
# Warmup Iteration   2: 355.276 ns/op
# Warmup Iteration   3: 267.921 ns/op
Iteration   1: 268.203 ns/op
Iteration   2: 267.991 ns/op
Iteration   3: 267.913 ns/op
Iteration   4: 268.055 ns/op
Iteration   5: 268.054 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  268.421 ±(99.9%) 0.687 ns/op [Average]
  (min, avg, max) = (267.913, 268.421, 269.311), stdev = 0.455
  CI (99.9%): [267.733, 269.108] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 43.89% complete, ETA 00:32:56
# Fork: 1 of 2
# Warmup Iteration   1: 572.576 ns/op
# Warmup Iteration   2: 605.768 ns/op
# Warmup Iteration   3: 392.811 ns/op
Iteration   1: 392.992 ns/op
Iteration   2: 392.797 ns/op
Iteration   3: 392.960 ns/op
Iteration   4: 392.703 ns/op
Iteration   5: 392.870 ns/op

# Run progress: 43.92% complete, ETA 00:32:55
# Fork: 2 of 2
# Warmup Iteration   1: 588.825 ns/op
# Warmup Iteration   2: 558.214 ns/op
# Warmup Iteration   3: 392.870 ns/op
Iteration   1: 393.016 ns/op
Iteration   2: 393.072 ns/op
Iteration   3: 392.956 ns/op
Iteration   4: 392.814 ns/op
Iteration   5: 392.783 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  392.896 ±(99.9%) 0.181 ns/op [Average]
  (min, avg, max) = (392.703, 392.896, 393.072), stdev = 0.120
  CI (99.9%): [392.715, 393.077] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 43.96% complete, ETA 00:32:54
# Fork: 1 of 2
# Warmup Iteration   1: 4561.207 ns/op
# Warmup Iteration   2: 401.049 ns/op
# Warmup Iteration   3: 338.768 ns/op
Iteration   1: 338.845 ns/op
Iteration   2: 338.670 ns/op
Iteration   3: 338.835 ns/op
Iteration   4: 338.862 ns/op
Iteration   5: 338.727 ns/op

# Run progress: 43.99% complete, ETA 00:32:53
# Fork: 2 of 2
# Warmup Iteration   1: 4362.562 ns/op
# Warmup Iteration   2: 454.800 ns/op
# Warmup Iteration   3: 337.141 ns/op
Iteration   1: 337.230 ns/op
Iteration   2: 337.259 ns/op
Iteration   3: 337.242 ns/op
Iteration   4: 337.730 ns/op
Iteration   5: 337.725 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.112 ±(99.9%) 1.112 ns/op [Average]
  (min, avg, max) = (337.230, 338.112, 338.862), stdev = 0.736
  CI (99.9%): [337.000, 339.225] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 44.03% complete, ETA 00:32:51
# Fork: 1 of 2
# Warmup Iteration   1: 730.405 ns/op
# Warmup Iteration   2: 431.304 ns/op
# Warmup Iteration   3: 313.845 ns/op
Iteration   1: 314.128 ns/op
Iteration   2: 314.113 ns/op
Iteration   3: 314.017 ns/op
Iteration   4: 313.779 ns/op
Iteration   5: 314.205 ns/op

# Run progress: 44.06% complete, ETA 00:32:50
# Fork: 2 of 2
# Warmup Iteration   1: 516.282 ns/op
# Warmup Iteration   2: 454.094 ns/op
# Warmup Iteration   3: 321.924 ns/op
Iteration   1: 322.087 ns/op
Iteration   2: 321.923 ns/op
Iteration   3: 321.990 ns/op
Iteration   4: 321.679 ns/op
Iteration   5: 321.687 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  317.961 ±(99.9%) 6.240 ns/op [Average]
  (min, avg, max) = (313.779, 317.961, 322.087), stdev = 4.127
  CI (99.9%): [311.721, 324.201] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 44.10% complete, ETA 00:32:49
# Fork: 1 of 2
# Warmup Iteration   1: 3450.807 ns/op
# Warmup Iteration   2: 2126.521 ns/op
# Warmup Iteration   3: 1542.854 ns/op
Iteration   1: 1543.642 ns/op
Iteration   2: 1544.435 ns/op
Iteration   3: 1543.231 ns/op
Iteration   4: 1546.642 ns/op
Iteration   5: 1546.876 ns/op

# Run progress: 44.13% complete, ETA 00:32:48
# Fork: 2 of 2
# Warmup Iteration   1: 3514.559 ns/op
# Warmup Iteration   2: 2301.130 ns/op
# Warmup Iteration   3: 1550.318 ns/op
Iteration   1: 1549.180 ns/op
Iteration   2: 1552.659 ns/op
Iteration   3: 1550.098 ns/op
Iteration   4: 1573.446 ns/op
Iteration   5: 1553.711 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1550.392 ±(99.9%) 13.409 ns/op [Average]
  (min, avg, max) = (1543.231, 1550.392, 1573.446), stdev = 8.869
  CI (99.9%): [1536.983, 1563.801] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 44.17% complete, ETA 00:32:46
# Fork: 1 of 2
# Warmup Iteration   1: 19.259 ns/op
# Warmup Iteration   2: 24.588 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.728 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 15.226 ns/op
Iteration   5: 15.224 ns/op

# Run progress: 44.20% complete, ETA 00:32:45
# Fork: 2 of 2
# Warmup Iteration   1: 20.384 ns/op
# Warmup Iteration   2: 24.938 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.890 ns/op
Iteration   5: 13.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.052 ±(99.9%) 0.941 ns/op [Average]
  (min, avg, max) = (13.711, 14.052, 15.226), stdev = 0.622
  CI (99.9%): [13.111, 14.993] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 44.24% complete, ETA 00:32:44
# Fork: 1 of 2
# Warmup Iteration   1: 447.557 ns/op
# Warmup Iteration   2: 194.039 ns/op
# Warmup Iteration   3: 138.697 ns/op
Iteration   1: 138.768 ns/op
Iteration   2: 138.718 ns/op
Iteration   3: 138.715 ns/op
Iteration   4: 138.471 ns/op
Iteration   5: 138.515 ns/op

# Run progress: 44.27% complete, ETA 00:32:43
# Fork: 2 of 2
# Warmup Iteration   1: 419.727 ns/op
# Warmup Iteration   2: 195.798 ns/op
# Warmup Iteration   3: 138.751 ns/op
Iteration   1: 138.795 ns/op
Iteration   2: 138.824 ns/op
Iteration   3: 138.789 ns/op
Iteration   4: 139.445 ns/op
Iteration   5: 139.392 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.843 ±(99.9%) 0.492 ns/op [Average]
  (min, avg, max) = (138.471, 138.843, 139.445), stdev = 0.325
  CI (99.9%): [138.351, 139.335] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 44.31% complete, ETA 00:32:41
# Fork: 1 of 2
# Warmup Iteration   1: 363.868 ns/op
# Warmup Iteration   2: 331.250 ns/op
# Warmup Iteration   3: 246.963 ns/op
Iteration   1: 247.479 ns/op
Iteration   2: 247.113 ns/op
Iteration   3: 247.016 ns/op
Iteration   4: 247.097 ns/op
Iteration   5: 247.106 ns/op

# Run progress: 44.34% complete, ETA 00:32:40
# Fork: 2 of 2
# Warmup Iteration   1: 368.757 ns/op
# Warmup Iteration   2: 337.328 ns/op
# Warmup Iteration   3: 249.634 ns/op
Iteration   1: 249.727 ns/op
Iteration   2: 249.672 ns/op
Iteration   3: 249.649 ns/op
Iteration   4: 249.713 ns/op
Iteration   5: 249.410 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  248.398 ±(99.9%) 1.983 ns/op [Average]
  (min, avg, max) = (247.016, 248.398, 249.727), stdev = 1.311
  CI (99.9%): [246.416, 250.381] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 44.38% complete, ETA 00:32:39
# Fork: 1 of 2
# Warmup Iteration   1: 553.840 ns/op
# Warmup Iteration   2: 260.280 ns/op
# Warmup Iteration   3: 195.518 ns/op
Iteration   1: 195.777 ns/op
Iteration   2: 195.683 ns/op
Iteration   3: 195.563 ns/op
Iteration   4: 196.221 ns/op
Iteration   5: 196.277 ns/op

# Run progress: 44.41% complete, ETA 00:32:38
# Fork: 2 of 2
# Warmup Iteration   1: 599.864 ns/op
# Warmup Iteration   2: 266.085 ns/op
# Warmup Iteration   3: 195.697 ns/op
Iteration   1: 195.748 ns/op
Iteration   2: 195.666 ns/op
Iteration   3: 195.719 ns/op
Iteration   4: 196.668 ns/op
Iteration   5: 196.682 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  196.000 ±(99.9%) 0.644 ns/op [Average]
  (min, avg, max) = (195.563, 196.000, 196.682), stdev = 0.426
  CI (99.9%): [195.357, 196.644] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 44.44% complete, ETA 00:32:37
# Fork: 1 of 2
# Warmup Iteration   1: 239.818 ns/op
# Warmup Iteration   2: 220.898 ns/op
# Warmup Iteration   3: 162.584 ns/op
Iteration   1: 162.575 ns/op
Iteration   2: 162.544 ns/op
Iteration   3: 162.631 ns/op
Iteration   4: 162.402 ns/op
Iteration   5: 162.398 ns/op

# Run progress: 44.48% complete, ETA 00:32:35
# Fork: 2 of 2
# Warmup Iteration   1: 259.747 ns/op
# Warmup Iteration   2: 235.974 ns/op
# Warmup Iteration   3: 162.580 ns/op
Iteration   1: 162.546 ns/op
Iteration   2: 162.619 ns/op
Iteration   3: 162.604 ns/op
Iteration   4: 162.801 ns/op
Iteration   5: 162.793 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.591 ±(99.9%) 0.205 ns/op [Average]
  (min, avg, max) = (162.398, 162.591, 162.801), stdev = 0.135
  CI (99.9%): [162.386, 162.796] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 44.51% complete, ETA 00:32:34
# Fork: 1 of 2
# Warmup Iteration   1: 556.685 ns/op
# Warmup Iteration   2: 376.312 ns/op
# Warmup Iteration   3: 234.713 ns/op
Iteration   1: 234.805 ns/op
Iteration   2: 234.607 ns/op
Iteration   3: 234.760 ns/op
Iteration   4: 236.945 ns/op
Iteration   5: 236.927 ns/op

# Run progress: 44.55% complete, ETA 00:32:33
# Fork: 2 of 2
# Warmup Iteration   1: 523.921 ns/op
# Warmup Iteration   2: 381.465 ns/op
# Warmup Iteration   3: 235.098 ns/op
Iteration   1: 235.110 ns/op
Iteration   2: 235.160 ns/op
Iteration   3: 235.176 ns/op
Iteration   4: 237.731 ns/op
Iteration   5: 237.733 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  235.895 ±(99.9%) 1.934 ns/op [Average]
  (min, avg, max) = (234.607, 235.895, 237.733), stdev = 1.279
  CI (99.9%): [233.962, 237.829] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 44.58% complete, ETA 00:32:32
# Fork: 1 of 2
# Warmup Iteration   1: 20.180 ns/op
# Warmup Iteration   2: 23.546 ns/op
# Warmup Iteration   3: 13.715 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.711 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.902 ns/op

# Run progress: 44.62% complete, ETA 00:32:30
# Fork: 2 of 2
# Warmup Iteration   1: 18.939 ns/op
# Warmup Iteration   2: 24.616 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.714 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (13.711, 13.783, 13.902), stdev = 0.090
  CI (99.9%): [13.647, 13.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 44.65% complete, ETA 00:32:29
# Fork: 1 of 2
# Warmup Iteration   1: 4405.871 ns/op
# Warmup Iteration   2: 503.353 ns/op
# Warmup Iteration   3: 346.903 ns/op
Iteration   1: 347.982 ns/op
Iteration   2: 348.360 ns/op
Iteration   3: 349.271 ns/op
Iteration   4: 346.927 ns/op
Iteration   5: 349.392 ns/op

# Run progress: 44.69% complete, ETA 00:32:28
# Fork: 2 of 2
# Warmup Iteration   1: 3531.259 ns/op
# Warmup Iteration   2: 507.703 ns/op
# Warmup Iteration   3: 347.346 ns/op
Iteration   1: 346.644 ns/op
Iteration   2: 350.106 ns/op
Iteration   3: 349.885 ns/op
Iteration   4: 344.872 ns/op
Iteration   5: 347.333 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  348.077 ±(99.9%) 2.511 ns/op [Average]
  (min, avg, max) = (344.872, 348.077, 350.106), stdev = 1.661
  CI (99.9%): [345.566, 350.588] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 44.72% complete, ETA 00:32:27
# Fork: 1 of 2
# Warmup Iteration   1: 647.414 ns/op
# Warmup Iteration   2: 630.437 ns/op
# Warmup Iteration   3: 448.535 ns/op
Iteration   1: 447.542 ns/op
Iteration   2: 449.360 ns/op
Iteration   3: 448.869 ns/op
Iteration   4: 449.046 ns/op
Iteration   5: 449.819 ns/op

# Run progress: 44.76% complete, ETA 00:32:26
# Fork: 2 of 2
# Warmup Iteration   1: 653.004 ns/op
# Warmup Iteration   2: 593.360 ns/op
# Warmup Iteration   3: 444.568 ns/op
Iteration   1: 450.597 ns/op
Iteration   2: 443.508 ns/op
Iteration   3: 446.566 ns/op
Iteration   4: 444.293 ns/op
Iteration   5: 446.602 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  447.620 ±(99.9%) 3.580 ns/op [Average]
  (min, avg, max) = (443.508, 447.620, 450.597), stdev = 2.368
  CI (99.9%): [444.041, 451.200] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 44.79% complete, ETA 00:32:24
# Fork: 1 of 2
# Warmup Iteration   1: 11161.346 ns/op
# Warmup Iteration   2: 655.677 ns/op
# Warmup Iteration   3: 420.320 ns/op
Iteration   1: 418.054 ns/op
Iteration   2: 418.194 ns/op
Iteration   3: 418.666 ns/op
Iteration   4: 417.784 ns/op
Iteration   5: 417.585 ns/op

# Run progress: 44.83% complete, ETA 00:32:23
# Fork: 2 of 2
# Warmup Iteration   1: 14512.418 ns/op
# Warmup Iteration   2: 544.190 ns/op
# Warmup Iteration   3: 463.348 ns/op
Iteration   1: 426.194 ns/op
Iteration   2: 426.512 ns/op
Iteration   3: 427.643 ns/op
Iteration   4: 427.509 ns/op
Iteration   5: 423.629 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  422.177 ±(99.9%) 6.778 ns/op [Average]
  (min, avg, max) = (417.585, 422.177, 427.643), stdev = 4.483
  CI (99.9%): [415.399, 428.955] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 44.86% complete, ETA 00:32:22
# Fork: 1 of 2
# Warmup Iteration   1: 819.860 ns/op
# Warmup Iteration   2: 456.122 ns/op
# Warmup Iteration   3: 348.256 ns/op
Iteration   1: 348.196 ns/op
Iteration   2: 350.434 ns/op
Iteration   3: 347.033 ns/op
Iteration   4: 346.973 ns/op
Iteration   5: 347.047 ns/op

# Run progress: 44.90% complete, ETA 00:32:21
# Fork: 2 of 2
# Warmup Iteration   1: 655.995 ns/op
# Warmup Iteration   2: 458.338 ns/op
# Warmup Iteration   3: 350.353 ns/op
Iteration   1: 347.817 ns/op
Iteration   2: 350.990 ns/op
Iteration   3: 351.617 ns/op
Iteration   4: 347.980 ns/op
Iteration   5: 350.378 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  348.847 ±(99.9%) 2.733 ns/op [Average]
  (min, avg, max) = (346.973, 348.847, 351.617), stdev = 1.808
  CI (99.9%): [346.114, 351.579] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 44.93% complete, ETA 00:32:19
# Fork: 1 of 2
# Warmup Iteration   1: 3255.550 ns/op
# Warmup Iteration   2: 2392.563 ns/op
# Warmup Iteration   3: 1668.432 ns/op
Iteration   1: 1676.133 ns/op
Iteration   2: 1666.676 ns/op
Iteration   3: 1666.099 ns/op
Iteration   4: 1681.127 ns/op
Iteration   5: 1678.001 ns/op

# Run progress: 44.97% complete, ETA 00:32:18
# Fork: 2 of 2
# Warmup Iteration   1: 3311.762 ns/op
# Warmup Iteration   2: 2267.716 ns/op
# Warmup Iteration   3: 1664.734 ns/op
Iteration   1: 1662.158 ns/op
Iteration   2: 1662.829 ns/op
Iteration   3: 1663.091 ns/op
Iteration   4: 1663.785 ns/op
Iteration   5: 1662.433 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1668.233 ±(99.9%) 11.007 ns/op [Average]
  (min, avg, max) = (1662.158, 1668.233, 1681.127), stdev = 7.280
  CI (99.9%): [1657.226, 1679.240] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 45.00% complete, ETA 00:32:17
# Fork: 1 of 2
# Warmup Iteration   1: 21.632 ns/op
# Warmup Iteration   2: 25.341 ns/op
# Warmup Iteration   3: 13.720 ns/op
Iteration   1: 13.718 ns/op
Iteration   2: 13.731 ns/op
Iteration   3: 13.713 ns/op
Iteration   4: 14.621 ns/op
Iteration   5: 14.615 ns/op

# Run progress: 45.03% complete, ETA 00:32:16
# Fork: 2 of 2
# Warmup Iteration   1: 20.697 ns/op
# Warmup Iteration   2: 23.047 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.876 ns/op
Iteration   5: 13.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.929 ±(99.9%) 0.558 ns/op [Average]
  (min, avg, max) = (13.710, 13.929, 14.621), stdev = 0.369
  CI (99.9%): [13.371, 14.487] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 45.07% complete, ETA 00:32:15
# Fork: 1 of 2
# Warmup Iteration   1: 435.979 ns/op
# Warmup Iteration   2: 203.821 ns/op
# Warmup Iteration   3: 138.777 ns/op
Iteration   1: 138.810 ns/op
Iteration   2: 147.102 ns/op
Iteration   3: 138.725 ns/op
Iteration   4: 146.883 ns/op
Iteration   5: 138.608 ns/op

# Run progress: 45.10% complete, ETA 00:32:13
# Fork: 2 of 2
# Warmup Iteration   1: 454.677 ns/op
# Warmup Iteration   2: 194.183 ns/op
# Warmup Iteration   3: 139.070 ns/op
Iteration   1: 139.095 ns/op
Iteration   2: 139.098 ns/op
Iteration   3: 139.314 ns/op
Iteration   4: 138.897 ns/op
Iteration   5: 139.048 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.558 ±(99.9%) 5.137 ns/op [Average]
  (min, avg, max) = (138.608, 140.558, 147.102), stdev = 3.398
  CI (99.9%): [135.421, 145.695] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 45.14% complete, ETA 00:32:12
# Fork: 1 of 2
# Warmup Iteration   1: 381.489 ns/op
# Warmup Iteration   2: 384.887 ns/op
# Warmup Iteration   3: 250.969 ns/op
Iteration   1: 251.040 ns/op
Iteration   2: 251.683 ns/op
Iteration   3: 250.823 ns/op
Iteration   4: 251.218 ns/op
Iteration   5: 250.942 ns/op

# Run progress: 45.17% complete, ETA 00:32:11
# Fork: 2 of 2
# Warmup Iteration   1: 377.260 ns/op
# Warmup Iteration   2: 356.682 ns/op
# Warmup Iteration   3: 251.582 ns/op
Iteration   1: 251.699 ns/op
Iteration   2: 251.728 ns/op
Iteration   3: 251.503 ns/op
Iteration   4: 251.659 ns/op
Iteration   5: 251.531 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  251.383 ±(99.9%) 0.522 ns/op [Average]
  (min, avg, max) = (250.823, 251.383, 251.728), stdev = 0.345
  CI (99.9%): [250.860, 251.905] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 45.21% complete, ETA 00:32:10
# Fork: 1 of 2
# Warmup Iteration   1: 623.813 ns/op
# Warmup Iteration   2: 285.559 ns/op
# Warmup Iteration   3: 198.252 ns/op
Iteration   1: 198.597 ns/op
Iteration   2: 198.245 ns/op
Iteration   3: 198.264 ns/op
Iteration   4: 198.546 ns/op
Iteration   5: 198.474 ns/op

# Run progress: 45.24% complete, ETA 00:32:08
# Fork: 2 of 2
# Warmup Iteration   1: 634.109 ns/op
# Warmup Iteration   2: 296.285 ns/op
# Warmup Iteration   3: 195.508 ns/op
Iteration   1: 195.504 ns/op
Iteration   2: 195.528 ns/op
Iteration   3: 195.610 ns/op
Iteration   4: 196.206 ns/op
Iteration   5: 196.177 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  197.115 ±(99.9%) 2.124 ns/op [Average]
  (min, avg, max) = (195.504, 197.115, 198.597), stdev = 1.405
  CI (99.9%): [194.991, 199.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 45.28% complete, ETA 00:32:07
# Fork: 1 of 2
# Warmup Iteration   1: 239.795 ns/op
# Warmup Iteration   2: 224.057 ns/op
# Warmup Iteration   3: 162.562 ns/op
Iteration   1: 162.612 ns/op
Iteration   2: 162.609 ns/op
Iteration   3: 162.858 ns/op
Iteration   4: 162.418 ns/op
Iteration   5: 162.440 ns/op

# Run progress: 45.31% complete, ETA 00:32:06
# Fork: 2 of 2
# Warmup Iteration   1: 226.410 ns/op
# Warmup Iteration   2: 211.157 ns/op
# Warmup Iteration   3: 155.806 ns/op
Iteration   1: 155.754 ns/op
Iteration   2: 155.819 ns/op
Iteration   3: 155.822 ns/op
Iteration   4: 156.545 ns/op
Iteration   5: 156.531 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  159.341 ±(99.9%) 5.193 ns/op [Average]
  (min, avg, max) = (155.754, 159.341, 162.858), stdev = 3.435
  CI (99.9%): [154.148, 164.534] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 45.35% complete, ETA 00:32:05
# Fork: 1 of 2
# Warmup Iteration   1: 566.243 ns/op
# Warmup Iteration   2: 362.344 ns/op
# Warmup Iteration   3: 236.104 ns/op
Iteration   1: 236.326 ns/op
Iteration   2: 236.251 ns/op
Iteration   3: 236.104 ns/op
Iteration   4: 238.192 ns/op
Iteration   5: 238.099 ns/op

# Run progress: 45.38% complete, ETA 00:32:04
# Fork: 2 of 2
# Warmup Iteration   1: 548.271 ns/op
# Warmup Iteration   2: 371.369 ns/op
# Warmup Iteration   3: 242.147 ns/op
Iteration   1: 247.195 ns/op
Iteration   2: 241.766 ns/op
Iteration   3: 234.641 ns/op
Iteration   4: 255.677 ns/op
Iteration   5: 236.856 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  240.111 ±(99.9%) 9.936 ns/op [Average]
  (min, avg, max) = (234.641, 240.111, 255.677), stdev = 6.572
  CI (99.9%): [230.175, 250.047] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 45.42% complete, ETA 00:32:02
# Fork: 1 of 2
# Warmup Iteration   1: 19.269 ns/op
# Warmup Iteration   2: 24.635 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.715 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.892 ns/op

# Run progress: 45.45% complete, ETA 00:32:01
# Fork: 2 of 2
# Warmup Iteration   1: 19.773 ns/op
# Warmup Iteration   2: 20.915 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.716 ns/op
Iteration   2: 13.726 ns/op
Iteration   3: 13.733 ns/op
Iteration   4: 13.882 ns/op
Iteration   5: 13.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.785 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.710, 13.785, 13.892), stdev = 0.086
  CI (99.9%): [13.655, 13.915] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 45.49% complete, ETA 00:32:00
# Fork: 1 of 2
# Warmup Iteration   1: 1683.352 ns/op
# Warmup Iteration   2: 320.707 ns/op
# Warmup Iteration   3: 214.960 ns/op
Iteration   1: 215.149 ns/op
Iteration   2: 215.149 ns/op
Iteration   3: 215.119 ns/op
Iteration   4: 215.230 ns/op
Iteration   5: 214.224 ns/op

# Run progress: 45.52% complete, ETA 00:31:59
# Fork: 2 of 2
# Warmup Iteration   1: 1832.498 ns/op
# Warmup Iteration   2: 303.305 ns/op
# Warmup Iteration   3: 214.860 ns/op
Iteration   1: 215.008 ns/op
Iteration   2: 214.960 ns/op
Iteration   3: 214.962 ns/op
Iteration   4: 213.910 ns/op
Iteration   5: 213.994 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  214.770 ±(99.9%) 0.779 ns/op [Average]
  (min, avg, max) = (213.910, 214.770, 215.230), stdev = 0.515
  CI (99.9%): [213.991, 215.549] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 45.56% complete, ETA 00:31:57
# Fork: 1 of 2
# Warmup Iteration   1: 402.450 ns/op
# Warmup Iteration   2: 371.010 ns/op
# Warmup Iteration   3: 275.371 ns/op
Iteration   1: 274.792 ns/op
Iteration   2: 276.033 ns/op
Iteration   3: 274.839 ns/op
Iteration   4: 275.817 ns/op
Iteration   5: 275.220 ns/op

# Run progress: 45.59% complete, ETA 00:31:56
# Fork: 2 of 2
# Warmup Iteration   1: 431.750 ns/op
# Warmup Iteration   2: 369.356 ns/op
# Warmup Iteration   3: 274.581 ns/op
Iteration   1: 274.478 ns/op
Iteration   2: 274.587 ns/op
Iteration   3: 274.439 ns/op
Iteration   4: 275.194 ns/op
Iteration   5: 275.416 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  275.081 ±(99.9%) 0.836 ns/op [Average]
  (min, avg, max) = (274.439, 275.081, 276.033), stdev = 0.553
  CI (99.9%): [274.245, 275.918] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 45.63% complete, ETA 00:31:55
# Fork: 1 of 2
# Warmup Iteration   1: 21504.460 ns/op
# Warmup Iteration   2: 470.624 ns/op
# Warmup Iteration   3: 295.313 ns/op
Iteration   1: 265.115 ns/op
Iteration   2: 263.903 ns/op
Iteration   3: 265.202 ns/op
Iteration   4: 264.094 ns/op
Iteration   5: 264.243 ns/op

# Run progress: 45.66% complete, ETA 00:31:54
# Fork: 2 of 2
# Warmup Iteration   1: 15851.204 ns/op
# Warmup Iteration   2: 410.019 ns/op
# Warmup Iteration   3: 292.998 ns/op
Iteration   1: 268.129 ns/op
Iteration   2: 267.942 ns/op
Iteration   3: 267.143 ns/op
Iteration   4: 267.145 ns/op
Iteration   5: 267.927 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  266.084 ±(99.9%) 2.624 ns/op [Average]
  (min, avg, max) = (263.903, 266.084, 268.129), stdev = 1.735
  CI (99.9%): [263.461, 268.708] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 45.69% complete, ETA 00:31:53
# Fork: 1 of 2
# Warmup Iteration   1: 353.410 ns/op
# Warmup Iteration   2: 269.016 ns/op
# Warmup Iteration   3: 196.152 ns/op
Iteration   1: 196.227 ns/op
Iteration   2: 196.216 ns/op
Iteration   3: 196.210 ns/op
Iteration   4: 196.531 ns/op
Iteration   5: 196.527 ns/op

# Run progress: 45.73% complete, ETA 00:31:51
# Fork: 2 of 2
# Warmup Iteration   1: 371.262 ns/op
# Warmup Iteration   2: 267.379 ns/op
# Warmup Iteration   3: 196.929 ns/op
Iteration   1: 196.982 ns/op
Iteration   2: 196.972 ns/op
Iteration   3: 196.953 ns/op
Iteration   4: 197.180 ns/op
Iteration   5: 197.112 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  196.691 ±(99.9%) 0.591 ns/op [Average]
  (min, avg, max) = (196.210, 196.691, 197.180), stdev = 0.391
  CI (99.9%): [196.100, 197.282] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 45.76% complete, ETA 00:31:50
# Fork: 1 of 2
# Warmup Iteration   1: 950.740 ns/op
# Warmup Iteration   2: 530.575 ns/op
# Warmup Iteration   3: 342.072 ns/op
Iteration   1: 342.297 ns/op
Iteration   2: 343.340 ns/op
Iteration   3: 342.087 ns/op
Iteration   4: 346.021 ns/op
Iteration   5: 345.557 ns/op

# Run progress: 45.80% complete, ETA 00:31:49
# Fork: 2 of 2
# Warmup Iteration   1: 1186.114 ns/op
# Warmup Iteration   2: 530.800 ns/op
# Warmup Iteration   3: 342.512 ns/op
Iteration   1: 341.844 ns/op
Iteration   2: 341.128 ns/op
Iteration   3: 341.295 ns/op
Iteration   4: 345.389 ns/op
Iteration   5: 345.464 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  343.442 ±(99.9%) 2.968 ns/op [Average]
  (min, avg, max) = (341.128, 343.442, 346.021), stdev = 1.963
  CI (99.9%): [340.475, 346.410] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 45.83% complete, ETA 00:31:48
# Fork: 1 of 2
# Warmup Iteration   1: 19.851 ns/op
# Warmup Iteration   2: 23.895 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.721 ns/op
Iteration   2: 18.414 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.904 ns/op
Iteration   5: 13.893 ns/op

# Run progress: 45.87% complete, ETA 00:31:46
# Fork: 2 of 2
# Warmup Iteration   1: 20.162 ns/op
# Warmup Iteration   2: 23.801 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 20.339 ns/op
Iteration   3: 13.724 ns/op
Iteration   4: 13.891 ns/op
Iteration   5: 13.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.920 ±(99.9%) 3.619 ns/op [Average]
  (min, avg, max) = (13.711, 14.920, 20.339), stdev = 2.394
  CI (99.9%): [11.301, 18.539] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 45.90% complete, ETA 00:31:45
# Fork: 1 of 2
# Warmup Iteration   1: 190.027 ns/op
# Warmup Iteration   2: 131.850 ns/op
# Warmup Iteration   3: 95.179 ns/op
Iteration   1: 95.330 ns/op
Iteration   2: 122.542 ns/op
Iteration   3: 95.193 ns/op
Iteration   4: 95.255 ns/op
Iteration   5: 95.262 ns/op

# Run progress: 45.94% complete, ETA 00:31:44
# Fork: 2 of 2
# Warmup Iteration   1: 197.716 ns/op
# Warmup Iteration   2: 138.044 ns/op
# Warmup Iteration   3: 95.223 ns/op
Iteration   1: 95.315 ns/op
Iteration   2: 140.771 ns/op
Iteration   3: 95.313 ns/op
Iteration   4: 95.184 ns/op
Iteration   5: 95.180 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  102.534 ±(99.9%) 24.097 ns/op [Average]
  (min, avg, max) = (95.180, 102.534, 140.771), stdev = 15.939
  CI (99.9%): [78.437, 126.632] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 45.97% complete, ETA 00:31:43
# Fork: 1 of 2
# Warmup Iteration   1: 70.417 ns/op
# Warmup Iteration   2: 69.160 ns/op
# Warmup Iteration   3: 45.129 ns/op
Iteration   1: 45.099 ns/op
Iteration   2: 66.471 ns/op
Iteration   3: 45.178 ns/op
Iteration   4: 45.085 ns/op
Iteration   5: 45.060 ns/op

# Run progress: 46.01% complete, ETA 00:31:42
# Fork: 2 of 2
# Warmup Iteration   1: 70.759 ns/op
# Warmup Iteration   2: 65.716 ns/op
# Warmup Iteration   3: 45.121 ns/op
Iteration   1: 45.136 ns/op
Iteration   2: 66.432 ns/op
Iteration   3: 45.154 ns/op
Iteration   4: 45.066 ns/op
Iteration   5: 45.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  49.375 ±(99.9%) 13.606 ns/op [Average]
  (min, avg, max) = (45.060, 49.375, 66.471), stdev = 9.000
  CI (99.9%): [35.769, 62.982] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 46.04% complete, ETA 00:31:40
# Fork: 1 of 2
# Warmup Iteration   1: 231.764 ns/op
# Warmup Iteration   2: 156.074 ns/op
# Warmup Iteration   3: 112.831 ns/op
Iteration   1: 112.856 ns/op
Iteration   2: 183.783 ns/op
Iteration   3: 112.897 ns/op
Iteration   4: 112.128 ns/op
Iteration   5: 112.173 ns/op

# Run progress: 46.08% complete, ETA 00:31:39
# Fork: 2 of 2
# Warmup Iteration   1: 238.911 ns/op
# Warmup Iteration   2: 178.953 ns/op
# Warmup Iteration   3: 109.877 ns/op
Iteration   1: 109.794 ns/op
Iteration   2: 161.928 ns/op
Iteration   3: 110.138 ns/op
Iteration   4: 109.567 ns/op
Iteration   5: 109.502 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  123.477 ±(99.9%) 40.160 ns/op [Average]
  (min, avg, max) = (109.502, 123.477, 183.783), stdev = 26.563
  CI (99.9%): [83.317, 163.637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 46.11% complete, ETA 00:31:38
# Fork: 1 of 2
# Warmup Iteration   1: 68.660 ns/op
# Warmup Iteration   2: 69.174 ns/op
# Warmup Iteration   3: 47.488 ns/op
Iteration   1: 47.479 ns/op
Iteration   2: 77.675 ns/op
Iteration   3: 47.535 ns/op
Iteration   4: 47.343 ns/op
Iteration   5: 47.494 ns/op

# Run progress: 46.15% complete, ETA 00:31:37
# Fork: 2 of 2
# Warmup Iteration   1: 68.622 ns/op
# Warmup Iteration   2: 68.854 ns/op
# Warmup Iteration   3: 47.519 ns/op
Iteration   1: 47.477 ns/op
Iteration   2: 77.407 ns/op
Iteration   3: 47.463 ns/op
Iteration   4: 47.344 ns/op
Iteration   5: 47.545 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  53.476 ±(99.9%) 19.176 ns/op [Average]
  (min, avg, max) = (47.343, 53.476, 77.675), stdev = 12.684
  CI (99.9%): [34.300, 72.652] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 46.18% complete, ETA 00:31:35
# Fork: 1 of 2
# Warmup Iteration   1: 190.591 ns/op
# Warmup Iteration   2: 190.363 ns/op
# Warmup Iteration   3: 128.446 ns/op
Iteration   1: 128.526 ns/op
Iteration   2: 199.465 ns/op
Iteration   3: 128.454 ns/op
Iteration   4: 132.764 ns/op
Iteration   5: 132.564 ns/op

# Run progress: 46.22% complete, ETA 00:31:34
# Fork: 2 of 2
# Warmup Iteration   1: 201.814 ns/op
# Warmup Iteration   2: 190.916 ns/op
# Warmup Iteration   3: 128.447 ns/op
Iteration   1: 128.441 ns/op
Iteration   2: 222.764 ns/op
Iteration   3: 128.489 ns/op
Iteration   4: 132.892 ns/op
Iteration   5: 132.560 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.692 ±(99.9%) 52.087 ns/op [Average]
  (min, avg, max) = (128.441, 146.692, 222.764), stdev = 34.452
  CI (99.9%): [94.605, 198.779] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 46.25% complete, ETA 00:31:33
# Fork: 1 of 2
# Warmup Iteration   1: 20.053 ns/op
# Warmup Iteration   2: 22.896 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.716 ns/op
Iteration   3: 13.722 ns/op
Iteration   4: 13.899 ns/op
Iteration   5: 13.897 ns/op

# Run progress: 46.28% complete, ETA 00:31:32
# Fork: 2 of 2
# Warmup Iteration   1: 19.276 ns/op
# Warmup Iteration   2: 21.540 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.723 ns/op
Iteration   2: 13.731 ns/op
Iteration   3: 13.725 ns/op
Iteration   4: 13.892 ns/op
Iteration   5: 13.899 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.792 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (13.716, 13.792, 13.899), stdev = 0.090
  CI (99.9%): [13.656, 13.928] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 46.32% complete, ETA 00:31:31
# Fork: 1 of 2
# Warmup Iteration   1: 172.796 ns/op
# Warmup Iteration   2: 137.180 ns/op
# Warmup Iteration   3: 90.005 ns/op
Iteration   1: 90.048 ns/op
Iteration   2: 90.092 ns/op
Iteration   3: 90.042 ns/op
Iteration   4: 89.893 ns/op
Iteration   5: 89.894 ns/op

# Run progress: 46.35% complete, ETA 00:31:29
# Fork: 2 of 2
# Warmup Iteration   1: 173.553 ns/op
# Warmup Iteration   2: 137.553 ns/op
# Warmup Iteration   3: 90.155 ns/op
Iteration   1: 90.079 ns/op
Iteration   2: 90.016 ns/op
Iteration   3: 90.099 ns/op
Iteration   4: 89.836 ns/op
Iteration   5: 89.866 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.987 ±(99.9%) 0.155 ns/op [Average]
  (min, avg, max) = (89.836, 89.987, 90.099), stdev = 0.102
  CI (99.9%): [89.832, 90.141] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 46.39% complete, ETA 00:31:28
# Fork: 1 of 2
# Warmup Iteration   1: 66.772 ns/op
# Warmup Iteration   2: 69.003 ns/op
# Warmup Iteration   3: 45.117 ns/op
Iteration   1: 45.105 ns/op
Iteration   2: 45.136 ns/op
Iteration   3: 45.112 ns/op
Iteration   4: 45.102 ns/op
Iteration   5: 45.012 ns/op

# Run progress: 46.42% complete, ETA 00:31:27
# Fork: 2 of 2
# Warmup Iteration   1: 70.684 ns/op
# Warmup Iteration   2: 69.715 ns/op
# Warmup Iteration   3: 45.150 ns/op
Iteration   1: 45.125 ns/op
Iteration   2: 45.120 ns/op
Iteration   3: 45.189 ns/op
Iteration   4: 45.035 ns/op
Iteration   5: 45.076 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.101 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (45.012, 45.101, 45.189), stdev = 0.050
  CI (99.9%): [45.025, 45.177] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 46.46% complete, ETA 00:31:26
# Fork: 1 of 2
# Warmup Iteration   1: 268.573 ns/op
# Warmup Iteration   2: 151.759 ns/op
# Warmup Iteration   3: 106.077 ns/op
Iteration   1: 106.133 ns/op
Iteration   2: 106.182 ns/op
Iteration   3: 106.134 ns/op
Iteration   4: 105.849 ns/op
Iteration   5: 105.911 ns/op

# Run progress: 46.49% complete, ETA 00:31:24
# Fork: 2 of 2
# Warmup Iteration   1: 323.608 ns/op
# Warmup Iteration   2: 153.937 ns/op
# Warmup Iteration   3: 105.557 ns/op
Iteration   1: 105.606 ns/op
Iteration   2: 105.668 ns/op
Iteration   3: 105.591 ns/op
Iteration   4: 105.314 ns/op
Iteration   5: 105.296 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  105.768 ±(99.9%) 0.494 ns/op [Average]
  (min, avg, max) = (105.296, 105.768, 106.182), stdev = 0.327
  CI (99.9%): [105.274, 106.263] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 46.53% complete, ETA 00:31:23
# Fork: 1 of 2
# Warmup Iteration   1: 68.216 ns/op
# Warmup Iteration   2: 72.519 ns/op
# Warmup Iteration   3: 47.502 ns/op
Iteration   1: 47.486 ns/op
Iteration   2: 47.506 ns/op
Iteration   3: 47.486 ns/op
Iteration   4: 47.360 ns/op
Iteration   5: 47.532 ns/op

# Run progress: 46.56% complete, ETA 00:31:22
# Fork: 2 of 2
# Warmup Iteration   1: 68.424 ns/op
# Warmup Iteration   2: 72.115 ns/op
# Warmup Iteration   3: 47.476 ns/op
Iteration   1: 47.442 ns/op
Iteration   2: 47.469 ns/op
Iteration   3: 47.485 ns/op
Iteration   4: 47.342 ns/op
Iteration   5: 47.557 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.467 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (47.342, 47.467, 47.557), stdev = 0.069
  CI (99.9%): [47.363, 47.570] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 46.60% complete, ETA 00:31:21
# Fork: 1 of 2
# Warmup Iteration   1: 165.601 ns/op
# Warmup Iteration   2: 175.528 ns/op
# Warmup Iteration   3: 115.831 ns/op
Iteration   1: 115.901 ns/op
Iteration   2: 115.835 ns/op
Iteration   3: 115.847 ns/op
Iteration   4: 117.833 ns/op
Iteration   5: 118.131 ns/op

# Run progress: 46.63% complete, ETA 00:31:20
# Fork: 2 of 2
# Warmup Iteration   1: 191.585 ns/op
# Warmup Iteration   2: 187.579 ns/op
# Warmup Iteration   3: 125.001 ns/op
Iteration   1: 125.013 ns/op
Iteration   2: 125.045 ns/op
Iteration   3: 125.021 ns/op
Iteration   4: 129.613 ns/op
Iteration   5: 129.602 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.784 ±(99.9%) 8.555 ns/op [Average]
  (min, avg, max) = (115.835, 121.784, 129.613), stdev = 5.658
  CI (99.9%): [113.230, 130.339] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 46.67% complete, ETA 00:31:18
# Fork: 1 of 2
# Warmup Iteration   1: 19.720 ns/op
# Warmup Iteration   2: 25.065 ns/op
# Warmup Iteration   3: 13.713 ns/op
Iteration   1: 21.327 ns/op
Iteration   2: 13.725 ns/op
Iteration   3: 13.720 ns/op
Iteration   4: 13.904 ns/op
Iteration   5: 13.899 ns/op

# Run progress: 46.70% complete, ETA 00:31:17
# Fork: 2 of 2
# Warmup Iteration   1: 20.184 ns/op
# Warmup Iteration   2: 24.160 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 20.530 ns/op
Iteration   2: 13.717 ns/op
Iteration   3: 13.721 ns/op
Iteration   4: 13.908 ns/op
Iteration   5: 13.890 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  15.234 ±(99.9%) 4.548 ns/op [Average]
  (min, avg, max) = (13.717, 15.234, 21.327), stdev = 3.008
  CI (99.9%): [10.686, 19.782] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 46.74% complete, ETA 00:31:16
# Fork: 1 of 2
# Warmup Iteration   1: 194.736 ns/op
# Warmup Iteration   2: 151.153 ns/op
# Warmup Iteration   3: 99.795 ns/op
Iteration   1: 163.808 ns/op
Iteration   2: 99.878 ns/op
Iteration   3: 100.025 ns/op
Iteration   4: 100.229 ns/op
Iteration   5: 100.524 ns/op

# Run progress: 46.77% complete, ETA 00:31:15
# Fork: 2 of 2
# Warmup Iteration   1: 171.434 ns/op
# Warmup Iteration   2: 155.079 ns/op
# Warmup Iteration   3: 99.850 ns/op
Iteration   1: 170.834 ns/op
Iteration   2: 99.934 ns/op
Iteration   3: 99.969 ns/op
Iteration   4: 100.164 ns/op
Iteration   5: 100.845 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  113.621 ±(99.9%) 42.865 ns/op [Average]
  (min, avg, max) = (99.878, 113.621, 170.834), stdev = 28.352
  CI (99.9%): [70.757, 156.486] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 46.81% complete, ETA 00:31:13
# Fork: 1 of 2
# Warmup Iteration   1: 70.164 ns/op
# Warmup Iteration   2: 69.208 ns/op
# Warmup Iteration   3: 45.083 ns/op
Iteration   1: 66.333 ns/op
Iteration   2: 45.108 ns/op
Iteration   3: 45.053 ns/op
Iteration   4: 45.131 ns/op
Iteration   5: 45.071 ns/op

# Run progress: 46.84% complete, ETA 00:31:12
# Fork: 2 of 2
# Warmup Iteration   1: 66.318 ns/op
# Warmup Iteration   2: 66.469 ns/op
# Warmup Iteration   3: 45.123 ns/op
Iteration   1: 74.295 ns/op
Iteration   2: 45.103 ns/op
Iteration   3: 45.123 ns/op
Iteration   4: 45.427 ns/op
Iteration   5: 45.403 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  50.205 ±(99.9%) 16.274 ns/op [Average]
  (min, avg, max) = (45.053, 50.205, 74.295), stdev = 10.764
  CI (99.9%): [33.931, 66.478] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 46.88% complete, ETA 00:31:11
# Fork: 1 of 2
# Warmup Iteration   1: 315.921 ns/op
# Warmup Iteration   2: 169.450 ns/op
# Warmup Iteration   3: 115.484 ns/op
Iteration   1: 188.606 ns/op
Iteration   2: 115.170 ns/op
Iteration   3: 115.216 ns/op
Iteration   4: 115.289 ns/op
Iteration   5: 115.357 ns/op

# Run progress: 46.91% complete, ETA 00:31:10
# Fork: 2 of 2
# Warmup Iteration   1: 307.611 ns/op
# Warmup Iteration   2: 183.973 ns/op
# Warmup Iteration   3: 118.707 ns/op
Iteration   1: 232.366 ns/op
Iteration   2: 120.530 ns/op
Iteration   3: 123.181 ns/op
Iteration   4: 119.712 ns/op
Iteration   5: 118.871 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  136.430 ±(99.9%) 61.174 ns/op [Average]
  (min, avg, max) = (115.170, 136.430, 232.366), stdev = 40.463
  CI (99.9%): [75.256, 197.604] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 46.94% complete, ETA 00:31:09
# Fork: 1 of 2
# Warmup Iteration   1: 74.548 ns/op
# Warmup Iteration   2: 72.591 ns/op
# Warmup Iteration   3: 47.453 ns/op
Iteration   1: 77.872 ns/op
Iteration   2: 47.542 ns/op
Iteration   3: 47.554 ns/op
Iteration   4: 47.353 ns/op
Iteration   5: 47.551 ns/op

# Run progress: 46.98% complete, ETA 00:31:07
# Fork: 2 of 2
# Warmup Iteration   1: 68.110 ns/op
# Warmup Iteration   2: 76.812 ns/op
# Warmup Iteration   3: 47.505 ns/op
Iteration   1: 77.791 ns/op
Iteration   2: 47.550 ns/op
Iteration   3: 47.511 ns/op
Iteration   4: 47.374 ns/op
Iteration   5: 47.613 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  53.571 ±(99.9%) 19.331 ns/op [Average]
  (min, avg, max) = (47.353, 53.571, 77.872), stdev = 12.787
  CI (99.9%): [34.240, 72.903] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 47.01% complete, ETA 00:31:06
# Fork: 1 of 2
# Warmup Iteration   1: 184.824 ns/op
# Warmup Iteration   2: 197.402 ns/op
# Warmup Iteration   3: 130.162 ns/op
Iteration   1: 208.873 ns/op
Iteration   2: 130.112 ns/op
Iteration   3: 130.079 ns/op
Iteration   4: 133.815 ns/op
Iteration   5: 133.807 ns/op

# Run progress: 47.05% complete, ETA 00:31:05
# Fork: 2 of 2
# Warmup Iteration   1: 187.240 ns/op
# Warmup Iteration   2: 199.651 ns/op
# Warmup Iteration   3: 130.134 ns/op
Iteration   1: 213.737 ns/op
Iteration   2: 130.142 ns/op
Iteration   3: 130.080 ns/op
Iteration   4: 133.850 ns/op
Iteration   5: 133.911 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  147.841 ±(99.9%) 50.670 ns/op [Average]
  (min, avg, max) = (130.079, 147.841, 213.737), stdev = 33.515
  CI (99.9%): [97.171, 198.510] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 47.08% complete, ETA 00:31:04
# Fork: 1 of 2
# Warmup Iteration   1: 19.899 ns/op
# Warmup Iteration   2: 21.187 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.719 ns/op
Iteration   2: 13.728 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.906 ns/op
Iteration   5: 13.898 ns/op

# Run progress: 47.12% complete, ETA 00:31:03
# Fork: 2 of 2
# Warmup Iteration   1: 20.553 ns/op
# Warmup Iteration   2: 22.734 ns/op
# Warmup Iteration   3: 13.711 ns/op
Iteration   1: 13.707 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.729 ns/op
Iteration   4: 14.618 ns/op
Iteration   5: 14.610 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.934 ±(99.9%) 0.554 ns/op [Average]
  (min, avg, max) = (13.707, 13.934, 14.618), stdev = 0.366
  CI (99.9%): [13.381, 14.488] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 47.15% complete, ETA 00:31:01
# Fork: 1 of 2
# Warmup Iteration   1: 169.171 ns/op
# Warmup Iteration   2: 133.655 ns/op
# Warmup Iteration   3: 89.965 ns/op
Iteration   1: 90.068 ns/op
Iteration   2: 90.222 ns/op
Iteration   3: 90.117 ns/op
Iteration   4: 89.845 ns/op
Iteration   5: 89.967 ns/op

# Run progress: 47.19% complete, ETA 00:31:00
# Fork: 2 of 2
# Warmup Iteration   1: 155.123 ns/op
# Warmup Iteration   2: 138.501 ns/op
# Warmup Iteration   3: 90.095 ns/op
Iteration   1: 90.063 ns/op
Iteration   2: 90.116 ns/op
Iteration   3: 90.030 ns/op
Iteration   4: 89.982 ns/op
Iteration   5: 89.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  90.029 ±(99.9%) 0.172 ns/op [Average]
  (min, avg, max) = (89.845, 90.029, 90.222), stdev = 0.114
  CI (99.9%): [89.857, 90.202] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 47.22% complete, ETA 00:30:59
# Fork: 1 of 2
# Warmup Iteration   1: 66.638 ns/op
# Warmup Iteration   2: 70.012 ns/op
# Warmup Iteration   3: 45.118 ns/op
Iteration   1: 45.177 ns/op
Iteration   2: 45.129 ns/op
Iteration   3: 45.100 ns/op
Iteration   4: 45.035 ns/op
Iteration   5: 45.072 ns/op

# Run progress: 47.26% complete, ETA 00:30:58
# Fork: 2 of 2
# Warmup Iteration   1: 66.121 ns/op
# Warmup Iteration   2: 73.107 ns/op
# Warmup Iteration   3: 45.134 ns/op
Iteration   1: 45.167 ns/op
Iteration   2: 45.168 ns/op
Iteration   3: 45.149 ns/op
Iteration   4: 45.103 ns/op
Iteration   5: 45.066 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.117 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (45.035, 45.117, 45.177), stdev = 0.049
  CI (99.9%): [45.042, 45.191] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 47.29% complete, ETA 00:30:56
# Fork: 1 of 2
# Warmup Iteration   1: 293.458 ns/op
# Warmup Iteration   2: 157.113 ns/op
# Warmup Iteration   3: 106.678 ns/op
Iteration   1: 106.795 ns/op
Iteration   2: 106.480 ns/op
Iteration   3: 106.814 ns/op
Iteration   4: 106.820 ns/op
Iteration   5: 106.194 ns/op

# Run progress: 47.33% complete, ETA 00:30:55
# Fork: 2 of 2
# Warmup Iteration   1: 270.507 ns/op
# Warmup Iteration   2: 152.713 ns/op
# Warmup Iteration   3: 106.896 ns/op
Iteration   1: 106.829 ns/op
Iteration   2: 106.952 ns/op
Iteration   3: 106.966 ns/op
Iteration   4: 106.698 ns/op
Iteration   5: 106.676 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  106.722 ±(99.9%) 0.352 ns/op [Average]
  (min, avg, max) = (106.194, 106.722, 106.966), stdev = 0.233
  CI (99.9%): [106.371, 107.074] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 47.36% complete, ETA 00:30:54
# Fork: 1 of 2
# Warmup Iteration   1: 68.277 ns/op
# Warmup Iteration   2: 72.895 ns/op
# Warmup Iteration   3: 47.475 ns/op
Iteration   1: 47.490 ns/op
Iteration   2: 47.509 ns/op
Iteration   3: 47.515 ns/op
Iteration   4: 47.361 ns/op
Iteration   5: 47.536 ns/op

# Run progress: 47.40% complete, ETA 00:30:53
# Fork: 2 of 2
# Warmup Iteration   1: 67.981 ns/op
# Warmup Iteration   2: 68.339 ns/op
# Warmup Iteration   3: 47.442 ns/op
Iteration   1: 47.545 ns/op
Iteration   2: 47.498 ns/op
Iteration   3: 47.502 ns/op
Iteration   4: 47.394 ns/op
Iteration   5: 47.536 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.488 ±(99.9%) 0.093 ns/op [Average]
  (min, avg, max) = (47.361, 47.488, 47.545), stdev = 0.062
  CI (99.9%): [47.395, 47.582] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 47.43% complete, ETA 00:30:52
# Fork: 1 of 2
# Warmup Iteration   1: 177.819 ns/op
# Warmup Iteration   2: 176.838 ns/op
# Warmup Iteration   3: 124.981 ns/op
Iteration   1: 124.977 ns/op
Iteration   2: 125.006 ns/op
Iteration   3: 124.930 ns/op
Iteration   4: 129.594 ns/op
Iteration   5: 129.523 ns/op

# Run progress: 47.47% complete, ETA 00:30:50
# Fork: 2 of 2
# Warmup Iteration   1: 174.776 ns/op
# Warmup Iteration   2: 169.427 ns/op
# Warmup Iteration   3: 123.860 ns/op
Iteration   1: 123.891 ns/op
Iteration   2: 123.875 ns/op
Iteration   3: 123.845 ns/op
Iteration   4: 129.494 ns/op
Iteration   5: 129.575 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.471 ±(99.9%) 4.060 ns/op [Average]
  (min, avg, max) = (123.845, 126.471, 129.594), stdev = 2.685
  CI (99.9%): [122.411, 130.531] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 47.50% complete, ETA 00:30:49
# Fork: 1 of 2
# Warmup Iteration   1: 20.281 ns/op
# Warmup Iteration   2: 23.439 ns/op
# Warmup Iteration   3: 13.706 ns/op
Iteration   1: 13.711 ns/op
Iteration   2: 13.706 ns/op
Iteration   3: 13.720 ns/op
Iteration   4: 13.900 ns/op
Iteration   5: 13.893 ns/op

# Run progress: 47.53% complete, ETA 00:30:48
# Fork: 2 of 2
# Warmup Iteration   1: 18.877 ns/op
# Warmup Iteration   2: 24.466 ns/op
# Warmup Iteration   3: 13.714 ns/op
Iteration   1: 13.712 ns/op
Iteration   2: 13.724 ns/op
Iteration   3: 13.721 ns/op
Iteration   4: 13.905 ns/op
Iteration   5: 13.885 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.788 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (13.706, 13.788, 13.905), stdev = 0.093
  CI (99.9%): [13.647, 13.929] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 47.57% complete, ETA 00:30:47
# Fork: 1 of 2
# Warmup Iteration   1: 171.720 ns/op
# Warmup Iteration   2: 133.493 ns/op
# Warmup Iteration   3: 90.083 ns/op
Iteration   1: 90.137 ns/op
Iteration   2: 90.120 ns/op
Iteration   3: 90.170 ns/op
Iteration   4: 90.530 ns/op
Iteration   5: 90.574 ns/op

# Run progress: 47.60% complete, ETA 00:30:45
# Fork: 2 of 2
# Warmup Iteration   1: 166.743 ns/op
# Warmup Iteration   2: 140.711 ns/op
# Warmup Iteration   3: 89.942 ns/op
Iteration   1: 90.018 ns/op
Iteration   2: 89.949 ns/op
Iteration   3: 90.117 ns/op
Iteration   4: 89.818 ns/op
Iteration   5: 89.974 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  90.141 ±(99.9%) 0.365 ns/op [Average]
  (min, avg, max) = (89.818, 90.141, 90.574), stdev = 0.241
  CI (99.9%): [89.775, 90.506] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 47.64% complete, ETA 00:30:44
# Fork: 1 of 2
# Warmup Iteration   1: 66.275 ns/op
# Warmup Iteration   2: 66.087 ns/op
# Warmup Iteration   3: 45.110 ns/op
Iteration   1: 45.152 ns/op
Iteration   2: 45.155 ns/op
Iteration   3: 45.145 ns/op
Iteration   4: 45.081 ns/op
Iteration   5: 45.068 ns/op

# Run progress: 47.67% complete, ETA 00:30:43
# Fork: 2 of 2
# Warmup Iteration   1: 66.141 ns/op
# Warmup Iteration   2: 76.057 ns/op
# Warmup Iteration   3: 45.116 ns/op
Iteration   1: 45.147 ns/op
Iteration   2: 45.147 ns/op
Iteration   3: 45.170 ns/op
Iteration   4: 45.130 ns/op
Iteration   5: 45.051 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  45.124 ±(99.9%) 0.063 ns/op [Average]
  (min, avg, max) = (45.051, 45.124, 45.170), stdev = 0.042
  CI (99.9%): [45.061, 45.188] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 47.71% complete, ETA 00:30:42
# Fork: 1 of 2
# Warmup Iteration   1: 341.483 ns/op
# Warmup Iteration   2: 158.007 ns/op
# Warmup Iteration   3: 106.673 ns/op
Iteration   1: 107.094 ns/op
Iteration   2: 106.812 ns/op
Iteration   3: 106.782 ns/op
Iteration   4: 106.607 ns/op
Iteration   5: 106.647 ns/op

# Run progress: 47.74% complete, ETA 00:30:41
# Fork: 2 of 2
# Warmup Iteration   1: 314.171 ns/op
# Warmup Iteration   2: 158.686 ns/op
# Warmup Iteration   3: 104.608 ns/op
Iteration   1: 104.608 ns/op
Iteration   2: 104.618 ns/op
Iteration   3: 104.636 ns/op
Iteration   4: 104.533 ns/op
Iteration   5: 104.526 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  105.686 ±(99.9%) 1.768 ns/op [Average]
  (min, avg, max) = (104.526, 105.686, 107.094), stdev = 1.169
  CI (99.9%): [103.919, 107.454] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 47.78% complete, ETA 00:30:39
# Fork: 1 of 2
# Warmup Iteration   1: 68.394 ns/op
# Warmup Iteration   2: 79.600 ns/op
# Warmup Iteration   3: 47.515 ns/op
Iteration   1: 47.543 ns/op
Iteration   2: 47.504 ns/op
Iteration   3: 47.440 ns/op
Iteration   4: 47.353 ns/op
Iteration   5: 47.571 ns/op

# Run progress: 47.81% complete, ETA 00:30:38
# Fork: 2 of 2
# Warmup Iteration   1: 68.636 ns/op
# Warmup Iteration   2: 75.173 ns/op
# Warmup Iteration   3: 47.472 ns/op
Iteration   1: 47.463 ns/op
Iteration   2: 47.494 ns/op
Iteration   3: 47.497 ns/op
Iteration   4: 47.385 ns/op
Iteration   5: 47.522 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.477 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (47.353, 47.477, 47.571), stdev = 0.068
  CI (99.9%): [47.374, 47.580] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 47.85% complete, ETA 00:30:37
# Fork: 1 of 2
# Warmup Iteration   1: 176.695 ns/op
# Warmup Iteration   2: 173.477 ns/op
# Warmup Iteration   3: 125.019 ns/op
Iteration   1: 125.011 ns/op
Iteration   2: 125.010 ns/op
Iteration   3: 125.005 ns/op
Iteration   4: 129.631 ns/op
Iteration   5: 129.580 ns/op

# Run progress: 47.88% complete, ETA 00:30:36
# Fork: 2 of 2
# Warmup Iteration   1: 160.968 ns/op
# Warmup Iteration   2: 175.966 ns/op
# Warmup Iteration   3: 115.959 ns/op
Iteration   1: 115.811 ns/op
Iteration   2: 115.916 ns/op
Iteration   3: 115.846 ns/op
Iteration   4: 116.793 ns/op
Iteration   5: 116.993 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.560 ±(99.9%) 8.819 ns/op [Average]
  (min, avg, max) = (115.811, 121.560, 129.631), stdev = 5.834
  CI (99.9%): [112.740, 130.379] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 47.92% complete, ETA 00:30:34
# Fork: 1 of 2
# Warmup Iteration   1: 20.219 ns/op
# Warmup Iteration   2: 24.683 ns/op
# Warmup Iteration   3: 13.717 ns/op
Iteration   1: 13.739 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.726 ns/op
Iteration   4: 13.874 ns/op
Iteration   5: 13.875 ns/op

# Run progress: 47.95% complete, ETA 00:30:33
# Fork: 2 of 2
# Warmup Iteration   1: 19.766 ns/op
# Warmup Iteration   2: 22.852 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.714 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.881 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.783 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (13.713, 13.783, 13.881), stdev = 0.081
  CI (99.9%): [13.660, 13.906] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 47.99% complete, ETA 00:30:32
# Fork: 1 of 2
# Warmup Iteration   1: 874.578 ns/op
# Warmup Iteration   2: 445.138 ns/op
# Warmup Iteration   3: 299.139 ns/op
Iteration   1: 299.147 ns/op
Iteration   2: 300.010 ns/op
Iteration   3: 299.556 ns/op
Iteration   4: 299.159 ns/op
Iteration   5: 298.777 ns/op

# Run progress: 48.02% complete, ETA 00:30:31
# Fork: 2 of 2
# Warmup Iteration   1: 758.803 ns/op
# Warmup Iteration   2: 424.493 ns/op
# Warmup Iteration   3: 298.592 ns/op
Iteration   1: 298.079 ns/op
Iteration   2: 299.344 ns/op
Iteration   3: 297.946 ns/op
Iteration   4: 297.451 ns/op
Iteration   5: 298.361 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  298.783 ±(99.9%) 1.218 ns/op [Average]
  (min, avg, max) = (297.451, 298.783, 300.010), stdev = 0.806
  CI (99.9%): [297.565, 300.001] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 48.06% complete, ETA 00:30:29
# Fork: 1 of 2
# Warmup Iteration   1: 575.658 ns/op
# Warmup Iteration   2: 520.818 ns/op
# Warmup Iteration   3: 386.471 ns/op
Iteration   1: 386.518 ns/op
Iteration   2: 386.566 ns/op
Iteration   3: 386.708 ns/op
Iteration   4: 386.413 ns/op
Iteration   5: 386.519 ns/op

# Run progress: 48.09% complete, ETA 00:30:28
# Fork: 2 of 2
# Warmup Iteration   1: 574.499 ns/op
# Warmup Iteration   2: 524.418 ns/op
# Warmup Iteration   3: 391.993 ns/op
Iteration   1: 392.069 ns/op
Iteration   2: 392.149 ns/op
Iteration   3: 392.081 ns/op
Iteration   4: 392.108 ns/op
Iteration   5: 391.970 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  389.310 ±(99.9%) 4.409 ns/op [Average]
  (min, avg, max) = (386.413, 389.310, 392.149), stdev = 2.916
  CI (99.9%): [384.901, 393.719] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 48.13% complete, ETA 00:30:27
# Fork: 1 of 2
# Warmup Iteration   1: 7811.215 ns/op
# Warmup Iteration   2: 525.005 ns/op
# Warmup Iteration   3: 316.055 ns/op
Iteration   1: 315.913 ns/op
Iteration   2: 315.828 ns/op
Iteration   3: 315.890 ns/op
Iteration   4: 316.292 ns/op
Iteration   5: 315.924 ns/op

# Run progress: 48.16% complete, ETA 00:30:26
# Fork: 2 of 2
# Warmup Iteration   1: 6033.658 ns/op
# Warmup Iteration   2: 495.888 ns/op
# Warmup Iteration   3: 316.938 ns/op
Iteration   1: 317.161 ns/op
Iteration   2: 317.101 ns/op
Iteration   3: 316.999 ns/op
Iteration   4: 317.768 ns/op
Iteration   5: 317.697 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  316.657 ±(99.9%) 1.169 ns/op [Average]
  (min, avg, max) = (315.828, 316.657, 317.768), stdev = 0.774
  CI (99.9%): [315.488, 317.827] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 48.19% complete, ETA 00:30:25
# Fork: 1 of 2
# Warmup Iteration   1: 496.667 ns/op
# Warmup Iteration   2: 424.587 ns/op
# Warmup Iteration   3: 313.755 ns/op
Iteration   1: 313.940 ns/op
Iteration   2: 314.001 ns/op
Iteration   3: 313.924 ns/op
Iteration   4: 313.640 ns/op
Iteration   5: 313.546 ns/op

# Run progress: 48.23% complete, ETA 00:30:23
# Fork: 2 of 2
# Warmup Iteration   1: 640.691 ns/op
# Warmup Iteration   2: 421.412 ns/op
# Warmup Iteration   3: 312.792 ns/op
Iteration   1: 312.915 ns/op
Iteration   2: 312.831 ns/op
Iteration   3: 312.980 ns/op
Iteration   4: 312.634 ns/op
Iteration   5: 312.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.325 ±(99.9%) 0.811 ns/op [Average]
  (min, avg, max) = (312.634, 313.325, 314.001), stdev = 0.537
  CI (99.9%): [312.513, 314.136] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 48.26% complete, ETA 00:30:22
# Fork: 1 of 2
# Warmup Iteration   1: 2794.654 ns/op
# Warmup Iteration   2: 2062.824 ns/op
# Warmup Iteration   3: 1535.337 ns/op
Iteration   1: 1533.856 ns/op
Iteration   2: 1533.316 ns/op
Iteration   3: 1533.039 ns/op
Iteration   4: 1534.427 ns/op
Iteration   5: 1538.712 ns/op

# Run progress: 48.30% complete, ETA 00:30:21
# Fork: 2 of 2
# Warmup Iteration   1: 2797.361 ns/op
# Warmup Iteration   2: 2112.224 ns/op
# Warmup Iteration   3: 1528.518 ns/op
Iteration   1: 1527.356 ns/op
Iteration   2: 1528.665 ns/op
Iteration   3: 1528.426 ns/op
Iteration   4: 1528.676 ns/op
Iteration   5: 1530.155 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1531.663 ±(99.9%) 5.427 ns/op [Average]
  (min, avg, max) = (1527.356, 1531.663, 1538.712), stdev = 3.590
  CI (99.9%): [1526.236, 1537.090] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 48.33% complete, ETA 00:30:20
# Fork: 1 of 2
# Warmup Iteration   1: 19.332 ns/op
# Warmup Iteration   2: 21.710 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.735 ns/op
Iteration   2: 13.727 ns/op
Iteration   3: 13.712 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.884 ns/op

# Run progress: 48.37% complete, ETA 00:30:18
# Fork: 2 of 2
# Warmup Iteration   1: 19.725 ns/op
# Warmup Iteration   2: 21.624 ns/op
# Warmup Iteration   3: 13.705 ns/op
Iteration   1: 13.717 ns/op
Iteration   2: 13.714 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.874 ns/op
Iteration   5: 13.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.784 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (13.709, 13.784, 13.888), stdev = 0.085
  CI (99.9%): [13.656, 13.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 48.40% complete, ETA 00:30:17
# Fork: 1 of 2
# Warmup Iteration   1: 547.305 ns/op
# Warmup Iteration   2: 296.463 ns/op
# Warmup Iteration   3: 200.309 ns/op
Iteration   1: 200.603 ns/op
Iteration   2: 200.514 ns/op
Iteration   3: 200.231 ns/op
Iteration   4: 200.085 ns/op
Iteration   5: 200.093 ns/op

# Run progress: 48.44% complete, ETA 00:30:16
# Fork: 2 of 2
# Warmup Iteration   1: 554.467 ns/op
# Warmup Iteration   2: 282.006 ns/op
# Warmup Iteration   3: 200.637 ns/op
Iteration   1: 200.618 ns/op
Iteration   2: 200.560 ns/op
Iteration   3: 200.768 ns/op
Iteration   4: 200.498 ns/op
Iteration   5: 200.435 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  200.440 ±(99.9%) 0.349 ns/op [Average]
  (min, avg, max) = (200.085, 200.440, 200.768), stdev = 0.231
  CI (99.9%): [200.092, 200.789] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 48.47% complete, ETA 00:30:15
# Fork: 1 of 2
# Warmup Iteration   1: 170.372 ns/op
# Warmup Iteration   2: 168.708 ns/op
# Warmup Iteration   3: 118.091 ns/op
Iteration   1: 118.162 ns/op
Iteration   2: 118.160 ns/op
Iteration   3: 118.161 ns/op
Iteration   4: 118.130 ns/op
Iteration   5: 118.163 ns/op

# Run progress: 48.51% complete, ETA 00:30:14
# Fork: 2 of 2
# Warmup Iteration   1: 178.528 ns/op
# Warmup Iteration   2: 175.261 ns/op
# Warmup Iteration   3: 118.110 ns/op
Iteration   1: 118.186 ns/op
Iteration   2: 118.146 ns/op
Iteration   3: 118.146 ns/op
Iteration   4: 118.129 ns/op
Iteration   5: 118.124 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  118.151 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (118.124, 118.151, 118.186), stdev = 0.019
  CI (99.9%): [118.121, 118.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 48.54% complete, ETA 00:30:12
# Fork: 1 of 2
# Warmup Iteration   1: 1928.270 ns/op
# Warmup Iteration   2: 283.018 ns/op
# Warmup Iteration   3: 199.744 ns/op
Iteration   1: 199.707 ns/op
Iteration   2: 200.071 ns/op
Iteration   3: 199.785 ns/op
Iteration   4: 199.671 ns/op
Iteration   5: 199.734 ns/op

# Run progress: 48.58% complete, ETA 00:30:11
# Fork: 2 of 2
# Warmup Iteration   1: 2063.065 ns/op
# Warmup Iteration   2: 276.590 ns/op
# Warmup Iteration   3: 199.654 ns/op
Iteration   1: 199.730 ns/op
Iteration   2: 199.635 ns/op
Iteration   3: 199.715 ns/op
Iteration   4: 199.575 ns/op
Iteration   5: 199.720 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  199.734 ±(99.9%) 0.199 ns/op [Average]
  (min, avg, max) = (199.575, 199.734, 200.071), stdev = 0.132
  CI (99.9%): [199.535, 199.933] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 48.61% complete, ETA 00:30:10
# Fork: 1 of 2
# Warmup Iteration   1: 181.688 ns/op
# Warmup Iteration   2: 166.138 ns/op
# Warmup Iteration   3: 116.074 ns/op
Iteration   1: 115.572 ns/op
Iteration   2: 115.935 ns/op
Iteration   3: 115.626 ns/op
Iteration   4: 116.071 ns/op
Iteration   5: 115.822 ns/op

# Run progress: 48.65% complete, ETA 00:30:09
# Fork: 2 of 2
# Warmup Iteration   1: 182.830 ns/op
# Warmup Iteration   2: 164.518 ns/op
# Warmup Iteration   3: 115.922 ns/op
Iteration   1: 115.943 ns/op
Iteration   2: 115.924 ns/op
Iteration   3: 115.618 ns/op
Iteration   4: 116.059 ns/op
Iteration   5: 116.055 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.863 ±(99.9%) 0.292 ns/op [Average]
  (min, avg, max) = (115.572, 115.863, 116.071), stdev = 0.193
  CI (99.9%): [115.570, 116.155] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 48.68% complete, ETA 00:30:07
# Fork: 1 of 2
# Warmup Iteration   1: 1066.265 ns/op
# Warmup Iteration   2: 966.948 ns/op
# Warmup Iteration   3: 647.029 ns/op
Iteration   1: 647.210 ns/op
Iteration   2: 647.215 ns/op
Iteration   3: 646.979 ns/op
Iteration   4: 652.161 ns/op
Iteration   5: 651.567 ns/op

# Run progress: 48.72% complete, ETA 00:30:06
# Fork: 2 of 2
# Warmup Iteration   1: 1212.023 ns/op
# Warmup Iteration   2: 963.785 ns/op
# Warmup Iteration   3: 647.670 ns/op
Iteration   1: 647.901 ns/op
Iteration   2: 648.018 ns/op
Iteration   3: 647.839 ns/op
Iteration   4: 651.798 ns/op
Iteration   5: 652.015 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  649.271 ±(99.9%) 3.446 ns/op [Average]
  (min, avg, max) = (646.979, 649.271, 652.161), stdev = 2.280
  CI (99.9%): [645.824, 652.717] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 48.75% complete, ETA 00:30:05
# Fork: 1 of 2
# Warmup Iteration   1: 19.590 ns/op
# Warmup Iteration   2: 25.296 ns/op
# Warmup Iteration   3: 13.707 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.709 ns/op
Iteration   4: 13.886 ns/op
Iteration   5: 13.874 ns/op

# Run progress: 48.78% complete, ETA 00:30:04
# Fork: 2 of 2
# Warmup Iteration   1: 19.313 ns/op
# Warmup Iteration   2: 24.982 ns/op
# Warmup Iteration   3: 13.710 ns/op
Iteration   1: 13.710 ns/op
Iteration   2: 13.718 ns/op
Iteration   3: 13.716 ns/op
Iteration   4: 13.889 ns/op
Iteration   5: 13.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (13.709, 13.782, 13.889), stdev = 0.087
  CI (99.9%): [13.650, 13.914] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 48.82% complete, ETA 00:30:03
# Fork: 1 of 2
# Warmup Iteration   1: 1509.484 ns/op
# Warmup Iteration   2: 503.593 ns/op
# Warmup Iteration   3: 373.062 ns/op
Iteration   1: 371.884 ns/op
Iteration   2: 374.809 ns/op
Iteration   3: 374.198 ns/op
Iteration   4: 374.247 ns/op
Iteration   5: 375.803 ns/op

# Run progress: 48.85% complete, ETA 00:30:01
# Fork: 2 of 2
# Warmup Iteration   1: 1434.236 ns/op
# Warmup Iteration   2: 534.722 ns/op
# Warmup Iteration   3: 376.486 ns/op
Iteration   1: 379.549 ns/op
Iteration   2: 378.379 ns/op
Iteration   3: 379.489 ns/op
Iteration   4: 377.718 ns/op
Iteration   5: 374.640 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  376.072 ±(99.9%) 3.900 ns/op [Average]
  (min, avg, max) = (371.884, 376.072, 379.549), stdev = 2.580
  CI (99.9%): [372.171, 379.972] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 48.89% complete, ETA 00:30:00
# Fork: 1 of 2
# Warmup Iteration   1: 624.820 ns/op
# Warmup Iteration   2: 572.286 ns/op
# Warmup Iteration   3: 435.607 ns/op
Iteration   1: 434.728 ns/op
Iteration   2: 435.139 ns/op
Iteration   3: 435.401 ns/op
Iteration   4: 434.104 ns/op
Iteration   5: 438.129 ns/op

# Run progress: 48.92% complete, ETA 00:29:59
# Fork: 2 of 2
# Warmup Iteration   1: 700.018 ns/op
# Warmup Iteration   2: 669.314 ns/op
# Warmup Iteration   3: 445.372 ns/op
Iteration   1: 437.194 ns/op
Iteration   2: 442.653 ns/op
Iteration   3: 438.657 ns/op
Iteration   4: 441.188 ns/op
Iteration   5: 440.916 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  437.811 ±(99.9%) 4.560 ns/op [Average]
  (min, avg, max) = (434.104, 437.811, 442.653), stdev = 3.016
  CI (99.9%): [433.250, 442.371] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 48.96% complete, ETA 00:29:58
# Fork: 1 of 2
# Warmup Iteration   1: 19603.989 ns/op
# Warmup Iteration   2: 567.242 ns/op
# Warmup Iteration   3: 451.897 ns/op
Iteration   1: 409.726 ns/op
Iteration   2: 410.118 ns/op
Iteration   3: 409.653 ns/op
Iteration   4: 410.240 ns/op
Iteration   5: 409.743 ns/op

# Run progress: 48.99% complete, ETA 00:29:56
# Fork: 2 of 2
# Warmup Iteration   1: 19720.236 ns/op
# Warmup Iteration   2: 606.718 ns/op
# Warmup Iteration   3: 470.289 ns/op
Iteration   1: 428.323 ns/op
Iteration   2: 428.092 ns/op
Iteration   3: 429.081 ns/op
Iteration   4: 430.128 ns/op
Iteration   5: 429.432 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  419.454 ±(99.9%) 15.257 ns/op [Average]
  (min, avg, max) = (409.653, 419.454, 430.128), stdev = 10.091
  CI (99.9%): [404.197, 434.710] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 49.03% complete, ETA 00:29:55
# Fork: 1 of 2
# Warmup Iteration   1: 549.829 ns/op
# Warmup Iteration   2: 460.201 ns/op
# Warmup Iteration   3: 345.518 ns/op
Iteration   1: 347.483 ns/op
Iteration   2: 347.498 ns/op
Iteration   3: 345.836 ns/op
Iteration   4: 345.672 ns/op
Iteration   5: 344.539 ns/op

# Run progress: 49.06% complete, ETA 00:29:54
# Fork: 2 of 2
# Warmup Iteration   1: 622.080 ns/op
# Warmup Iteration   2: 454.741 ns/op
# Warmup Iteration   3: 340.017 ns/op
Iteration   1: 341.090 ns/op
Iteration   2: 341.801 ns/op
Iteration   3: 340.209 ns/op
Iteration   4: 340.757 ns/op
Iteration   5: 340.975 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  343.586 ±(99.9%) 4.406 ns/op [Average]
  (min, avg, max) = (340.209, 343.586, 347.498), stdev = 2.915
  CI (99.9%): [339.180, 347.992] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 49.10% complete, ETA 00:29:53
# Fork: 1 of 2
# Warmup Iteration   1: 3218.408 ns/op
# Warmup Iteration   2: 2352.801 ns/op
# Warmup Iteration   3: 1644.484 ns/op
Iteration   1: 1651.713 ns/op
Iteration   2: 1648.563 ns/op
Iteration   3: 1650.480 ns/op
Iteration   4: 1653.120 ns/op
Iteration   5: 1661.879 ns/op

# Run progress: 49.13% complete, ETA 00:29:52
# Fork: 2 of 2
# Warmup Iteration   1: 3745.624 ns/op
# Warmup Iteration   2: 2477.105 ns/op
# Warmup Iteration   3: 1658.561 ns/op
Iteration   1: 1655.663 ns/op
Iteration   2: 1662.762 ns/op
Iteration   3: 1654.043 ns/op
Iteration   4: 1660.545 ns/op
Iteration   5: 1663.323 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1656.209 ±(99.9%) 8.289 ns/op [Average]
  (min, avg, max) = (1648.563, 1656.209, 1663.323), stdev = 5.483
  CI (99.9%): [1647.920, 1664.498] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 49.17% complete, ETA 00:29:50
# Fork: 1 of 2
# Warmup Iteration   1: 22.040 ns/op
# Warmup Iteration   2: 24.337 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.713 ns/op
Iteration   2: 13.713 ns/op
Iteration   3: 13.723 ns/op
Iteration   4: 13.879 ns/op
Iteration   5: 13.881 ns/op

# Run progress: 49.20% complete, ETA 00:29:49
# Fork: 2 of 2
# Warmup Iteration   1: 20.192 ns/op
# Warmup Iteration   2: 24.734 ns/op
# Warmup Iteration   3: 13.708 ns/op
Iteration   1: 13.715 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.881 ns/op
Iteration   5: 13.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.782 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (13.712, 13.782, 13.888), stdev = 0.086
  CI (99.9%): [13.652, 13.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 49.24% complete, ETA 00:29:48
# Fork: 1 of 2
# Warmup Iteration   1: 602.233 ns/op
# Warmup Iteration   2: 290.600 ns/op
# Warmup Iteration   3: 200.242 ns/op
Iteration   1: 200.321 ns/op
Iteration   2: 200.308 ns/op
Iteration   3: 200.289 ns/op
Iteration   4: 200.255 ns/op
Iteration   5: 200.150 ns/op

# Run progress: 49.27% complete, ETA 00:29:47
# Fork: 2 of 2
# Warmup Iteration   1: 516.546 ns/op
# Warmup Iteration   2: 305.699 ns/op
# Warmup Iteration   3: 200.637 ns/op
Iteration   1: 200.682 ns/op
Iteration   2: 200.760 ns/op
Iteration   3: 200.771 ns/op
Iteration   4: 200.543 ns/op
Iteration   5: 200.512 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  200.459 ±(99.9%) 0.340 ns/op [Average]
  (min, avg, max) = (200.150, 200.459, 200.771), stdev = 0.225
  CI (99.9%): [200.119, 200.800] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 49.31% complete, ETA 00:29:45
# Fork: 1 of 2
# Warmup Iteration   1: 172.624 ns/op
# Warmup Iteration   2: 169.314 ns/op
# Warmup Iteration   3: 126.380 ns/op
Iteration   1: 126.365 ns/op
Iteration   2: 126.420 ns/op
Iteration   3: 126.390 ns/op
Iteration   4: 126.422 ns/op
Iteration   5: 126.495 ns/op

# Run progress: 49.34% complete, ETA 00:29:44
# Fork: 2 of 2
# Warmup Iteration   1: 178.836 ns/op
# Warmup Iteration   2: 159.610 ns/op
# Warmup Iteration   3: 118.125 ns/op
Iteration   1: 118.148 ns/op
Iteration   2: 118.147 ns/op
Iteration   3: 118.152 ns/op
Iteration   4: 118.120 ns/op
Iteration   5: 118.085 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  122.274 ±(99.9%) 6.604 ns/op [Average]
  (min, avg, max) = (118.085, 122.274, 126.495), stdev = 4.368
  CI (99.9%): [115.670, 128.879] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 49.38% complete, ETA 00:29:43
# Fork: 1 of 2
# Warmup Iteration   1: 2009.092 ns/op
# Warmup Iteration   2: 276.983 ns/op
# Warmup Iteration   3: 199.669 ns/op
Iteration   1: 199.704 ns/op
Iteration   2: 199.869 ns/op
Iteration   3: 199.769 ns/op
Iteration   4: 199.800 ns/op
Iteration   5: 199.771 ns/op

# Run progress: 49.41% complete, ETA 00:29:42
# Fork: 2 of 2
# Warmup Iteration   1: 2201.060 ns/op
# Warmup Iteration   2: 287.092 ns/op
# Warmup Iteration   3: 198.629 ns/op
Iteration   1: 198.775 ns/op
Iteration   2: 198.848 ns/op
Iteration   3: 198.869 ns/op
Iteration   4: 198.677 ns/op
Iteration   5: 198.651 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  199.273 ±(99.9%) 0.820 ns/op [Average]
  (min, avg, max) = (198.651, 199.273, 199.869), stdev = 0.542
  CI (99.9%): [198.453, 200.093] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 49.44% complete, ETA 00:29:40
# Fork: 1 of 2
# Warmup Iteration   1: 182.528 ns/op
# Warmup Iteration   2: 164.733 ns/op
# Warmup Iteration   3: 115.746 ns/op
Iteration   1: 115.558 ns/op
Iteration   2: 116.281 ns/op
Iteration   3: 115.704 ns/op
Iteration   4: 115.709 ns/op
Iteration   5: 115.706 ns/op

# Run progress: 49.48% complete, ETA 00:29:39
# Fork: 2 of 2
# Warmup Iteration   1: 191.155 ns/op
# Warmup Iteration   2: 164.641 ns/op
# Warmup Iteration   3: 116.105 ns/op
Iteration   1: 117.063 ns/op
Iteration   2: 116.029 ns/op
Iteration   3: 116.640 ns/op
Iteration   4: 116.244 ns/op
Iteration   5: 116.571 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.151 ±(99.9%) 0.753 ns/op [Average]
  (min, avg, max) = (115.558, 116.151, 117.063), stdev = 0.498
  CI (99.9%): [115.397, 116.904] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 49.51% complete, ETA 00:29:38
# Fork: 1 of 2
# Warmup Iteration   1: 1056.122 ns/op
# Warmup Iteration   2: 946.980 ns/op
# Warmup Iteration   3: 642.808 ns/op
Iteration   1: 642.894 ns/op
Iteration   2: 643.259 ns/op
Iteration   3: 643.225 ns/op
Iteration   4: 648.454 ns/op
Iteration   5: 648.632 ns/op

# Run progress: 49.55% complete, ETA 00:29:37
# Fork: 2 of 2
# Warmup Iteration   1: 1100.320 ns/op
# Warmup Iteration   2: 896.140 ns/op
# Warmup Iteration   3: 642.967 ns/op
Iteration   1: 643.077 ns/op
Iteration   2: 642.937 ns/op
Iteration   3: 643.362 ns/op
Iteration   4: 648.991 ns/op
Iteration   5: 648.538 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  645.337 ±(99.9%) 4.326 ns/op [Average]
  (min, avg, max) = (642.894, 645.337, 648.991), stdev = 2.861
  CI (99.9%): [641.011, 649.663] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 49.58% complete, ETA 00:29:36
# Fork: 1 of 2
# Warmup Iteration   1: 19.517 ns/op
# Warmup Iteration   2: 25.251 ns/op
# Warmup Iteration   3: 13.709 ns/op
Iteration   1: 13.722 ns/op
Iteration   2: 13.759 ns/op
Iteration   3: 13.710 ns/op
Iteration   4: 13.883 ns/op
Iteration   5: 13.875 ns/op

# Run progress: 49.62% complete, ETA 00:29:34
# Fork: 2 of 2
# Warmup Iteration   1: 20.429 ns/op
# Warmup Iteration   2: 24.928 ns/op
# Warmup Iteration   3: 13.716 ns/op
Iteration   1: 13.728 ns/op
Iteration   2: 13.712 ns/op
Iteration   3: 13.717 ns/op
Iteration   4: 13.878 ns/op
Iteration   5: 13.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.787 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (13.710, 13.787, 13.884), stdev = 0.081
  CI (99.9%): [13.664, 13.910] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 49.65% complete, ETA 00:29:33
# Fork: 1 of 2
# Warmup Iteration   1: 771.281 ns/op
# Warmup Iteration   2: 281.346 ns/op
# Warmup Iteration   3: 188.361 ns/op
Iteration   1: 188.414 ns/op
Iteration   2: 188.357 ns/op
Iteration   3: 188.365 ns/op
Iteration   4: 188.227 ns/op
Iteration   5: 188.074 ns/op

# Run progress: 49.69% complete, ETA 00:29:32
# Fork: 2 of 2
# Warmup Iteration   1: 657.114 ns/op
# Warmup Iteration   2: 285.556 ns/op
# Warmup Iteration   3: 190.380 ns/op
Iteration   1: 189.474 ns/op
Iteration   2: 190.546 ns/op
Iteration   3: 190.627 ns/op
Iteration   4: 189.046 ns/op
Iteration   5: 189.096 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  189.023 ±(99.9%) 1.415 ns/op [Average]
  (min, avg, max) = (188.074, 189.023, 190.627), stdev = 0.936
  CI (99.9%): [187.608, 190.438] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 49.72% complete, ETA 00:29:31
# Fork: 1 of 2
# Warmup Iteration   1: 199.445 ns/op
# Warmup Iteration   2: 179.367 ns/op
# Warmup Iteration   3: 127.412 ns/op
Iteration   1: 127.713 ns/op
Iteration   2: 127.470 ns/op
Iteration   3: 127.308 ns/op
Iteration   4: 127.513 ns/op
Iteration   5: 127.452 ns/op

# Run progress: 49.76% complete, ETA 00:29:29
# Fork: 2 of 2
# Warmup Iteration   1: 200.059 ns/op
# Warmup Iteration   2: 182.322 ns/op
# Warmup Iteration   3: 127.589 ns/op
Iteration   1: 127.956 ns/op
Iteration   2: 127.639 ns/op
Iteration   3: 127.695 ns/op
Iteration   4: 127.689 ns/op
Iteration   5: 127.264 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  127.570 ±(99.9%) 0.316 ns/op [Average]
  (min, avg, max) = (127.264, 127.570, 127.956), stdev = 0.209
  CI (99.9%): [127.254, 127.886] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 49.79% complete, ETA 00:29:28
# Fork: 1 of 2
# Warmup Iteration   1: 3431.285 ns/op
# Warmup Iteration   2: 214.169 ns/op
# Warmup Iteration   3: 160.406 ns/op
Iteration   1: 160.541 ns/op
Iteration   2: 160.465 ns/op
Iteration   3: 160.520 ns/op
Iteration   4: 160.941 ns/op
Iteration   5: 160.922 ns/op

# Run progress: 49.83% complete, ETA 00:29:27
# Fork: 2 of 2
# Warmup Iteration   1: 2537.293 ns/op
# Warmup Iteration   2: 260.618 ns/op
# Warmup Iteration   3: 158.719 ns/op
Iteration   1: 158.740 ns/op
Iteration   2: 158.956 ns/op
Iteration   3: 159.516 ns/op
Iteration   4: 158.597 ns/op
Iteration   5: 158.982 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  159.818 ±(99.9%) 1.434 ns/op [Average]
  (min, avg, max) = (158.597, 159.818, 160.941), stdev = 0.949
  CI (99.9%): [158.384, 161.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 49.86% complete, ETA 00:29:26
# Fork: 1 of 2
# Warmup Iteration   1: 178.285 ns/op
# Warmup Iteration   2: 174.030 ns/op
# Warmup Iteration   3: 116.229 ns/op
Iteration   1: 116.274 ns/op
Iteration   2: 116.296 ns/op
Iteration   3: 116.310 ns/op
Iteration   4: 116.330 ns/op
Iteration   5: 116.279 ns/op

# Run progress: 49.90% complete, ETA 00:29:25
# Fork: 2 of 2
# Warmup Iteration   1: 178.196 ns/op
# Warmup Iteration   2: 165.769 ns/op
# Warmup Iteration   3: 116.258 ns/op
Iteration   1: 116.418 ns/op
Iteration   2: 116.345 ns/op
Iteration   3: 116.369 ns/op
Iteration   4: 116.309 ns/op
Iteration   5: 116.266 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.320 ±(99.9%) 0.072 ns/op [Average]
  (min, avg, max) = (116.266, 116.320, 116.418), stdev = 0.047
  CI (99.9%): [116.248, 116.391] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 49.93% complete, ETA 00:29:23
# Fork: 1 of 2
# Warmup Iteration   1: 1327.222 ns/op
# Warmup Iteration   2: 953.462 ns/op
# Warmup Iteration   3: 638.089 ns/op
Iteration   1: 637.885 ns/op
Iteration   2: 637.219 ns/op
Iteration   3: 638.431 ns/op
Iteration   4: 641.185 ns/op
Iteration   5: 641.669 ns/op

# Run progress: 49.97% complete, ETA 00:29:22
# Fork: 2 of 2
# Warmup Iteration   1: 1344.638 ns/op
# Warmup Iteration   2: 944.574 ns/op
# Warmup Iteration   3: 638.615 ns/op
Iteration   1: 637.986 ns/op
Iteration   2: 640.113 ns/op
Iteration   3: 637.626 ns/op
Iteration   4: 641.826 ns/op
Iteration   5: 643.255 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  639.719 ±(99.9%) 3.255 ns/op [Average]
  (min, avg, max) = (637.219, 639.719, 643.255), stdev = 2.153
  CI (99.9%): [636.465, 642.974] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 50.00% complete, ETA 00:29:21
# Fork: 1 of 2
# Warmup Iteration   1: 25.015 ns/op
# Warmup Iteration   2: 25.994 ns/op
# Warmup Iteration   3: 19.072 ns/op
Iteration   1: 18.994 ns/op
Iteration   2: 18.971 ns/op
Iteration   3: 18.979 ns/op
Iteration   4: 18.853 ns/op
Iteration   5: 18.849 ns/op

# Run progress: 50.03% complete, ETA 00:29:20
# Fork: 2 of 2
# Warmup Iteration   1: 25.086 ns/op
# Warmup Iteration   2: 25.710 ns/op
# Warmup Iteration   3: 19.029 ns/op
Iteration   1: 18.989 ns/op
Iteration   2: 18.971 ns/op
Iteration   3: 18.968 ns/op
Iteration   4: 18.820 ns/op
Iteration   5: 18.846 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.924 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (18.820, 18.924, 18.994), stdev = 0.072
  CI (99.9%): [18.816, 19.032] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 50.07% complete, ETA 00:29:18
# Fork: 1 of 2
# Warmup Iteration   1: 2502.483 ns/op
# Warmup Iteration   2: 1162.401 ns/op
# Warmup Iteration   3: 782.136 ns/op
Iteration   1: 784.064 ns/op
Iteration   2: 783.331 ns/op
Iteration   3: 783.809 ns/op
Iteration   4: 784.475 ns/op
Iteration   5: 787.685 ns/op

# Run progress: 50.10% complete, ETA 00:29:17
# Fork: 2 of 2
# Warmup Iteration   1: 2044.915 ns/op
# Warmup Iteration   2: 991.941 ns/op
# Warmup Iteration   3: 774.913 ns/op
Iteration   1: 783.494 ns/op
Iteration   2: 772.842 ns/op
Iteration   3: 776.422 ns/op
Iteration   4: 770.671 ns/op
Iteration   5: 779.635 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  780.643 ±(99.9%) 8.440 ns/op [Average]
  (min, avg, max) = (770.671, 780.643, 787.685), stdev = 5.582
  CI (99.9%): [772.203, 789.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 50.14% complete, ETA 00:29:16
# Fork: 1 of 2
# Warmup Iteration   1: 7726.559 ns/op
# Warmup Iteration   2: 1016.948 ns/op
# Warmup Iteration   3: 746.804 ns/op
Iteration   1: 650.321 ns/op
Iteration   2: 689.580 ns/op
Iteration   3: 641.929 ns/op
Iteration   4: 682.885 ns/op
Iteration   5: 747.338 ns/op

# Run progress: 50.17% complete, ETA 00:29:15
# Fork: 2 of 2
# Warmup Iteration   1: 13096.408 ns/op
# Warmup Iteration   2: 894.959 ns/op
# Warmup Iteration   3: 697.094 ns/op
Iteration   1: 663.034 ns/op
Iteration   2: 675.790 ns/op
Iteration   3: 721.156 ns/op
Iteration   4: 688.954 ns/op
Iteration   5: 723.836 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  688.482 ±(99.9%) 51.012 ns/op [Average]
  (min, avg, max) = (641.929, 688.482, 747.338), stdev = 33.741
  CI (99.9%): [637.470, 739.495] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 50.21% complete, ETA 00:29:14
# Fork: 1 of 2
# Warmup Iteration   1: 10954.188 ns/op
# Warmup Iteration   2: 969.368 ns/op
# Warmup Iteration   3: 639.812 ns/op
Iteration   1: 635.956 ns/op
Iteration   2: 644.460 ns/op
Iteration   3: 642.453 ns/op
Iteration   4: 637.078 ns/op
Iteration   5: 636.852 ns/op

# Run progress: 50.24% complete, ETA 00:29:12
# Fork: 2 of 2
# Warmup Iteration   1: 20114.522 ns/op
# Warmup Iteration   2: 938.216 ns/op
# Warmup Iteration   3: 805.728 ns/op
Iteration   1: 737.444 ns/op
Iteration   2: 722.627 ns/op
Iteration   3: 722.518 ns/op
Iteration   4: 735.651 ns/op
Iteration   5: 638.434 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  675.347 ±(99.9%) 71.001 ns/op [Average]
  (min, avg, max) = (635.956, 675.347, 737.444), stdev = 46.963
  CI (99.9%): [604.346, 746.349] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 50.28% complete, ETA 00:29:11
# Fork: 1 of 2
# Warmup Iteration   1: 725.282 ns/op
# Warmup Iteration   2: 657.497 ns/op
# Warmup Iteration   3: 489.475 ns/op
Iteration   1: 489.617 ns/op
Iteration   2: 489.725 ns/op
Iteration   3: 489.612 ns/op
Iteration   4: 490.348 ns/op
Iteration   5: 490.362 ns/op

# Run progress: 50.31% complete, ETA 00:29:10
# Fork: 2 of 2
# Warmup Iteration   1: 801.442 ns/op
# Warmup Iteration   2: 645.086 ns/op
# Warmup Iteration   3: 487.645 ns/op
Iteration   1: 488.330 ns/op
Iteration   2: 487.764 ns/op
Iteration   3: 488.295 ns/op
Iteration   4: 489.933 ns/op
Iteration   5: 489.612 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  489.360 ±(99.9%) 1.368 ns/op [Average]
  (min, avg, max) = (487.764, 489.360, 490.362), stdev = 0.905
  CI (99.9%): [487.991, 490.728] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 50.35% complete, ETA 00:29:09
# Fork: 1 of 2
# Warmup Iteration   1: 646.374 ns/op
# Warmup Iteration   2: 543.396 ns/op
# Warmup Iteration   3: 380.918 ns/op
Iteration   1: 379.964 ns/op
Iteration   2: 381.095 ns/op
Iteration   3: 380.436 ns/op
Iteration   4: 380.390 ns/op
Iteration   5: 380.723 ns/op

# Run progress: 50.38% complete, ETA 00:29:07
# Fork: 2 of 2
# Warmup Iteration   1: 716.498 ns/op
# Warmup Iteration   2: 546.477 ns/op
# Warmup Iteration   3: 384.693 ns/op
Iteration   1: 384.541 ns/op
Iteration   2: 384.720 ns/op
Iteration   3: 384.726 ns/op
Iteration   4: 384.109 ns/op
Iteration   5: 384.072 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  382.478 ±(99.9%) 3.162 ns/op [Average]
  (min, avg, max) = (379.964, 382.478, 384.726), stdev = 2.092
  CI (99.9%): [379.315, 385.640] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 50.42% complete, ETA 00:29:06
# Fork: 1 of 2
# Warmup Iteration   1: 23.826 ns/op
# Warmup Iteration   2: 30.853 ns/op
# Warmup Iteration   3: 19.016 ns/op
Iteration   1: 18.996 ns/op
Iteration   2: 18.965 ns/op
Iteration   3: 19.004 ns/op
Iteration   4: 18.822 ns/op
Iteration   5: 18.869 ns/op

# Run progress: 50.45% complete, ETA 00:29:05
# Fork: 2 of 2
# Warmup Iteration   1: 25.018 ns/op
# Warmup Iteration   2: 30.308 ns/op
# Warmup Iteration   3: 19.038 ns/op
Iteration   1: 18.993 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.951 ns/op
Iteration   4: 18.818 ns/op
Iteration   5: 18.851 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (18.818, 18.923, 19.004), stdev = 0.075
  CI (99.9%): [18.810, 19.036] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 50.49% complete, ETA 00:29:04
# Fork: 1 of 2
# Warmup Iteration   1: 106.334 ns/op
# Warmup Iteration   2: 115.663 ns/op
# Warmup Iteration   3: 73.475 ns/op
Iteration   1: 73.597 ns/op
Iteration   2: 73.501 ns/op
Iteration   3: 73.519 ns/op
Iteration   4: 74.190 ns/op
Iteration   5: 74.091 ns/op

# Run progress: 50.52% complete, ETA 00:29:02
# Fork: 2 of 2
# Warmup Iteration   1: 103.934 ns/op
# Warmup Iteration   2: 102.984 ns/op
# Warmup Iteration   3: 73.563 ns/op
Iteration   1: 73.655 ns/op
Iteration   2: 73.543 ns/op
Iteration   3: 73.654 ns/op
Iteration   4: 74.046 ns/op
Iteration   5: 74.182 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.798 ±(99.9%) 0.440 ns/op [Average]
  (min, avg, max) = (73.501, 73.798, 74.190), stdev = 0.291
  CI (99.9%): [73.358, 74.237] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 50.56% complete, ETA 00:29:01
# Fork: 1 of 2
# Warmup Iteration   1: 684.419 ns/op
# Warmup Iteration   2: 106.789 ns/op
# Warmup Iteration   3: 72.249 ns/op
Iteration   1: 72.274 ns/op
Iteration   2: 72.261 ns/op
Iteration   3: 72.261 ns/op
Iteration   4: 72.767 ns/op
Iteration   5: 72.749 ns/op

# Run progress: 50.59% complete, ETA 00:29:00
# Fork: 2 of 2
# Warmup Iteration   1: 977.341 ns/op
# Warmup Iteration   2: 109.124 ns/op
# Warmup Iteration   3: 72.239 ns/op
Iteration   1: 72.240 ns/op
Iteration   2: 72.258 ns/op
Iteration   3: 72.273 ns/op
Iteration   4: 72.667 ns/op
Iteration   5: 72.702 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.445 ±(99.9%) 0.361 ns/op [Average]
  (min, avg, max) = (72.240, 72.445, 72.767), stdev = 0.239
  CI (99.9%): [72.084, 72.807] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 50.63% complete, ETA 00:28:59
# Fork: 1 of 2
# Warmup Iteration   1: 232.265 ns/op
# Warmup Iteration   2: 115.915 ns/op
# Warmup Iteration   3: 71.731 ns/op
Iteration   1: 71.767 ns/op
Iteration   2: 71.748 ns/op
Iteration   3: 71.755 ns/op
Iteration   4: 72.172 ns/op
Iteration   5: 72.187 ns/op

# Run progress: 50.66% complete, ETA 00:28:58
# Fork: 2 of 2
# Warmup Iteration   1: 385.733 ns/op
# Warmup Iteration   2: 103.775 ns/op
# Warmup Iteration   3: 71.707 ns/op
Iteration   1: 71.734 ns/op
Iteration   2: 71.768 ns/op
Iteration   3: 71.756 ns/op
Iteration   4: 72.194 ns/op
Iteration   5: 72.191 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.927 ±(99.9%) 0.337 ns/op [Average]
  (min, avg, max) = (71.734, 71.927, 72.194), stdev = 0.223
  CI (99.9%): [71.590, 72.265] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 50.69% complete, ETA 00:28:56
# Fork: 1 of 2
# Warmup Iteration   1: 114.970 ns/op
# Warmup Iteration   2: 107.526 ns/op
# Warmup Iteration   3: 73.561 ns/op
Iteration   1: 73.616 ns/op
Iteration   2: 73.556 ns/op
Iteration   3: 73.557 ns/op
Iteration   4: 74.286 ns/op
Iteration   5: 74.279 ns/op

# Run progress: 50.73% complete, ETA 00:28:55
# Fork: 2 of 2
# Warmup Iteration   1: 104.009 ns/op
# Warmup Iteration   2: 112.103 ns/op
# Warmup Iteration   3: 73.536 ns/op
Iteration   1: 73.541 ns/op
Iteration   2: 73.603 ns/op
Iteration   3: 73.571 ns/op
Iteration   4: 74.287 ns/op
Iteration   5: 74.327 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.862 ±(99.9%) 0.564 ns/op [Average]
  (min, avg, max) = (73.541, 73.862, 74.327), stdev = 0.373
  CI (99.9%): [73.299, 74.426] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 50.76% complete, ETA 00:28:54
# Fork: 1 of 2
# Warmup Iteration   1: 231.075 ns/op
# Warmup Iteration   2: 216.702 ns/op
# Warmup Iteration   3: 146.245 ns/op
Iteration   1: 146.271 ns/op
Iteration   2: 146.741 ns/op
Iteration   3: 145.753 ns/op
Iteration   4: 145.624 ns/op
Iteration   5: 145.570 ns/op

# Run progress: 50.80% complete, ETA 00:28:53
# Fork: 2 of 2
# Warmup Iteration   1: 203.425 ns/op
# Warmup Iteration   2: 202.315 ns/op
# Warmup Iteration   3: 146.152 ns/op
Iteration   1: 146.740 ns/op
Iteration   2: 146.159 ns/op
Iteration   3: 146.348 ns/op
Iteration   4: 146.107 ns/op
Iteration   5: 146.412 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.172 ±(99.9%) 0.635 ns/op [Average]
  (min, avg, max) = (145.570, 146.172, 146.741), stdev = 0.420
  CI (99.9%): [145.537, 146.807] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 50.83% complete, ETA 00:28:51
# Fork: 1 of 2
# Warmup Iteration   1: 25.049 ns/op
# Warmup Iteration   2: 30.064 ns/op
# Warmup Iteration   3: 19.039 ns/op
Iteration   1: 18.999 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.969 ns/op
Iteration   4: 18.826 ns/op
Iteration   5: 18.853 ns/op

# Run progress: 50.87% complete, ETA 00:28:50
# Fork: 2 of 2
# Warmup Iteration   1: 23.230 ns/op
# Warmup Iteration   2: 28.243 ns/op
# Warmup Iteration   3: 19.033 ns/op
Iteration   1: 18.990 ns/op
Iteration   2: 18.986 ns/op
Iteration   3: 18.942 ns/op
Iteration   4: 19.574 ns/op
Iteration   5: 19.538 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.064 ±(99.9%) 0.402 ns/op [Average]
  (min, avg, max) = (18.826, 19.064, 19.574), stdev = 0.266
  CI (99.9%): [18.662, 19.466] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 50.90% complete, ETA 00:28:49
# Fork: 1 of 2
# Warmup Iteration   1: 101.727 ns/op
# Warmup Iteration   2: 110.867 ns/op
# Warmup Iteration   3: 73.729 ns/op
Iteration   1: 73.678 ns/op
Iteration   2: 73.707 ns/op
Iteration   3: 73.568 ns/op
Iteration   4: 74.100 ns/op
Iteration   5: 74.143 ns/op

# Run progress: 50.94% complete, ETA 00:28:48
# Fork: 2 of 2
# Warmup Iteration   1: 106.781 ns/op
# Warmup Iteration   2: 117.227 ns/op
# Warmup Iteration   3: 73.798 ns/op
Iteration   1: 73.702 ns/op
Iteration   2: 73.897 ns/op
Iteration   3: 73.798 ns/op
Iteration   4: 74.392 ns/op
Iteration   5: 74.213 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.920 ±(99.9%) 0.416 ns/op [Average]
  (min, avg, max) = (73.568, 73.920, 74.392), stdev = 0.275
  CI (99.9%): [73.504, 74.336] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 50.97% complete, ETA 00:28:47
# Fork: 1 of 2
# Warmup Iteration   1: 513.162 ns/op
# Warmup Iteration   2: 101.836 ns/op
# Warmup Iteration   3: 70.778 ns/op
Iteration   1: 70.757 ns/op
Iteration   2: 70.762 ns/op
Iteration   3: 70.852 ns/op
Iteration   4: 71.402 ns/op
Iteration   5: 71.385 ns/op

# Run progress: 51.01% complete, ETA 00:28:45
# Fork: 2 of 2
# Warmup Iteration   1: 506.871 ns/op
# Warmup Iteration   2: 101.235 ns/op
# Warmup Iteration   3: 70.814 ns/op
Iteration   1: 70.794 ns/op
Iteration   2: 70.751 ns/op
Iteration   3: 70.859 ns/op
Iteration   4: 71.394 ns/op
Iteration   5: 71.407 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.036 ±(99.9%) 0.473 ns/op [Average]
  (min, avg, max) = (70.751, 71.036, 71.407), stdev = 0.313
  CI (99.9%): [70.564, 71.509] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 51.04% complete, ETA 00:28:44
# Fork: 1 of 2
# Warmup Iteration   1: 235.735 ns/op
# Warmup Iteration   2: 108.877 ns/op
# Warmup Iteration   3: 71.734 ns/op
Iteration   1: 71.779 ns/op
Iteration   2: 71.747 ns/op
Iteration   3: 71.754 ns/op
Iteration   4: 72.161 ns/op
Iteration   5: 72.153 ns/op

# Run progress: 51.08% complete, ETA 00:28:43
# Fork: 2 of 2
# Warmup Iteration   1: 242.077 ns/op
# Warmup Iteration   2: 103.081 ns/op
# Warmup Iteration   3: 71.937 ns/op
Iteration   1: 71.804 ns/op
Iteration   2: 72.135 ns/op
Iteration   3: 71.954 ns/op
Iteration   4: 72.250 ns/op
Iteration   5: 72.286 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.002 ±(99.9%) 0.329 ns/op [Average]
  (min, avg, max) = (71.747, 72.002, 72.286), stdev = 0.217
  CI (99.9%): [71.674, 72.331] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 51.11% complete, ETA 00:28:42
# Fork: 1 of 2
# Warmup Iteration   1: 107.989 ns/op
# Warmup Iteration   2: 106.108 ns/op
# Warmup Iteration   3: 73.561 ns/op
Iteration   1: 73.559 ns/op
Iteration   2: 73.609 ns/op
Iteration   3: 73.602 ns/op
Iteration   4: 74.264 ns/op
Iteration   5: 74.312 ns/op

# Run progress: 51.15% complete, ETA 00:28:40
# Fork: 2 of 2
# Warmup Iteration   1: 106.882 ns/op
# Warmup Iteration   2: 106.937 ns/op
# Warmup Iteration   3: 73.554 ns/op
Iteration   1: 73.528 ns/op
Iteration   2: 73.605 ns/op
Iteration   3: 73.606 ns/op
Iteration   4: 74.317 ns/op
Iteration   5: 74.312 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.871 ±(99.9%) 0.561 ns/op [Average]
  (min, avg, max) = (73.528, 73.871, 74.317), stdev = 0.371
  CI (99.9%): [73.311, 74.432] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 51.18% complete, ETA 00:28:39
# Fork: 1 of 2
# Warmup Iteration   1: 201.980 ns/op
# Warmup Iteration   2: 176.829 ns/op
# Warmup Iteration   3: 145.782 ns/op
Iteration   1: 146.020 ns/op
Iteration   2: 146.198 ns/op
Iteration   3: 146.479 ns/op
Iteration   4: 146.160 ns/op
Iteration   5: 146.572 ns/op

# Run progress: 51.22% complete, ETA 00:28:38
# Fork: 2 of 2
# Warmup Iteration   1: 207.566 ns/op
# Warmup Iteration   2: 218.061 ns/op
# Warmup Iteration   3: 145.721 ns/op
Iteration   1: 145.643 ns/op
Iteration   2: 145.637 ns/op
Iteration   3: 145.900 ns/op
Iteration   4: 145.914 ns/op
Iteration   5: 145.682 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.020 ±(99.9%) 0.502 ns/op [Average]
  (min, avg, max) = (145.637, 146.020, 146.572), stdev = 0.332
  CI (99.9%): [145.518, 146.523] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 51.25% complete, ETA 00:28:37
# Fork: 1 of 2
# Warmup Iteration   1: 24.781 ns/op
# Warmup Iteration   2: 26.434 ns/op
# Warmup Iteration   3: 19.060 ns/op
Iteration   1: 18.991 ns/op
Iteration   2: 18.989 ns/op
Iteration   3: 18.961 ns/op
Iteration   4: 19.571 ns/op
Iteration   5: 19.531 ns/op

# Run progress: 51.28% complete, ETA 00:28:36
# Fork: 2 of 2
# Warmup Iteration   1: 24.480 ns/op
# Warmup Iteration   2: 27.069 ns/op
# Warmup Iteration   3: 19.028 ns/op
Iteration   1: 18.987 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.962 ns/op
Iteration   4: 18.841 ns/op
Iteration   5: 18.855 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.064 ±(99.9%) 0.397 ns/op [Average]
  (min, avg, max) = (18.841, 19.064, 19.571), stdev = 0.262
  CI (99.9%): [18.667, 19.460] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 51.32% complete, ETA 00:28:34
# Fork: 1 of 2
# Warmup Iteration   1: 113.530 ns/op
# Warmup Iteration   2: 118.291 ns/op
# Warmup Iteration   3: 80.027 ns/op
Iteration   1: 80.082 ns/op
Iteration   2: 80.202 ns/op
Iteration   3: 80.186 ns/op
Iteration   4: 80.641 ns/op
Iteration   5: 80.589 ns/op

# Run progress: 51.35% complete, ETA 00:28:33
# Fork: 2 of 2
# Warmup Iteration   1: 130.529 ns/op
# Warmup Iteration   2: 107.823 ns/op
# Warmup Iteration   3: 80.153 ns/op
Iteration   1: 80.022 ns/op
Iteration   2: 80.030 ns/op
Iteration   3: 80.177 ns/op
Iteration   4: 80.680 ns/op
Iteration   5: 80.573 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  80.318 ±(99.9%) 0.407 ns/op [Average]
  (min, avg, max) = (80.022, 80.318, 80.680), stdev = 0.269
  CI (99.9%): [79.911, 80.725] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 51.39% complete, ETA 00:28:32
# Fork: 1 of 2
# Warmup Iteration   1: 922.746 ns/op
# Warmup Iteration   2: 159.976 ns/op
# Warmup Iteration   3: 108.426 ns/op
Iteration   1: 108.322 ns/op
Iteration   2: 108.347 ns/op
Iteration   3: 108.318 ns/op
Iteration   4: 108.552 ns/op
Iteration   5: 108.481 ns/op

# Run progress: 51.42% complete, ETA 00:28:31
# Fork: 2 of 2
# Warmup Iteration   1: 686.816 ns/op
# Warmup Iteration   2: 169.330 ns/op
# Warmup Iteration   3: 108.162 ns/op
Iteration   1: 108.366 ns/op
Iteration   2: 108.281 ns/op
Iteration   3: 108.117 ns/op
Iteration   4: 109.096 ns/op
Iteration   5: 109.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.501 ±(99.9%) 0.519 ns/op [Average]
  (min, avg, max) = (108.117, 108.501, 109.132), stdev = 0.343
  CI (99.9%): [107.983, 109.020] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 51.46% complete, ETA 00:28:29
# Fork: 1 of 2
# Warmup Iteration   1: 528.487 ns/op
# Warmup Iteration   2: 162.721 ns/op
# Warmup Iteration   3: 108.774 ns/op
Iteration   1: 108.781 ns/op
Iteration   2: 108.847 ns/op
Iteration   3: 108.854 ns/op
Iteration   4: 109.120 ns/op
Iteration   5: 109.167 ns/op

# Run progress: 51.49% complete, ETA 00:28:28
# Fork: 2 of 2
# Warmup Iteration   1: 617.028 ns/op
# Warmup Iteration   2: 152.090 ns/op
# Warmup Iteration   3: 108.624 ns/op
Iteration   1: 108.670 ns/op
Iteration   2: 108.651 ns/op
Iteration   3: 108.633 ns/op
Iteration   4: 108.911 ns/op
Iteration   5: 108.922 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.855 ±(99.9%) 0.279 ns/op [Average]
  (min, avg, max) = (108.633, 108.855, 109.167), stdev = 0.184
  CI (99.9%): [108.577, 109.134] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 51.53% complete, ETA 00:28:27
# Fork: 1 of 2
# Warmup Iteration   1: 104.311 ns/op
# Warmup Iteration   2: 106.759 ns/op
# Warmup Iteration   3: 74.187 ns/op
Iteration   1: 74.285 ns/op
Iteration   2: 74.142 ns/op
Iteration   3: 74.144 ns/op
Iteration   4: 74.806 ns/op
Iteration   5: 74.769 ns/op

# Run progress: 51.56% complete, ETA 00:28:26
# Fork: 2 of 2
# Warmup Iteration   1: 102.940 ns/op
# Warmup Iteration   2: 107.183 ns/op
# Warmup Iteration   3: 73.548 ns/op
Iteration   1: 73.526 ns/op
Iteration   2: 73.572 ns/op
Iteration   3: 73.553 ns/op
Iteration   4: 74.252 ns/op
Iteration   5: 74.258 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.131 ±(99.9%) 0.700 ns/op [Average]
  (min, avg, max) = (73.526, 74.131, 74.806), stdev = 0.463
  CI (99.9%): [73.430, 74.831] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 51.60% complete, ETA 00:28:25
# Fork: 1 of 2
# Warmup Iteration   1: 223.065 ns/op
# Warmup Iteration   2: 226.474 ns/op
# Warmup Iteration   3: 156.927 ns/op
Iteration   1: 156.910 ns/op
Iteration   2: 156.357 ns/op
Iteration   3: 156.309 ns/op
Iteration   4: 156.979 ns/op
Iteration   5: 156.969 ns/op

# Run progress: 51.63% complete, ETA 00:28:23
# Fork: 2 of 2
# Warmup Iteration   1: 226.930 ns/op
# Warmup Iteration   2: 224.503 ns/op
# Warmup Iteration   3: 156.888 ns/op
Iteration   1: 156.562 ns/op
Iteration   2: 156.889 ns/op
Iteration   3: 156.913 ns/op
Iteration   4: 157.019 ns/op
Iteration   5: 156.972 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.788 ±(99.9%) 0.411 ns/op [Average]
  (min, avg, max) = (156.309, 156.788, 157.019), stdev = 0.272
  CI (99.9%): [156.377, 157.199] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 51.67% complete, ETA 00:28:22
# Fork: 1 of 2
# Warmup Iteration   1: 23.558 ns/op
# Warmup Iteration   2: 28.666 ns/op
# Warmup Iteration   3: 19.029 ns/op
Iteration   1: 18.995 ns/op
Iteration   2: 18.952 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.834 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 51.70% complete, ETA 00:28:21
# Fork: 2 of 2
# Warmup Iteration   1: 25.440 ns/op
# Warmup Iteration   2: 28.345 ns/op
# Warmup Iteration   3: 19.026 ns/op
Iteration   1: 18.997 ns/op
Iteration   2: 18.981 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.824 ns/op
Iteration   5: 18.844 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (18.824, 18.919, 18.997), stdev = 0.073
  CI (99.9%): [18.809, 19.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 51.74% complete, ETA 00:28:20
# Fork: 1 of 2
# Warmup Iteration   1: 242.780 ns/op
# Warmup Iteration   2: 201.603 ns/op
# Warmup Iteration   3: 137.548 ns/op
Iteration   1: 137.332 ns/op
Iteration   2: 137.612 ns/op
Iteration   3: 137.426 ns/op
Iteration   4: 138.034 ns/op
Iteration   5: 138.447 ns/op

# Run progress: 51.77% complete, ETA 00:28:18
# Fork: 2 of 2
# Warmup Iteration   1: 258.464 ns/op
# Warmup Iteration   2: 188.589 ns/op
# Warmup Iteration   3: 137.918 ns/op
Iteration   1: 138.194 ns/op
Iteration   2: 138.080 ns/op
Iteration   3: 138.117 ns/op
Iteration   4: 138.577 ns/op
Iteration   5: 139.024 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.084 ±(99.9%) 0.796 ns/op [Average]
  (min, avg, max) = (137.332, 138.084, 139.024), stdev = 0.526
  CI (99.9%): [137.288, 138.880] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 51.81% complete, ETA 00:28:17
# Fork: 1 of 2
# Warmup Iteration   1: 348.833 ns/op
# Warmup Iteration   2: 215.007 ns/op
# Warmup Iteration   3: 155.953 ns/op
Iteration   1: 155.930 ns/op
Iteration   2: 155.959 ns/op
Iteration   3: 155.941 ns/op
Iteration   4: 156.788 ns/op
Iteration   5: 156.583 ns/op

# Run progress: 51.84% complete, ETA 00:28:16
# Fork: 2 of 2
# Warmup Iteration   1: 374.345 ns/op
# Warmup Iteration   2: 209.957 ns/op
# Warmup Iteration   3: 156.145 ns/op
Iteration   1: 156.220 ns/op
Iteration   2: 156.189 ns/op
Iteration   3: 156.221 ns/op
Iteration   4: 156.996 ns/op
Iteration   5: 156.972 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.380 ±(99.9%) 0.637 ns/op [Average]
  (min, avg, max) = (155.930, 156.380, 156.996), stdev = 0.421
  CI (99.9%): [155.743, 157.017] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 51.88% complete, ETA 00:28:15
# Fork: 1 of 2
# Warmup Iteration   1: 1587.825 ns/op
# Warmup Iteration   2: 292.682 ns/op
# Warmup Iteration   3: 209.758 ns/op
Iteration   1: 209.586 ns/op
Iteration   2: 209.589 ns/op
Iteration   3: 209.929 ns/op
Iteration   4: 210.352 ns/op
Iteration   5: 210.093 ns/op

# Run progress: 51.91% complete, ETA 00:28:14
# Fork: 2 of 2
# Warmup Iteration   1: 431.870 ns/op
# Warmup Iteration   2: 310.491 ns/op
# Warmup Iteration   3: 210.158 ns/op
Iteration   1: 209.716 ns/op
Iteration   2: 209.611 ns/op
Iteration   3: 209.852 ns/op
Iteration   4: 210.092 ns/op
Iteration   5: 210.413 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  209.923 ±(99.9%) 0.465 ns/op [Average]
  (min, avg, max) = (209.586, 209.923, 210.413), stdev = 0.308
  CI (99.9%): [209.458, 210.389] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 51.94% complete, ETA 00:28:12
# Fork: 1 of 2
# Warmup Iteration   1: 107.175 ns/op
# Warmup Iteration   2: 107.955 ns/op
# Warmup Iteration   3: 73.587 ns/op
Iteration   1: 73.597 ns/op
Iteration   2: 73.587 ns/op
Iteration   3: 73.611 ns/op
Iteration   4: 74.267 ns/op
Iteration   5: 74.346 ns/op

# Run progress: 51.98% complete, ETA 00:28:11
# Fork: 2 of 2
# Warmup Iteration   1: 105.596 ns/op
# Warmup Iteration   2: 105.796 ns/op
# Warmup Iteration   3: 73.558 ns/op
Iteration   1: 73.529 ns/op
Iteration   2: 73.575 ns/op
Iteration   3: 73.576 ns/op
Iteration   4: 74.250 ns/op
Iteration   5: 74.281 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.862 ±(99.9%) 0.554 ns/op [Average]
  (min, avg, max) = (73.529, 73.862, 74.346), stdev = 0.366
  CI (99.9%): [73.308, 74.416] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 52.01% complete, ETA 00:28:10
# Fork: 1 of 2
# Warmup Iteration   1: 234.510 ns/op
# Warmup Iteration   2: 207.912 ns/op
# Warmup Iteration   3: 156.411 ns/op
Iteration   1: 156.885 ns/op
Iteration   2: 157.000 ns/op
Iteration   3: 156.882 ns/op
Iteration   4: 157.235 ns/op
Iteration   5: 156.960 ns/op

# Run progress: 52.05% complete, ETA 00:28:09
# Fork: 2 of 2
# Warmup Iteration   1: 219.718 ns/op
# Warmup Iteration   2: 233.932 ns/op
# Warmup Iteration   3: 156.880 ns/op
Iteration   1: 156.917 ns/op
Iteration   2: 157.110 ns/op
Iteration   3: 156.747 ns/op
Iteration   4: 157.020 ns/op
Iteration   5: 157.044 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.980 ±(99.9%) 0.205 ns/op [Average]
  (min, avg, max) = (156.747, 156.980, 157.235), stdev = 0.136
  CI (99.9%): [156.775, 157.185] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 52.08% complete, ETA 00:28:08
# Fork: 1 of 2
# Warmup Iteration   1: 25.916 ns/op
# Warmup Iteration   2: 30.876 ns/op
# Warmup Iteration   3: 19.052 ns/op
Iteration   1: 18.964 ns/op
Iteration   2: 18.979 ns/op
Iteration   3: 18.943 ns/op
Iteration   4: 19.570 ns/op
Iteration   5: 19.540 ns/op

# Run progress: 52.12% complete, ETA 00:28:06
# Fork: 2 of 2
# Warmup Iteration   1: 24.370 ns/op
# Warmup Iteration   2: 29.876 ns/op
# Warmup Iteration   3: 19.026 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.978 ns/op
Iteration   3: 18.977 ns/op
Iteration   4: 18.836 ns/op
Iteration   5: 18.857 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.063 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (18.836, 19.063, 19.570), stdev = 0.265
  CI (99.9%): [18.664, 19.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 52.15% complete, ETA 00:28:05
# Fork: 1 of 2
# Warmup Iteration   1: 1719.425 ns/op
# Warmup Iteration   2: 999.685 ns/op
# Warmup Iteration   3: 703.391 ns/op
Iteration   1: 701.620 ns/op
Iteration   2: 708.564 ns/op
Iteration   3: 696.860 ns/op
Iteration   4: 697.079 ns/op
Iteration   5: 697.122 ns/op

# Run progress: 52.19% complete, ETA 00:28:04
# Fork: 2 of 2
# Warmup Iteration   1: 2133.879 ns/op
# Warmup Iteration   2: 1016.745 ns/op
# Warmup Iteration   3: 722.175 ns/op
Iteration   1: 716.727 ns/op
Iteration   2: 718.500 ns/op
Iteration   3: 728.252 ns/op
Iteration   4: 714.644 ns/op
Iteration   5: 716.607 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  709.598 ±(99.9%) 16.653 ns/op [Average]
  (min, avg, max) = (696.860, 709.598, 728.252), stdev = 11.015
  CI (99.9%): [692.944, 726.251] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 52.22% complete, ETA 00:28:03
# Fork: 1 of 2
# Warmup Iteration   1: 14317.682 ns/op
# Warmup Iteration   2: 1435.988 ns/op
# Warmup Iteration   3: 1220.522 ns/op
Iteration   1: 1110.329 ns/op
Iteration   2: 1109.392 ns/op
Iteration   3: 1110.085 ns/op
Iteration   4: 1112.685 ns/op
Iteration   5: 1112.706 ns/op

# Run progress: 52.26% complete, ETA 00:28:01
# Fork: 2 of 2
# Warmup Iteration   1: 10930.285 ns/op
# Warmup Iteration   2: 1770.738 ns/op
# Warmup Iteration   3: 1126.517 ns/op
Iteration   1: 1107.950 ns/op
Iteration   2: 1108.738 ns/op
Iteration   3: 1107.950 ns/op
Iteration   4: 1110.267 ns/op
Iteration   5: 1110.549 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1110.065 ±(99.9%) 2.537 ns/op [Average]
  (min, avg, max) = (1107.950, 1110.065, 1112.706), stdev = 1.678
  CI (99.9%): [1107.528, 1112.602] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 52.29% complete, ETA 00:28:00
# Fork: 1 of 2
# Warmup Iteration   1: 10830.929 ns/op
# Warmup Iteration   2: 1661.957 ns/op
# Warmup Iteration   3: 1109.834 ns/op
Iteration   1: 1109.990 ns/op
Iteration   2: 1109.889 ns/op
Iteration   3: 1109.494 ns/op
Iteration   4: 1112.003 ns/op
Iteration   5: 1112.147 ns/op

# Run progress: 52.33% complete, ETA 00:27:59
# Fork: 2 of 2
# Warmup Iteration   1: 21115.123 ns/op
# Warmup Iteration   2: 1836.344 ns/op
# Warmup Iteration   3: 1214.828 ns/op
Iteration   1: 1118.092 ns/op
Iteration   2: 1118.404 ns/op
Iteration   3: 1117.663 ns/op
Iteration   4: 1119.791 ns/op
Iteration   5: 1119.292 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1114.677 ±(99.9%) 6.517 ns/op [Average]
  (min, avg, max) = (1109.494, 1114.677, 1119.791), stdev = 4.311
  CI (99.9%): [1108.160, 1121.194] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 52.36% complete, ETA 00:27:58
# Fork: 1 of 2
# Warmup Iteration   1: 2112.204 ns/op
# Warmup Iteration   2: 1699.168 ns/op
# Warmup Iteration   3: 1320.118 ns/op
Iteration   1: 1315.554 ns/op
Iteration   2: 1322.296 ns/op
Iteration   3: 1306.068 ns/op
Iteration   4: 1326.088 ns/op
Iteration   5: 1319.774 ns/op

# Run progress: 52.40% complete, ETA 00:27:56
# Fork: 2 of 2
# Warmup Iteration   1: 2059.843 ns/op
# Warmup Iteration   2: 1756.196 ns/op
# Warmup Iteration   3: 1279.986 ns/op
Iteration   1: 1279.854 ns/op
Iteration   2: 1280.897 ns/op
Iteration   3: 1279.780 ns/op
Iteration   4: 1280.705 ns/op
Iteration   5: 1280.595 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1299.161 ±(99.9%) 30.938 ns/op [Average]
  (min, avg, max) = (1279.780, 1299.161, 1326.088), stdev = 20.464
  CI (99.9%): [1268.223, 1330.100] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 52.43% complete, ETA 00:27:55
# Fork: 1 of 2
# Warmup Iteration   1: 1029.907 ns/op
# Warmup Iteration   2: 634.856 ns/op
# Warmup Iteration   3: 466.639 ns/op
Iteration   1: 466.790 ns/op
Iteration   2: 467.058 ns/op
Iteration   3: 466.779 ns/op
Iteration   4: 466.382 ns/op
Iteration   5: 466.033 ns/op

# Run progress: 52.47% complete, ETA 00:27:54
# Fork: 2 of 2
# Warmup Iteration   1: 979.036 ns/op
# Warmup Iteration   2: 624.985 ns/op
# Warmup Iteration   3: 464.976 ns/op
Iteration   1: 464.902 ns/op
Iteration   2: 464.832 ns/op
Iteration   3: 465.156 ns/op
Iteration   4: 463.123 ns/op
Iteration   5: 463.284 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  465.434 ±(99.9%) 2.152 ns/op [Average]
  (min, avg, max) = (463.123, 465.434, 467.058), stdev = 1.423
  CI (99.9%): [463.282, 467.585] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 52.50% complete, ETA 00:27:53
# Fork: 1 of 2
# Warmup Iteration   1: 23.524 ns/op
# Warmup Iteration   2: 28.695 ns/op
# Warmup Iteration   3: 19.041 ns/op
Iteration   1: 18.988 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.951 ns/op
Iteration   4: 18.843 ns/op
Iteration   5: 18.831 ns/op

# Run progress: 52.53% complete, ETA 00:27:52
# Fork: 2 of 2
# Warmup Iteration   1: 25.280 ns/op
# Warmup Iteration   2: 27.771 ns/op
# Warmup Iteration   3: 19.023 ns/op
Iteration   1: 18.995 ns/op
Iteration   2: 18.957 ns/op
Iteration   3: 18.930 ns/op
Iteration   4: 18.814 ns/op
Iteration   5: 18.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.911 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (18.814, 18.911, 18.995), stdev = 0.072
  CI (99.9%): [18.803, 19.019] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 52.57% complete, ETA 00:27:50
# Fork: 1 of 2
# Warmup Iteration   1: 104.523 ns/op
# Warmup Iteration   2: 112.212 ns/op
# Warmup Iteration   3: 73.530 ns/op
Iteration   1: 73.632 ns/op
Iteration   2: 73.656 ns/op
Iteration   3: 73.641 ns/op
Iteration   4: 74.117 ns/op
Iteration   5: 74.186 ns/op

# Run progress: 52.60% complete, ETA 00:27:49
# Fork: 2 of 2
# Warmup Iteration   1: 103.173 ns/op
# Warmup Iteration   2: 104.328 ns/op
# Warmup Iteration   3: 73.567 ns/op
Iteration   1: 73.561 ns/op
Iteration   2: 73.686 ns/op
Iteration   3: 73.792 ns/op
Iteration   4: 74.107 ns/op
Iteration   5: 74.327 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.871 ±(99.9%) 0.427 ns/op [Average]
  (min, avg, max) = (73.561, 73.871, 74.327), stdev = 0.282
  CI (99.9%): [73.444, 74.297] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 52.64% complete, ETA 00:27:48
# Fork: 1 of 2
# Warmup Iteration   1: 837.875 ns/op
# Warmup Iteration   2: 116.627 ns/op
# Warmup Iteration   3: 72.233 ns/op
Iteration   1: 72.259 ns/op
Iteration   2: 72.265 ns/op
Iteration   3: 72.248 ns/op
Iteration   4: 72.668 ns/op
Iteration   5: 72.649 ns/op

# Run progress: 52.67% complete, ETA 00:27:47
# Fork: 2 of 2
# Warmup Iteration   1: 423.042 ns/op
# Warmup Iteration   2: 104.021 ns/op
# Warmup Iteration   3: 70.751 ns/op
Iteration   1: 70.784 ns/op
Iteration   2: 70.752 ns/op
Iteration   3: 70.775 ns/op
Iteration   4: 71.417 ns/op
Iteration   5: 71.534 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.735 ±(99.9%) 1.177 ns/op [Average]
  (min, avg, max) = (70.752, 71.735, 72.668), stdev = 0.779
  CI (99.9%): [70.558, 72.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 52.71% complete, ETA 00:27:45
# Fork: 1 of 2
# Warmup Iteration   1: 236.619 ns/op
# Warmup Iteration   2: 108.686 ns/op
# Warmup Iteration   3: 71.741 ns/op
Iteration   1: 71.785 ns/op
Iteration   2: 71.792 ns/op
Iteration   3: 71.762 ns/op
Iteration   4: 72.200 ns/op
Iteration   5: 72.175 ns/op

# Run progress: 52.74% complete, ETA 00:27:44
# Fork: 2 of 2
# Warmup Iteration   1: 252.958 ns/op
# Warmup Iteration   2: 104.106 ns/op
# Warmup Iteration   3: 71.743 ns/op
Iteration   1: 71.717 ns/op
Iteration   2: 71.783 ns/op
Iteration   3: 71.727 ns/op
Iteration   4: 72.187 ns/op
Iteration   5: 72.200 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.933 ±(99.9%) 0.337 ns/op [Average]
  (min, avg, max) = (71.717, 71.933, 72.200), stdev = 0.223
  CI (99.9%): [71.595, 72.270] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 52.78% complete, ETA 00:27:43
# Fork: 1 of 2
# Warmup Iteration   1: 105.065 ns/op
# Warmup Iteration   2: 107.719 ns/op
# Warmup Iteration   3: 73.515 ns/op
Iteration   1: 73.566 ns/op
Iteration   2: 73.581 ns/op
Iteration   3: 73.539 ns/op
Iteration   4: 74.258 ns/op
Iteration   5: 74.238 ns/op

# Run progress: 52.81% complete, ETA 00:27:42
# Fork: 2 of 2
# Warmup Iteration   1: 114.992 ns/op
# Warmup Iteration   2: 117.406 ns/op
# Warmup Iteration   3: 73.541 ns/op
Iteration   1: 73.578 ns/op
Iteration   2: 73.610 ns/op
Iteration   3: 73.566 ns/op
Iteration   4: 74.303 ns/op
Iteration   5: 74.267 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.851 ±(99.9%) 0.542 ns/op [Average]
  (min, avg, max) = (73.539, 73.851, 74.303), stdev = 0.359
  CI (99.9%): [73.308, 74.393] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 52.85% complete, ETA 00:27:41
# Fork: 1 of 2
# Warmup Iteration   1: 208.837 ns/op
# Warmup Iteration   2: 210.386 ns/op
# Warmup Iteration   3: 145.936 ns/op
Iteration   1: 145.462 ns/op
Iteration   2: 146.399 ns/op
Iteration   3: 145.771 ns/op
Iteration   4: 145.939 ns/op
Iteration   5: 145.684 ns/op

# Run progress: 52.88% complete, ETA 00:27:39
# Fork: 2 of 2
# Warmup Iteration   1: 211.899 ns/op
# Warmup Iteration   2: 224.316 ns/op
# Warmup Iteration   3: 145.358 ns/op
Iteration   1: 145.588 ns/op
Iteration   2: 145.477 ns/op
Iteration   3: 145.884 ns/op
Iteration   4: 146.234 ns/op
Iteration   5: 145.849 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.829 ±(99.9%) 0.463 ns/op [Average]
  (min, avg, max) = (145.462, 145.829, 146.399), stdev = 0.306
  CI (99.9%): [145.365, 146.292] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 52.92% complete, ETA 00:27:38
# Fork: 1 of 2
# Warmup Iteration   1: 23.635 ns/op
# Warmup Iteration   2: 27.041 ns/op
# Warmup Iteration   3: 19.009 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.942 ns/op
Iteration   3: 18.948 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 52.95% complete, ETA 00:27:37
# Fork: 2 of 2
# Warmup Iteration   1: 23.828 ns/op
# Warmup Iteration   2: 31.057 ns/op
# Warmup Iteration   3: 19.107 ns/op
Iteration   1: 18.991 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.945 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.860 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (18.828, 18.915, 18.992), stdev = 0.066
  CI (99.9%): [18.814, 19.015] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 52.99% complete, ETA 00:27:36
# Fork: 1 of 2
# Warmup Iteration   1: 119.847 ns/op
# Warmup Iteration   2: 117.024 ns/op
# Warmup Iteration   3: 73.667 ns/op
Iteration   1: 73.609 ns/op
Iteration   2: 73.561 ns/op
Iteration   3: 73.711 ns/op
Iteration   4: 74.304 ns/op
Iteration   5: 74.288 ns/op

# Run progress: 53.02% complete, ETA 00:27:34
# Fork: 2 of 2
# Warmup Iteration   1: 101.438 ns/op
# Warmup Iteration   2: 111.185 ns/op
# Warmup Iteration   3: 73.592 ns/op
Iteration   1: 73.599 ns/op
Iteration   2: 73.573 ns/op
Iteration   3: 73.695 ns/op
Iteration   4: 74.155 ns/op
Iteration   5: 74.196 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.869 ±(99.9%) 0.486 ns/op [Average]
  (min, avg, max) = (73.561, 73.869, 74.304), stdev = 0.322
  CI (99.9%): [73.383, 74.355] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 53.06% complete, ETA 00:27:33
# Fork: 1 of 2
# Warmup Iteration   1: 440.629 ns/op
# Warmup Iteration   2: 101.426 ns/op
# Warmup Iteration   3: 70.723 ns/op
Iteration   1: 70.758 ns/op
Iteration   2: 70.726 ns/op
Iteration   3: 70.763 ns/op
Iteration   4: 71.432 ns/op
Iteration   5: 71.393 ns/op

# Run progress: 53.09% complete, ETA 00:27:32
# Fork: 2 of 2
# Warmup Iteration   1: 416.059 ns/op
# Warmup Iteration   2: 103.617 ns/op
# Warmup Iteration   3: 70.857 ns/op
Iteration   1: 70.866 ns/op
Iteration   2: 70.768 ns/op
Iteration   3: 70.755 ns/op
Iteration   4: 71.402 ns/op
Iteration   5: 71.402 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.026 ±(99.9%) 0.499 ns/op [Average]
  (min, avg, max) = (70.726, 71.026, 71.432), stdev = 0.330
  CI (99.9%): [70.528, 71.525] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 53.13% complete, ETA 00:27:31
# Fork: 1 of 2
# Warmup Iteration   1: 217.464 ns/op
# Warmup Iteration   2: 108.260 ns/op
# Warmup Iteration   3: 71.755 ns/op
Iteration   1: 71.776 ns/op
Iteration   2: 71.738 ns/op
Iteration   3: 71.791 ns/op
Iteration   4: 72.194 ns/op
Iteration   5: 72.216 ns/op

# Run progress: 53.16% complete, ETA 00:27:30
# Fork: 2 of 2
# Warmup Iteration   1: 232.126 ns/op
# Warmup Iteration   2: 115.868 ns/op
# Warmup Iteration   3: 71.764 ns/op
Iteration   1: 71.705 ns/op
Iteration   2: 71.717 ns/op
Iteration   3: 71.828 ns/op
Iteration   4: 72.221 ns/op
Iteration   5: 72.187 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.937 ±(99.9%) 0.352 ns/op [Average]
  (min, avg, max) = (71.705, 71.937, 72.221), stdev = 0.233
  CI (99.9%): [71.585, 72.290] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 53.19% complete, ETA 00:27:28
# Fork: 1 of 2
# Warmup Iteration   1: 103.934 ns/op
# Warmup Iteration   2: 110.579 ns/op
# Warmup Iteration   3: 73.572 ns/op
Iteration   1: 73.606 ns/op
Iteration   2: 73.616 ns/op
Iteration   3: 73.581 ns/op
Iteration   4: 74.243 ns/op
Iteration   5: 74.306 ns/op

# Run progress: 53.23% complete, ETA 00:27:27
# Fork: 2 of 2
# Warmup Iteration   1: 105.479 ns/op
# Warmup Iteration   2: 114.347 ns/op
# Warmup Iteration   3: 73.578 ns/op
Iteration   1: 73.557 ns/op
Iteration   2: 73.701 ns/op
Iteration   3: 73.594 ns/op
Iteration   4: 74.285 ns/op
Iteration   5: 74.245 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.873 ±(99.9%) 0.520 ns/op [Average]
  (min, avg, max) = (73.557, 73.873, 74.306), stdev = 0.344
  CI (99.9%): [73.354, 74.393] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 53.26% complete, ETA 00:27:26
# Fork: 1 of 2
# Warmup Iteration   1: 209.496 ns/op
# Warmup Iteration   2: 209.019 ns/op
# Warmup Iteration   3: 146.222 ns/op
Iteration   1: 145.894 ns/op
Iteration   2: 146.211 ns/op
Iteration   3: 145.848 ns/op
Iteration   4: 146.061 ns/op
Iteration   5: 146.034 ns/op

# Run progress: 53.30% complete, ETA 00:27:25
# Fork: 2 of 2
# Warmup Iteration   1: 205.349 ns/op
# Warmup Iteration   2: 197.766 ns/op
# Warmup Iteration   3: 146.380 ns/op
Iteration   1: 146.426 ns/op
Iteration   2: 145.830 ns/op
Iteration   3: 145.399 ns/op
Iteration   4: 145.678 ns/op
Iteration   5: 146.200 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.958 ±(99.9%) 0.446 ns/op [Average]
  (min, avg, max) = (145.399, 145.958, 146.426), stdev = 0.295
  CI (99.9%): [145.513, 146.404] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 53.33% complete, ETA 00:27:23
# Fork: 1 of 2
# Warmup Iteration   1: 24.983 ns/op
# Warmup Iteration   2: 30.800 ns/op
# Warmup Iteration   3: 19.045 ns/op
Iteration   1: 18.991 ns/op
Iteration   2: 18.982 ns/op
Iteration   3: 18.965 ns/op
Iteration   4: 18.850 ns/op
Iteration   5: 18.852 ns/op

# Run progress: 53.37% complete, ETA 00:27:22
# Fork: 2 of 2
# Warmup Iteration   1: 23.411 ns/op
# Warmup Iteration   2: 26.828 ns/op
# Warmup Iteration   3: 18.997 ns/op
Iteration   1: 18.988 ns/op
Iteration   2: 18.943 ns/op
Iteration   3: 18.952 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (18.828, 18.919, 18.991), stdev = 0.068
  CI (99.9%): [18.816, 19.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 53.40% complete, ETA 00:27:21
# Fork: 1 of 2
# Warmup Iteration   1: 113.447 ns/op
# Warmup Iteration   2: 120.991 ns/op
# Warmup Iteration   3: 79.961 ns/op
Iteration   1: 79.959 ns/op
Iteration   2: 79.962 ns/op
Iteration   3: 80.040 ns/op
Iteration   4: 80.651 ns/op
Iteration   5: 80.627 ns/op

# Run progress: 53.44% complete, ETA 00:27:20
# Fork: 2 of 2
# Warmup Iteration   1: 113.882 ns/op
# Warmup Iteration   2: 118.145 ns/op
# Warmup Iteration   3: 80.574 ns/op
Iteration   1: 80.560 ns/op
Iteration   2: 80.568 ns/op
Iteration   3: 80.580 ns/op
Iteration   4: 81.118 ns/op
Iteration   5: 81.193 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  80.526 ±(99.9%) 0.658 ns/op [Average]
  (min, avg, max) = (79.959, 80.526, 81.193), stdev = 0.435
  CI (99.9%): [79.868, 81.183] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 53.47% complete, ETA 00:27:19
# Fork: 1 of 2
# Warmup Iteration   1: 957.884 ns/op
# Warmup Iteration   2: 162.037 ns/op
# Warmup Iteration   3: 115.978 ns/op
Iteration   1: 115.872 ns/op
Iteration   2: 115.900 ns/op
Iteration   3: 115.872 ns/op
Iteration   4: 116.194 ns/op
Iteration   5: 116.672 ns/op

# Run progress: 53.51% complete, ETA 00:27:17
# Fork: 2 of 2
# Warmup Iteration   1: 839.599 ns/op
# Warmup Iteration   2: 155.154 ns/op
# Warmup Iteration   3: 115.996 ns/op
Iteration   1: 116.052 ns/op
Iteration   2: 116.003 ns/op
Iteration   3: 115.976 ns/op
Iteration   4: 116.241 ns/op
Iteration   5: 116.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.113 ±(99.9%) 0.386 ns/op [Average]
  (min, avg, max) = (115.872, 116.113, 116.672), stdev = 0.255
  CI (99.9%): [115.727, 116.499] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 53.54% complete, ETA 00:27:16
# Fork: 1 of 2
# Warmup Iteration   1: 605.040 ns/op
# Warmup Iteration   2: 180.624 ns/op
# Warmup Iteration   3: 116.151 ns/op
Iteration   1: 116.216 ns/op
Iteration   2: 116.153 ns/op
Iteration   3: 116.161 ns/op
Iteration   4: 116.513 ns/op
Iteration   5: 116.459 ns/op

# Run progress: 53.58% complete, ETA 00:27:15
# Fork: 2 of 2
# Warmup Iteration   1: 468.872 ns/op
# Warmup Iteration   2: 157.388 ns/op
# Warmup Iteration   3: 116.070 ns/op
Iteration   1: 116.063 ns/op
Iteration   2: 116.020 ns/op
Iteration   3: 116.127 ns/op
Iteration   4: 116.332 ns/op
Iteration   5: 116.334 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.238 ±(99.9%) 0.250 ns/op [Average]
  (min, avg, max) = (116.020, 116.238, 116.513), stdev = 0.166
  CI (99.9%): [115.987, 116.488] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 53.61% complete, ETA 00:27:14
# Fork: 1 of 2
# Warmup Iteration   1: 203.010 ns/op
# Warmup Iteration   2: 214.790 ns/op
# Warmup Iteration   3: 140.740 ns/op
Iteration   1: 139.683 ns/op
Iteration   2: 140.912 ns/op
Iteration   3: 140.069 ns/op
Iteration   4: 140.341 ns/op
Iteration   5: 141.377 ns/op

# Run progress: 53.65% complete, ETA 00:27:12
# Fork: 2 of 2
# Warmup Iteration   1: 201.494 ns/op
# Warmup Iteration   2: 192.878 ns/op
# Warmup Iteration   3: 141.496 ns/op
Iteration   1: 140.339 ns/op
Iteration   2: 140.622 ns/op
Iteration   3: 141.365 ns/op
Iteration   4: 141.668 ns/op
Iteration   5: 143.007 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.938 ±(99.9%) 1.455 ns/op [Average]
  (min, avg, max) = (139.683, 140.938, 143.007), stdev = 0.962
  CI (99.9%): [139.483, 142.393] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 53.68% complete, ETA 00:27:11
# Fork: 1 of 2
# Warmup Iteration   1: 239.223 ns/op
# Warmup Iteration   2: 215.754 ns/op
# Warmup Iteration   3: 154.928 ns/op
Iteration   1: 155.457 ns/op
Iteration   2: 154.898 ns/op
Iteration   3: 154.927 ns/op
Iteration   4: 155.718 ns/op
Iteration   5: 155.694 ns/op

# Run progress: 53.72% complete, ETA 00:27:10
# Fork: 2 of 2
# Warmup Iteration   1: 243.663 ns/op
# Warmup Iteration   2: 217.169 ns/op
# Warmup Iteration   3: 155.490 ns/op
Iteration   1: 155.073 ns/op
Iteration   2: 155.529 ns/op
Iteration   3: 155.211 ns/op
Iteration   4: 155.737 ns/op
Iteration   5: 155.944 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  155.419 ±(99.9%) 0.559 ns/op [Average]
  (min, avg, max) = (154.898, 155.419, 155.944), stdev = 0.370
  CI (99.9%): [154.860, 155.978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 53.75% complete, ETA 00:27:09
# Fork: 1 of 2
# Warmup Iteration   1: 23.944 ns/op
# Warmup Iteration   2: 31.243 ns/op
# Warmup Iteration   3: 19.017 ns/op
Iteration   1: 18.971 ns/op
Iteration   2: 18.972 ns/op
Iteration   3: 18.932 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.847 ns/op

# Run progress: 53.78% complete, ETA 00:27:08
# Fork: 2 of 2
# Warmup Iteration   1: 24.298 ns/op
# Warmup Iteration   2: 29.291 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 19.007 ns/op
Iteration   2: 18.987 ns/op
Iteration   3: 18.955 ns/op
Iteration   4: 19.578 ns/op
Iteration   5: 19.542 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.062 ±(99.9%) 0.406 ns/op [Average]
  (min, avg, max) = (18.831, 19.062, 19.578), stdev = 0.269
  CI (99.9%): [18.656, 19.468] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 53.82% complete, ETA 00:27:06
# Fork: 1 of 2
# Warmup Iteration   1: 1277.364 ns/op
# Warmup Iteration   2: 603.244 ns/op
# Warmup Iteration   3: 419.501 ns/op
Iteration   1: 419.607 ns/op
Iteration   2: 419.687 ns/op
Iteration   3: 419.125 ns/op
Iteration   4: 419.677 ns/op
Iteration   5: 419.856 ns/op

# Run progress: 53.85% complete, ETA 00:27:05
# Fork: 2 of 2
# Warmup Iteration   1: 979.753 ns/op
# Warmup Iteration   2: 607.645 ns/op
# Warmup Iteration   3: 419.600 ns/op
Iteration   1: 420.138 ns/op
Iteration   2: 419.744 ns/op
Iteration   3: 419.959 ns/op
Iteration   4: 420.230 ns/op
Iteration   5: 419.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  419.786 ±(99.9%) 0.465 ns/op [Average]
  (min, avg, max) = (419.125, 419.786, 420.230), stdev = 0.308
  CI (99.9%): [419.321, 420.251] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 53.89% complete, ETA 00:27:04
# Fork: 1 of 2
# Warmup Iteration   1: 4728.530 ns/op
# Warmup Iteration   2: 478.620 ns/op
# Warmup Iteration   3: 333.806 ns/op
Iteration   1: 334.074 ns/op
Iteration   2: 333.902 ns/op
Iteration   3: 334.018 ns/op
Iteration   4: 334.538 ns/op
Iteration   5: 334.534 ns/op

# Run progress: 53.92% complete, ETA 00:27:03
# Fork: 2 of 2
# Warmup Iteration   1: 7457.011 ns/op
# Warmup Iteration   2: 525.731 ns/op
# Warmup Iteration   3: 335.281 ns/op
Iteration   1: 335.655 ns/op
Iteration   2: 335.523 ns/op
Iteration   3: 335.686 ns/op
Iteration   4: 336.454 ns/op
Iteration   5: 336.297 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.068 ±(99.9%) 1.459 ns/op [Average]
  (min, avg, max) = (333.902, 335.068, 336.454), stdev = 0.965
  CI (99.9%): [333.609, 336.527] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 53.96% complete, ETA 00:27:01
# Fork: 1 of 2
# Warmup Iteration   1: 27152.543 ns/op
# Warmup Iteration   2: 693.121 ns/op
# Warmup Iteration   3: 460.437 ns/op
Iteration   1: 416.884 ns/op
Iteration   2: 416.953 ns/op
Iteration   3: 416.624 ns/op
Iteration   4: 416.762 ns/op
Iteration   5: 417.296 ns/op

# Run progress: 53.99% complete, ETA 00:27:00
# Fork: 2 of 2
# Warmup Iteration   1: 7500.348 ns/op
# Warmup Iteration   2: 583.245 ns/op
# Warmup Iteration   3: 417.283 ns/op
Iteration   1: 417.336 ns/op
Iteration   2: 417.357 ns/op
Iteration   3: 416.704 ns/op
Iteration   4: 417.566 ns/op
Iteration   5: 452.358 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  420.584 ±(99.9%) 16.886 ns/op [Average]
  (min, avg, max) = (416.624, 420.584, 452.358), stdev = 11.169
  CI (99.9%): [403.698, 437.470] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 54.03% complete, ETA 00:26:59
# Fork: 1 of 2
# Warmup Iteration   1: 2407.107 ns/op
# Warmup Iteration   2: 2482.536 ns/op
# Warmup Iteration   3: 1568.232 ns/op
Iteration   1: 1559.146 ns/op
Iteration   2: 1566.608 ns/op
Iteration   3: 1566.455 ns/op
Iteration   4: 1566.523 ns/op
Iteration   5: 1566.068 ns/op

# Run progress: 54.06% complete, ETA 00:26:58
# Fork: 2 of 2
# Warmup Iteration   1: 2257.928 ns/op
# Warmup Iteration   2: 2060.722 ns/op
# Warmup Iteration   3: 1564.620 ns/op
Iteration   1: 1564.181 ns/op
Iteration   2: 1567.929 ns/op
Iteration   3: 1564.774 ns/op
Iteration   4: 1566.358 ns/op
Iteration   5: 1566.241 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1565.428 ±(99.9%) 3.679 ns/op [Average]
  (min, avg, max) = (1559.146, 1565.428, 1567.929), stdev = 2.433
  CI (99.9%): [1561.750, 1569.107] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 54.10% complete, ETA 00:26:57
# Fork: 1 of 2
# Warmup Iteration   1: 360.444 ns/op
# Warmup Iteration   2: 349.891 ns/op
# Warmup Iteration   3: 236.354 ns/op
Iteration   1: 235.802 ns/op
Iteration   2: 236.012 ns/op
Iteration   3: 236.074 ns/op
Iteration   4: 236.388 ns/op
Iteration   5: 236.214 ns/op

# Run progress: 54.13% complete, ETA 00:26:55
# Fork: 2 of 2
# Warmup Iteration   1: 411.291 ns/op
# Warmup Iteration   2: 348.796 ns/op
# Warmup Iteration   3: 234.801 ns/op
Iteration   1: 235.234 ns/op
Iteration   2: 234.991 ns/op
Iteration   3: 235.692 ns/op
Iteration   4: 235.310 ns/op
Iteration   5: 235.199 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  235.692 ±(99.9%) 0.732 ns/op [Average]
  (min, avg, max) = (234.991, 235.692, 236.388), stdev = 0.484
  CI (99.9%): [234.960, 236.423] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 54.17% complete, ETA 00:26:54
# Fork: 1 of 2
# Warmup Iteration   1: 23.881 ns/op
# Warmup Iteration   2: 30.074 ns/op
# Warmup Iteration   3: 19.029 ns/op
Iteration   1: 18.901 ns/op
Iteration   2: 18.914 ns/op
Iteration   3: 18.909 ns/op
Iteration   4: 18.844 ns/op
Iteration   5: 18.830 ns/op

# Run progress: 54.20% complete, ETA 00:26:53
# Fork: 2 of 2
# Warmup Iteration   1: 24.613 ns/op
# Warmup Iteration   2: 30.961 ns/op
# Warmup Iteration   3: 19.036 ns/op
Iteration   1: 18.976 ns/op
Iteration   2: 18.970 ns/op
Iteration   3: 18.980 ns/op
Iteration   4: 18.815 ns/op
Iteration   5: 18.831 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.897 ±(99.9%) 0.097 ns/op [Average]
  (min, avg, max) = (18.815, 18.897, 18.980), stdev = 0.064
  CI (99.9%): [18.800, 18.994] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 54.24% complete, ETA 00:26:52
# Fork: 1 of 2
# Warmup Iteration   1: 2889.729 ns/op
# Warmup Iteration   2: 1132.705 ns/op
# Warmup Iteration   3: 826.291 ns/op
Iteration   1: 823.460 ns/op
Iteration   2: 825.101 ns/op
Iteration   3: 833.039 ns/op
Iteration   4: 823.621 ns/op
Iteration   5: 820.382 ns/op

# Run progress: 54.27% complete, ETA 00:26:50
# Fork: 2 of 2
# Warmup Iteration   1: 2972.264 ns/op
# Warmup Iteration   2: 1125.280 ns/op
# Warmup Iteration   3: 814.791 ns/op
Iteration   1: 788.267 ns/op
Iteration   2: 821.592 ns/op
Iteration   3: 805.861 ns/op
Iteration   4: 796.893 ns/op
Iteration   5: 804.582 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  814.280 ±(99.9%) 21.822 ns/op [Average]
  (min, avg, max) = (788.267, 814.280, 833.039), stdev = 14.434
  CI (99.9%): [792.457, 836.102] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 54.31% complete, ETA 00:26:49
# Fork: 1 of 2
# Warmup Iteration   1: 8403.597 ns/op
# Warmup Iteration   2: 1195.434 ns/op
# Warmup Iteration   3: 887.888 ns/op
Iteration   1: 888.164 ns/op
Iteration   2: 887.721 ns/op
Iteration   3: 887.620 ns/op
Iteration   4: 888.637 ns/op
Iteration   5: 888.295 ns/op

# Run progress: 54.34% complete, ETA 00:26:48
# Fork: 2 of 2
# Warmup Iteration   1: 46159.312 ns/op
# Warmup Iteration   2: 1726.793 ns/op
# Warmup Iteration   3: 1214.974 ns/op
Iteration   1: 949.401 ns/op
Iteration   2: 947.896 ns/op
Iteration   3: 948.684 ns/op
Iteration   4: 948.290 ns/op
Iteration   5: 948.771 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  918.348 ±(99.9%) 48.230 ns/op [Average]
  (min, avg, max) = (887.620, 918.348, 949.401), stdev = 31.901
  CI (99.9%): [870.118, 966.577] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 54.37% complete, ETA 00:26:47
# Fork: 1 of 2
# Warmup Iteration   1: 7687.525 ns/op
# Warmup Iteration   2: 1282.070 ns/op
# Warmup Iteration   3: 890.214 ns/op
Iteration   1: 890.905 ns/op
Iteration   2: 890.594 ns/op
Iteration   3: 890.608 ns/op
Iteration   4: 893.473 ns/op
Iteration   5: 891.038 ns/op

# Run progress: 54.41% complete, ETA 00:26:45
# Fork: 2 of 2
# Warmup Iteration   1: 8365.015 ns/op
# Warmup Iteration   2: 1251.205 ns/op
# Warmup Iteration   3: 1002.220 ns/op
Iteration   1: 889.603 ns/op
Iteration   2: 889.081 ns/op
Iteration   3: 1005.562 ns/op
Iteration   4: 963.674 ns/op
Iteration   5: 889.553 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  909.409 ±(99.9%) 61.785 ns/op [Average]
  (min, avg, max) = (889.081, 909.409, 1005.562), stdev = 40.867
  CI (99.9%): [847.624, 971.194] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 54.44% complete, ETA 00:26:44
# Fork: 1 of 2
# Warmup Iteration   1: 1324.955 ns/op
# Warmup Iteration   2: 1143.893 ns/op
# Warmup Iteration   3: 871.260 ns/op
Iteration   1: 872.181 ns/op
Iteration   2: 872.093 ns/op
Iteration   3: 871.446 ns/op
Iteration   4: 870.863 ns/op
Iteration   5: 870.840 ns/op

# Run progress: 54.48% complete, ETA 00:26:43
# Fork: 2 of 2
# Warmup Iteration   1: 1557.231 ns/op
# Warmup Iteration   2: 1138.587 ns/op
# Warmup Iteration   3: 869.439 ns/op
Iteration   1: 869.690 ns/op
Iteration   2: 869.558 ns/op
Iteration   3: 869.239 ns/op
Iteration   4: 869.873 ns/op
Iteration   5: 870.028 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  870.581 ±(99.9%) 1.609 ns/op [Average]
  (min, avg, max) = (869.239, 870.581, 872.181), stdev = 1.064
  CI (99.9%): [868.972, 872.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 54.51% complete, ETA 00:26:42
# Fork: 1 of 2
# Warmup Iteration   1: 1828.642 ns/op
# Warmup Iteration   2: 590.256 ns/op
# Warmup Iteration   3: 437.134 ns/op
Iteration   1: 437.040 ns/op
Iteration   2: 437.261 ns/op
Iteration   3: 436.845 ns/op
Iteration   4: 437.463 ns/op
Iteration   5: 436.447 ns/op

# Run progress: 54.55% complete, ETA 00:26:41
# Fork: 2 of 2
# Warmup Iteration   1: 935.752 ns/op
# Warmup Iteration   2: 653.628 ns/op
# Warmup Iteration   3: 444.669 ns/op
Iteration   1: 443.897 ns/op
Iteration   2: 444.733 ns/op
Iteration   3: 444.100 ns/op
Iteration   4: 442.755 ns/op
Iteration   5: 442.774 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  440.331 ±(99.9%) 5.378 ns/op [Average]
  (min, avg, max) = (436.447, 440.331, 444.733), stdev = 3.557
  CI (99.9%): [434.954, 445.709] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 54.58% complete, ETA 00:26:39
# Fork: 1 of 2
# Warmup Iteration   1: 24.350 ns/op
# Warmup Iteration   2: 30.336 ns/op
# Warmup Iteration   3: 19.017 ns/op
Iteration   1: 19.009 ns/op
Iteration   2: 18.945 ns/op
Iteration   3: 18.999 ns/op
Iteration   4: 18.854 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 54.62% complete, ETA 00:26:38
# Fork: 2 of 2
# Warmup Iteration   1: 25.121 ns/op
# Warmup Iteration   2: 28.809 ns/op
# Warmup Iteration   3: 19.055 ns/op
Iteration   1: 18.989 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.965 ns/op
Iteration   4: 18.858 ns/op
Iteration   5: 18.847 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.928 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (18.845, 18.928, 19.009), stdev = 0.069
  CI (99.9%): [18.824, 19.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 54.65% complete, ETA 00:26:37
# Fork: 1 of 2
# Warmup Iteration   1: 103.164 ns/op
# Warmup Iteration   2: 118.579 ns/op
# Warmup Iteration   3: 74.291 ns/op
Iteration   1: 74.326 ns/op
Iteration   2: 74.250 ns/op
Iteration   3: 74.177 ns/op
Iteration   4: 74.901 ns/op
Iteration   5: 74.769 ns/op

# Run progress: 54.69% complete, ETA 00:26:36
# Fork: 2 of 2
# Warmup Iteration   1: 101.477 ns/op
# Warmup Iteration   2: 112.308 ns/op
# Warmup Iteration   3: 73.565 ns/op
Iteration   1: 73.538 ns/op
Iteration   2: 73.607 ns/op
Iteration   3: 73.569 ns/op
Iteration   4: 74.261 ns/op
Iteration   5: 74.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.155 ±(99.9%) 0.714 ns/op [Average]
  (min, avg, max) = (73.538, 74.155, 74.901), stdev = 0.472
  CI (99.9%): [73.441, 74.869] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 54.72% complete, ETA 00:26:34
# Fork: 1 of 2
# Warmup Iteration   1: 346.825 ns/op
# Warmup Iteration   2: 104.524 ns/op
# Warmup Iteration   3: 70.730 ns/op
Iteration   1: 70.758 ns/op
Iteration   2: 70.724 ns/op
Iteration   3: 70.780 ns/op
Iteration   4: 71.403 ns/op
Iteration   5: 71.434 ns/op

# Run progress: 54.76% complete, ETA 00:26:33
# Fork: 2 of 2
# Warmup Iteration   1: 416.502 ns/op
# Warmup Iteration   2: 103.931 ns/op
# Warmup Iteration   3: 70.812 ns/op
Iteration   1: 70.742 ns/op
Iteration   2: 70.859 ns/op
Iteration   3: 70.758 ns/op
Iteration   4: 71.392 ns/op
Iteration   5: 71.388 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.024 ±(99.9%) 0.498 ns/op [Average]
  (min, avg, max) = (70.724, 71.024, 71.434), stdev = 0.330
  CI (99.9%): [70.525, 71.522] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 54.79% complete, ETA 00:26:32
# Fork: 1 of 2
# Warmup Iteration   1: 231.019 ns/op
# Warmup Iteration   2: 117.865 ns/op
# Warmup Iteration   3: 71.783 ns/op
Iteration   1: 71.787 ns/op
Iteration   2: 71.764 ns/op
Iteration   3: 71.892 ns/op
Iteration   4: 72.179 ns/op
Iteration   5: 72.183 ns/op

# Run progress: 54.83% complete, ETA 00:26:31
# Fork: 2 of 2
# Warmup Iteration   1: 229.299 ns/op
# Warmup Iteration   2: 102.207 ns/op
# Warmup Iteration   3: 71.745 ns/op
Iteration   1: 71.729 ns/op
Iteration   2: 71.721 ns/op
Iteration   3: 71.783 ns/op
Iteration   4: 72.169 ns/op
Iteration   5: 72.198 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.940 ±(99.9%) 0.323 ns/op [Average]
  (min, avg, max) = (71.721, 71.940, 72.198), stdev = 0.213
  CI (99.9%): [71.618, 72.263] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 54.86% complete, ETA 00:26:30
# Fork: 1 of 2
# Warmup Iteration   1: 105.731 ns/op
# Warmup Iteration   2: 102.060 ns/op
# Warmup Iteration   3: 73.533 ns/op
Iteration   1: 73.580 ns/op
Iteration   2: 73.574 ns/op
Iteration   3: 73.507 ns/op
Iteration   4: 74.207 ns/op
Iteration   5: 74.281 ns/op

# Run progress: 54.90% complete, ETA 00:26:28
# Fork: 2 of 2
# Warmup Iteration   1: 104.375 ns/op
# Warmup Iteration   2: 106.570 ns/op
# Warmup Iteration   3: 73.520 ns/op
Iteration   1: 73.558 ns/op
Iteration   2: 73.565 ns/op
Iteration   3: 73.601 ns/op
Iteration   4: 74.304 ns/op
Iteration   5: 74.287 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.846 ±(99.9%) 0.553 ns/op [Average]
  (min, avg, max) = (73.507, 73.846, 74.304), stdev = 0.366
  CI (99.9%): [73.293, 74.400] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 54.93% complete, ETA 00:26:27
# Fork: 1 of 2
# Warmup Iteration   1: 211.440 ns/op
# Warmup Iteration   2: 223.746 ns/op
# Warmup Iteration   3: 145.737 ns/op
Iteration   1: 145.413 ns/op
Iteration   2: 145.612 ns/op
Iteration   3: 145.486 ns/op
Iteration   4: 145.931 ns/op
Iteration   5: 145.642 ns/op

# Run progress: 54.97% complete, ETA 00:26:26
# Fork: 2 of 2
# Warmup Iteration   1: 208.367 ns/op
# Warmup Iteration   2: 214.855 ns/op
# Warmup Iteration   3: 145.822 ns/op
Iteration   1: 145.709 ns/op
Iteration   2: 146.090 ns/op
Iteration   3: 145.809 ns/op
Iteration   4: 145.627 ns/op
Iteration   5: 145.703 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.702 ±(99.9%) 0.303 ns/op [Average]
  (min, avg, max) = (145.413, 145.702, 146.090), stdev = 0.201
  CI (99.9%): [145.399, 146.005] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 55.00% complete, ETA 00:26:25
# Fork: 1 of 2
# Warmup Iteration   1: 24.718 ns/op
# Warmup Iteration   2: 29.353 ns/op
# Warmup Iteration   3: 18.991 ns/op
Iteration   1: 18.987 ns/op
Iteration   2: 18.952 ns/op
Iteration   3: 18.949 ns/op
Iteration   4: 18.806 ns/op
Iteration   5: 18.836 ns/op

# Run progress: 55.03% complete, ETA 00:26:23
# Fork: 2 of 2
# Warmup Iteration   1: 23.682 ns/op
# Warmup Iteration   2: 26.825 ns/op
# Warmup Iteration   3: 19.031 ns/op
Iteration   1: 18.981 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.976 ns/op
Iteration   4: 19.563 ns/op
Iteration   5: 19.542 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.055 ±(99.9%) 0.407 ns/op [Average]
  (min, avg, max) = (18.806, 19.055, 19.563), stdev = 0.269
  CI (99.9%): [18.648, 19.462] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 55.07% complete, ETA 00:26:22
# Fork: 1 of 2
# Warmup Iteration   1: 106.161 ns/op
# Warmup Iteration   2: 100.741 ns/op
# Warmup Iteration   3: 74.602 ns/op
Iteration   1: 74.639 ns/op
Iteration   2: 74.686 ns/op
Iteration   3: 74.634 ns/op
Iteration   4: 75.007 ns/op
Iteration   5: 75.066 ns/op

# Run progress: 55.10% complete, ETA 00:26:21
# Fork: 2 of 2
# Warmup Iteration   1: 102.262 ns/op
# Warmup Iteration   2: 111.867 ns/op
# Warmup Iteration   3: 73.629 ns/op
Iteration   1: 73.623 ns/op
Iteration   2: 73.689 ns/op
Iteration   3: 73.664 ns/op
Iteration   4: 74.143 ns/op
Iteration   5: 74.150 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.330 ±(99.9%) 0.834 ns/op [Average]
  (min, avg, max) = (73.623, 74.330, 75.066), stdev = 0.551
  CI (99.9%): [73.496, 75.164] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 55.14% complete, ETA 00:26:20
# Fork: 1 of 2
# Warmup Iteration   1: 720.638 ns/op
# Warmup Iteration   2: 103.755 ns/op
# Warmup Iteration   3: 72.247 ns/op
Iteration   1: 72.266 ns/op
Iteration   2: 72.260 ns/op
Iteration   3: 72.254 ns/op
Iteration   4: 72.684 ns/op
Iteration   5: 72.684 ns/op

# Run progress: 55.17% complete, ETA 00:26:19
# Fork: 2 of 2
# Warmup Iteration   1: 384.413 ns/op
# Warmup Iteration   2: 105.417 ns/op
# Warmup Iteration   3: 70.728 ns/op
Iteration   1: 70.867 ns/op
Iteration   2: 70.727 ns/op
Iteration   3: 70.854 ns/op
Iteration   4: 71.394 ns/op
Iteration   5: 71.401 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.739 ±(99.9%) 1.171 ns/op [Average]
  (min, avg, max) = (70.727, 71.739, 72.684), stdev = 0.775
  CI (99.9%): [70.568, 72.910] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 55.21% complete, ETA 00:26:17
# Fork: 1 of 2
# Warmup Iteration   1: 216.271 ns/op
# Warmup Iteration   2: 104.688 ns/op
# Warmup Iteration   3: 71.710 ns/op
Iteration   1: 71.722 ns/op
Iteration   2: 71.769 ns/op
Iteration   3: 71.803 ns/op
Iteration   4: 72.288 ns/op
Iteration   5: 72.269 ns/op

# Run progress: 55.24% complete, ETA 00:26:16
# Fork: 2 of 2
# Warmup Iteration   1: 206.815 ns/op
# Warmup Iteration   2: 102.484 ns/op
# Warmup Iteration   3: 71.766 ns/op
Iteration   1: 71.739 ns/op
Iteration   2: 71.726 ns/op
Iteration   3: 71.740 ns/op
Iteration   4: 72.172 ns/op
Iteration   5: 72.134 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.936 ±(99.9%) 0.371 ns/op [Average]
  (min, avg, max) = (71.722, 71.936, 72.288), stdev = 0.246
  CI (99.9%): [71.565, 72.307] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 55.28% complete, ETA 00:26:15
# Fork: 1 of 2
# Warmup Iteration   1: 104.313 ns/op
# Warmup Iteration   2: 102.557 ns/op
# Warmup Iteration   3: 73.543 ns/op
Iteration   1: 73.531 ns/op
Iteration   2: 73.617 ns/op
Iteration   3: 73.517 ns/op
Iteration   4: 74.262 ns/op
Iteration   5: 74.308 ns/op

# Run progress: 55.31% complete, ETA 00:26:14
# Fork: 2 of 2
# Warmup Iteration   1: 105.065 ns/op
# Warmup Iteration   2: 107.179 ns/op
# Warmup Iteration   3: 73.583 ns/op
Iteration   1: 73.551 ns/op
Iteration   2: 73.561 ns/op
Iteration   3: 73.578 ns/op
Iteration   4: 74.270 ns/op
Iteration   5: 74.272 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.847 ±(99.9%) 0.563 ns/op [Average]
  (min, avg, max) = (73.517, 73.847, 74.308), stdev = 0.373
  CI (99.9%): [73.284, 74.410] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 55.35% complete, ETA 00:26:12
# Fork: 1 of 2
# Warmup Iteration   1: 212.240 ns/op
# Warmup Iteration   2: 218.281 ns/op
# Warmup Iteration   3: 146.072 ns/op
Iteration   1: 146.189 ns/op
Iteration   2: 146.179 ns/op
Iteration   3: 145.635 ns/op
Iteration   4: 146.014 ns/op
Iteration   5: 145.773 ns/op

# Run progress: 55.38% complete, ETA 00:26:11
# Fork: 2 of 2
# Warmup Iteration   1: 211.323 ns/op
# Warmup Iteration   2: 215.395 ns/op
# Warmup Iteration   3: 146.277 ns/op
Iteration   1: 145.386 ns/op
Iteration   2: 145.503 ns/op
Iteration   3: 145.455 ns/op
Iteration   4: 145.677 ns/op
Iteration   5: 145.544 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.735 ±(99.9%) 0.447 ns/op [Average]
  (min, avg, max) = (145.386, 145.735, 146.189), stdev = 0.296
  CI (99.9%): [145.288, 146.182] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 55.42% complete, ETA 00:26:10
# Fork: 1 of 2
# Warmup Iteration   1: 24.881 ns/op
# Warmup Iteration   2: 26.010 ns/op
# Warmup Iteration   3: 19.032 ns/op
Iteration   1: 19.020 ns/op
Iteration   2: 18.969 ns/op
Iteration   3: 18.977 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.862 ns/op

# Run progress: 55.45% complete, ETA 00:26:09
# Fork: 2 of 2
# Warmup Iteration   1: 24.475 ns/op
# Warmup Iteration   2: 25.125 ns/op
# Warmup Iteration   3: 19.034 ns/op
Iteration   1: 19.005 ns/op
Iteration   2: 18.941 ns/op
Iteration   3: 18.990 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.926 ±(99.9%) 0.117 ns/op [Average]
  (min, avg, max) = (18.829, 18.926, 19.020), stdev = 0.077
  CI (99.9%): [18.810, 19.043] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 55.49% complete, ETA 00:26:08
# Fork: 1 of 2
# Warmup Iteration   1: 118.332 ns/op
# Warmup Iteration   2: 126.515 ns/op
# Warmup Iteration   3: 81.904 ns/op
Iteration   1: 81.689 ns/op
Iteration   2: 81.660 ns/op
Iteration   3: 81.709 ns/op
Iteration   4: 82.178 ns/op
Iteration   5: 82.212 ns/op

# Run progress: 55.52% complete, ETA 00:26:06
# Fork: 2 of 2
# Warmup Iteration   1: 133.223 ns/op
# Warmup Iteration   2: 113.525 ns/op
# Warmup Iteration   3: 81.549 ns/op
Iteration   1: 81.616 ns/op
Iteration   2: 81.613 ns/op
Iteration   3: 81.665 ns/op
Iteration   4: 82.067 ns/op
Iteration   5: 82.057 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  81.847 ±(99.9%) 0.376 ns/op [Average]
  (min, avg, max) = (81.613, 81.847, 82.212), stdev = 0.248
  CI (99.9%): [81.471, 82.222] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 55.56% complete, ETA 00:26:05
# Fork: 1 of 2
# Warmup Iteration   1: 1021.354 ns/op
# Warmup Iteration   2: 151.900 ns/op
# Warmup Iteration   3: 109.280 ns/op
Iteration   1: 109.256 ns/op
Iteration   2: 109.308 ns/op
Iteration   3: 109.262 ns/op
Iteration   4: 109.684 ns/op
Iteration   5: 109.614 ns/op

# Run progress: 55.59% complete, ETA 00:26:04
# Fork: 2 of 2
# Warmup Iteration   1: 786.449 ns/op
# Warmup Iteration   2: 154.089 ns/op
# Warmup Iteration   3: 109.027 ns/op
Iteration   1: 109.182 ns/op
Iteration   2: 109.267 ns/op
Iteration   3: 109.261 ns/op
Iteration   4: 109.694 ns/op
Iteration   5: 109.437 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  109.397 ±(99.9%) 0.297 ns/op [Average]
  (min, avg, max) = (109.182, 109.397, 109.694), stdev = 0.196
  CI (99.9%): [109.100, 109.694] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 55.63% complete, ETA 00:26:03
# Fork: 1 of 2
# Warmup Iteration   1: 499.226 ns/op
# Warmup Iteration   2: 157.891 ns/op
# Warmup Iteration   3: 121.098 ns/op
Iteration   1: 122.424 ns/op
Iteration   2: 117.624 ns/op
Iteration   3: 121.097 ns/op
Iteration   4: 120.586 ns/op
Iteration   5: 123.823 ns/op

# Run progress: 55.66% complete, ETA 00:26:01
# Fork: 2 of 2
# Warmup Iteration   1: 615.414 ns/op
# Warmup Iteration   2: 173.647 ns/op
# Warmup Iteration   3: 122.277 ns/op
Iteration   1: 114.734 ns/op
Iteration   2: 116.265 ns/op
Iteration   3: 118.483 ns/op
Iteration   4: 120.783 ns/op
Iteration   5: 123.160 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  119.898 ±(99.9%) 4.568 ns/op [Average]
  (min, avg, max) = (114.734, 119.898, 123.823), stdev = 3.021
  CI (99.9%): [115.330, 124.466] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 55.69% complete, ETA 00:26:00
# Fork: 1 of 2
# Warmup Iteration   1: 162.898 ns/op
# Warmup Iteration   2: 163.553 ns/op
# Warmup Iteration   3: 110.843 ns/op
Iteration   1: 110.956 ns/op
Iteration   2: 111.150 ns/op
Iteration   3: 111.058 ns/op
Iteration   4: 111.666 ns/op
Iteration   5: 111.662 ns/op

# Run progress: 55.73% complete, ETA 00:25:59
# Fork: 2 of 2
# Warmup Iteration   1: 161.258 ns/op
# Warmup Iteration   2: 152.186 ns/op
# Warmup Iteration   3: 110.872 ns/op
Iteration   1: 110.904 ns/op
Iteration   2: 110.931 ns/op
Iteration   3: 110.905 ns/op
Iteration   4: 111.732 ns/op
Iteration   5: 111.497 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  111.246 ±(99.9%) 0.531 ns/op [Average]
  (min, avg, max) = (110.904, 111.246, 111.732), stdev = 0.351
  CI (99.9%): [110.715, 111.777] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 55.76% complete, ETA 00:25:58
# Fork: 1 of 2
# Warmup Iteration   1: 241.694 ns/op
# Warmup Iteration   2: 199.260 ns/op
# Warmup Iteration   3: 141.262 ns/op
Iteration   1: 141.293 ns/op
Iteration   2: 141.417 ns/op
Iteration   3: 141.948 ns/op
Iteration   4: 141.454 ns/op
Iteration   5: 141.523 ns/op

# Run progress: 55.80% complete, ETA 00:25:57
# Fork: 2 of 2
# Warmup Iteration   1: 223.432 ns/op
# Warmup Iteration   2: 202.747 ns/op
# Warmup Iteration   3: 141.540 ns/op
Iteration   1: 141.377 ns/op
Iteration   2: 141.573 ns/op
Iteration   3: 141.370 ns/op
Iteration   4: 141.551 ns/op
Iteration   5: 141.531 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.504 ±(99.9%) 0.273 ns/op [Average]
  (min, avg, max) = (141.293, 141.504, 141.948), stdev = 0.180
  CI (99.9%): [141.231, 141.777] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 55.83% complete, ETA 00:25:55
# Fork: 1 of 2
# Warmup Iteration   1: 25.085 ns/op
# Warmup Iteration   2: 27.151 ns/op
# Warmup Iteration   3: 19.546 ns/op
Iteration   1: 19.372 ns/op
Iteration   2: 19.454 ns/op
Iteration   3: 19.468 ns/op
Iteration   4: 19.612 ns/op
Iteration   5: 19.540 ns/op

# Run progress: 55.87% complete, ETA 00:25:54
# Fork: 2 of 2
# Warmup Iteration   1: 25.041 ns/op
# Warmup Iteration   2: 30.900 ns/op
# Warmup Iteration   3: 19.041 ns/op
Iteration   1: 18.988 ns/op
Iteration   2: 18.936 ns/op
Iteration   3: 18.934 ns/op
Iteration   4: 18.838 ns/op
Iteration   5: 18.841 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.198 ±(99.9%) 0.477 ns/op [Average]
  (min, avg, max) = (18.838, 19.198, 19.612), stdev = 0.316
  CI (99.9%): [18.721, 19.675] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 55.90% complete, ETA 00:25:53
# Fork: 1 of 2
# Warmup Iteration   1: 1718.654 ns/op
# Warmup Iteration   2: 588.847 ns/op
# Warmup Iteration   3: 424.296 ns/op
Iteration   1: 423.854 ns/op
Iteration   2: 423.161 ns/op
Iteration   3: 423.923 ns/op
Iteration   4: 424.877 ns/op
Iteration   5: 425.307 ns/op

# Run progress: 55.94% complete, ETA 00:25:52
# Fork: 2 of 2
# Warmup Iteration   1: 1175.356 ns/op
# Warmup Iteration   2: 558.696 ns/op
# Warmup Iteration   3: 424.862 ns/op
Iteration   1: 424.228 ns/op
Iteration   2: 423.962 ns/op
Iteration   3: 423.108 ns/op
Iteration   4: 423.394 ns/op
Iteration   5: 424.548 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  424.036 ±(99.9%) 1.094 ns/op [Average]
  (min, avg, max) = (423.108, 424.036, 425.307), stdev = 0.724
  CI (99.9%): [422.942, 425.130] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 55.97% complete, ETA 00:25:50
# Fork: 1 of 2
# Warmup Iteration   1: 19746.868 ns/op
# Warmup Iteration   2: 1007.283 ns/op
# Warmup Iteration   3: 731.529 ns/op
Iteration   1: 666.710 ns/op
Iteration   2: 667.826 ns/op
Iteration   3: 666.937 ns/op
Iteration   4: 667.776 ns/op
Iteration   5: 667.549 ns/op

# Run progress: 56.01% complete, ETA 00:25:49
# Fork: 2 of 2
# Warmup Iteration   1: 7986.307 ns/op
# Warmup Iteration   2: 873.915 ns/op
# Warmup Iteration   3: 658.229 ns/op
Iteration   1: 659.134 ns/op
Iteration   2: 658.694 ns/op
Iteration   3: 658.586 ns/op
Iteration   4: 659.051 ns/op
Iteration   5: 659.046 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  663.131 ±(99.9%) 6.763 ns/op [Average]
  (min, avg, max) = (658.586, 663.131, 667.826), stdev = 4.473
  CI (99.9%): [656.368, 669.894] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 56.04% complete, ETA 00:25:48
# Fork: 1 of 2
# Warmup Iteration   1: 5059.759 ns/op
# Warmup Iteration   2: 876.590 ns/op
# Warmup Iteration   3: 654.770 ns/op
Iteration   1: 655.014 ns/op
Iteration   2: 654.724 ns/op
Iteration   3: 654.892 ns/op
Iteration   4: 655.643 ns/op
Iteration   5: 655.796 ns/op

# Run progress: 56.08% complete, ETA 00:25:47
# Fork: 2 of 2
# Warmup Iteration   1: 11189.487 ns/op
# Warmup Iteration   2: 952.494 ns/op
# Warmup Iteration   3: 666.479 ns/op
Iteration   1: 666.646 ns/op
Iteration   2: 666.744 ns/op
Iteration   3: 666.742 ns/op
Iteration   4: 667.158 ns/op
Iteration   5: 667.674 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  661.103 ±(99.9%) 9.408 ns/op [Average]
  (min, avg, max) = (654.724, 661.103, 667.674), stdev = 6.223
  CI (99.9%): [651.695, 670.511] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 56.11% complete, ETA 00:25:46
# Fork: 1 of 2
# Warmup Iteration   1: 796.649 ns/op
# Warmup Iteration   2: 722.486 ns/op
# Warmup Iteration   3: 515.323 ns/op
Iteration   1: 515.117 ns/op
Iteration   2: 515.345 ns/op
Iteration   3: 515.648 ns/op
Iteration   4: 516.143 ns/op
Iteration   5: 516.529 ns/op

# Run progress: 56.15% complete, ETA 00:25:44
# Fork: 2 of 2
# Warmup Iteration   1: 738.983 ns/op
# Warmup Iteration   2: 722.621 ns/op
# Warmup Iteration   3: 517.434 ns/op
Iteration   1: 517.351 ns/op
Iteration   2: 517.487 ns/op
Iteration   3: 517.248 ns/op
Iteration   4: 517.935 ns/op
Iteration   5: 517.923 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  516.673 ±(99.9%) 1.605 ns/op [Average]
  (min, avg, max) = (515.117, 516.673, 517.935), stdev = 1.062
  CI (99.9%): [515.067, 518.278] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 56.18% complete, ETA 00:25:43
# Fork: 1 of 2
# Warmup Iteration   1: 905.806 ns/op
# Warmup Iteration   2: 575.488 ns/op
# Warmup Iteration   3: 397.608 ns/op
Iteration   1: 396.931 ns/op
Iteration   2: 396.374 ns/op
Iteration   3: 396.638 ns/op
Iteration   4: 395.525 ns/op
Iteration   5: 395.324 ns/op

# Run progress: 56.22% complete, ETA 00:25:42
# Fork: 2 of 2
# Warmup Iteration   1: 1151.593 ns/op
# Warmup Iteration   2: 581.750 ns/op
# Warmup Iteration   3: 402.989 ns/op
Iteration   1: 394.934 ns/op
Iteration   2: 394.823 ns/op
Iteration   3: 395.588 ns/op
Iteration   4: 401.979 ns/op
Iteration   5: 395.170 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  396.329 ±(99.9%) 3.193 ns/op [Average]
  (min, avg, max) = (394.823, 396.329, 401.979), stdev = 2.112
  CI (99.9%): [393.136, 399.521] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 56.25% complete, ETA 00:25:41
# Fork: 1 of 2
# Warmup Iteration   1: 25.274 ns/op
# Warmup Iteration   2: 29.599 ns/op
# Warmup Iteration   3: 19.025 ns/op
Iteration   1: 18.989 ns/op
Iteration   2: 18.956 ns/op
Iteration   3: 18.944 ns/op
Iteration   4: 19.570 ns/op
Iteration   5: 19.540 ns/op

# Run progress: 56.28% complete, ETA 00:25:39
# Fork: 2 of 2
# Warmup Iteration   1: 23.743 ns/op
# Warmup Iteration   2: 31.519 ns/op
# Warmup Iteration   3: 19.053 ns/op
Iteration   1: 19.000 ns/op
Iteration   2: 18.970 ns/op
Iteration   3: 18.965 ns/op
Iteration   4: 18.841 ns/op
Iteration   5: 18.845 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.062 ±(99.9%) 0.402 ns/op [Average]
  (min, avg, max) = (18.841, 19.062, 19.570), stdev = 0.266
  CI (99.9%): [18.660, 19.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 56.32% complete, ETA 00:25:38
# Fork: 1 of 2
# Warmup Iteration   1: 2660.119 ns/op
# Warmup Iteration   2: 979.290 ns/op
# Warmup Iteration   3: 679.955 ns/op
Iteration   1: 680.310 ns/op
Iteration   2: 680.243 ns/op
Iteration   3: 680.208 ns/op
Iteration   4: 680.524 ns/op
Iteration   5: 680.509 ns/op

# Run progress: 56.35% complete, ETA 00:25:37
# Fork: 2 of 2
# Warmup Iteration   1: 2624.179 ns/op
# Warmup Iteration   2: 929.681 ns/op
# Warmup Iteration   3: 684.136 ns/op
Iteration   1: 684.381 ns/op
Iteration   2: 685.407 ns/op
Iteration   3: 684.265 ns/op
Iteration   4: 684.680 ns/op
Iteration   5: 684.633 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  682.516 ±(99.9%) 3.470 ns/op [Average]
  (min, avg, max) = (680.208, 682.516, 685.407), stdev = 2.296
  CI (99.9%): [679.045, 685.986] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 56.39% complete, ETA 00:25:36
# Fork: 1 of 2
# Warmup Iteration   1: 42938.196 ns/op
# Warmup Iteration   2: 1409.663 ns/op
# Warmup Iteration   3: 926.641 ns/op
Iteration   1: 782.034 ns/op
Iteration   2: 782.174 ns/op
Iteration   3: 781.714 ns/op
Iteration   4: 783.731 ns/op
Iteration   5: 783.945 ns/op

# Run progress: 56.42% complete, ETA 00:25:35
# Fork: 2 of 2
# Warmup Iteration   1: 24523.085 ns/op
# Warmup Iteration   2: 1242.025 ns/op
# Warmup Iteration   3: 858.656 ns/op
Iteration   1: 786.674 ns/op
Iteration   2: 787.138 ns/op
Iteration   3: 787.433 ns/op
Iteration   4: 789.917 ns/op
Iteration   5: 789.172 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  785.393 ±(99.9%) 4.609 ns/op [Average]
  (min, avg, max) = (781.714, 785.393, 789.917), stdev = 3.048
  CI (99.9%): [780.785, 790.002] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 56.46% complete, ETA 00:25:33
# Fork: 1 of 2
# Warmup Iteration   1: 36393.850 ns/op
# Warmup Iteration   2: 1091.802 ns/op
# Warmup Iteration   3: 924.221 ns/op
Iteration   1: 784.772 ns/op
Iteration   2: 783.066 ns/op
Iteration   3: 785.941 ns/op
Iteration   4: 793.927 ns/op
Iteration   5: 794.651 ns/op

# Run progress: 56.49% complete, ETA 00:25:32
# Fork: 2 of 2
# Warmup Iteration   1: 35299.611 ns/op
# Warmup Iteration   2: 1239.345 ns/op
# Warmup Iteration   3: 925.591 ns/op
Iteration   1: 783.013 ns/op
Iteration   2: 782.242 ns/op
Iteration   3: 782.777 ns/op
Iteration   4: 784.999 ns/op
Iteration   5: 784.507 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  785.990 ±(99.9%) 6.845 ns/op [Average]
  (min, avg, max) = (782.242, 785.990, 794.651), stdev = 4.527
  CI (99.9%): [779.145, 792.834] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 56.53% complete, ETA 00:25:31
# Fork: 1 of 2
# Warmup Iteration   1: 1208.427 ns/op
# Warmup Iteration   2: 972.736 ns/op
# Warmup Iteration   3: 753.493 ns/op
Iteration   1: 746.215 ns/op
Iteration   2: 746.484 ns/op
Iteration   3: 746.425 ns/op
Iteration   4: 765.113 ns/op
Iteration   5: 747.505 ns/op

# Run progress: 56.56% complete, ETA 00:25:30
# Fork: 2 of 2
# Warmup Iteration   1: 1064.083 ns/op
# Warmup Iteration   2: 1066.106 ns/op
# Warmup Iteration   3: 663.589 ns/op
Iteration   1: 663.633 ns/op
Iteration   2: 662.636 ns/op
Iteration   3: 664.869 ns/op
Iteration   4: 662.232 ns/op
Iteration   5: 663.590 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  706.870 ±(99.9%) 69.795 ns/op [Average]
  (min, avg, max) = (662.232, 706.870, 765.113), stdev = 46.165
  CI (99.9%): [637.075, 776.666] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 56.60% complete, ETA 00:25:28
# Fork: 1 of 2
# Warmup Iteration   1: 999.156 ns/op
# Warmup Iteration   2: 637.784 ns/op
# Warmup Iteration   3: 422.094 ns/op
Iteration   1: 422.743 ns/op
Iteration   2: 422.612 ns/op
Iteration   3: 422.175 ns/op
Iteration   4: 422.748 ns/op
Iteration   5: 422.060 ns/op

# Run progress: 56.63% complete, ETA 00:25:27
# Fork: 2 of 2
# Warmup Iteration   1: 878.822 ns/op
# Warmup Iteration   2: 571.917 ns/op
# Warmup Iteration   3: 424.139 ns/op
Iteration   1: 431.122 ns/op
Iteration   2: 424.040 ns/op
Iteration   3: 423.743 ns/op
Iteration   4: 424.116 ns/op
Iteration   5: 431.719 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  424.708 ±(99.9%) 5.464 ns/op [Average]
  (min, avg, max) = (422.060, 424.708, 431.719), stdev = 3.614
  CI (99.9%): [419.244, 430.171] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 56.67% complete, ETA 00:25:26
# Fork: 1 of 2
# Warmup Iteration   1: 24.115 ns/op
# Warmup Iteration   2: 29.577 ns/op
# Warmup Iteration   3: 19.047 ns/op
Iteration   1: 19.005 ns/op
Iteration   2: 18.922 ns/op
Iteration   3: 18.942 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 56.70% complete, ETA 00:25:25
# Fork: 2 of 2
# Warmup Iteration   1: 23.448 ns/op
# Warmup Iteration   2: 27.580 ns/op
# Warmup Iteration   3: 19.042 ns/op
Iteration   1: 19.007 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.980 ns/op
Iteration   4: 18.821 ns/op
Iteration   5: 18.859 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (18.821, 18.919, 19.007), stdev = 0.072
  CI (99.9%): [18.809, 19.028] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 56.74% complete, ETA 00:25:23
# Fork: 1 of 2
# Warmup Iteration   1: 102.382 ns/op
# Warmup Iteration   2: 118.722 ns/op
# Warmup Iteration   3: 73.616 ns/op
Iteration   1: 73.705 ns/op
Iteration   2: 73.641 ns/op
Iteration   3: 73.577 ns/op
Iteration   4: 74.136 ns/op
Iteration   5: 74.133 ns/op

# Run progress: 56.77% complete, ETA 00:25:22
# Fork: 2 of 2
# Warmup Iteration   1: 103.702 ns/op
# Warmup Iteration   2: 111.767 ns/op
# Warmup Iteration   3: 73.554 ns/op
Iteration   1: 73.691 ns/op
Iteration   2: 73.730 ns/op
Iteration   3: 73.612 ns/op
Iteration   4: 74.195 ns/op
Iteration   5: 74.201 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.862 ±(99.9%) 0.403 ns/op [Average]
  (min, avg, max) = (73.577, 73.862, 74.201), stdev = 0.266
  CI (99.9%): [73.459, 74.265] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 56.81% complete, ETA 00:25:21
# Fork: 1 of 2
# Warmup Iteration   1: 706.911 ns/op
# Warmup Iteration   2: 101.621 ns/op
# Warmup Iteration   3: 70.727 ns/op
Iteration   1: 70.916 ns/op
Iteration   2: 70.753 ns/op
Iteration   3: 70.833 ns/op
Iteration   4: 71.375 ns/op
Iteration   5: 71.383 ns/op

# Run progress: 56.84% complete, ETA 00:25:20
# Fork: 2 of 2
# Warmup Iteration   1: 550.101 ns/op
# Warmup Iteration   2: 106.479 ns/op
# Warmup Iteration   3: 72.223 ns/op
Iteration   1: 72.265 ns/op
Iteration   2: 72.271 ns/op
Iteration   3: 72.227 ns/op
Iteration   4: 72.703 ns/op
Iteration   5: 72.651 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.738 ±(99.9%) 1.159 ns/op [Average]
  (min, avg, max) = (70.753, 71.738, 72.703), stdev = 0.767
  CI (99.9%): [70.579, 72.897] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 56.88% complete, ETA 00:25:19
# Fork: 1 of 2
# Warmup Iteration   1: 359.570 ns/op
# Warmup Iteration   2: 104.014 ns/op
# Warmup Iteration   3: 71.830 ns/op
Iteration   1: 71.913 ns/op
Iteration   2: 71.746 ns/op
Iteration   3: 71.756 ns/op
Iteration   4: 72.256 ns/op
Iteration   5: 72.167 ns/op

# Run progress: 56.91% complete, ETA 00:25:17
# Fork: 2 of 2
# Warmup Iteration   1: 248.419 ns/op
# Warmup Iteration   2: 105.162 ns/op
# Warmup Iteration   3: 71.751 ns/op
Iteration   1: 71.790 ns/op
Iteration   2: 71.704 ns/op
Iteration   3: 71.736 ns/op
Iteration   4: 72.182 ns/op
Iteration   5: 72.209 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.946 ±(99.9%) 0.347 ns/op [Average]
  (min, avg, max) = (71.704, 71.946, 72.256), stdev = 0.230
  CI (99.9%): [71.599, 72.293] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 56.94% complete, ETA 00:25:16
# Fork: 1 of 2
# Warmup Iteration   1: 103.233 ns/op
# Warmup Iteration   2: 100.688 ns/op
# Warmup Iteration   3: 73.575 ns/op
Iteration   1: 73.622 ns/op
Iteration   2: 73.640 ns/op
Iteration   3: 73.566 ns/op
Iteration   4: 74.292 ns/op
Iteration   5: 74.299 ns/op

# Run progress: 56.98% complete, ETA 00:25:15
# Fork: 2 of 2
# Warmup Iteration   1: 105.124 ns/op
# Warmup Iteration   2: 111.872 ns/op
# Warmup Iteration   3: 73.594 ns/op
Iteration   1: 73.573 ns/op
Iteration   2: 73.564 ns/op
Iteration   3: 73.536 ns/op
Iteration   4: 74.304 ns/op
Iteration   5: 74.285 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.868 ±(99.9%) 0.557 ns/op [Average]
  (min, avg, max) = (73.536, 73.868, 74.304), stdev = 0.369
  CI (99.9%): [73.311, 74.425] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 57.01% complete, ETA 00:25:14
# Fork: 1 of 2
# Warmup Iteration   1: 207.697 ns/op
# Warmup Iteration   2: 192.308 ns/op
# Warmup Iteration   3: 145.705 ns/op
Iteration   1: 146.280 ns/op
Iteration   2: 146.385 ns/op
Iteration   3: 146.214 ns/op
Iteration   4: 145.706 ns/op
Iteration   5: 146.280 ns/op

# Run progress: 57.05% complete, ETA 00:25:12
# Fork: 2 of 2
# Warmup Iteration   1: 210.402 ns/op
# Warmup Iteration   2: 212.796 ns/op
# Warmup Iteration   3: 145.621 ns/op
Iteration   1: 145.811 ns/op
Iteration   2: 145.950 ns/op
Iteration   3: 145.453 ns/op
Iteration   4: 146.187 ns/op
Iteration   5: 145.747 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.001 ±(99.9%) 0.471 ns/op [Average]
  (min, avg, max) = (145.453, 146.001, 146.385), stdev = 0.312
  CI (99.9%): [145.530, 146.473] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 57.08% complete, ETA 00:25:11
# Fork: 1 of 2
# Warmup Iteration   1: 24.847 ns/op
# Warmup Iteration   2: 26.314 ns/op
# Warmup Iteration   3: 19.037 ns/op
Iteration   1: 18.993 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.969 ns/op
Iteration   4: 18.840 ns/op
Iteration   5: 18.853 ns/op

# Run progress: 57.12% complete, ETA 00:25:10
# Fork: 2 of 2
# Warmup Iteration   1: 25.536 ns/op
# Warmup Iteration   2: 30.576 ns/op
# Warmup Iteration   3: 19.028 ns/op
Iteration   1: 19.000 ns/op
Iteration   2: 18.946 ns/op
Iteration   3: 18.975 ns/op
Iteration   4: 18.843 ns/op
Iteration   5: 18.859 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.924 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (18.840, 18.924, 19.000), stdev = 0.067
  CI (99.9%): [18.823, 19.025] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 57.15% complete, ETA 00:25:09
# Fork: 1 of 2
# Warmup Iteration   1: 102.848 ns/op
# Warmup Iteration   2: 114.462 ns/op
# Warmup Iteration   3: 73.517 ns/op
Iteration   1: 73.603 ns/op
Iteration   2: 73.627 ns/op
Iteration   3: 73.668 ns/op
Iteration   4: 74.089 ns/op
Iteration   5: 74.049 ns/op

# Run progress: 57.19% complete, ETA 00:25:08
# Fork: 2 of 2
# Warmup Iteration   1: 101.657 ns/op
# Warmup Iteration   2: 101.348 ns/op
# Warmup Iteration   3: 73.856 ns/op
Iteration   1: 73.897 ns/op
Iteration   2: 73.867 ns/op
Iteration   3: 73.835 ns/op
Iteration   4: 74.312 ns/op
Iteration   5: 74.413 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.936 ±(99.9%) 0.422 ns/op [Average]
  (min, avg, max) = (73.603, 73.936, 74.413), stdev = 0.279
  CI (99.9%): [73.514, 74.358] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 57.22% complete, ETA 00:25:06
# Fork: 1 of 2
# Warmup Iteration   1: 343.330 ns/op
# Warmup Iteration   2: 106.591 ns/op
# Warmup Iteration   3: 70.725 ns/op
Iteration   1: 70.787 ns/op
Iteration   2: 70.756 ns/op
Iteration   3: 70.736 ns/op
Iteration   4: 71.506 ns/op
Iteration   5: 71.509 ns/op

# Run progress: 57.26% complete, ETA 00:25:05
# Fork: 2 of 2
# Warmup Iteration   1: 578.861 ns/op
# Warmup Iteration   2: 109.813 ns/op
# Warmup Iteration   3: 70.756 ns/op
Iteration   1: 70.717 ns/op
Iteration   2: 70.776 ns/op
Iteration   3: 70.853 ns/op
Iteration   4: 71.400 ns/op
Iteration   5: 71.384 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.042 ±(99.9%) 0.536 ns/op [Average]
  (min, avg, max) = (70.717, 71.042, 71.509), stdev = 0.355
  CI (99.9%): [70.506, 71.578] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 57.29% complete, ETA 00:25:04
# Fork: 1 of 2
# Warmup Iteration   1: 239.478 ns/op
# Warmup Iteration   2: 105.697 ns/op
# Warmup Iteration   3: 71.754 ns/op
Iteration   1: 71.968 ns/op
Iteration   2: 71.832 ns/op
Iteration   3: 71.809 ns/op
Iteration   4: 72.203 ns/op
Iteration   5: 72.233 ns/op

# Run progress: 57.33% complete, ETA 00:25:03
# Fork: 2 of 2
# Warmup Iteration   1: 267.835 ns/op
# Warmup Iteration   2: 105.704 ns/op
# Warmup Iteration   3: 71.773 ns/op
Iteration   1: 71.707 ns/op
Iteration   2: 71.834 ns/op
Iteration   3: 71.759 ns/op
Iteration   4: 72.150 ns/op
Iteration   5: 72.157 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.965 ±(99.9%) 0.306 ns/op [Average]
  (min, avg, max) = (71.707, 71.965, 72.233), stdev = 0.202
  CI (99.9%): [71.660, 72.271] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 57.36% complete, ETA 00:25:01
# Fork: 1 of 2
# Warmup Iteration   1: 105.052 ns/op
# Warmup Iteration   2: 110.643 ns/op
# Warmup Iteration   3: 73.533 ns/op
Iteration   1: 73.548 ns/op
Iteration   2: 73.572 ns/op
Iteration   3: 73.575 ns/op
Iteration   4: 74.308 ns/op
Iteration   5: 74.229 ns/op

# Run progress: 57.40% complete, ETA 00:25:00
# Fork: 2 of 2
# Warmup Iteration   1: 104.921 ns/op
# Warmup Iteration   2: 110.243 ns/op
# Warmup Iteration   3: 73.561 ns/op
Iteration   1: 73.572 ns/op
Iteration   2: 73.577 ns/op
Iteration   3: 73.511 ns/op
Iteration   4: 74.322 ns/op
Iteration   5: 74.302 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.852 ±(99.9%) 0.573 ns/op [Average]
  (min, avg, max) = (73.511, 73.852, 74.322), stdev = 0.379
  CI (99.9%): [73.279, 74.424] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 57.43% complete, ETA 00:24:59
# Fork: 1 of 2
# Warmup Iteration   1: 205.059 ns/op
# Warmup Iteration   2: 192.533 ns/op
# Warmup Iteration   3: 146.434 ns/op
Iteration   1: 145.580 ns/op
Iteration   2: 146.291 ns/op
Iteration   3: 145.739 ns/op
Iteration   4: 145.671 ns/op
Iteration   5: 145.777 ns/op

# Run progress: 57.47% complete, ETA 00:24:58
# Fork: 2 of 2
# Warmup Iteration   1: 214.260 ns/op
# Warmup Iteration   2: 207.855 ns/op
# Warmup Iteration   3: 145.757 ns/op
Iteration   1: 145.428 ns/op
Iteration   2: 146.326 ns/op
Iteration   3: 145.545 ns/op
Iteration   4: 145.771 ns/op
Iteration   5: 145.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.797 ±(99.9%) 0.449 ns/op [Average]
  (min, avg, max) = (145.428, 145.797, 146.326), stdev = 0.297
  CI (99.9%): [145.348, 146.246] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 57.50% complete, ETA 00:24:57
# Fork: 1 of 2
# Warmup Iteration   1: 25.860 ns/op
# Warmup Iteration   2: 28.490 ns/op
# Warmup Iteration   3: 19.021 ns/op
Iteration   1: 18.997 ns/op
Iteration   2: 18.940 ns/op
Iteration   3: 18.942 ns/op
Iteration   4: 18.812 ns/op
Iteration   5: 18.848 ns/op

# Run progress: 57.53% complete, ETA 00:24:55
# Fork: 2 of 2
# Warmup Iteration   1: 23.707 ns/op
# Warmup Iteration   2: 31.144 ns/op
# Warmup Iteration   3: 19.040 ns/op
Iteration   1: 18.990 ns/op
Iteration   2: 18.972 ns/op
Iteration   3: 18.981 ns/op
Iteration   4: 19.568 ns/op
Iteration   5: 19.537 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.059 ±(99.9%) 0.404 ns/op [Average]
  (min, avg, max) = (18.812, 19.059, 19.568), stdev = 0.267
  CI (99.9%): [18.655, 19.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 57.57% complete, ETA 00:24:54
# Fork: 1 of 2
# Warmup Iteration   1: 116.835 ns/op
# Warmup Iteration   2: 116.562 ns/op
# Warmup Iteration   3: 80.097 ns/op
Iteration   1: 79.986 ns/op
Iteration   2: 80.032 ns/op
Iteration   3: 80.024 ns/op
Iteration   4: 80.579 ns/op
Iteration   5: 80.555 ns/op

# Run progress: 57.60% complete, ETA 00:24:53
# Fork: 2 of 2
# Warmup Iteration   1: 111.737 ns/op
# Warmup Iteration   2: 116.307 ns/op
# Warmup Iteration   3: 93.075 ns/op
Iteration   1: 92.857 ns/op
Iteration   2: 93.282 ns/op
Iteration   3: 92.708 ns/op
Iteration   4: 93.759 ns/op
Iteration   5: 93.898 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  86.768 ±(99.9%) 10.429 ns/op [Average]
  (min, avg, max) = (79.986, 86.768, 93.898), stdev = 6.898
  CI (99.9%): [76.339, 97.197] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 57.64% complete, ETA 00:24:52
# Fork: 1 of 2
# Warmup Iteration   1: 919.598 ns/op
# Warmup Iteration   2: 149.753 ns/op
# Warmup Iteration   3: 108.616 ns/op
Iteration   1: 108.565 ns/op
Iteration   2: 108.575 ns/op
Iteration   3: 108.542 ns/op
Iteration   4: 108.826 ns/op
Iteration   5: 108.831 ns/op

# Run progress: 57.67% complete, ETA 00:24:50
# Fork: 2 of 2
# Warmup Iteration   1: 737.532 ns/op
# Warmup Iteration   2: 148.992 ns/op
# Warmup Iteration   3: 108.130 ns/op
Iteration   1: 108.423 ns/op
Iteration   2: 108.215 ns/op
Iteration   3: 108.406 ns/op
Iteration   4: 108.341 ns/op
Iteration   5: 108.601 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.532 ±(99.9%) 0.297 ns/op [Average]
  (min, avg, max) = (108.215, 108.532, 108.831), stdev = 0.197
  CI (99.9%): [108.235, 108.830] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 57.71% complete, ETA 00:24:49
# Fork: 1 of 2
# Warmup Iteration   1: 451.303 ns/op
# Warmup Iteration   2: 157.082 ns/op
# Warmup Iteration   3: 108.584 ns/op
Iteration   1: 108.633 ns/op
Iteration   2: 108.623 ns/op
Iteration   3: 108.612 ns/op
Iteration   4: 108.913 ns/op
Iteration   5: 108.974 ns/op

# Run progress: 57.74% complete, ETA 00:24:48
# Fork: 2 of 2
# Warmup Iteration   1: 574.012 ns/op
# Warmup Iteration   2: 163.772 ns/op
# Warmup Iteration   3: 108.979 ns/op
Iteration   1: 108.836 ns/op
Iteration   2: 108.857 ns/op
Iteration   3: 108.958 ns/op
Iteration   4: 109.202 ns/op
Iteration   5: 109.264 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.887 ±(99.9%) 0.345 ns/op [Average]
  (min, avg, max) = (108.612, 108.887, 109.264), stdev = 0.228
  CI (99.9%): [108.542, 109.232] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 57.78% complete, ETA 00:24:47
# Fork: 1 of 2
# Warmup Iteration   1: 104.933 ns/op
# Warmup Iteration   2: 106.425 ns/op
# Warmup Iteration   3: 73.564 ns/op
Iteration   1: 73.592 ns/op
Iteration   2: 73.554 ns/op
Iteration   3: 73.554 ns/op
Iteration   4: 74.252 ns/op
Iteration   5: 74.247 ns/op

# Run progress: 57.81% complete, ETA 00:24:46
# Fork: 2 of 2
# Warmup Iteration   1: 106.077 ns/op
# Warmup Iteration   2: 107.674 ns/op
# Warmup Iteration   3: 73.559 ns/op
Iteration   1: 73.573 ns/op
Iteration   2: 73.569 ns/op
Iteration   3: 73.499 ns/op
Iteration   4: 74.293 ns/op
Iteration   5: 74.268 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.840 ±(99.9%) 0.554 ns/op [Average]
  (min, avg, max) = (73.499, 73.840, 74.293), stdev = 0.367
  CI (99.9%): [73.286, 74.395] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 57.85% complete, ETA 00:24:44
# Fork: 1 of 2
# Warmup Iteration   1: 228.721 ns/op
# Warmup Iteration   2: 228.273 ns/op
# Warmup Iteration   3: 156.886 ns/op
Iteration   1: 156.884 ns/op
Iteration   2: 157.189 ns/op
Iteration   3: 156.872 ns/op
Iteration   4: 157.042 ns/op
Iteration   5: 157.076 ns/op

# Run progress: 57.88% complete, ETA 00:24:43
# Fork: 2 of 2
# Warmup Iteration   1: 220.098 ns/op
# Warmup Iteration   2: 227.233 ns/op
# Warmup Iteration   3: 156.341 ns/op
Iteration   1: 156.376 ns/op
Iteration   2: 156.921 ns/op
Iteration   3: 156.433 ns/op
Iteration   4: 155.854 ns/op
Iteration   5: 155.828 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.648 ±(99.9%) 0.753 ns/op [Average]
  (min, avg, max) = (155.828, 156.648, 157.189), stdev = 0.498
  CI (99.9%): [155.894, 157.401] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 57.92% complete, ETA 00:24:42
# Fork: 1 of 2
# Warmup Iteration   1: 26.243 ns/op
# Warmup Iteration   2: 28.053 ns/op
# Warmup Iteration   3: 19.022 ns/op
Iteration   1: 19.003 ns/op
Iteration   2: 18.954 ns/op
Iteration   3: 18.962 ns/op
Iteration   4: 18.840 ns/op
Iteration   5: 18.829 ns/op

# Run progress: 57.95% complete, ETA 00:24:41
# Fork: 2 of 2
# Warmup Iteration   1: 23.980 ns/op
# Warmup Iteration   2: 29.037 ns/op
# Warmup Iteration   3: 19.074 ns/op
Iteration   1: 19.020 ns/op
Iteration   2: 18.968 ns/op
Iteration   3: 18.941 ns/op
Iteration   4: 18.808 ns/op
Iteration   5: 18.828 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (18.808, 18.915, 19.020), stdev = 0.081
  CI (99.9%): [18.794, 19.037] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 57.99% complete, ETA 00:24:39
# Fork: 1 of 2
# Warmup Iteration   1: 704.404 ns/op
# Warmup Iteration   2: 335.627 ns/op
# Warmup Iteration   3: 238.899 ns/op
Iteration   1: 239.026 ns/op
Iteration   2: 238.572 ns/op
Iteration   3: 238.659 ns/op
Iteration   4: 236.778 ns/op
Iteration   5: 236.051 ns/op

# Run progress: 58.02% complete, ETA 00:24:38
# Fork: 2 of 2
# Warmup Iteration   1: 545.224 ns/op
# Warmup Iteration   2: 330.645 ns/op
# Warmup Iteration   3: 235.314 ns/op
Iteration   1: 235.440 ns/op
Iteration   2: 235.304 ns/op
Iteration   3: 235.412 ns/op
Iteration   4: 236.805 ns/op
Iteration   5: 236.250 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  236.830 ±(99.9%) 2.163 ns/op [Average]
  (min, avg, max) = (235.304, 236.830, 239.026), stdev = 1.431
  CI (99.9%): [234.667, 238.993] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 58.06% complete, ETA 00:24:37
# Fork: 1 of 2
# Warmup Iteration   1: 925.067 ns/op
# Warmup Iteration   2: 587.944 ns/op
# Warmup Iteration   3: 403.320 ns/op
Iteration   1: 403.509 ns/op
Iteration   2: 403.754 ns/op
Iteration   3: 403.457 ns/op
Iteration   4: 403.837 ns/op
Iteration   5: 404.465 ns/op

# Run progress: 58.09% complete, ETA 00:24:36
# Fork: 2 of 2
# Warmup Iteration   1: 1411.967 ns/op
# Warmup Iteration   2: 545.782 ns/op
# Warmup Iteration   3: 410.608 ns/op
Iteration   1: 423.866 ns/op
Iteration   2: 410.572 ns/op
Iteration   3: 410.694 ns/op
Iteration   4: 410.922 ns/op
Iteration   5: 412.465 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.754 ±(99.9%) 9.786 ns/op [Average]
  (min, avg, max) = (403.457, 408.754, 423.866), stdev = 6.473
  CI (99.9%): [398.968, 418.540] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 58.13% complete, ETA 00:24:35
# Fork: 1 of 2
# Warmup Iteration   1: 4458.886 ns/op
# Warmup Iteration   2: 643.358 ns/op
# Warmup Iteration   3: 463.955 ns/op
Iteration   1: 464.069 ns/op
Iteration   2: 473.088 ns/op
Iteration   3: 464.064 ns/op
Iteration   4: 464.643 ns/op
Iteration   5: 464.720 ns/op

# Run progress: 58.16% complete, ETA 00:24:33
# Fork: 2 of 2
# Warmup Iteration   1: 3167.472 ns/op
# Warmup Iteration   2: 707.564 ns/op
# Warmup Iteration   3: 504.080 ns/op
Iteration   1: 503.857 ns/op
Iteration   2: 503.835 ns/op
Iteration   3: 503.772 ns/op
Iteration   4: 503.489 ns/op
Iteration   5: 503.146 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  484.868 ±(99.9%) 30.143 ns/op [Average]
  (min, avg, max) = (464.064, 484.868, 503.857), stdev = 19.938
  CI (99.9%): [454.725, 515.011] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 58.19% complete, ETA 00:24:32
# Fork: 1 of 2
# Warmup Iteration   1: 662.393 ns/op
# Warmup Iteration   2: 618.620 ns/op
# Warmup Iteration   3: 460.557 ns/op
Iteration   1: 460.798 ns/op
Iteration   2: 460.814 ns/op
Iteration   3: 460.985 ns/op
Iteration   4: 461.392 ns/op
Iteration   5: 461.484 ns/op

# Run progress: 58.23% complete, ETA 00:24:31
# Fork: 2 of 2
# Warmup Iteration   1: 666.616 ns/op
# Warmup Iteration   2: 678.977 ns/op
# Warmup Iteration   3: 460.982 ns/op
Iteration   1: 460.687 ns/op
Iteration   2: 460.677 ns/op
Iteration   3: 460.740 ns/op
Iteration   4: 461.465 ns/op
Iteration   5: 461.174 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  461.022 ±(99.9%) 0.498 ns/op [Average]
  (min, avg, max) = (460.677, 461.022, 461.484), stdev = 0.329
  CI (99.9%): [460.524, 461.519] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 58.26% complete, ETA 00:24:30
# Fork: 1 of 2
# Warmup Iteration   1: 895.404 ns/op
# Warmup Iteration   2: 606.533 ns/op
# Warmup Iteration   3: 416.110 ns/op
Iteration   1: 416.757 ns/op
Iteration   2: 417.004 ns/op
Iteration   3: 416.321 ns/op
Iteration   4: 416.404 ns/op
Iteration   5: 416.582 ns/op

# Run progress: 58.30% complete, ETA 00:24:28
# Fork: 2 of 2
# Warmup Iteration   1: 885.712 ns/op
# Warmup Iteration   2: 592.420 ns/op
# Warmup Iteration   3: 417.856 ns/op
Iteration   1: 417.212 ns/op
Iteration   2: 417.357 ns/op
Iteration   3: 418.136 ns/op
Iteration   4: 415.632 ns/op
Iteration   5: 415.549 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  416.695 ±(99.9%) 1.188 ns/op [Average]
  (min, avg, max) = (415.549, 416.695, 418.136), stdev = 0.786
  CI (99.9%): [415.507, 417.884] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 58.33% complete, ETA 00:24:27
# Fork: 1 of 2
# Warmup Iteration   1: 24.080 ns/op
# Warmup Iteration   2: 124.151 ns/op
# Warmup Iteration   3: 18.930 ns/op
Iteration   1: 18.961 ns/op
Iteration   2: 18.968 ns/op
Iteration   3: 18.958 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.831 ns/op

# Run progress: 58.37% complete, ETA 00:24:26
# Fork: 2 of 2
# Warmup Iteration   1: 24.830 ns/op
# Warmup Iteration   2: 140.497 ns/op
# Warmup Iteration   3: 18.954 ns/op
Iteration   1: 18.947 ns/op
Iteration   2: 18.966 ns/op
Iteration   3: 18.950 ns/op
Iteration   4: 18.824 ns/op
Iteration   5: 18.828 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.906 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (18.824, 18.906, 18.968), stdev = 0.068
  CI (99.9%): [18.803, 19.009] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 58.40% complete, ETA 00:24:25
# Fork: 1 of 2
# Warmup Iteration   1: 251.746 ns/op
# Warmup Iteration   2: 455.883 ns/op
# Warmup Iteration   3: 138.867 ns/op
Iteration   1: 138.888 ns/op
Iteration   2: 138.907 ns/op
Iteration   3: 138.991 ns/op
Iteration   4: 139.236 ns/op
Iteration   5: 139.246 ns/op

# Run progress: 58.44% complete, ETA 00:24:24
# Fork: 2 of 2
# Warmup Iteration   1: 245.808 ns/op
# Warmup Iteration   2: 453.624 ns/op
# Warmup Iteration   3: 138.778 ns/op
Iteration   1: 138.800 ns/op
Iteration   2: 138.779 ns/op
Iteration   3: 138.861 ns/op
Iteration   4: 139.255 ns/op
Iteration   5: 139.144 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.011 ±(99.9%) 0.290 ns/op [Average]
  (min, avg, max) = (138.779, 139.011, 139.255), stdev = 0.192
  CI (99.9%): [138.721, 139.300] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 58.47% complete, ETA 00:24:22
# Fork: 1 of 2
# Warmup Iteration   1: 526.947 ns/op
# Warmup Iteration   2: 528.697 ns/op
# Warmup Iteration   3: 163.832 ns/op
Iteration   1: 163.890 ns/op
Iteration   2: 163.899 ns/op
Iteration   3: 163.949 ns/op
Iteration   4: 164.152 ns/op
Iteration   5: 164.142 ns/op

# Run progress: 58.51% complete, ETA 00:24:21
# Fork: 2 of 2
# Warmup Iteration   1: 500.210 ns/op
# Warmup Iteration   2: 518.487 ns/op
# Warmup Iteration   3: 166.138 ns/op
Iteration   1: 166.130 ns/op
Iteration   2: 166.554 ns/op
Iteration   3: 166.048 ns/op
Iteration   4: 166.565 ns/op
Iteration   5: 166.729 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  165.206 ±(99.9%) 1.939 ns/op [Average]
  (min, avg, max) = (163.890, 165.206, 166.729), stdev = 1.283
  CI (99.9%): [163.266, 167.145] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 58.54% complete, ETA 00:24:20
# Fork: 1 of 2
# Warmup Iteration   1: 629.799 ns/op
# Warmup Iteration   2: 666.173 ns/op
# Warmup Iteration   3: 220.966 ns/op
Iteration   1: 220.988 ns/op
Iteration   2: 221.019 ns/op
Iteration   3: 221.007 ns/op
Iteration   4: 221.753 ns/op
Iteration   5: 221.690 ns/op

# Run progress: 58.58% complete, ETA 00:24:19
# Fork: 2 of 2
# Warmup Iteration   1: 595.572 ns/op
# Warmup Iteration   2: 669.969 ns/op
# Warmup Iteration   3: 213.454 ns/op
Iteration   1: 213.518 ns/op
Iteration   2: 213.448 ns/op
Iteration   3: 213.553 ns/op
Iteration   4: 213.806 ns/op
Iteration   5: 213.936 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  217.472 ±(99.9%) 6.103 ns/op [Average]
  (min, avg, max) = (213.448, 217.472, 221.753), stdev = 4.037
  CI (99.9%): [211.368, 223.575] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 58.61% complete, ETA 00:24:17
# Fork: 1 of 2
# Warmup Iteration   1: 104.444 ns/op
# Warmup Iteration   2: 276.550 ns/op
# Warmup Iteration   3: 73.746 ns/op
Iteration   1: 73.725 ns/op
Iteration   2: 73.716 ns/op
Iteration   3: 73.709 ns/op
Iteration   4: 74.448 ns/op
Iteration   5: 74.470 ns/op

# Run progress: 58.65% complete, ETA 00:24:16
# Fork: 2 of 2
# Warmup Iteration   1: 105.807 ns/op
# Warmup Iteration   2: 282.320 ns/op
# Warmup Iteration   3: 73.674 ns/op
Iteration   1: 73.748 ns/op
Iteration   2: 73.706 ns/op
Iteration   3: 73.802 ns/op
Iteration   4: 74.521 ns/op
Iteration   5: 74.454 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.030 ±(99.9%) 0.579 ns/op [Average]
  (min, avg, max) = (73.706, 74.030, 74.521), stdev = 0.383
  CI (99.9%): [73.451, 74.609] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 58.68% complete, ETA 00:24:15
# Fork: 1 of 2
# Warmup Iteration   1: 261.053 ns/op
# Warmup Iteration   2: 467.650 ns/op
# Warmup Iteration   3: 141.029 ns/op
Iteration   1: 141.204 ns/op
Iteration   2: 141.820 ns/op
Iteration   3: 141.331 ns/op
Iteration   4: 141.339 ns/op
Iteration   5: 141.247 ns/op

# Run progress: 58.72% complete, ETA 00:24:14
# Fork: 2 of 2
# Warmup Iteration   1: 244.091 ns/op
# Warmup Iteration   2: 491.012 ns/op
# Warmup Iteration   3: 141.200 ns/op
Iteration   1: 141.623 ns/op
Iteration   2: 141.286 ns/op
Iteration   3: 140.811 ns/op
Iteration   4: 141.716 ns/op
Iteration   5: 141.855 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.423 ±(99.9%) 0.493 ns/op [Average]
  (min, avg, max) = (140.811, 141.423, 141.855), stdev = 0.326
  CI (99.9%): [140.930, 141.916] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 58.75% complete, ETA 00:24:13
# Fork: 1 of 2
# Warmup Iteration   1: 24.545 ns/op
# Warmup Iteration   2: 29.840 ns/op
# Warmup Iteration   3: 18.947 ns/op
Iteration   1: 18.974 ns/op
Iteration   2: 18.973 ns/op
Iteration   3: 18.948 ns/op
Iteration   4: 18.859 ns/op
Iteration   5: 18.848 ns/op

# Run progress: 58.78% complete, ETA 00:24:11
# Fork: 2 of 2
# Warmup Iteration   1: 25.041 ns/op
# Warmup Iteration   2: 31.149 ns/op
# Warmup Iteration   3: 18.965 ns/op
Iteration   1: 18.961 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.960 ns/op
Iteration   4: 18.838 ns/op
Iteration   5: 18.844 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.917 ±(99.9%) 0.091 ns/op [Average]
  (min, avg, max) = (18.838, 18.917, 18.974), stdev = 0.060
  CI (99.9%): [18.825, 19.008] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 58.82% complete, ETA 00:24:10
# Fork: 1 of 2
# Warmup Iteration   1: 104.430 ns/op
# Warmup Iteration   2: 109.547 ns/op
# Warmup Iteration   3: 74.151 ns/op
Iteration   1: 74.089 ns/op
Iteration   2: 74.090 ns/op
Iteration   3: 74.188 ns/op
Iteration   4: 74.911 ns/op
Iteration   5: 74.767 ns/op

# Run progress: 58.85% complete, ETA 00:24:09
# Fork: 2 of 2
# Warmup Iteration   1: 102.440 ns/op
# Warmup Iteration   2: 109.854 ns/op
# Warmup Iteration   3: 73.553 ns/op
Iteration   1: 73.627 ns/op
Iteration   2: 73.556 ns/op
Iteration   3: 73.676 ns/op
Iteration   4: 74.186 ns/op
Iteration   5: 74.201 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.129 ±(99.9%) 0.680 ns/op [Average]
  (min, avg, max) = (73.556, 74.129, 74.911), stdev = 0.449
  CI (99.9%): [73.450, 74.809] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 58.89% complete, ETA 00:24:08
# Fork: 1 of 2
# Warmup Iteration   1: 384.432 ns/op
# Warmup Iteration   2: 115.244 ns/op
# Warmup Iteration   3: 70.967 ns/op
Iteration   1: 70.916 ns/op
Iteration   2: 70.960 ns/op
Iteration   3: 70.998 ns/op
Iteration   4: 71.628 ns/op
Iteration   5: 71.580 ns/op

# Run progress: 58.92% complete, ETA 00:24:06
# Fork: 2 of 2
# Warmup Iteration   1: 319.690 ns/op
# Warmup Iteration   2: 104.911 ns/op
# Warmup Iteration   3: 70.975 ns/op
Iteration   1: 70.980 ns/op
Iteration   2: 70.966 ns/op
Iteration   3: 70.897 ns/op
Iteration   4: 71.760 ns/op
Iteration   5: 71.728 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.241 ±(99.9%) 0.569 ns/op [Average]
  (min, avg, max) = (70.897, 71.241, 71.760), stdev = 0.377
  CI (99.9%): [70.672, 71.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 58.96% complete, ETA 00:24:05
# Fork: 1 of 2
# Warmup Iteration   1: 286.015 ns/op
# Warmup Iteration   2: 100.807 ns/op
# Warmup Iteration   3: 71.673 ns/op
Iteration   1: 71.711 ns/op
Iteration   2: 71.747 ns/op
Iteration   3: 71.729 ns/op
Iteration   4: 72.374 ns/op
Iteration   5: 72.398 ns/op

# Run progress: 58.99% complete, ETA 00:24:04
# Fork: 2 of 2
# Warmup Iteration   1: 224.127 ns/op
# Warmup Iteration   2: 108.901 ns/op
# Warmup Iteration   3: 71.673 ns/op
Iteration   1: 71.690 ns/op
Iteration   2: 71.682 ns/op
Iteration   3: 71.680 ns/op
Iteration   4: 72.316 ns/op
Iteration   5: 72.310 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.964 ±(99.9%) 0.504 ns/op [Average]
  (min, avg, max) = (71.680, 71.964, 72.398), stdev = 0.334
  CI (99.9%): [71.460, 72.468] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 59.03% complete, ETA 00:24:03
# Fork: 1 of 2
# Warmup Iteration   1: 106.242 ns/op
# Warmup Iteration   2: 106.827 ns/op
# Warmup Iteration   3: 73.747 ns/op
Iteration   1: 73.707 ns/op
Iteration   2: 73.778 ns/op
Iteration   3: 73.743 ns/op
Iteration   4: 74.463 ns/op
Iteration   5: 74.453 ns/op

# Run progress: 59.06% complete, ETA 00:24:02
# Fork: 2 of 2
# Warmup Iteration   1: 103.981 ns/op
# Warmup Iteration   2: 108.294 ns/op
# Warmup Iteration   3: 73.676 ns/op
Iteration   1: 73.752 ns/op
Iteration   2: 73.674 ns/op
Iteration   3: 73.792 ns/op
Iteration   4: 74.443 ns/op
Iteration   5: 74.483 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.029 ±(99.9%) 0.564 ns/op [Average]
  (min, avg, max) = (73.674, 74.029, 74.483), stdev = 0.373
  CI (99.9%): [73.465, 74.593] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 59.10% complete, ETA 00:24:00
# Fork: 1 of 2
# Warmup Iteration   1: 210.439 ns/op
# Warmup Iteration   2: 208.741 ns/op
# Warmup Iteration   3: 121.065 ns/op
Iteration   1: 121.864 ns/op
Iteration   2: 121.343 ns/op
Iteration   3: 122.142 ns/op
Iteration   4: 121.029 ns/op
Iteration   5: 120.866 ns/op

# Run progress: 59.13% complete, ETA 00:23:59
# Fork: 2 of 2
# Warmup Iteration   1: 208.950 ns/op
# Warmup Iteration   2: 218.331 ns/op
# Warmup Iteration   3: 120.835 ns/op
Iteration   1: 120.859 ns/op
Iteration   2: 121.840 ns/op
Iteration   3: 122.399 ns/op
Iteration   4: 120.928 ns/op
Iteration   5: 120.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.416 ±(99.9%) 0.895 ns/op [Average]
  (min, avg, max) = (120.859, 121.416, 122.399), stdev = 0.592
  CI (99.9%): [120.521, 122.311] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 59.17% complete, ETA 00:23:58
# Fork: 1 of 2
# Warmup Iteration   1: 25.060 ns/op
# Warmup Iteration   2: 27.887 ns/op
# Warmup Iteration   3: 18.935 ns/op
Iteration   1: 18.962 ns/op
Iteration   2: 18.957 ns/op
Iteration   3: 18.939 ns/op
Iteration   4: 19.544 ns/op
Iteration   5: 19.492 ns/op

# Run progress: 59.20% complete, ETA 00:23:57
# Fork: 2 of 2
# Warmup Iteration   1: 25.610 ns/op
# Warmup Iteration   2: 30.716 ns/op
# Warmup Iteration   3: 18.941 ns/op
Iteration   1: 18.958 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.968 ns/op
Iteration   4: 18.849 ns/op
Iteration   5: 18.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.047 ±(99.9%) 0.383 ns/op [Average]
  (min, avg, max) = (18.837, 19.047, 19.544), stdev = 0.253
  CI (99.9%): [18.664, 19.430] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 59.24% complete, ETA 00:23:55
# Fork: 1 of 2
# Warmup Iteration   1: 102.311 ns/op
# Warmup Iteration   2: 111.784 ns/op
# Warmup Iteration   3: 73.539 ns/op
Iteration   1: 73.639 ns/op
Iteration   2: 73.685 ns/op
Iteration   3: 73.594 ns/op
Iteration   4: 74.162 ns/op
Iteration   5: 74.216 ns/op

# Run progress: 59.27% complete, ETA 00:23:54
# Fork: 2 of 2
# Warmup Iteration   1: 101.655 ns/op
# Warmup Iteration   2: 101.525 ns/op
# Warmup Iteration   3: 73.610 ns/op
Iteration   1: 73.675 ns/op
Iteration   2: 73.548 ns/op
Iteration   3: 73.669 ns/op
Iteration   4: 74.248 ns/op
Iteration   5: 74.265 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.870 ±(99.9%) 0.464 ns/op [Average]
  (min, avg, max) = (73.548, 73.870, 74.265), stdev = 0.307
  CI (99.9%): [73.406, 74.334] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 59.31% complete, ETA 00:23:53
# Fork: 1 of 2
# Warmup Iteration   1: 479.551 ns/op
# Warmup Iteration   2: 108.184 ns/op
# Warmup Iteration   3: 71.091 ns/op
Iteration   1: 70.997 ns/op
Iteration   2: 71.020 ns/op
Iteration   3: 70.993 ns/op
Iteration   4: 71.562 ns/op
Iteration   5: 71.645 ns/op

# Run progress: 59.34% complete, ETA 00:23:52
# Fork: 2 of 2
# Warmup Iteration   1: 483.181 ns/op
# Warmup Iteration   2: 103.673 ns/op
# Warmup Iteration   3: 72.340 ns/op
Iteration   1: 72.329 ns/op
Iteration   2: 72.311 ns/op
Iteration   3: 72.314 ns/op
Iteration   4: 72.777 ns/op
Iteration   5: 72.752 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.870 ±(99.9%) 1.081 ns/op [Average]
  (min, avg, max) = (70.993, 71.870, 72.777), stdev = 0.715
  CI (99.9%): [70.789, 72.951] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 59.38% complete, ETA 00:23:51
# Fork: 1 of 2
# Warmup Iteration   1: 225.896 ns/op
# Warmup Iteration   2: 113.632 ns/op
# Warmup Iteration   3: 71.666 ns/op
Iteration   1: 71.696 ns/op
Iteration   2: 71.685 ns/op
Iteration   3: 71.697 ns/op
Iteration   4: 72.322 ns/op
Iteration   5: 72.321 ns/op

# Run progress: 59.41% complete, ETA 00:23:49
# Fork: 2 of 2
# Warmup Iteration   1: 234.671 ns/op
# Warmup Iteration   2: 107.483 ns/op
# Warmup Iteration   3: 71.659 ns/op
Iteration   1: 71.767 ns/op
Iteration   2: 71.729 ns/op
Iteration   3: 71.659 ns/op
Iteration   4: 72.323 ns/op
Iteration   5: 72.319 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.952 ±(99.9%) 0.483 ns/op [Average]
  (min, avg, max) = (71.659, 71.952, 72.323), stdev = 0.319
  CI (99.9%): [71.469, 72.434] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 59.44% complete, ETA 00:23:48
# Fork: 1 of 2
# Warmup Iteration   1: 104.071 ns/op
# Warmup Iteration   2: 115.076 ns/op
# Warmup Iteration   3: 73.702 ns/op
Iteration   1: 73.712 ns/op
Iteration   2: 73.774 ns/op
Iteration   3: 73.694 ns/op
Iteration   4: 74.466 ns/op
Iteration   5: 74.450 ns/op

# Run progress: 59.48% complete, ETA 00:23:47
# Fork: 2 of 2
# Warmup Iteration   1: 104.745 ns/op
# Warmup Iteration   2: 107.227 ns/op
# Warmup Iteration   3: 73.714 ns/op
Iteration   1: 73.743 ns/op
Iteration   2: 73.709 ns/op
Iteration   3: 73.710 ns/op
Iteration   4: 74.447 ns/op
Iteration   5: 74.474 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.018 ±(99.9%) 0.575 ns/op [Average]
  (min, avg, max) = (73.694, 74.018, 74.474), stdev = 0.381
  CI (99.9%): [73.442, 74.593] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 59.51% complete, ETA 00:23:46
# Fork: 1 of 2
# Warmup Iteration   1: 206.291 ns/op
# Warmup Iteration   2: 213.237 ns/op
# Warmup Iteration   3: 122.238 ns/op
Iteration   1: 120.844 ns/op
Iteration   2: 121.123 ns/op
Iteration   3: 121.124 ns/op
Iteration   4: 120.803 ns/op
Iteration   5: 120.860 ns/op

# Run progress: 59.55% complete, ETA 00:23:44
# Fork: 2 of 2
# Warmup Iteration   1: 227.496 ns/op
# Warmup Iteration   2: 218.801 ns/op
# Warmup Iteration   3: 120.549 ns/op
Iteration   1: 121.133 ns/op
Iteration   2: 121.575 ns/op
Iteration   3: 121.679 ns/op
Iteration   4: 120.891 ns/op
Iteration   5: 120.873 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.091 ±(99.9%) 0.470 ns/op [Average]
  (min, avg, max) = (120.803, 121.091, 121.679), stdev = 0.311
  CI (99.9%): [120.621, 121.560] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 59.58% complete, ETA 00:23:43
# Fork: 1 of 2
# Warmup Iteration   1: 24.363 ns/op
# Warmup Iteration   2: 30.351 ns/op
# Warmup Iteration   3: 18.956 ns/op
Iteration   1: 18.949 ns/op
Iteration   2: 18.988 ns/op
Iteration   3: 18.955 ns/op
Iteration   4: 18.846 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 59.62% complete, ETA 00:23:42
# Fork: 2 of 2
# Warmup Iteration   1: 25.880 ns/op
# Warmup Iteration   2: 30.488 ns/op
# Warmup Iteration   3: 18.944 ns/op
Iteration   1: 18.981 ns/op
Iteration   2: 18.986 ns/op
Iteration   3: 18.982 ns/op
Iteration   4: 19.536 ns/op
Iteration   5: 19.493 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.056 ±(99.9%) 0.375 ns/op [Average]
  (min, avg, max) = (18.845, 19.056, 19.536), stdev = 0.248
  CI (99.9%): [18.681, 19.431] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 59.65% complete, ETA 00:23:41
# Fork: 1 of 2
# Warmup Iteration   1: 111.672 ns/op
# Warmup Iteration   2: 111.578 ns/op
# Warmup Iteration   3: 80.177 ns/op
Iteration   1: 79.975 ns/op
Iteration   2: 80.072 ns/op
Iteration   3: 79.990 ns/op
Iteration   4: 80.645 ns/op
Iteration   5: 80.724 ns/op

# Run progress: 59.69% complete, ETA 00:23:40
# Fork: 2 of 2
# Warmup Iteration   1: 112.674 ns/op
# Warmup Iteration   2: 126.111 ns/op
# Warmup Iteration   3: 79.978 ns/op
Iteration   1: 79.998 ns/op
Iteration   2: 79.982 ns/op
Iteration   3: 79.985 ns/op
Iteration   4: 80.635 ns/op
Iteration   5: 80.635 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  80.264 ±(99.9%) 0.518 ns/op [Average]
  (min, avg, max) = (79.975, 80.264, 80.724), stdev = 0.343
  CI (99.9%): [79.746, 80.782] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 59.72% complete, ETA 00:23:38
# Fork: 1 of 2
# Warmup Iteration   1: 935.361 ns/op
# Warmup Iteration   2: 147.441 ns/op
# Warmup Iteration   3: 108.498 ns/op
Iteration   1: 108.589 ns/op
Iteration   2: 108.563 ns/op
Iteration   3: 108.580 ns/op
Iteration   4: 108.355 ns/op
Iteration   5: 108.465 ns/op

# Run progress: 59.76% complete, ETA 00:23:37
# Fork: 2 of 2
# Warmup Iteration   1: 716.183 ns/op
# Warmup Iteration   2: 147.537 ns/op
# Warmup Iteration   3: 108.246 ns/op
Iteration   1: 108.514 ns/op
Iteration   2: 108.398 ns/op
Iteration   3: 108.297 ns/op
Iteration   4: 108.941 ns/op
Iteration   5: 108.645 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.535 ±(99.9%) 0.274 ns/op [Average]
  (min, avg, max) = (108.297, 108.535, 108.941), stdev = 0.181
  CI (99.9%): [108.261, 108.809] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 59.79% complete, ETA 00:23:36
# Fork: 1 of 2
# Warmup Iteration   1: 406.841 ns/op
# Warmup Iteration   2: 152.467 ns/op
# Warmup Iteration   3: 108.566 ns/op
Iteration   1: 108.648 ns/op
Iteration   2: 108.620 ns/op
Iteration   3: 108.605 ns/op
Iteration   4: 109.044 ns/op
Iteration   5: 108.944 ns/op

# Run progress: 59.83% complete, ETA 00:23:35
# Fork: 2 of 2
# Warmup Iteration   1: 577.761 ns/op
# Warmup Iteration   2: 167.332 ns/op
# Warmup Iteration   3: 108.726 ns/op
Iteration   1: 108.765 ns/op
Iteration   2: 108.822 ns/op
Iteration   3: 108.792 ns/op
Iteration   4: 108.930 ns/op
Iteration   5: 108.990 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.816 ±(99.9%) 0.240 ns/op [Average]
  (min, avg, max) = (108.605, 108.816, 109.044), stdev = 0.158
  CI (99.9%): [108.576, 109.055] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 59.86% complete, ETA 00:23:33
# Fork: 1 of 2
# Warmup Iteration   1: 103.537 ns/op
# Warmup Iteration   2: 107.442 ns/op
# Warmup Iteration   3: 73.714 ns/op
Iteration   1: 73.756 ns/op
Iteration   2: 73.762 ns/op
Iteration   3: 73.759 ns/op
Iteration   4: 74.522 ns/op
Iteration   5: 74.530 ns/op

# Run progress: 59.90% complete, ETA 00:23:32
# Fork: 2 of 2
# Warmup Iteration   1: 105.582 ns/op
# Warmup Iteration   2: 107.193 ns/op
# Warmup Iteration   3: 73.727 ns/op
Iteration   1: 73.720 ns/op
Iteration   2: 73.734 ns/op
Iteration   3: 73.780 ns/op
Iteration   4: 74.463 ns/op
Iteration   5: 74.553 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.058 ±(99.9%) 0.599 ns/op [Average]
  (min, avg, max) = (73.720, 74.058, 74.553), stdev = 0.396
  CI (99.9%): [73.459, 74.657] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 59.93% complete, ETA 00:23:31
# Fork: 1 of 2
# Warmup Iteration   1: 196.711 ns/op
# Warmup Iteration   2: 201.884 ns/op
# Warmup Iteration   3: 111.614 ns/op
Iteration   1: 112.938 ns/op
Iteration   2: 112.358 ns/op
Iteration   3: 111.496 ns/op
Iteration   4: 112.266 ns/op
Iteration   5: 112.279 ns/op

# Run progress: 59.97% complete, ETA 00:23:30
# Fork: 2 of 2
# Warmup Iteration   1: 216.549 ns/op
# Warmup Iteration   2: 223.050 ns/op
# Warmup Iteration   3: 130.978 ns/op
Iteration   1: 131.484 ns/op
Iteration   2: 131.026 ns/op
Iteration   3: 131.023 ns/op
Iteration   4: 131.803 ns/op
Iteration   5: 131.678 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.835 ±(99.9%) 15.261 ns/op [Average]
  (min, avg, max) = (111.496, 121.835, 131.803), stdev = 10.094
  CI (99.9%): [106.575, 137.096] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 60.00% complete, ETA 00:23:29
# Fork: 1 of 2
# Warmup Iteration   1: 24.095 ns/op
# Warmup Iteration   2: 28.459 ns/op
# Warmup Iteration   3: 18.945 ns/op
Iteration   1: 18.958 ns/op
Iteration   2: 18.969 ns/op
Iteration   3: 20.160 ns/op
Iteration   4: 19.546 ns/op
Iteration   5: 19.500 ns/op

# Run progress: 60.03% complete, ETA 00:23:27
# Fork: 2 of 2
# Warmup Iteration   1: 25.717 ns/op
# Warmup Iteration   2: 28.096 ns/op
# Warmup Iteration   3: 18.950 ns/op
Iteration   1: 18.951 ns/op
Iteration   2: 18.987 ns/op
Iteration   3: 20.078 ns/op
Iteration   4: 18.836 ns/op
Iteration   5: 18.826 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.281 ±(99.9%) 0.769 ns/op [Average]
  (min, avg, max) = (18.826, 19.281, 20.160), stdev = 0.508
  CI (99.9%): [18.512, 20.050] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 60.07% complete, ETA 00:23:26
# Fork: 1 of 2
# Warmup Iteration   1: 218.917 ns/op
# Warmup Iteration   2: 205.280 ns/op
# Warmup Iteration   3: 137.293 ns/op
Iteration   1: 137.431 ns/op
Iteration   2: 137.354 ns/op
Iteration   3: 154.025 ns/op
Iteration   4: 138.025 ns/op
Iteration   5: 138.284 ns/op

# Run progress: 60.10% complete, ETA 00:23:25
# Fork: 2 of 2
# Warmup Iteration   1: 218.390 ns/op
# Warmup Iteration   2: 204.573 ns/op
# Warmup Iteration   3: 137.356 ns/op
Iteration   1: 137.409 ns/op
Iteration   2: 137.587 ns/op
Iteration   3: 144.709 ns/op
Iteration   4: 138.280 ns/op
Iteration   5: 137.990 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.110 ±(99.9%) 8.106 ns/op [Average]
  (min, avg, max) = (137.354, 140.110, 154.025), stdev = 5.362
  CI (99.9%): [132.003, 148.216] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 60.14% complete, ETA 00:23:24
# Fork: 1 of 2
# Warmup Iteration   1: 380.511 ns/op
# Warmup Iteration   2: 209.554 ns/op
# Warmup Iteration   3: 156.402 ns/op
Iteration   1: 156.395 ns/op
Iteration   2: 156.454 ns/op
Iteration   3: 165.697 ns/op
Iteration   4: 157.177 ns/op
Iteration   5: 157.134 ns/op

# Run progress: 60.17% complete, ETA 00:23:23
# Fork: 2 of 2
# Warmup Iteration   1: 384.291 ns/op
# Warmup Iteration   2: 216.061 ns/op
# Warmup Iteration   3: 163.428 ns/op
Iteration   1: 163.507 ns/op
Iteration   2: 163.541 ns/op
Iteration   3: 173.300 ns/op
Iteration   4: 163.700 ns/op
Iteration   5: 163.789 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.069 ±(99.9%) 8.144 ns/op [Average]
  (min, avg, max) = (156.395, 162.069, 173.300), stdev = 5.387
  CI (99.9%): [153.926, 170.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 60.21% complete, ETA 00:23:21
# Fork: 1 of 2
# Warmup Iteration   1: 486.721 ns/op
# Warmup Iteration   2: 281.065 ns/op
# Warmup Iteration   3: 204.549 ns/op
Iteration   1: 204.802 ns/op
Iteration   2: 204.673 ns/op
Iteration   3: 216.346 ns/op
Iteration   4: 205.198 ns/op
Iteration   5: 205.222 ns/op

# Run progress: 60.24% complete, ETA 00:23:20
# Fork: 2 of 2
# Warmup Iteration   1: 508.130 ns/op
# Warmup Iteration   2: 349.729 ns/op
# Warmup Iteration   3: 209.609 ns/op
Iteration   1: 209.632 ns/op
Iteration   2: 209.790 ns/op
Iteration   3: 246.297 ns/op
Iteration   4: 210.120 ns/op
Iteration   5: 210.072 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  212.215 ±(99.9%) 18.925 ns/op [Average]
  (min, avg, max) = (204.673, 212.215, 246.297), stdev = 12.518
  CI (99.9%): [193.290, 231.140] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 60.28% complete, ETA 00:23:19
# Fork: 1 of 2
# Warmup Iteration   1: 105.384 ns/op
# Warmup Iteration   2: 107.584 ns/op
# Warmup Iteration   3: 73.738 ns/op
Iteration   1: 73.724 ns/op
Iteration   2: 73.685 ns/op
Iteration   3: 78.224 ns/op
Iteration   4: 74.488 ns/op
Iteration   5: 74.403 ns/op

# Run progress: 60.31% complete, ETA 00:23:18
# Fork: 2 of 2
# Warmup Iteration   1: 115.744 ns/op
# Warmup Iteration   2: 117.983 ns/op
# Warmup Iteration   3: 73.702 ns/op
Iteration   1: 73.707 ns/op
Iteration   2: 73.776 ns/op
Iteration   3: 78.209 ns/op
Iteration   4: 74.454 ns/op
Iteration   5: 74.508 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.918 ±(99.9%) 2.681 ns/op [Average]
  (min, avg, max) = (73.685, 74.918, 78.224), stdev = 1.774
  CI (99.9%): [72.236, 77.599] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 60.35% complete, ETA 00:23:16
# Fork: 1 of 2
# Warmup Iteration   1: 209.005 ns/op
# Warmup Iteration   2: 201.231 ns/op
# Warmup Iteration   3: 111.450 ns/op
Iteration   1: 111.544 ns/op
Iteration   2: 111.348 ns/op
Iteration   3: 126.156 ns/op
Iteration   4: 112.336 ns/op
Iteration   5: 112.170 ns/op

# Run progress: 60.38% complete, ETA 00:23:15
# Fork: 2 of 2
# Warmup Iteration   1: 218.780 ns/op
# Warmup Iteration   2: 201.569 ns/op
# Warmup Iteration   3: 131.802 ns/op
Iteration   1: 131.758 ns/op
Iteration   2: 131.604 ns/op
Iteration   3: 142.748 ns/op
Iteration   4: 131.745 ns/op
Iteration   5: 131.935 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  124.335 ±(99.9%) 17.364 ns/op [Average]
  (min, avg, max) = (111.348, 124.335, 142.748), stdev = 11.485
  CI (99.9%): [106.971, 141.699] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 60.42% complete, ETA 00:23:14
# Fork: 1 of 2
# Warmup Iteration   1: 25.080 ns/op
# Warmup Iteration   2: 31.245 ns/op
# Warmup Iteration   3: 19.062 ns/op
Iteration   1: 19.002 ns/op
Iteration   2: 18.987 ns/op
Iteration   3: 18.958 ns/op
Iteration   4: 18.823 ns/op
Iteration   5: 18.842 ns/op

# Run progress: 60.45% complete, ETA 00:23:13
# Fork: 2 of 2
# Warmup Iteration   1: 23.872 ns/op
# Warmup Iteration   2: 27.957 ns/op
# Warmup Iteration   3: 19.079 ns/op
Iteration   1: 18.998 ns/op
Iteration   2: 18.970 ns/op
Iteration   3: 18.987 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.868 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.926 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (18.823, 18.926, 19.002), stdev = 0.076
  CI (99.9%): [18.811, 19.041] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 60.49% complete, ETA 00:23:12
# Fork: 1 of 2
# Warmup Iteration   1: 2571.934 ns/op
# Warmup Iteration   2: 1089.547 ns/op
# Warmup Iteration   3: 767.186 ns/op
Iteration   1: 767.477 ns/op
Iteration   2: 769.797 ns/op
Iteration   3: 767.654 ns/op
Iteration   4: 769.597 ns/op
Iteration   5: 768.254 ns/op

# Run progress: 60.52% complete, ETA 00:23:10
# Fork: 2 of 2
# Warmup Iteration   1: 2080.633 ns/op
# Warmup Iteration   2: 1082.554 ns/op
# Warmup Iteration   3: 762.482 ns/op
Iteration   1: 762.789 ns/op
Iteration   2: 762.732 ns/op
Iteration   3: 763.007 ns/op
Iteration   4: 763.830 ns/op
Iteration   5: 763.728 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  765.887 ±(99.9%) 4.423 ns/op [Average]
  (min, avg, max) = (762.732, 765.887, 769.797), stdev = 2.926
  CI (99.9%): [761.463, 770.310] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 60.56% complete, ETA 00:23:09
# Fork: 1 of 2
# Warmup Iteration   1: 14381.204 ns/op
# Warmup Iteration   2: 895.561 ns/op
# Warmup Iteration   3: 763.564 ns/op
Iteration   1: 689.779 ns/op
Iteration   2: 690.031 ns/op
Iteration   3: 689.953 ns/op
Iteration   4: 690.244 ns/op
Iteration   5: 690.365 ns/op

# Run progress: 60.59% complete, ETA 00:23:08
# Fork: 2 of 2
# Warmup Iteration   1: 11245.760 ns/op
# Warmup Iteration   2: 1054.222 ns/op
# Warmup Iteration   3: 714.264 ns/op
Iteration   1: 715.696 ns/op
Iteration   2: 715.221 ns/op
Iteration   3: 714.256 ns/op
Iteration   4: 713.295 ns/op
Iteration   5: 714.107 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  702.295 ±(99.9%) 19.500 ns/op [Average]
  (min, avg, max) = (689.779, 702.295, 715.696), stdev = 12.898
  CI (99.9%): [682.795, 721.795] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 60.62% complete, ETA 00:23:07
# Fork: 1 of 2
# Warmup Iteration   1: 10886.190 ns/op
# Warmup Iteration   2: 1154.858 ns/op
# Warmup Iteration   3: 719.463 ns/op
Iteration   1: 719.549 ns/op
Iteration   2: 719.464 ns/op
Iteration   3: 720.979 ns/op
Iteration   4: 719.975 ns/op
Iteration   5: 719.925 ns/op

# Run progress: 60.66% complete, ETA 00:23:05
# Fork: 2 of 2
# Warmup Iteration   1: 10678.503 ns/op
# Warmup Iteration   2: 925.066 ns/op
# Warmup Iteration   3: 797.244 ns/op
Iteration   1: 729.147 ns/op
Iteration   2: 726.221 ns/op
Iteration   3: 726.886 ns/op
Iteration   4: 726.164 ns/op
Iteration   5: 726.417 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  723.473 ±(99.9%) 5.742 ns/op [Average]
  (min, avg, max) = (719.464, 723.473, 729.147), stdev = 3.798
  CI (99.9%): [717.731, 729.215] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 60.69% complete, ETA 00:23:04
# Fork: 1 of 2
# Warmup Iteration   1: 928.043 ns/op
# Warmup Iteration   2: 733.453 ns/op
# Warmup Iteration   3: 548.261 ns/op
Iteration   1: 537.567 ns/op
Iteration   2: 535.607 ns/op
Iteration   3: 549.346 ns/op
Iteration   4: 536.116 ns/op
Iteration   5: 552.815 ns/op

# Run progress: 60.73% complete, ETA 00:23:03
# Fork: 2 of 2
# Warmup Iteration   1: 969.638 ns/op
# Warmup Iteration   2: 740.880 ns/op
# Warmup Iteration   3: 533.810 ns/op
Iteration   1: 533.885 ns/op
Iteration   2: 534.137 ns/op
Iteration   3: 533.952 ns/op
Iteration   4: 534.409 ns/op
Iteration   5: 534.563 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  538.240 ±(99.9%) 10.451 ns/op [Average]
  (min, avg, max) = (533.885, 538.240, 552.815), stdev = 6.913
  CI (99.9%): [527.789, 548.691] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 60.76% complete, ETA 00:23:02
# Fork: 1 of 2
# Warmup Iteration   1: 13029.613 ns/op
# Warmup Iteration   2: 5148.303 ns/op
# Warmup Iteration   3: 4165.274 ns/op
Iteration   1: 3814.755 ns/op
Iteration   2: 3813.153 ns/op
Iteration   3: 3810.636 ns/op
Iteration   4: 3838.659 ns/op
Iteration   5: 3836.631 ns/op

# Run progress: 60.80% complete, ETA 00:23:01
# Fork: 2 of 2
# Warmup Iteration   1: 11024.828 ns/op
# Warmup Iteration   2: 4930.282 ns/op
# Warmup Iteration   3: 3925.276 ns/op
Iteration   1: 3572.499 ns/op
Iteration   2: 3573.018 ns/op
Iteration   3: 3567.085 ns/op
Iteration   4: 3556.888 ns/op
Iteration   5: 3552.875 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3693.620 ±(99.9%) 206.482 ns/op [Average]
  (min, avg, max) = (3552.875, 3693.620, 3838.659), stdev = 136.575
  CI (99.9%): [3487.138, 3900.102] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 60.83% complete, ETA 00:22:59
# Fork: 1 of 2
# Warmup Iteration   1: 25.407 ns/op
# Warmup Iteration   2: 29.504 ns/op
# Warmup Iteration   3: 19.031 ns/op
Iteration   1: 19.013 ns/op
Iteration   2: 18.926 ns/op
Iteration   3: 18.946 ns/op
Iteration   4: 18.839 ns/op
Iteration   5: 18.835 ns/op

# Run progress: 60.87% complete, ETA 00:22:58
# Fork: 2 of 2
# Warmup Iteration   1: 24.269 ns/op
# Warmup Iteration   2: 31.078 ns/op
# Warmup Iteration   3: 19.558 ns/op
Iteration   1: 19.377 ns/op
Iteration   2: 19.447 ns/op
Iteration   3: 19.458 ns/op
Iteration   4: 19.605 ns/op
Iteration   5: 19.537 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.198 ±(99.9%) 0.471 ns/op [Average]
  (min, avg, max) = (18.835, 19.198, 19.605), stdev = 0.312
  CI (99.9%): [18.727, 19.670] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 60.90% complete, ETA 00:22:57
# Fork: 1 of 2
# Warmup Iteration   1: 779.051 ns/op
# Warmup Iteration   2: 474.548 ns/op
# Warmup Iteration   3: 332.214 ns/op
Iteration   1: 332.355 ns/op
Iteration   2: 332.362 ns/op
Iteration   3: 332.250 ns/op
Iteration   4: 340.866 ns/op
Iteration   5: 331.819 ns/op

# Run progress: 60.94% complete, ETA 00:22:56
# Fork: 2 of 2
# Warmup Iteration   1: 825.649 ns/op
# Warmup Iteration   2: 494.330 ns/op
# Warmup Iteration   3: 351.214 ns/op
Iteration   1: 351.429 ns/op
Iteration   2: 351.366 ns/op
Iteration   3: 351.414 ns/op
Iteration   4: 351.103 ns/op
Iteration   5: 351.512 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  342.648 ±(99.9%) 14.434 ns/op [Average]
  (min, avg, max) = (331.819, 342.648, 351.512), stdev = 9.547
  CI (99.9%): [328.214, 357.081] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 60.97% complete, ETA 00:22:54
# Fork: 1 of 2
# Warmup Iteration   1: 4965.878 ns/op
# Warmup Iteration   2: 567.099 ns/op
# Warmup Iteration   3: 432.823 ns/op
Iteration   1: 433.059 ns/op
Iteration   2: 432.932 ns/op
Iteration   3: 433.429 ns/op
Iteration   4: 433.480 ns/op
Iteration   5: 433.332 ns/op

# Run progress: 61.01% complete, ETA 00:22:53
# Fork: 2 of 2
# Warmup Iteration   1: 2915.948 ns/op
# Warmup Iteration   2: 564.672 ns/op
# Warmup Iteration   3: 426.668 ns/op
Iteration   1: 426.956 ns/op
Iteration   2: 426.870 ns/op
Iteration   3: 426.786 ns/op
Iteration   4: 427.253 ns/op
Iteration   5: 427.258 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  430.136 ±(99.9%) 4.968 ns/op [Average]
  (min, avg, max) = (426.786, 430.136, 433.480), stdev = 3.286
  CI (99.9%): [425.167, 435.104] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 61.04% complete, ETA 00:22:52
# Fork: 1 of 2
# Warmup Iteration   1: 2672.667 ns/op
# Warmup Iteration   2: 625.459 ns/op
# Warmup Iteration   3: 410.542 ns/op
Iteration   1: 410.162 ns/op
Iteration   2: 410.346 ns/op
Iteration   3: 410.325 ns/op
Iteration   4: 410.812 ns/op
Iteration   5: 410.709 ns/op

# Run progress: 61.08% complete, ETA 00:22:51
# Fork: 2 of 2
# Warmup Iteration   1: 4255.397 ns/op
# Warmup Iteration   2: 567.819 ns/op
# Warmup Iteration   3: 436.013 ns/op
Iteration   1: 435.997 ns/op
Iteration   2: 436.212 ns/op
Iteration   3: 435.964 ns/op
Iteration   4: 436.730 ns/op
Iteration   5: 436.820 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  423.408 ±(99.9%) 20.622 ns/op [Average]
  (min, avg, max) = (410.162, 423.408, 436.820), stdev = 13.640
  CI (99.9%): [402.785, 444.030] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 61.11% complete, ETA 00:22:50
# Fork: 1 of 2
# Warmup Iteration   1: 1625.472 ns/op
# Warmup Iteration   2: 1139.721 ns/op
# Warmup Iteration   3: 869.088 ns/op
Iteration   1: 869.259 ns/op
Iteration   2: 886.407 ns/op
Iteration   3: 889.349 ns/op
Iteration   4: 870.073 ns/op
Iteration   5: 869.830 ns/op

# Run progress: 61.15% complete, ETA 00:22:48
# Fork: 2 of 2
# Warmup Iteration   1: 1639.676 ns/op
# Warmup Iteration   2: 1191.254 ns/op
# Warmup Iteration   3: 865.745 ns/op
Iteration   1: 866.528 ns/op
Iteration   2: 866.834 ns/op
Iteration   3: 866.543 ns/op
Iteration   4: 869.556 ns/op
Iteration   5: 870.193 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  872.457 ±(99.9%) 12.529 ns/op [Average]
  (min, avg, max) = (866.528, 872.457, 889.349), stdev = 8.287
  CI (99.9%): [859.929, 884.986] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 61.18% complete, ETA 00:22:47
# Fork: 1 of 2
# Warmup Iteration   1: 9384.706 ns/op
# Warmup Iteration   2: 4974.197 ns/op
# Warmup Iteration   3: 3736.561 ns/op
Iteration   1: 3735.826 ns/op
Iteration   2: 3738.810 ns/op
Iteration   3: 3733.783 ns/op
Iteration   4: 3719.456 ns/op
Iteration   5: 3724.453 ns/op

# Run progress: 61.22% complete, ETA 00:22:46
# Fork: 2 of 2
# Warmup Iteration   1: 16417.047 ns/op
# Warmup Iteration   2: 5038.846 ns/op
# Warmup Iteration   3: 4061.183 ns/op
Iteration   1: 3737.321 ns/op
Iteration   2: 3735.809 ns/op
Iteration   3: 3737.121 ns/op
Iteration   4: 3721.212 ns/op
Iteration   5: 3732.401 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3731.619 ±(99.9%) 10.840 ns/op [Average]
  (min, avg, max) = (3719.456, 3731.619, 3738.810), stdev = 7.170
  CI (99.9%): [3720.780, 3742.459] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 61.25% complete, ETA 00:22:45
# Fork: 1 of 2
# Warmup Iteration   1: 24.018 ns/op
# Warmup Iteration   2: 30.579 ns/op
# Warmup Iteration   3: 19.039 ns/op
Iteration   1: 18.999 ns/op
Iteration   2: 18.974 ns/op
Iteration   3: 18.942 ns/op
Iteration   4: 18.838 ns/op
Iteration   5: 18.854 ns/op

# Run progress: 61.28% complete, ETA 00:22:43
# Fork: 2 of 2
# Warmup Iteration   1: 23.195 ns/op
# Warmup Iteration   2: 28.879 ns/op
# Warmup Iteration   3: 19.072 ns/op
Iteration   1: 18.988 ns/op
Iteration   2: 18.970 ns/op
Iteration   3: 18.966 ns/op
Iteration   4: 18.820 ns/op
Iteration   5: 18.847 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.920 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (18.820, 18.920, 18.999), stdev = 0.071
  CI (99.9%): [18.812, 19.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 61.32% complete, ETA 00:22:42
# Fork: 1 of 2
# Warmup Iteration   1: 1019.191 ns/op
# Warmup Iteration   2: 442.519 ns/op
# Warmup Iteration   3: 325.715 ns/op
Iteration   1: 326.089 ns/op
Iteration   2: 325.989 ns/op
Iteration   3: 325.921 ns/op
Iteration   4: 325.749 ns/op
Iteration   5: 325.852 ns/op

# Run progress: 61.35% complete, ETA 00:22:41
# Fork: 2 of 2
# Warmup Iteration   1: 823.066 ns/op
# Warmup Iteration   2: 496.030 ns/op
# Warmup Iteration   3: 351.417 ns/op
Iteration   1: 351.464 ns/op
Iteration   2: 351.349 ns/op
Iteration   3: 351.664 ns/op
Iteration   4: 351.252 ns/op
Iteration   5: 351.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.668 ±(99.9%) 20.317 ns/op [Average]
  (min, avg, max) = (325.749, 338.668, 351.664), stdev = 13.438
  CI (99.9%): [318.351, 358.985] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 61.39% complete, ETA 00:22:40
# Fork: 1 of 2
# Warmup Iteration   1: 4430.746 ns/op
# Warmup Iteration   2: 568.614 ns/op
# Warmup Iteration   3: 425.562 ns/op
Iteration   1: 425.853 ns/op
Iteration   2: 426.007 ns/op
Iteration   3: 426.168 ns/op
Iteration   4: 427.407 ns/op
Iteration   5: 426.691 ns/op

# Run progress: 61.42% complete, ETA 00:22:39
# Fork: 2 of 2
# Warmup Iteration   1: 4784.884 ns/op
# Warmup Iteration   2: 595.696 ns/op
# Warmup Iteration   3: 425.435 ns/op
Iteration   1: 425.187 ns/op
Iteration   2: 425.637 ns/op
Iteration   3: 425.288 ns/op
Iteration   4: 427.756 ns/op
Iteration   5: 427.485 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.348 ±(99.9%) 1.415 ns/op [Average]
  (min, avg, max) = (425.187, 426.348, 427.756), stdev = 0.936
  CI (99.9%): [424.933, 427.763] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 61.46% complete, ETA 00:22:37
# Fork: 1 of 2
# Warmup Iteration   1: 11003.332 ns/op
# Warmup Iteration   2: 613.303 ns/op
# Warmup Iteration   3: 423.799 ns/op
Iteration   1: 423.951 ns/op
Iteration   2: 424.066 ns/op
Iteration   3: 423.934 ns/op
Iteration   4: 424.615 ns/op
Iteration   5: 424.348 ns/op

# Run progress: 61.49% complete, ETA 00:22:36
# Fork: 2 of 2
# Warmup Iteration   1: 7096.703 ns/op
# Warmup Iteration   2: 615.751 ns/op
# Warmup Iteration   3: 431.980 ns/op
Iteration   1: 432.031 ns/op
Iteration   2: 431.879 ns/op
Iteration   3: 431.967 ns/op
Iteration   4: 432.339 ns/op
Iteration   5: 432.385 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  428.151 ±(99.9%) 6.336 ns/op [Average]
  (min, avg, max) = (423.934, 428.151, 432.385), stdev = 4.191
  CI (99.9%): [421.816, 434.487] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 61.53% complete, ETA 00:22:35
# Fork: 1 of 2
# Warmup Iteration   1: 1389.731 ns/op
# Warmup Iteration   2: 1279.613 ns/op
# Warmup Iteration   3: 866.103 ns/op
Iteration   1: 866.186 ns/op
Iteration   2: 865.565 ns/op
Iteration   3: 866.918 ns/op
Iteration   4: 866.550 ns/op
Iteration   5: 867.866 ns/op

# Run progress: 61.56% complete, ETA 00:22:34
# Fork: 2 of 2
# Warmup Iteration   1: 1927.790 ns/op
# Warmup Iteration   2: 1374.147 ns/op
# Warmup Iteration   3: 869.921 ns/op
Iteration   1: 870.367 ns/op
Iteration   2: 870.476 ns/op
Iteration   3: 866.738 ns/op
Iteration   4: 868.420 ns/op
Iteration   5: 868.172 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  867.726 ±(99.9%) 2.534 ns/op [Average]
  (min, avg, max) = (865.565, 867.726, 870.476), stdev = 1.676
  CI (99.9%): [865.192, 870.260] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 61.60% complete, ETA 00:22:32
# Fork: 1 of 2
# Warmup Iteration   1: 10791.398 ns/op
# Warmup Iteration   2: 5395.825 ns/op
# Warmup Iteration   3: 3752.811 ns/op
Iteration   1: 3753.047 ns/op
Iteration   2: 3755.992 ns/op
Iteration   3: 3756.319 ns/op
Iteration   4: 3791.543 ns/op
Iteration   5: 3788.621 ns/op

# Run progress: 61.63% complete, ETA 00:22:31
# Fork: 2 of 2
# Warmup Iteration   1: 10764.741 ns/op
# Warmup Iteration   2: 5227.656 ns/op
# Warmup Iteration   3: 3737.305 ns/op
Iteration   1: 3734.291 ns/op
Iteration   2: 3737.282 ns/op
Iteration   3: 3733.517 ns/op
Iteration   4: 3739.949 ns/op
Iteration   5: 3741.969 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3753.253 ±(99.9%) 32.041 ns/op [Average]
  (min, avg, max) = (3733.517, 3753.253, 3791.543), stdev = 21.193
  CI (99.9%): [3721.212, 3785.294] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 61.67% complete, ETA 00:22:30
# Fork: 1 of 2
# Warmup Iteration   1: 24.124 ns/op
# Warmup Iteration   2: 28.820 ns/op
# Warmup Iteration   3: 19.057 ns/op
Iteration   1: 18.988 ns/op
Iteration   2: 18.976 ns/op
Iteration   3: 18.947 ns/op
Iteration   4: 18.813 ns/op
Iteration   5: 18.840 ns/op

# Run progress: 61.70% complete, ETA 00:22:29
# Fork: 2 of 2
# Warmup Iteration   1: 24.805 ns/op
# Warmup Iteration   2: 30.748 ns/op
# Warmup Iteration   3: 19.046 ns/op
Iteration   1: 19.024 ns/op
Iteration   2: 18.972 ns/op
Iteration   3: 18.969 ns/op
Iteration   4: 18.843 ns/op
Iteration   5: 18.859 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (18.813, 18.923, 19.024), stdev = 0.076
  CI (99.9%): [18.808, 19.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 61.74% complete, ETA 00:22:27
# Fork: 1 of 2
# Warmup Iteration   1: 1134.303 ns/op
# Warmup Iteration   2: 491.950 ns/op
# Warmup Iteration   3: 343.050 ns/op
Iteration   1: 343.145 ns/op
Iteration   2: 343.217 ns/op
Iteration   3: 343.159 ns/op
Iteration   4: 343.449 ns/op
Iteration   5: 343.520 ns/op

# Run progress: 61.77% complete, ETA 00:22:26
# Fork: 2 of 2
# Warmup Iteration   1: 1110.064 ns/op
# Warmup Iteration   2: 497.581 ns/op
# Warmup Iteration   3: 344.990 ns/op
Iteration   1: 345.181 ns/op
Iteration   2: 345.476 ns/op
Iteration   3: 345.359 ns/op
Iteration   4: 346.009 ns/op
Iteration   5: 345.593 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  344.411 ±(99.9%) 1.810 ns/op [Average]
  (min, avg, max) = (343.145, 344.411, 346.009), stdev = 1.197
  CI (99.9%): [342.601, 346.220] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 61.81% complete, ETA 00:22:25
# Fork: 1 of 2
# Warmup Iteration   1: 3208.504 ns/op
# Warmup Iteration   2: 609.304 ns/op
# Warmup Iteration   3: 460.660 ns/op
Iteration   1: 460.550 ns/op
Iteration   2: 460.400 ns/op
Iteration   3: 460.384 ns/op
Iteration   4: 460.865 ns/op
Iteration   5: 460.687 ns/op

# Run progress: 61.84% complete, ETA 00:22:24
# Fork: 2 of 2
# Warmup Iteration   1: 4013.583 ns/op
# Warmup Iteration   2: 615.707 ns/op
# Warmup Iteration   3: 459.881 ns/op
Iteration   1: 459.787 ns/op
Iteration   2: 459.977 ns/op
Iteration   3: 459.882 ns/op
Iteration   4: 460.200 ns/op
Iteration   5: 460.396 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  460.313 ±(99.9%) 0.531 ns/op [Average]
  (min, avg, max) = (459.787, 460.313, 460.865), stdev = 0.351
  CI (99.9%): [459.782, 460.844] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 61.88% complete, ETA 00:22:23
# Fork: 1 of 2
# Warmup Iteration   1: 4686.467 ns/op
# Warmup Iteration   2: 548.056 ns/op
# Warmup Iteration   3: 459.798 ns/op
Iteration   1: 459.958 ns/op
Iteration   2: 459.541 ns/op
Iteration   3: 459.187 ns/op
Iteration   4: 458.682 ns/op
Iteration   5: 457.840 ns/op

# Run progress: 61.91% complete, ETA 00:22:21
# Fork: 2 of 2
# Warmup Iteration   1: 4230.571 ns/op
# Warmup Iteration   2: 693.885 ns/op
# Warmup Iteration   3: 447.378 ns/op
Iteration   1: 447.746 ns/op
Iteration   2: 446.793 ns/op
Iteration   3: 448.439 ns/op
Iteration   4: 448.031 ns/op
Iteration   5: 447.547 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  453.377 ±(99.9%) 9.087 ns/op [Average]
  (min, avg, max) = (446.793, 453.377, 459.958), stdev = 6.010
  CI (99.9%): [444.290, 462.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 61.94% complete, ETA 00:22:20
# Fork: 1 of 2
# Warmup Iteration   1: 1365.722 ns/op
# Warmup Iteration   2: 1258.121 ns/op
# Warmup Iteration   3: 867.942 ns/op
Iteration   1: 867.621 ns/op
Iteration   2: 877.096 ns/op
Iteration   3: 877.175 ns/op
Iteration   4: 877.602 ns/op
Iteration   5: 883.836 ns/op

# Run progress: 61.98% complete, ETA 00:22:19
# Fork: 2 of 2
# Warmup Iteration   1: 1632.603 ns/op
# Warmup Iteration   2: 1186.176 ns/op
# Warmup Iteration   3: 872.299 ns/op
Iteration   1: 872.809 ns/op
Iteration   2: 869.980 ns/op
Iteration   3: 874.317 ns/op
Iteration   4: 872.482 ns/op
Iteration   5: 869.949 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  874.287 ±(99.9%) 7.227 ns/op [Average]
  (min, avg, max) = (867.621, 874.287, 883.836), stdev = 4.780
  CI (99.9%): [867.060, 881.514] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 62.01% complete, ETA 00:22:18
# Fork: 1 of 2
# Warmup Iteration   1: 11251.927 ns/op
# Warmup Iteration   2: 4855.321 ns/op
# Warmup Iteration   3: 3438.065 ns/op
Iteration   1: 3431.260 ns/op
Iteration   2: 3444.986 ns/op
Iteration   3: 3437.985 ns/op
Iteration   4: 3425.987 ns/op
Iteration   5: 3424.742 ns/op

# Run progress: 62.05% complete, ETA 00:22:16
# Fork: 2 of 2
# Warmup Iteration   1: 10706.058 ns/op
# Warmup Iteration   2: 4886.887 ns/op
# Warmup Iteration   3: 4043.078 ns/op
Iteration   1: 3718.910 ns/op
Iteration   2: 3717.594 ns/op
Iteration   3: 3719.539 ns/op
Iteration   4: 3693.969 ns/op
Iteration   5: 3698.656 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3571.363 ±(99.9%) 221.032 ns/op [Average]
  (min, avg, max) = (3424.742, 3571.363, 3719.539), stdev = 146.199
  CI (99.9%): [3350.331, 3792.395] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 62.08% complete, ETA 00:22:15
# Fork: 1 of 2
# Warmup Iteration   1: 26.060 ns/op
# Warmup Iteration   2: 30.329 ns/op
# Warmup Iteration   3: 19.019 ns/op
Iteration   1: 18.980 ns/op
Iteration   2: 18.946 ns/op
Iteration   3: 18.966 ns/op
Iteration   4: 18.824 ns/op
Iteration   5: 18.832 ns/op

# Run progress: 62.12% complete, ETA 00:22:14
# Fork: 2 of 2
# Warmup Iteration   1: 24.798 ns/op
# Warmup Iteration   2: 28.935 ns/op
# Warmup Iteration   3: 19.025 ns/op
Iteration   1: 18.986 ns/op
Iteration   2: 18.968 ns/op
Iteration   3: 18.945 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.911 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (18.824, 18.911, 18.986), stdev = 0.070
  CI (99.9%): [18.805, 19.018] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 62.15% complete, ETA 00:22:13
# Fork: 1 of 2
# Warmup Iteration   1: 483.953 ns/op
# Warmup Iteration   2: 304.614 ns/op
# Warmup Iteration   3: 232.646 ns/op
Iteration   1: 232.950 ns/op
Iteration   2: 232.705 ns/op
Iteration   3: 232.820 ns/op
Iteration   4: 233.349 ns/op
Iteration   5: 233.256 ns/op

# Run progress: 62.19% complete, ETA 00:22:12
# Fork: 2 of 2
# Warmup Iteration   1: 485.357 ns/op
# Warmup Iteration   2: 323.538 ns/op
# Warmup Iteration   3: 232.676 ns/op
Iteration   1: 232.753 ns/op
Iteration   2: 232.741 ns/op
Iteration   3: 232.804 ns/op
Iteration   4: 233.150 ns/op
Iteration   5: 233.211 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  232.974 ±(99.9%) 0.369 ns/op [Average]
  (min, avg, max) = (232.705, 232.974, 233.349), stdev = 0.244
  CI (99.9%): [232.605, 233.343] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 62.22% complete, ETA 00:22:10
# Fork: 1 of 2
# Warmup Iteration   1: 5172.452 ns/op
# Warmup Iteration   2: 485.158 ns/op
# Warmup Iteration   3: 403.817 ns/op
Iteration   1: 404.184 ns/op
Iteration   2: 404.101 ns/op
Iteration   3: 403.992 ns/op
Iteration   4: 406.553 ns/op
Iteration   5: 406.599 ns/op

# Run progress: 62.26% complete, ETA 00:22:09
# Fork: 2 of 2
# Warmup Iteration   1: 15890.098 ns/op
# Warmup Iteration   2: 622.979 ns/op
# Warmup Iteration   3: 448.225 ns/op
Iteration   1: 411.921 ns/op
Iteration   2: 411.295 ns/op
Iteration   3: 410.599 ns/op
Iteration   4: 412.935 ns/op
Iteration   5: 411.716 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.389 ±(99.9%) 5.509 ns/op [Average]
  (min, avg, max) = (403.992, 408.389, 412.935), stdev = 3.644
  CI (99.9%): [402.880, 413.899] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 62.29% complete, ETA 00:22:08
# Fork: 1 of 2
# Warmup Iteration   1: 22857.472 ns/op
# Warmup Iteration   2: 611.512 ns/op
# Warmup Iteration   3: 390.061 ns/op
Iteration   1: 358.225 ns/op
Iteration   2: 357.542 ns/op
Iteration   3: 355.901 ns/op
Iteration   4: 358.174 ns/op
Iteration   5: 358.233 ns/op

# Run progress: 62.33% complete, ETA 00:22:07
# Fork: 2 of 2
# Warmup Iteration   1: 22930.443 ns/op
# Warmup Iteration   2: 640.133 ns/op
# Warmup Iteration   3: 402.521 ns/op
Iteration   1: 366.366 ns/op
Iteration   2: 365.823 ns/op
Iteration   3: 366.806 ns/op
Iteration   4: 366.267 ns/op
Iteration   5: 366.032 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  361.937 ±(99.9%) 6.971 ns/op [Average]
  (min, avg, max) = (355.901, 361.937, 366.806), stdev = 4.611
  CI (99.9%): [354.966, 368.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 62.36% complete, ETA 00:22:05
# Fork: 1 of 2
# Warmup Iteration   1: 193.794 ns/op
# Warmup Iteration   2: 190.079 ns/op
# Warmup Iteration   3: 135.925 ns/op
Iteration   1: 135.956 ns/op
Iteration   2: 136.009 ns/op
Iteration   3: 136.035 ns/op
Iteration   4: 136.563 ns/op
Iteration   5: 136.535 ns/op

# Run progress: 62.40% complete, ETA 00:22:04
# Fork: 2 of 2
# Warmup Iteration   1: 197.985 ns/op
# Warmup Iteration   2: 194.470 ns/op
# Warmup Iteration   3: 138.504 ns/op
Iteration   1: 138.582 ns/op
Iteration   2: 138.550 ns/op
Iteration   3: 138.579 ns/op
Iteration   4: 139.140 ns/op
Iteration   5: 139.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.508 ±(99.9%) 2.099 ns/op [Average]
  (min, avg, max) = (135.956, 137.508, 139.140), stdev = 1.389
  CI (99.9%): [135.409, 139.607] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 62.43% complete, ETA 00:22:03
# Fork: 1 of 2
# Warmup Iteration   1: 12012.337 ns/op
# Warmup Iteration   2: 5659.334 ns/op
# Warmup Iteration   3: 4409.648 ns/op
Iteration   1: 4062.783 ns/op
Iteration   2: 4055.938 ns/op
Iteration   3: 4060.126 ns/op
Iteration   4: 4063.447 ns/op
Iteration   5: 4064.899 ns/op

# Run progress: 62.47% complete, ETA 00:22:02
# Fork: 2 of 2
# Warmup Iteration   1: 13890.635 ns/op
# Warmup Iteration   2: 5307.950 ns/op
# Warmup Iteration   3: 4531.671 ns/op
Iteration   1: 4132.939 ns/op
Iteration   2: 4131.444 ns/op
Iteration   3: 4124.920 ns/op
Iteration   4: 4113.142 ns/op
Iteration   5: 4120.000 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4092.964 ±(99.9%) 51.039 ns/op [Average]
  (min, avg, max) = (4055.938, 4092.964, 4132.939), stdev = 33.759
  CI (99.9%): [4041.925, 4144.002] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 62.50% complete, ETA 00:22:01
# Fork: 1 of 2
# Warmup Iteration   1: 23.933 ns/op
# Warmup Iteration   2: 29.889 ns/op
# Warmup Iteration   3: 19.042 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.971 ns/op
Iteration   3: 18.940 ns/op
Iteration   4: 18.818 ns/op
Iteration   5: 18.848 ns/op

# Run progress: 62.53% complete, ETA 00:21:59
# Fork: 2 of 2
# Warmup Iteration   1: 24.357 ns/op
# Warmup Iteration   2: 29.028 ns/op
# Warmup Iteration   3: 19.033 ns/op
Iteration   1: 19.008 ns/op
Iteration   2: 18.965 ns/op
Iteration   3: 18.960 ns/op
Iteration   4: 19.577 ns/op
Iteration   5: 19.536 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.062 ±(99.9%) 0.405 ns/op [Average]
  (min, avg, max) = (18.818, 19.062, 19.577), stdev = 0.268
  CI (99.9%): [18.657, 19.467] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 62.57% complete, ETA 00:21:58
# Fork: 1 of 2
# Warmup Iteration   1: 7753.032 ns/op
# Warmup Iteration   2: 969.777 ns/op
# Warmup Iteration   3: 724.473 ns/op
Iteration   1: 724.144 ns/op
Iteration   2: 723.938 ns/op
Iteration   3: 723.937 ns/op
Iteration   4: 723.107 ns/op
Iteration   5: 725.134 ns/op

# Run progress: 62.60% complete, ETA 00:21:57
# Fork: 2 of 2
# Warmup Iteration   1: 11260.102 ns/op
# Warmup Iteration   2: 1016.301 ns/op
# Warmup Iteration   3: 805.498 ns/op
Iteration   1: 739.551 ns/op
Iteration   2: 738.283 ns/op
Iteration   3: 739.053 ns/op
Iteration   4: 744.448 ns/op
Iteration   5: 737.957 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  731.955 ±(99.9%) 12.894 ns/op [Average]
  (min, avg, max) = (723.107, 731.955, 744.448), stdev = 8.528
  CI (99.9%): [719.061, 744.849] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 62.64% complete, ETA 00:21:56
# Fork: 1 of 2
# Warmup Iteration   1: 6633.783 ns/op
# Warmup Iteration   2: 1337.832 ns/op
# Warmup Iteration   3: 870.376 ns/op
Iteration   1: 868.643 ns/op
Iteration   2: 868.399 ns/op
Iteration   3: 868.479 ns/op
Iteration   4: 873.286 ns/op
Iteration   5: 869.654 ns/op

# Run progress: 62.67% complete, ETA 00:21:54
# Fork: 2 of 2
# Warmup Iteration   1: 3037.611 ns/op
# Warmup Iteration   2: 1112.307 ns/op
# Warmup Iteration   3: 857.153 ns/op
Iteration   1: 858.318 ns/op
Iteration   2: 857.703 ns/op
Iteration   3: 857.339 ns/op
Iteration   4: 859.914 ns/op
Iteration   5: 860.202 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  864.194 ±(99.9%) 9.102 ns/op [Average]
  (min, avg, max) = (857.339, 864.194, 873.286), stdev = 6.020
  CI (99.9%): [855.092, 873.296] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 62.71% complete, ETA 00:21:53
# Fork: 1 of 2
# Warmup Iteration   1: 3125.868 ns/op
# Warmup Iteration   2: 1159.156 ns/op
# Warmup Iteration   3: 881.971 ns/op
Iteration   1: 881.826 ns/op
Iteration   2: 882.148 ns/op
Iteration   3: 882.605 ns/op
Iteration   4: 883.870 ns/op
Iteration   5: 883.795 ns/op

# Run progress: 62.74% complete, ETA 00:21:52
# Fork: 2 of 2
# Warmup Iteration   1: 2892.293 ns/op
# Warmup Iteration   2: 1180.337 ns/op
# Warmup Iteration   3: 858.556 ns/op
Iteration   1: 857.713 ns/op
Iteration   2: 857.482 ns/op
Iteration   3: 857.568 ns/op
Iteration   4: 859.087 ns/op
Iteration   5: 859.339 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  870.543 ±(99.9%) 19.654 ns/op [Average]
  (min, avg, max) = (857.482, 870.543, 883.870), stdev = 13.000
  CI (99.9%): [850.889, 890.197] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 62.78% complete, ETA 00:21:51
# Fork: 1 of 2
# Warmup Iteration   1: 1256.675 ns/op
# Warmup Iteration   2: 1016.724 ns/op
# Warmup Iteration   3: 768.365 ns/op
Iteration   1: 768.717 ns/op
Iteration   2: 768.430 ns/op
Iteration   3: 768.521 ns/op
Iteration   4: 768.070 ns/op
Iteration   5: 768.280 ns/op

# Run progress: 62.81% complete, ETA 00:21:50
# Fork: 2 of 2
# Warmup Iteration   1: 1261.245 ns/op
# Warmup Iteration   2: 1009.782 ns/op
# Warmup Iteration   3: 767.714 ns/op
Iteration   1: 768.158 ns/op
Iteration   2: 768.208 ns/op
Iteration   3: 767.745 ns/op
Iteration   4: 767.988 ns/op
Iteration   5: 768.071 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  768.219 ±(99.9%) 0.426 ns/op [Average]
  (min, avg, max) = (767.745, 768.219, 768.717), stdev = 0.282
  CI (99.9%): [767.793, 768.644] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 62.85% complete, ETA 00:21:48
# Fork: 1 of 2
# Warmup Iteration   1: 1795.851 ns/op
# Warmup Iteration   2: 1097.206 ns/op
# Warmup Iteration   3: 765.748 ns/op
Iteration   1: 765.251 ns/op
Iteration   2: 767.133 ns/op
Iteration   3: 765.664 ns/op
Iteration   4: 766.618 ns/op
Iteration   5: 766.168 ns/op

# Run progress: 62.88% complete, ETA 00:21:47
# Fork: 2 of 2
# Warmup Iteration   1: 1713.513 ns/op
# Warmup Iteration   2: 1101.775 ns/op
# Warmup Iteration   3: 766.809 ns/op
Iteration   1: 766.665 ns/op
Iteration   2: 766.983 ns/op
Iteration   3: 765.475 ns/op
Iteration   4: 766.566 ns/op
Iteration   5: 766.375 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  766.290 ±(99.9%) 0.966 ns/op [Average]
  (min, avg, max) = (765.251, 766.290, 767.133), stdev = 0.639
  CI (99.9%): [765.324, 767.256] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 62.92% complete, ETA 00:21:46
# Fork: 1 of 2
# Warmup Iteration   1: 23.888 ns/op
# Warmup Iteration   2: 31.825 ns/op
# Warmup Iteration   3: 19.013 ns/op
Iteration   1: 19.016 ns/op
Iteration   2: 18.972 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.837 ns/op

# Run progress: 62.95% complete, ETA 00:21:45
# Fork: 2 of 2
# Warmup Iteration   1: 23.226 ns/op
# Warmup Iteration   2: 29.073 ns/op
# Warmup Iteration   3: 19.046 ns/op
Iteration   1: 19.000 ns/op
Iteration   2: 18.966 ns/op
Iteration   3: 18.962 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.922 ±(99.9%) 0.117 ns/op [Average]
  (min, avg, max) = (18.828, 18.922, 19.016), stdev = 0.077
  CI (99.9%): [18.805, 19.039] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 62.99% complete, ETA 00:21:43
# Fork: 1 of 2
# Warmup Iteration   1: 499.707 ns/op
# Warmup Iteration   2: 425.876 ns/op
# Warmup Iteration   3: 297.679 ns/op
Iteration   1: 296.493 ns/op
Iteration   2: 296.921 ns/op
Iteration   3: 296.571 ns/op
Iteration   4: 297.188 ns/op
Iteration   5: 297.048 ns/op

# Run progress: 63.02% complete, ETA 00:21:42
# Fork: 2 of 2
# Warmup Iteration   1: 522.010 ns/op
# Warmup Iteration   2: 455.689 ns/op
# Warmup Iteration   3: 323.775 ns/op
Iteration   1: 323.618 ns/op
Iteration   2: 321.581 ns/op
Iteration   3: 322.969 ns/op
Iteration   4: 324.465 ns/op
Iteration   5: 324.784 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  310.164 ±(99.9%) 21.268 ns/op [Average]
  (min, avg, max) = (296.493, 310.164, 324.784), stdev = 14.067
  CI (99.9%): [288.896, 331.432] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 63.06% complete, ETA 00:21:41
# Fork: 1 of 2
# Warmup Iteration   1: 6422.577 ns/op
# Warmup Iteration   2: 740.518 ns/op
# Warmup Iteration   3: 457.930 ns/op
Iteration   1: 458.353 ns/op
Iteration   2: 458.410 ns/op
Iteration   3: 458.401 ns/op
Iteration   4: 458.213 ns/op
Iteration   5: 457.945 ns/op

# Run progress: 63.09% complete, ETA 00:21:40
# Fork: 2 of 2
# Warmup Iteration   1: 5529.714 ns/op
# Warmup Iteration   2: 693.150 ns/op
# Warmup Iteration   3: 455.271 ns/op
Iteration   1: 455.873 ns/op
Iteration   2: 455.362 ns/op
Iteration   3: 455.193 ns/op
Iteration   4: 455.040 ns/op
Iteration   5: 454.996 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  456.779 ±(99.9%) 2.403 ns/op [Average]
  (min, avg, max) = (454.996, 456.779, 458.410), stdev = 1.589
  CI (99.9%): [454.376, 459.181] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 63.13% complete, ETA 00:21:39
# Fork: 1 of 2
# Warmup Iteration   1: 2696.333 ns/op
# Warmup Iteration   2: 619.419 ns/op
# Warmup Iteration   3: 462.775 ns/op
Iteration   1: 462.558 ns/op
Iteration   2: 462.337 ns/op
Iteration   3: 462.625 ns/op
Iteration   4: 462.519 ns/op
Iteration   5: 462.893 ns/op

# Run progress: 63.16% complete, ETA 00:21:37
# Fork: 2 of 2
# Warmup Iteration   1: 2885.595 ns/op
# Warmup Iteration   2: 626.370 ns/op
# Warmup Iteration   3: 473.077 ns/op
Iteration   1: 472.333 ns/op
Iteration   2: 471.569 ns/op
Iteration   3: 472.570 ns/op
Iteration   4: 470.075 ns/op
Iteration   5: 471.030 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  467.051 ±(99.9%) 7.190 ns/op [Average]
  (min, avg, max) = (462.337, 467.051, 472.570), stdev = 4.756
  CI (99.9%): [459.861, 474.241] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 63.19% complete, ETA 00:21:36
# Fork: 1 of 2
# Warmup Iteration   1: 1538.018 ns/op
# Warmup Iteration   2: 1147.260 ns/op
# Warmup Iteration   3: 870.015 ns/op
Iteration   1: 880.457 ns/op
Iteration   2: 869.884 ns/op
Iteration   3: 870.190 ns/op
Iteration   4: 870.223 ns/op
Iteration   5: 869.684 ns/op

# Run progress: 63.23% complete, ETA 00:21:35
# Fork: 2 of 2
# Warmup Iteration   1: 1482.981 ns/op
# Warmup Iteration   2: 1164.624 ns/op
# Warmup Iteration   3: 869.855 ns/op
Iteration   1: 870.276 ns/op
Iteration   2: 880.896 ns/op
Iteration   3: 870.494 ns/op
Iteration   4: 870.111 ns/op
Iteration   5: 870.398 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  872.261 ±(99.9%) 6.717 ns/op [Average]
  (min, avg, max) = (869.684, 872.261, 880.896), stdev = 4.443
  CI (99.9%): [865.545, 878.978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 63.26% complete, ETA 00:21:34
# Fork: 1 of 2
# Warmup Iteration   1: 11194.690 ns/op
# Warmup Iteration   2: 4866.729 ns/op
# Warmup Iteration   3: 4040.420 ns/op
Iteration   1: 3720.628 ns/op
Iteration   2: 3727.211 ns/op
Iteration   3: 3722.616 ns/op
Iteration   4: 3705.588 ns/op
Iteration   5: 3707.252 ns/op

# Run progress: 63.30% complete, ETA 00:21:32
# Fork: 2 of 2
# Warmup Iteration   1: 10691.627 ns/op
# Warmup Iteration   2: 4527.651 ns/op
# Warmup Iteration   3: 3412.755 ns/op
Iteration   1: 3416.589 ns/op
Iteration   2: 3413.844 ns/op
Iteration   3: 3412.854 ns/op
Iteration   4: 3406.686 ns/op
Iteration   5: 3407.412 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3564.068 ±(99.9%) 243.408 ns/op [Average]
  (min, avg, max) = (3406.686, 3564.068, 3727.211), stdev = 160.999
  CI (99.9%): [3320.660, 3807.476] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 63.33% complete, ETA 00:21:31
# Fork: 1 of 2
# Warmup Iteration   1: 24.436 ns/op
# Warmup Iteration   2: 26.968 ns/op
# Warmup Iteration   3: 19.019 ns/op
Iteration   1: 19.002 ns/op
Iteration   2: 18.965 ns/op
Iteration   3: 18.965 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.831 ns/op

# Run progress: 63.37% complete, ETA 00:21:30
# Fork: 2 of 2
# Warmup Iteration   1: 23.272 ns/op
# Warmup Iteration   2: 28.058 ns/op
# Warmup Iteration   3: 19.067 ns/op
Iteration   1: 19.022 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.957 ns/op
Iteration   4: 19.573 ns/op
Iteration   5: 19.533 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.064 ±(99.9%) 0.401 ns/op [Average]
  (min, avg, max) = (18.831, 19.064, 19.573), stdev = 0.265
  CI (99.9%): [18.663, 19.465] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 63.40% complete, ETA 00:21:29
# Fork: 1 of 2
# Warmup Iteration   1: 1176.758 ns/op
# Warmup Iteration   2: 727.217 ns/op
# Warmup Iteration   3: 483.301 ns/op
Iteration   1: 486.639 ns/op
Iteration   2: 488.127 ns/op
Iteration   3: 479.303 ns/op
Iteration   4: 482.359 ns/op
Iteration   5: 483.550 ns/op

# Run progress: 63.44% complete, ETA 00:21:28
# Fork: 2 of 2
# Warmup Iteration   1: 18322.539 ns/op
# Warmup Iteration   2: 783.279 ns/op
# Warmup Iteration   3: 573.992 ns/op
Iteration   1: 532.337 ns/op
Iteration   2: 532.300 ns/op
Iteration   3: 524.679 ns/op
Iteration   4: 524.956 ns/op
Iteration   5: 528.274 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  506.252 ±(99.9%) 35.844 ns/op [Average]
  (min, avg, max) = (479.303, 506.252, 532.337), stdev = 23.709
  CI (99.9%): [470.408, 542.097] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 63.47% complete, ETA 00:21:26
# Fork: 1 of 2
# Warmup Iteration   1: 7645.652 ns/op
# Warmup Iteration   2: 726.856 ns/op
# Warmup Iteration   3: 529.328 ns/op
Iteration   1: 530.461 ns/op
Iteration   2: 528.041 ns/op
Iteration   3: 531.645 ns/op
Iteration   4: 527.690 ns/op
Iteration   5: 528.976 ns/op

# Run progress: 63.51% complete, ETA 00:21:25
# Fork: 2 of 2
# Warmup Iteration   1: 5028.784 ns/op
# Warmup Iteration   2: 863.861 ns/op
# Warmup Iteration   3: 536.155 ns/op
Iteration   1: 537.199 ns/op
Iteration   2: 540.705 ns/op
Iteration   3: 540.521 ns/op
Iteration   4: 555.569 ns/op
Iteration   5: 536.136 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  535.694 ±(99.9%) 12.921 ns/op [Average]
  (min, avg, max) = (527.690, 535.694, 555.569), stdev = 8.547
  CI (99.9%): [522.773, 548.616] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 63.54% complete, ETA 00:21:24
# Fork: 1 of 2
# Warmup Iteration   1: 3124.553 ns/op
# Warmup Iteration   2: 484.543 ns/op
# Warmup Iteration   3: 351.584 ns/op
Iteration   1: 357.914 ns/op
Iteration   2: 354.096 ns/op
Iteration   3: 353.405 ns/op
Iteration   4: 355.288 ns/op
Iteration   5: 356.667 ns/op

# Run progress: 63.58% complete, ETA 00:21:23
# Fork: 2 of 2
# Warmup Iteration   1: 8086.834 ns/op
# Warmup Iteration   2: 461.281 ns/op
# Warmup Iteration   3: 344.739 ns/op
Iteration   1: 562.027 ns/op
Iteration   2: 346.749 ns/op
Iteration   3: 347.358 ns/op
Iteration   4: 345.554 ns/op
Iteration   5: 345.114 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  372.417 ±(99.9%) 100.985 ns/op [Average]
  (min, avg, max) = (345.114, 372.417, 562.027), stdev = 66.795
  CI (99.9%): [271.432, 473.402] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 63.61% complete, ETA 00:21:21
# Fork: 1 of 2
# Warmup Iteration   1: 1731.097 ns/op
# Warmup Iteration   2: 1145.692 ns/op
# Warmup Iteration   3: 876.625 ns/op
Iteration   1: 873.234 ns/op
Iteration   2: 869.396 ns/op
Iteration   3: 865.713 ns/op
Iteration   4: 871.501 ns/op
Iteration   5: 873.169 ns/op

# Run progress: 63.65% complete, ETA 00:21:20
# Fork: 2 of 2
# Warmup Iteration   1: 2107.680 ns/op
# Warmup Iteration   2: 1149.976 ns/op
# Warmup Iteration   3: 864.296 ns/op
Iteration   1: 871.800 ns/op
Iteration   2: 869.626 ns/op
Iteration   3: 868.692 ns/op
Iteration   4: 870.784 ns/op
Iteration   5: 867.830 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  870.175 ±(99.9%) 3.620 ns/op [Average]
  (min, avg, max) = (865.713, 870.175, 873.234), stdev = 2.395
  CI (99.9%): [866.554, 873.795] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 63.68% complete, ETA 00:21:19
# Fork: 1 of 2
# Warmup Iteration   1: 10869.005 ns/op
# Warmup Iteration   2: 5168.977 ns/op
# Warmup Iteration   3: 3872.596 ns/op
Iteration   1: 3876.083 ns/op
Iteration   2: 3874.312 ns/op
Iteration   3: 3877.767 ns/op
Iteration   4: 3883.810 ns/op
Iteration   5: 3882.296 ns/op

# Run progress: 63.72% complete, ETA 00:21:18
# Fork: 2 of 2
# Warmup Iteration   1: 11919.808 ns/op
# Warmup Iteration   2: 5141.652 ns/op
# Warmup Iteration   3: 4279.161 ns/op
Iteration   1: 3885.408 ns/op
Iteration   2: 3888.688 ns/op
Iteration   3: 3878.037 ns/op
Iteration   4: 3866.938 ns/op
Iteration   5: 3866.103 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3877.944 ±(99.9%) 11.297 ns/op [Average]
  (min, avg, max) = (3866.103, 3877.944, 3888.688), stdev = 7.472
  CI (99.9%): [3866.647, 3889.241] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 63.75% complete, ETA 00:21:17
# Fork: 1 of 2
# Warmup Iteration   1: 24.312 ns/op
# Warmup Iteration   2: 30.521 ns/op
# Warmup Iteration   3: 19.064 ns/op
Iteration   1: 19.013 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.994 ns/op
Iteration   4: 18.847 ns/op
Iteration   5: 18.856 ns/op

# Run progress: 63.78% complete, ETA 00:21:15
# Fork: 2 of 2
# Warmup Iteration   1: 25.837 ns/op
# Warmup Iteration   2: 30.555 ns/op
# Warmup Iteration   3: 19.023 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.976 ns/op
Iteration   3: 18.950 ns/op
Iteration   4: 18.822 ns/op
Iteration   5: 18.836 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.924 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (18.822, 18.924, 19.013), stdev = 0.075
  CI (99.9%): [18.811, 19.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 63.82% complete, ETA 00:21:14
# Fork: 1 of 2
# Warmup Iteration   1: 113.007 ns/op
# Warmup Iteration   2: 116.555 ns/op
# Warmup Iteration   3: 80.835 ns/op
Iteration   1: 80.872 ns/op
Iteration   2: 80.848 ns/op
Iteration   3: 80.808 ns/op
Iteration   4: 81.049 ns/op
Iteration   5: 81.115 ns/op

# Run progress: 63.85% complete, ETA 00:21:13
# Fork: 2 of 2
# Warmup Iteration   1: 115.316 ns/op
# Warmup Iteration   2: 127.134 ns/op
# Warmup Iteration   3: 81.191 ns/op
Iteration   1: 81.201 ns/op
Iteration   2: 81.224 ns/op
Iteration   3: 81.199 ns/op
Iteration   4: 81.551 ns/op
Iteration   5: 81.508 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  81.137 ±(99.9%) 0.389 ns/op [Average]
  (min, avg, max) = (80.808, 81.137, 81.551), stdev = 0.257
  CI (99.9%): [80.749, 81.526] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 63.89% complete, ETA 00:21:12
# Fork: 1 of 2
# Warmup Iteration   1: 507.437 ns/op
# Warmup Iteration   2: 156.060 ns/op
# Warmup Iteration   3: 111.814 ns/op
Iteration   1: 112.353 ns/op
Iteration   2: 111.807 ns/op
Iteration   3: 111.882 ns/op
Iteration   4: 112.306 ns/op
Iteration   5: 112.323 ns/op

# Run progress: 63.92% complete, ETA 00:21:10
# Fork: 2 of 2
# Warmup Iteration   1: 3586.515 ns/op
# Warmup Iteration   2: 137.671 ns/op
# Warmup Iteration   3: 115.941 ns/op
Iteration   1: 116.036 ns/op
Iteration   2: 116.000 ns/op
Iteration   3: 116.006 ns/op
Iteration   4: 116.390 ns/op
Iteration   5: 116.480 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.158 ±(99.9%) 3.245 ns/op [Average]
  (min, avg, max) = (111.807, 114.158, 116.480), stdev = 2.147
  CI (99.9%): [110.913, 117.404] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 63.96% complete, ETA 00:21:09
# Fork: 1 of 2
# Warmup Iteration   1: 382.253 ns/op
# Warmup Iteration   2: 166.219 ns/op
# Warmup Iteration   3: 112.501 ns/op
Iteration   1: 112.492 ns/op
Iteration   2: 112.575 ns/op
Iteration   3: 112.506 ns/op
Iteration   4: 112.834 ns/op
Iteration   5: 112.889 ns/op

# Run progress: 63.99% complete, ETA 00:21:08
# Fork: 2 of 2
# Warmup Iteration   1: 673.740 ns/op
# Warmup Iteration   2: 160.223 ns/op
# Warmup Iteration   3: 112.388 ns/op
Iteration   1: 112.328 ns/op
Iteration   2: 112.368 ns/op
Iteration   3: 112.285 ns/op
Iteration   4: 112.860 ns/op
Iteration   5: 112.711 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.585 ±(99.9%) 0.343 ns/op [Average]
  (min, avg, max) = (112.285, 112.585, 112.889), stdev = 0.227
  CI (99.9%): [112.242, 112.928] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 64.03% complete, ETA 00:21:07
# Fork: 1 of 2
# Warmup Iteration   1: 106.378 ns/op
# Warmup Iteration   2: 112.918 ns/op
# Warmup Iteration   3: 73.572 ns/op
Iteration   1: 73.564 ns/op
Iteration   2: 73.546 ns/op
Iteration   3: 73.570 ns/op
Iteration   4: 74.265 ns/op
Iteration   5: 74.300 ns/op

# Run progress: 64.06% complete, ETA 00:21:06
# Fork: 2 of 2
# Warmup Iteration   1: 105.377 ns/op
# Warmup Iteration   2: 106.859 ns/op
# Warmup Iteration   3: 73.553 ns/op
Iteration   1: 73.562 ns/op
Iteration   2: 73.574 ns/op
Iteration   3: 73.567 ns/op
Iteration   4: 74.272 ns/op
Iteration   5: 74.332 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.855 ±(99.9%) 0.569 ns/op [Average]
  (min, avg, max) = (73.546, 73.855, 74.332), stdev = 0.377
  CI (99.9%): [73.286, 74.424] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 64.10% complete, ETA 00:21:04
# Fork: 1 of 2
# Warmup Iteration   1: 219.596 ns/op
# Warmup Iteration   2: 216.191 ns/op
# Warmup Iteration   3: 157.039 ns/op
Iteration   1: 157.081 ns/op
Iteration   2: 157.178 ns/op
Iteration   3: 157.122 ns/op
Iteration   4: 157.286 ns/op
Iteration   5: 157.473 ns/op

# Run progress: 64.13% complete, ETA 00:21:03
# Fork: 2 of 2
# Warmup Iteration   1: 220.474 ns/op
# Warmup Iteration   2: 228.842 ns/op
# Warmup Iteration   3: 156.319 ns/op
Iteration   1: 156.786 ns/op
Iteration   2: 156.300 ns/op
Iteration   3: 156.329 ns/op
Iteration   4: 157.208 ns/op
Iteration   5: 157.124 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.989 ±(99.9%) 0.597 ns/op [Average]
  (min, avg, max) = (156.300, 156.989, 157.473), stdev = 0.395
  CI (99.9%): [156.392, 157.585] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 64.17% complete, ETA 00:21:02
# Fork: 1 of 2
# Warmup Iteration   1: 23.566 ns/op
# Warmup Iteration   2: 30.510 ns/op
# Warmup Iteration   3: 19.048 ns/op
Iteration   1: 19.010 ns/op
Iteration   2: 18.955 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.843 ns/op
Iteration   5: 18.843 ns/op

# Run progress: 64.20% complete, ETA 00:21:01
# Fork: 2 of 2
# Warmup Iteration   1: 23.813 ns/op
# Warmup Iteration   2: 31.000 ns/op
# Warmup Iteration   3: 19.019 ns/op
Iteration   1: 18.994 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.973 ns/op
Iteration   4: 18.839 ns/op
Iteration   5: 18.857 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.922 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (18.839, 18.922, 19.010), stdev = 0.069
  CI (99.9%): [18.819, 19.026] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 64.24% complete, ETA 00:20:59
# Fork: 1 of 2
# Warmup Iteration   1: 3040.247 ns/op
# Warmup Iteration   2: 946.123 ns/op
# Warmup Iteration   3: 740.360 ns/op
Iteration   1: 736.520 ns/op
Iteration   2: 741.071 ns/op
Iteration   3: 735.690 ns/op
Iteration   4: 741.573 ns/op
Iteration   5: 740.949 ns/op

# Run progress: 64.27% complete, ETA 00:20:58
# Fork: 2 of 2
# Warmup Iteration   1: 3328.284 ns/op
# Warmup Iteration   2: 1030.835 ns/op
# Warmup Iteration   3: 729.768 ns/op
Iteration   1: 738.072 ns/op
Iteration   2: 727.885 ns/op
Iteration   3: 733.686 ns/op
Iteration   4: 732.337 ns/op
Iteration   5: 733.552 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  736.134 ±(99.9%) 6.693 ns/op [Average]
  (min, avg, max) = (727.885, 736.134, 741.573), stdev = 4.427
  CI (99.9%): [729.441, 742.826] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 64.31% complete, ETA 00:20:57
# Fork: 1 of 2
# Warmup Iteration   1: 10790.579 ns/op
# Warmup Iteration   2: 950.275 ns/op
# Warmup Iteration   3: 806.666 ns/op
Iteration   1: 732.763 ns/op
Iteration   2: 731.314 ns/op
Iteration   3: 737.668 ns/op
Iteration   4: 734.746 ns/op
Iteration   5: 733.904 ns/op

# Run progress: 64.34% complete, ETA 00:20:56
# Fork: 2 of 2
# Warmup Iteration   1: 18646.576 ns/op
# Warmup Iteration   2: 1030.474 ns/op
# Warmup Iteration   3: 792.401 ns/op
Iteration   1: 720.591 ns/op
Iteration   2: 719.486 ns/op
Iteration   3: 720.208 ns/op
Iteration   4: 721.824 ns/op
Iteration   5: 721.419 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  727.392 ±(99.9%) 10.964 ns/op [Average]
  (min, avg, max) = (719.486, 727.392, 737.668), stdev = 7.252
  CI (99.9%): [716.428, 738.357] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 64.38% complete, ETA 00:20:54
# Fork: 1 of 2
# Warmup Iteration   1: 25721.030 ns/op
# Warmup Iteration   2: 972.029 ns/op
# Warmup Iteration   3: 750.444 ns/op
Iteration   1: 684.439 ns/op
Iteration   2: 677.160 ns/op
Iteration   3: 685.202 ns/op
Iteration   4: 680.075 ns/op
Iteration   5: 682.637 ns/op

# Run progress: 64.41% complete, ETA 00:20:53
# Fork: 2 of 2
# Warmup Iteration   1: 35588.140 ns/op
# Warmup Iteration   2: 1244.958 ns/op
# Warmup Iteration   3: 816.951 ns/op
Iteration   1: 682.822 ns/op
Iteration   2: 684.161 ns/op
Iteration   3: 681.424 ns/op
Iteration   4: 681.713 ns/op
Iteration   5: 688.919 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  682.855 ±(99.9%) 4.782 ns/op [Average]
  (min, avg, max) = (677.160, 682.855, 688.919), stdev = 3.163
  CI (99.9%): [678.073, 687.637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 64.44% complete, ETA 00:20:52
# Fork: 1 of 2
# Warmup Iteration   1: 1003.209 ns/op
# Warmup Iteration   2: 729.983 ns/op
# Warmup Iteration   3: 541.885 ns/op
Iteration   1: 540.318 ns/op
Iteration   2: 545.238 ns/op
Iteration   3: 542.923 ns/op
Iteration   4: 540.260 ns/op
Iteration   5: 542.878 ns/op

# Run progress: 64.48% complete, ETA 00:20:51
# Fork: 2 of 2
# Warmup Iteration   1: 859.889 ns/op
# Warmup Iteration   2: 716.049 ns/op
# Warmup Iteration   3: 537.573 ns/op
Iteration   1: 542.723 ns/op
Iteration   2: 542.474 ns/op
Iteration   3: 542.251 ns/op
Iteration   4: 541.340 ns/op
Iteration   5: 539.424 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  541.983 ±(99.9%) 2.562 ns/op [Average]
  (min, avg, max) = (539.424, 541.983, 545.238), stdev = 1.695
  CI (99.9%): [539.421, 544.545] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 64.51% complete, ETA 00:20:50
# Fork: 1 of 2
# Warmup Iteration   1: 48015.300 ns/op
# Warmup Iteration   2: 5746.788 ns/op
# Warmup Iteration   3: 4581.210 ns/op
Iteration   1: 3882.936 ns/op
Iteration   2: 3889.062 ns/op
Iteration   3: 3881.780 ns/op
Iteration   4: 3865.377 ns/op
Iteration   5: 3863.974 ns/op

# Run progress: 64.55% complete, ETA 00:20:48
# Fork: 2 of 2
# Warmup Iteration   1: 25091.257 ns/op
# Warmup Iteration   2: 5325.747 ns/op
# Warmup Iteration   3: 4478.840 ns/op
Iteration   1: 4113.068 ns/op
Iteration   2: 4105.047 ns/op
Iteration   3: 4112.496 ns/op
Iteration   4: 4086.988 ns/op
Iteration   5: 4086.976 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3988.771 ±(99.9%) 179.565 ns/op [Average]
  (min, avg, max) = (3863.974, 3988.771, 4113.068), stdev = 118.771
  CI (99.9%): [3809.206, 4168.335] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 64.58% complete, ETA 00:20:47
# Fork: 1 of 2
# Warmup Iteration   1: 23.791 ns/op
# Warmup Iteration   2: 28.240 ns/op
# Warmup Iteration   3: 19.053 ns/op
Iteration   1: 18.994 ns/op
Iteration   2: 19.002 ns/op
Iteration   3: 18.973 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.841 ns/op

# Run progress: 64.62% complete, ETA 00:20:46
# Fork: 2 of 2
# Warmup Iteration   1: 25.458 ns/op
# Warmup Iteration   2: 28.360 ns/op
# Warmup Iteration   3: 19.024 ns/op
Iteration   1: 19.040 ns/op
Iteration   2: 18.980 ns/op
Iteration   3: 18.984 ns/op
Iteration   4: 18.832 ns/op
Iteration   5: 18.848 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.932 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (18.829, 18.932, 19.040), stdev = 0.084
  CI (99.9%): [18.806, 19.059] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 64.65% complete, ETA 00:20:45
# Fork: 1 of 2
# Warmup Iteration   1: 2323.657 ns/op
# Warmup Iteration   2: 846.044 ns/op
# Warmup Iteration   3: 657.840 ns/op
Iteration   1: 657.527 ns/op
Iteration   2: 657.361 ns/op
Iteration   3: 657.431 ns/op
Iteration   4: 746.413 ns/op
Iteration   5: 754.288 ns/op

# Run progress: 64.69% complete, ETA 00:20:43
# Fork: 2 of 2
# Warmup Iteration   1: 2506.644 ns/op
# Warmup Iteration   2: 904.851 ns/op
# Warmup Iteration   3: 646.353 ns/op
Iteration   1: 656.852 ns/op
Iteration   2: 646.897 ns/op
Iteration   3: 646.592 ns/op
Iteration   4: 647.253 ns/op
Iteration   5: 647.067 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  671.768 ±(99.9%) 63.112 ns/op [Average]
  (min, avg, max) = (646.592, 671.768, 754.288), stdev = 41.744
  CI (99.9%): [608.657, 734.880] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 64.72% complete, ETA 00:20:42
# Fork: 1 of 2
# Warmup Iteration   1: 10707.974 ns/op
# Warmup Iteration   2: 1473.601 ns/op
# Warmup Iteration   3: 1107.575 ns/op
Iteration   1: 1108.622 ns/op
Iteration   2: 1107.314 ns/op
Iteration   3: 1108.223 ns/op
Iteration   4: 1111.622 ns/op
Iteration   5: 1109.464 ns/op

# Run progress: 64.76% complete, ETA 00:20:41
# Fork: 2 of 2
# Warmup Iteration   1: 12851.320 ns/op
# Warmup Iteration   2: 1645.548 ns/op
# Warmup Iteration   3: 1211.065 ns/op
Iteration   1: 1102.340 ns/op
Iteration   2: 1101.735 ns/op
Iteration   3: 1101.052 ns/op
Iteration   4: 1102.818 ns/op
Iteration   5: 1103.392 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1105.658 ±(99.9%) 5.723 ns/op [Average]
  (min, avg, max) = (1101.052, 1105.658, 1111.622), stdev = 3.786
  CI (99.9%): [1099.935, 1111.381] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 64.79% complete, ETA 00:20:40
# Fork: 1 of 2
# Warmup Iteration   1: 11334.742 ns/op
# Warmup Iteration   2: 1530.440 ns/op
# Warmup Iteration   3: 1216.198 ns/op
Iteration   1: 1102.832 ns/op
Iteration   2: 1101.951 ns/op
Iteration   3: 1101.826 ns/op
Iteration   4: 1104.354 ns/op
Iteration   5: 1103.581 ns/op

# Run progress: 64.83% complete, ETA 00:20:39
# Fork: 2 of 2
# Warmup Iteration   1: 7891.250 ns/op
# Warmup Iteration   2: 1580.678 ns/op
# Warmup Iteration   3: 1121.456 ns/op
Iteration   1: 1127.581 ns/op
Iteration   2: 1128.055 ns/op
Iteration   3: 1121.738 ns/op
Iteration   4: 1123.221 ns/op
Iteration   5: 1123.802 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1113.894 ±(99.9%) 17.764 ns/op [Average]
  (min, avg, max) = (1101.826, 1113.894, 1128.055), stdev = 11.750
  CI (99.9%): [1096.130, 1131.658] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 64.86% complete, ETA 00:20:37
# Fork: 1 of 2
# Warmup Iteration   1: 1551.656 ns/op
# Warmup Iteration   2: 1349.687 ns/op
# Warmup Iteration   3: 1051.408 ns/op
Iteration   1: 1051.731 ns/op
Iteration   2: 1051.850 ns/op
Iteration   3: 1051.970 ns/op
Iteration   4: 1052.015 ns/op
Iteration   5: 1052.084 ns/op

# Run progress: 64.90% complete, ETA 00:20:36
# Fork: 2 of 2
# Warmup Iteration   1: 1746.214 ns/op
# Warmup Iteration   2: 1482.933 ns/op
# Warmup Iteration   3: 1051.210 ns/op
Iteration   1: 1051.671 ns/op
Iteration   2: 1051.704 ns/op
Iteration   3: 1051.826 ns/op
Iteration   4: 1054.049 ns/op
Iteration   5: 1053.806 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1052.271 ±(99.9%) 1.339 ns/op [Average]
  (min, avg, max) = (1051.671, 1052.271, 1054.049), stdev = 0.885
  CI (99.9%): [1050.932, 1053.609] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 64.93% complete, ETA 00:20:35
# Fork: 1 of 2
# Warmup Iteration   1: 2190.168 ns/op
# Warmup Iteration   2: 1196.001 ns/op
# Warmup Iteration   3: 808.781 ns/op
Iteration   1: 808.785 ns/op
Iteration   2: 808.272 ns/op
Iteration   3: 807.997 ns/op
Iteration   4: 809.697 ns/op
Iteration   5: 809.300 ns/op

# Run progress: 64.97% complete, ETA 00:20:34
# Fork: 2 of 2
# Warmup Iteration   1: 1734.616 ns/op
# Warmup Iteration   2: 1181.944 ns/op
# Warmup Iteration   3: 830.214 ns/op
Iteration   1: 829.225 ns/op
Iteration   2: 829.892 ns/op
Iteration   3: 851.616 ns/op
Iteration   4: 830.618 ns/op
Iteration   5: 829.383 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  821.478 ±(99.9%) 22.478 ns/op [Average]
  (min, avg, max) = (807.997, 821.478, 851.616), stdev = 14.868
  CI (99.9%): [799.001, 843.956] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 65.00% complete, ETA 00:20:32
# Fork: 1 of 2
# Warmup Iteration   1: 23.555 ns/op
# Warmup Iteration   2: 28.462 ns/op
# Warmup Iteration   3: 18.995 ns/op
Iteration   1: 18.969 ns/op
Iteration   2: 18.941 ns/op
Iteration   3: 18.944 ns/op
Iteration   4: 18.842 ns/op
Iteration   5: 18.848 ns/op

# Run progress: 65.03% complete, ETA 00:20:31
# Fork: 2 of 2
# Warmup Iteration   1: 24.286 ns/op
# Warmup Iteration   2: 30.954 ns/op
# Warmup Iteration   3: 19.050 ns/op
Iteration   1: 19.020 ns/op
Iteration   2: 18.941 ns/op
Iteration   3: 19.000 ns/op
Iteration   4: 18.841 ns/op
Iteration   5: 18.854 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.920 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (18.841, 18.920, 19.020), stdev = 0.069
  CI (99.9%): [18.817, 19.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 65.07% complete, ETA 00:20:30
# Fork: 1 of 2
# Warmup Iteration   1: 410.360 ns/op
# Warmup Iteration   2: 404.305 ns/op
# Warmup Iteration   3: 283.679 ns/op
Iteration   1: 285.173 ns/op
Iteration   2: 285.007 ns/op
Iteration   3: 285.452 ns/op
Iteration   4: 284.731 ns/op
Iteration   5: 285.105 ns/op

# Run progress: 65.10% complete, ETA 00:20:29
# Fork: 2 of 2
# Warmup Iteration   1: 413.972 ns/op
# Warmup Iteration   2: 401.015 ns/op
# Warmup Iteration   3: 285.222 ns/op
Iteration   1: 284.158 ns/op
Iteration   2: 284.682 ns/op
Iteration   3: 284.615 ns/op
Iteration   4: 284.904 ns/op
Iteration   5: 283.838 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.766 ±(99.9%) 0.728 ns/op [Average]
  (min, avg, max) = (283.838, 284.766, 285.452), stdev = 0.482
  CI (99.9%): [284.038, 285.495] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 65.14% complete, ETA 00:20:28
# Fork: 1 of 2
# Warmup Iteration   1: 1423.398 ns/op
# Warmup Iteration   2: 721.195 ns/op
# Warmup Iteration   3: 543.110 ns/op
Iteration   1: 542.834 ns/op
Iteration   2: 544.941 ns/op
Iteration   3: 543.389 ns/op
Iteration   4: 542.578 ns/op
Iteration   5: 541.653 ns/op

# Run progress: 65.17% complete, ETA 00:20:26
# Fork: 2 of 2
# Warmup Iteration   1: 1262.962 ns/op
# Warmup Iteration   2: 698.330 ns/op
# Warmup Iteration   3: 533.088 ns/op
Iteration   1: 534.555 ns/op
Iteration   2: 532.827 ns/op
Iteration   3: 534.603 ns/op
Iteration   4: 532.314 ns/op
Iteration   5: 534.558 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  538.425 ±(99.9%) 7.600 ns/op [Average]
  (min, avg, max) = (532.314, 538.425, 544.941), stdev = 5.027
  CI (99.9%): [530.825, 546.025] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 65.21% complete, ETA 00:20:25
# Fork: 1 of 2
# Warmup Iteration   1: 496.739 ns/op
# Warmup Iteration   2: 399.457 ns/op
# Warmup Iteration   3: 279.458 ns/op
Iteration   1: 279.535 ns/op
Iteration   2: 279.684 ns/op
Iteration   3: 279.604 ns/op
Iteration   4: 280.040 ns/op
Iteration   5: 279.767 ns/op

# Run progress: 65.24% complete, ETA 00:20:24
# Fork: 2 of 2
# Warmup Iteration   1: 580.323 ns/op
# Warmup Iteration   2: 399.344 ns/op
# Warmup Iteration   3: 298.428 ns/op
Iteration   1: 299.022 ns/op
Iteration   2: 298.872 ns/op
Iteration   3: 298.796 ns/op
Iteration   4: 298.505 ns/op
Iteration   5: 299.434 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  289.326 ±(99.9%) 15.304 ns/op [Average]
  (min, avg, max) = (279.535, 289.326, 299.434), stdev = 10.123
  CI (99.9%): [274.022, 304.630] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 65.28% complete, ETA 00:20:23
# Fork: 1 of 2
# Warmup Iteration   1: 1349.371 ns/op
# Warmup Iteration   2: 1203.528 ns/op
# Warmup Iteration   3: 920.363 ns/op
Iteration   1: 919.900 ns/op
Iteration   2: 922.387 ns/op
Iteration   3: 910.333 ns/op
Iteration   4: 919.610 ns/op
Iteration   5: 910.399 ns/op

# Run progress: 65.31% complete, ETA 00:20:21
# Fork: 2 of 2
# Warmup Iteration   1: 1371.133 ns/op
# Warmup Iteration   2: 1255.456 ns/op
# Warmup Iteration   3: 910.902 ns/op
Iteration   1: 911.100 ns/op
Iteration   2: 911.028 ns/op
Iteration   3: 910.923 ns/op
Iteration   4: 910.792 ns/op
Iteration   5: 910.854 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  913.733 ±(99.9%) 7.289 ns/op [Average]
  (min, avg, max) = (910.333, 913.733, 922.387), stdev = 4.821
  CI (99.9%): [906.443, 921.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 65.35% complete, ETA 00:20:20
# Fork: 1 of 2
# Warmup Iteration   1: 11184.402 ns/op
# Warmup Iteration   2: 5043.232 ns/op
# Warmup Iteration   3: 3529.613 ns/op
Iteration   1: 3517.266 ns/op
Iteration   2: 3520.481 ns/op
Iteration   3: 3523.322 ns/op
Iteration   4: 3506.102 ns/op
Iteration   5: 3504.203 ns/op

# Run progress: 65.38% complete, ETA 00:20:19
# Fork: 2 of 2
# Warmup Iteration   1: 15316.272 ns/op
# Warmup Iteration   2: 5135.836 ns/op
# Warmup Iteration   3: 4116.815 ns/op
Iteration   1: 3744.438 ns/op
Iteration   2: 3744.442 ns/op
Iteration   3: 3741.012 ns/op
Iteration   4: 3719.793 ns/op
Iteration   5: 3716.065 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3623.712 ±(99.9%) 175.192 ns/op [Average]
  (min, avg, max) = (3504.203, 3623.712, 3744.442), stdev = 115.878
  CI (99.9%): [3448.521, 3798.904] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 65.42% complete, ETA 00:20:18
# Fork: 1 of 2
# Warmup Iteration   1: 25.621 ns/op
# Warmup Iteration   2: 29.405 ns/op
# Warmup Iteration   3: 19.017 ns/op
Iteration   1: 18.990 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.956 ns/op
Iteration   4: 18.820 ns/op
Iteration   5: 18.838 ns/op

# Run progress: 65.45% complete, ETA 00:20:17
# Fork: 2 of 2
# Warmup Iteration   1: 23.890 ns/op
# Warmup Iteration   2: 30.872 ns/op
# Warmup Iteration   3: 19.042 ns/op
Iteration   1: 19.007 ns/op
Iteration   2: 18.961 ns/op
Iteration   3: 18.976 ns/op
Iteration   4: 18.836 ns/op
Iteration   5: 18.853 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (18.820, 18.919, 19.007), stdev = 0.073
  CI (99.9%): [18.809, 19.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 65.49% complete, ETA 00:20:15
# Fork: 1 of 2
# Warmup Iteration   1: 708.732 ns/op
# Warmup Iteration   2: 599.329 ns/op
# Warmup Iteration   3: 423.302 ns/op
Iteration   1: 425.204 ns/op
Iteration   2: 424.974 ns/op
Iteration   3: 423.815 ns/op
Iteration   4: 425.088 ns/op
Iteration   5: 425.360 ns/op

# Run progress: 65.52% complete, ETA 00:20:14
# Fork: 2 of 2
# Warmup Iteration   1: 851.943 ns/op
# Warmup Iteration   2: 571.206 ns/op
# Warmup Iteration   3: 422.278 ns/op
Iteration   1: 425.262 ns/op
Iteration   2: 426.254 ns/op
Iteration   3: 427.112 ns/op
Iteration   4: 428.863 ns/op
Iteration   5: 431.170 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.310 ±(99.9%) 3.324 ns/op [Average]
  (min, avg, max) = (423.815, 426.310, 431.170), stdev = 2.199
  CI (99.9%): [422.986, 429.635] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 65.56% complete, ETA 00:20:13
# Fork: 1 of 2
# Warmup Iteration   1: 11075.766 ns/op
# Warmup Iteration   2: 731.730 ns/op
# Warmup Iteration   3: 626.058 ns/op
Iteration   1: 573.032 ns/op
Iteration   2: 569.008 ns/op
Iteration   3: 572.844 ns/op
Iteration   4: 576.180 ns/op
Iteration   5: 582.045 ns/op

# Run progress: 65.59% complete, ETA 00:20:12
# Fork: 2 of 2
# Warmup Iteration   1: 24171.886 ns/op
# Warmup Iteration   2: 925.333 ns/op
# Warmup Iteration   3: 626.616 ns/op
Iteration   1: 568.441 ns/op
Iteration   2: 570.329 ns/op
Iteration   3: 564.624 ns/op
Iteration   4: 566.376 ns/op
Iteration   5: 568.703 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  571.158 ±(99.9%) 7.715 ns/op [Average]
  (min, avg, max) = (564.624, 571.158, 582.045), stdev = 5.103
  CI (99.9%): [563.443, 578.873] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 65.63% complete, ETA 00:20:10
# Fork: 1 of 2
# Warmup Iteration   1: 10890.732 ns/op
# Warmup Iteration   2: 695.759 ns/op
# Warmup Iteration   3: 499.575 ns/op
Iteration   1: 474.037 ns/op
Iteration   2: 462.798 ns/op
Iteration   3: 462.614 ns/op
Iteration   4: 463.174 ns/op
Iteration   5: 466.113 ns/op

# Run progress: 65.66% complete, ETA 00:20:09
# Fork: 2 of 2
# Warmup Iteration   1: 14373.417 ns/op
# Warmup Iteration   2: 594.802 ns/op
# Warmup Iteration   3: 503.896 ns/op
Iteration   1: 459.882 ns/op
Iteration   2: 460.777 ns/op
Iteration   3: 460.167 ns/op
Iteration   4: 461.001 ns/op
Iteration   5: 458.728 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  462.929 ±(99.9%) 6.698 ns/op [Average]
  (min, avg, max) = (458.728, 462.929, 474.037), stdev = 4.430
  CI (99.9%): [456.231, 469.627] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 65.69% complete, ETA 00:20:08
# Fork: 1 of 2
# Warmup Iteration   1: 1394.682 ns/op
# Warmup Iteration   2: 1142.093 ns/op
# Warmup Iteration   3: 864.630 ns/op
Iteration   1: 862.448 ns/op
Iteration   2: 860.310 ns/op
Iteration   3: 860.093 ns/op
Iteration   4: 861.374 ns/op
Iteration   5: 861.615 ns/op

# Run progress: 65.73% complete, ETA 00:20:07
# Fork: 2 of 2
# Warmup Iteration   1: 1716.011 ns/op
# Warmup Iteration   2: 1134.970 ns/op
# Warmup Iteration   3: 862.238 ns/op
Iteration   1: 865.955 ns/op
Iteration   2: 873.731 ns/op
Iteration   3: 867.490 ns/op
Iteration   4: 870.798 ns/op
Iteration   5: 861.899 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  864.571 ±(99.9%) 7.161 ns/op [Average]
  (min, avg, max) = (860.093, 864.571, 873.731), stdev = 4.737
  CI (99.9%): [857.410, 871.733] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 65.76% complete, ETA 00:20:06
# Fork: 1 of 2
# Warmup Iteration   1: 11052.206 ns/op
# Warmup Iteration   2: 5327.812 ns/op
# Warmup Iteration   3: 3788.262 ns/op
Iteration   1: 3790.008 ns/op
Iteration   2: 3787.087 ns/op
Iteration   3: 3789.603 ns/op
Iteration   4: 3768.887 ns/op
Iteration   5: 3770.269 ns/op

# Run progress: 65.80% complete, ETA 00:20:04
# Fork: 2 of 2
# Warmup Iteration   1: 14517.694 ns/op
# Warmup Iteration   2: 5381.001 ns/op
# Warmup Iteration   3: 4277.068 ns/op
Iteration   1: 3875.192 ns/op
Iteration   2: 3875.145 ns/op
Iteration   3: 3876.262 ns/op
Iteration   4: 3855.707 ns/op
Iteration   5: 3858.045 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3824.620 ±(99.9%) 70.830 ns/op [Average]
  (min, avg, max) = (3768.887, 3824.620, 3876.262), stdev = 46.850
  CI (99.9%): [3753.790, 3895.450] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 65.83% complete, ETA 00:20:03
# Fork: 1 of 2
# Warmup Iteration   1: 24.252 ns/op
# Warmup Iteration   2: 26.568 ns/op
# Warmup Iteration   3: 19.092 ns/op
Iteration   1: 19.011 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.961 ns/op
Iteration   4: 18.834 ns/op
Iteration   5: 18.840 ns/op

# Run progress: 65.87% complete, ETA 00:20:02
# Fork: 2 of 2
# Warmup Iteration   1: 25.213 ns/op
# Warmup Iteration   2: 27.795 ns/op
# Warmup Iteration   3: 19.005 ns/op
Iteration   1: 18.996 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.951 ns/op
Iteration   4: 18.822 ns/op
Iteration   5: 18.849 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.918 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (18.822, 18.918, 19.011), stdev = 0.073
  CI (99.9%): [18.807, 19.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 65.90% complete, ETA 00:20:01
# Fork: 1 of 2
# Warmup Iteration   1: 133.680 ns/op
# Warmup Iteration   2: 132.054 ns/op
# Warmup Iteration   3: 92.271 ns/op
Iteration   1: 92.316 ns/op
Iteration   2: 92.253 ns/op
Iteration   3: 92.328 ns/op
Iteration   4: 92.547 ns/op
Iteration   5: 92.554 ns/op

# Run progress: 65.94% complete, ETA 00:19:59
# Fork: 2 of 2
# Warmup Iteration   1: 128.799 ns/op
# Warmup Iteration   2: 124.754 ns/op
# Warmup Iteration   3: 89.814 ns/op
Iteration   1: 89.843 ns/op
Iteration   2: 89.733 ns/op
Iteration   3: 89.771 ns/op
Iteration   4: 90.267 ns/op
Iteration   5: 90.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  91.189 ±(99.9%) 1.953 ns/op [Average]
  (min, avg, max) = (89.733, 91.189, 92.554), stdev = 1.292
  CI (99.9%): [89.236, 93.142] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 65.97% complete, ETA 00:19:58
# Fork: 1 of 2
# Warmup Iteration   1: 802.886 ns/op
# Warmup Iteration   2: 164.427 ns/op
# Warmup Iteration   3: 120.855 ns/op
Iteration   1: 120.950 ns/op
Iteration   2: 120.594 ns/op
Iteration   3: 120.548 ns/op
Iteration   4: 120.860 ns/op
Iteration   5: 120.917 ns/op

# Run progress: 66.01% complete, ETA 00:19:57
# Fork: 2 of 2
# Warmup Iteration   1: 909.673 ns/op
# Warmup Iteration   2: 176.541 ns/op
# Warmup Iteration   3: 120.149 ns/op
Iteration   1: 120.042 ns/op
Iteration   2: 120.279 ns/op
Iteration   3: 120.046 ns/op
Iteration   4: 120.372 ns/op
Iteration   5: 120.395 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  120.500 ±(99.9%) 0.506 ns/op [Average]
  (min, avg, max) = (120.042, 120.500, 120.950), stdev = 0.335
  CI (99.9%): [119.994, 121.007] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 66.04% complete, ETA 00:19:56
# Fork: 1 of 2
# Warmup Iteration   1: 652.300 ns/op
# Warmup Iteration   2: 172.257 ns/op
# Warmup Iteration   3: 118.422 ns/op
Iteration   1: 118.394 ns/op
Iteration   2: 118.392 ns/op
Iteration   3: 118.396 ns/op
Iteration   4: 118.628 ns/op
Iteration   5: 118.637 ns/op

# Run progress: 66.08% complete, ETA 00:19:55
# Fork: 2 of 2
# Warmup Iteration   1: 543.488 ns/op
# Warmup Iteration   2: 166.978 ns/op
# Warmup Iteration   3: 118.350 ns/op
Iteration   1: 118.221 ns/op
Iteration   2: 118.360 ns/op
Iteration   3: 118.317 ns/op
Iteration   4: 118.632 ns/op
Iteration   5: 118.609 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  118.459 ±(99.9%) 0.232 ns/op [Average]
  (min, avg, max) = (118.221, 118.459, 118.637), stdev = 0.153
  CI (99.9%): [118.227, 118.691] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 66.11% complete, ETA 00:19:53
# Fork: 1 of 2
# Warmup Iteration   1: 281.328 ns/op
# Warmup Iteration   2: 261.513 ns/op
# Warmup Iteration   3: 194.511 ns/op
Iteration   1: 194.802 ns/op
Iteration   2: 194.413 ns/op
Iteration   3: 194.315 ns/op
Iteration   4: 196.384 ns/op
Iteration   5: 195.307 ns/op

# Run progress: 66.15% complete, ETA 00:19:52
# Fork: 2 of 2
# Warmup Iteration   1: 283.636 ns/op
# Warmup Iteration   2: 278.393 ns/op
# Warmup Iteration   3: 195.197 ns/op
Iteration   1: 194.950 ns/op
Iteration   2: 195.953 ns/op
Iteration   3: 194.603 ns/op
Iteration   4: 196.043 ns/op
Iteration   5: 195.542 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  195.231 ±(99.9%) 1.102 ns/op [Average]
  (min, avg, max) = (194.315, 195.231, 196.384), stdev = 0.729
  CI (99.9%): [194.130, 196.333] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 66.18% complete, ETA 00:19:51
# Fork: 1 of 2
# Warmup Iteration   1: 253.611 ns/op
# Warmup Iteration   2: 209.193 ns/op
# Warmup Iteration   3: 151.593 ns/op
Iteration   1: 151.313 ns/op
Iteration   2: 151.317 ns/op
Iteration   3: 151.831 ns/op
Iteration   4: 151.679 ns/op
Iteration   5: 151.545 ns/op

# Run progress: 66.22% complete, ETA 00:19:50
# Fork: 2 of 2
# Warmup Iteration   1: 233.737 ns/op
# Warmup Iteration   2: 221.880 ns/op
# Warmup Iteration   3: 151.294 ns/op
Iteration   1: 151.786 ns/op
Iteration   2: 151.465 ns/op
Iteration   3: 151.870 ns/op
Iteration   4: 151.858 ns/op
Iteration   5: 151.604 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  151.627 ±(99.9%) 0.323 ns/op [Average]
  (min, avg, max) = (151.313, 151.627, 151.870), stdev = 0.214
  CI (99.9%): [151.304, 151.950] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 66.25% complete, ETA 00:19:48
# Fork: 1 of 2
# Warmup Iteration   1: 23.664 ns/op
# Warmup Iteration   2: 26.560 ns/op
# Warmup Iteration   3: 19.034 ns/op
Iteration   1: 19.026 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.942 ns/op
Iteration   4: 18.840 ns/op
Iteration   5: 18.839 ns/op

# Run progress: 66.28% complete, ETA 00:19:47
# Fork: 2 of 2
# Warmup Iteration   1: 25.105 ns/op
# Warmup Iteration   2: 29.155 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 19.000 ns/op
Iteration   2: 18.966 ns/op
Iteration   3: 18.950 ns/op
Iteration   4: 18.845 ns/op
Iteration   5: 18.849 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (18.839, 18.923, 19.026), stdev = 0.072
  CI (99.9%): [18.813, 19.032] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 66.32% complete, ETA 00:19:46
# Fork: 1 of 2
# Warmup Iteration   1: 10590.722 ns/op
# Warmup Iteration   2: 1221.079 ns/op
# Warmup Iteration   3: 862.404 ns/op
Iteration   1: 866.988 ns/op
Iteration   2: 869.650 ns/op
Iteration   3: 862.905 ns/op
Iteration   4: 863.714 ns/op
Iteration   5: 869.922 ns/op

# Run progress: 66.35% complete, ETA 00:19:45
# Fork: 2 of 2
# Warmup Iteration   1: 2300.402 ns/op
# Warmup Iteration   2: 1092.800 ns/op
# Warmup Iteration   3: 765.244 ns/op
Iteration   1: 757.478 ns/op
Iteration   2: 757.447 ns/op
Iteration   3: 759.650 ns/op
Iteration   4: 1332.417 ns/op
Iteration   5: 1155.283 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  909.545 ±(99.9%) 283.821 ns/op [Average]
  (min, avg, max) = (757.447, 909.545, 1332.417), stdev = 187.730
  CI (99.9%): [625.724, 1193.367] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 66.39% complete, ETA 00:19:44
# Fork: 1 of 2
# Warmup Iteration   1: 7688.413 ns/op
# Warmup Iteration   2: 1073.102 ns/op
# Warmup Iteration   3: 747.051 ns/op
Iteration   1: 747.446 ns/op
Iteration   2: 749.606 ns/op
Iteration   3: 748.311 ns/op
Iteration   4: 746.478 ns/op
Iteration   5: 748.246 ns/op

# Run progress: 66.42% complete, ETA 00:19:42
# Fork: 2 of 2
# Warmup Iteration   1: 9463.475 ns/op
# Warmup Iteration   2: 1053.446 ns/op
# Warmup Iteration   3: 751.980 ns/op
Iteration   1: 757.257 ns/op
Iteration   2: 756.409 ns/op
Iteration   3: 755.098 ns/op
Iteration   4: 755.151 ns/op
Iteration   5: 753.605 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  751.761 ±(99.9%) 6.239 ns/op [Average]
  (min, avg, max) = (746.478, 751.761, 757.257), stdev = 4.127
  CI (99.9%): [745.522, 758.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 66.46% complete, ETA 00:19:41
# Fork: 1 of 2
# Warmup Iteration   1: 14018.314 ns/op
# Warmup Iteration   2: 1039.106 ns/op
# Warmup Iteration   3: 860.771 ns/op
Iteration   1: 780.502 ns/op
Iteration   2: 779.114 ns/op
Iteration   3: 780.160 ns/op
Iteration   4: 778.549 ns/op
Iteration   5: 778.396 ns/op

# Run progress: 66.49% complete, ETA 00:19:40
# Fork: 2 of 2
# Warmup Iteration   1: 26589.257 ns/op
# Warmup Iteration   2: 1085.410 ns/op
# Warmup Iteration   3: 856.352 ns/op
Iteration   1: 786.316 ns/op
Iteration   2: 783.689 ns/op
Iteration   3: 784.993 ns/op
Iteration   4: 784.643 ns/op
Iteration   5: 784.798 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  782.116 ±(99.9%) 4.618 ns/op [Average]
  (min, avg, max) = (778.396, 782.116, 786.316), stdev = 3.055
  CI (99.9%): [777.498, 786.734] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 66.53% complete, ETA 00:19:39
# Fork: 1 of 2
# Warmup Iteration   1: 2370.108 ns/op
# Warmup Iteration   2: 1620.080 ns/op
# Warmup Iteration   3: 1225.019 ns/op
Iteration   1: 1219.364 ns/op
Iteration   2: 1229.596 ns/op
Iteration   3: 1224.768 ns/op
Iteration   4: 1230.417 ns/op
Iteration   5: 1235.250 ns/op

# Run progress: 66.56% complete, ETA 00:19:37
# Fork: 2 of 2
# Warmup Iteration   1: 2908.092 ns/op
# Warmup Iteration   2: 1648.280 ns/op
# Warmup Iteration   3: 1230.524 ns/op
Iteration   1: 1225.931 ns/op
Iteration   2: 1221.378 ns/op
Iteration   3: 1229.272 ns/op
Iteration   4: 1236.820 ns/op
Iteration   5: 1232.234 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1228.503 ±(99.9%) 8.566 ns/op [Average]
  (min, avg, max) = (1219.364, 1228.503, 1236.820), stdev = 5.666
  CI (99.9%): [1219.937, 1237.069] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 66.60% complete, ETA 00:19:36
# Fork: 1 of 2
# Warmup Iteration   1: 15412.927 ns/op
# Warmup Iteration   2: 5013.133 ns/op
# Warmup Iteration   3: 4270.881 ns/op
Iteration   1: 3923.632 ns/op
Iteration   2: 3927.121 ns/op
Iteration   3: 3921.142 ns/op
Iteration   4: 3903.199 ns/op
Iteration   5: 3898.490 ns/op

# Run progress: 66.63% complete, ETA 00:19:35
# Fork: 2 of 2
# Warmup Iteration   1: 19753.579 ns/op
# Warmup Iteration   2: 5597.734 ns/op
# Warmup Iteration   3: 4737.543 ns/op
Iteration   1: 4369.399 ns/op
Iteration   2: 4369.503 ns/op
Iteration   3: 4365.754 ns/op
Iteration   4: 4353.050 ns/op
Iteration   5: 4338.812 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4137.010 ±(99.9%) 354.748 ns/op [Average]
  (min, avg, max) = (3898.490, 4137.010, 4369.503), stdev = 234.644
  CI (99.9%): [3782.262, 4491.759] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 66.67% complete, ETA 00:19:34
# Fork: 1 of 2
# Warmup Iteration   1: 25.392 ns/op
# Warmup Iteration   2: 30.421 ns/op
# Warmup Iteration   3: 19.037 ns/op
Iteration   1: 19.001 ns/op
Iteration   2: 18.988 ns/op
Iteration   3: 18.945 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.856 ns/op

# Run progress: 66.70% complete, ETA 00:19:33
# Fork: 2 of 2
# Warmup Iteration   1: 25.531 ns/op
# Warmup Iteration   2: 28.050 ns/op
# Warmup Iteration   3: 19.013 ns/op
Iteration   1: 18.970 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.951 ns/op
Iteration   4: 18.843 ns/op
Iteration   5: 18.851 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (18.829, 18.919, 19.001), stdev = 0.067
  CI (99.9%): [18.819, 19.020] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 66.74% complete, ETA 00:19:31
# Fork: 1 of 2
# Warmup Iteration   1: 10952.408 ns/op
# Warmup Iteration   2: 1065.439 ns/op
# Warmup Iteration   3: 750.607 ns/op
Iteration   1: 749.839 ns/op
Iteration   2: 750.317 ns/op
Iteration   3: 750.612 ns/op
Iteration   4: 750.587 ns/op
Iteration   5: 751.482 ns/op

# Run progress: 66.77% complete, ETA 00:19:30
# Fork: 2 of 2
# Warmup Iteration   1: 13435.758 ns/op
# Warmup Iteration   2: 1011.675 ns/op
# Warmup Iteration   3: 811.829 ns/op
Iteration   1: 741.342 ns/op
Iteration   2: 756.279 ns/op
Iteration   3: 750.494 ns/op
Iteration   4: 759.493 ns/op
Iteration   5: 750.636 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  751.108 ±(99.9%) 7.054 ns/op [Average]
  (min, avg, max) = (741.342, 751.108, 759.493), stdev = 4.666
  CI (99.9%): [744.054, 758.162] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 66.81% complete, ETA 00:19:29
# Fork: 1 of 2
# Warmup Iteration   1: 18007.829 ns/op
# Warmup Iteration   2: 1231.561 ns/op
# Warmup Iteration   3: 913.488 ns/op
Iteration   1: 829.519 ns/op
Iteration   2: 828.454 ns/op
Iteration   3: 828.258 ns/op
Iteration   4: 828.611 ns/op
Iteration   5: 829.898 ns/op

# Run progress: 66.84% complete, ETA 00:19:28
# Fork: 2 of 2
# Warmup Iteration   1: 7934.348 ns/op
# Warmup Iteration   2: 1206.186 ns/op
# Warmup Iteration   3: 838.801 ns/op
Iteration   1: 839.664 ns/op
Iteration   2: 829.359 ns/op
Iteration   3: 829.213 ns/op
Iteration   4: 829.733 ns/op
Iteration   5: 830.390 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  830.310 ±(99.9%) 5.072 ns/op [Average]
  (min, avg, max) = (828.258, 830.310, 839.664), stdev = 3.355
  CI (99.9%): [825.238, 835.382] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 66.88% complete, ETA 00:19:26
# Fork: 1 of 2
# Warmup Iteration   1: 7704.628 ns/op
# Warmup Iteration   2: 1302.823 ns/op
# Warmup Iteration   3: 906.474 ns/op
Iteration   1: 907.242 ns/op
Iteration   2: 907.084 ns/op
Iteration   3: 906.913 ns/op
Iteration   4: 912.309 ns/op
Iteration   5: 909.134 ns/op

# Run progress: 66.91% complete, ETA 00:19:25
# Fork: 2 of 2
# Warmup Iteration   1: 11374.111 ns/op
# Warmup Iteration   2: 1269.124 ns/op
# Warmup Iteration   3: 998.663 ns/op
Iteration   1: 912.385 ns/op
Iteration   2: 913.051 ns/op
Iteration   3: 911.461 ns/op
Iteration   4: 914.307 ns/op
Iteration   5: 914.191 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  910.808 ±(99.9%) 4.463 ns/op [Average]
  (min, avg, max) = (906.913, 910.808, 914.307), stdev = 2.952
  CI (99.9%): [906.344, 915.271] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 66.94% complete, ETA 00:19:24
# Fork: 1 of 2
# Warmup Iteration   1: 1383.860 ns/op
# Warmup Iteration   2: 1141.863 ns/op
# Warmup Iteration   3: 869.086 ns/op
Iteration   1: 869.465 ns/op
Iteration   2: 869.971 ns/op
Iteration   3: 870.353 ns/op
Iteration   4: 869.511 ns/op
Iteration   5: 870.383 ns/op

# Run progress: 66.98% complete, ETA 00:19:23
# Fork: 2 of 2
# Warmup Iteration   1: 1383.882 ns/op
# Warmup Iteration   2: 1143.441 ns/op
# Warmup Iteration   3: 867.353 ns/op
Iteration   1: 867.475 ns/op
Iteration   2: 866.908 ns/op
Iteration   3: 866.373 ns/op
Iteration   4: 868.291 ns/op
Iteration   5: 868.176 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  868.691 ±(99.9%) 2.196 ns/op [Average]
  (min, avg, max) = (866.373, 868.691, 870.383), stdev = 1.452
  CI (99.9%): [866.495, 870.887] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 67.01% complete, ETA 00:19:22
# Fork: 1 of 2
# Warmup Iteration   1: 1800.068 ns/op
# Warmup Iteration   2: 1187.190 ns/op
# Warmup Iteration   3: 799.185 ns/op
Iteration   1: 799.318 ns/op
Iteration   2: 799.732 ns/op
Iteration   3: 799.183 ns/op
Iteration   4: 800.046 ns/op
Iteration   5: 799.368 ns/op

# Run progress: 67.05% complete, ETA 00:19:20
# Fork: 2 of 2
# Warmup Iteration   1: 1784.228 ns/op
# Warmup Iteration   2: 1157.338 ns/op
# Warmup Iteration   3: 831.888 ns/op
Iteration   1: 832.005 ns/op
Iteration   2: 831.852 ns/op
Iteration   3: 831.352 ns/op
Iteration   4: 829.811 ns/op
Iteration   5: 827.476 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  815.014 ±(99.9%) 24.754 ns/op [Average]
  (min, avg, max) = (799.183, 815.014, 832.005), stdev = 16.373
  CI (99.9%): [790.260, 839.768] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 67.08% complete, ETA 00:19:19
# Fork: 1 of 2
# Warmup Iteration   1: 23.875 ns/op
# Warmup Iteration   2: 26.551 ns/op
# Warmup Iteration   3: 18.992 ns/op
Iteration   1: 18.988 ns/op
Iteration   2: 18.957 ns/op
Iteration   3: 18.944 ns/op
Iteration   4: 18.835 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 67.12% complete, ETA 00:19:18
# Fork: 2 of 2
# Warmup Iteration   1: 23.884 ns/op
# Warmup Iteration   2: 30.844 ns/op
# Warmup Iteration   3: 19.555 ns/op
Iteration   1: 19.373 ns/op
Iteration   2: 19.458 ns/op
Iteration   3: 19.459 ns/op
Iteration   4: 19.613 ns/op
Iteration   5: 19.542 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.201 ±(99.9%) 0.473 ns/op [Average]
  (min, avg, max) = (18.835, 19.201, 19.613), stdev = 0.313
  CI (99.9%): [18.728, 19.674] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 67.15% complete, ETA 00:19:17
# Fork: 1 of 2
# Warmup Iteration   1: 553.943 ns/op
# Warmup Iteration   2: 443.393 ns/op
# Warmup Iteration   3: 289.627 ns/op
Iteration   1: 289.907 ns/op
Iteration   2: 287.614 ns/op
Iteration   3: 287.651 ns/op
Iteration   4: 289.076 ns/op
Iteration   5: 288.502 ns/op

# Run progress: 67.19% complete, ETA 00:19:15
# Fork: 2 of 2
# Warmup Iteration   1: 454.972 ns/op
# Warmup Iteration   2: 414.288 ns/op
# Warmup Iteration   3: 288.355 ns/op
Iteration   1: 287.849 ns/op
Iteration   2: 287.654 ns/op
Iteration   3: 289.488 ns/op
Iteration   4: 288.189 ns/op
Iteration   5: 289.161 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  288.509 ±(99.9%) 1.282 ns/op [Average]
  (min, avg, max) = (287.614, 288.509, 289.907), stdev = 0.848
  CI (99.9%): [287.228, 289.791] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 67.22% complete, ETA 00:19:14
# Fork: 1 of 2
# Warmup Iteration   1: 3143.651 ns/op
# Warmup Iteration   2: 591.853 ns/op
# Warmup Iteration   3: 443.189 ns/op
Iteration   1: 443.618 ns/op
Iteration   2: 443.392 ns/op
Iteration   3: 443.553 ns/op
Iteration   4: 443.145 ns/op
Iteration   5: 443.150 ns/op

# Run progress: 67.26% complete, ETA 00:19:13
# Fork: 2 of 2
# Warmup Iteration   1: 4138.802 ns/op
# Warmup Iteration   2: 572.073 ns/op
# Warmup Iteration   3: 425.464 ns/op
Iteration   1: 425.656 ns/op
Iteration   2: 425.726 ns/op
Iteration   3: 425.571 ns/op
Iteration   4: 425.480 ns/op
Iteration   5: 425.650 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  434.494 ±(99.9%) 14.150 ns/op [Average]
  (min, avg, max) = (425.480, 434.494, 443.618), stdev = 9.359
  CI (99.9%): [420.345, 448.644] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 67.29% complete, ETA 00:19:12
# Fork: 1 of 2
# Warmup Iteration   1: 2889.843 ns/op
# Warmup Iteration   2: 620.487 ns/op
# Warmup Iteration   3: 440.402 ns/op
Iteration   1: 440.322 ns/op
Iteration   2: 440.309 ns/op
Iteration   3: 440.341 ns/op
Iteration   4: 440.295 ns/op
Iteration   5: 440.593 ns/op

# Run progress: 67.33% complete, ETA 00:19:11
# Fork: 2 of 2
# Warmup Iteration   1: 2822.816 ns/op
# Warmup Iteration   2: 592.501 ns/op
# Warmup Iteration   3: 439.887 ns/op
Iteration   1: 439.857 ns/op
Iteration   2: 440.012 ns/op
Iteration   3: 439.835 ns/op
Iteration   4: 439.711 ns/op
Iteration   5: 439.778 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  440.105 ±(99.9%) 0.457 ns/op [Average]
  (min, avg, max) = (439.711, 440.105, 440.593), stdev = 0.303
  CI (99.9%): [439.648, 440.563] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 67.36% complete, ETA 00:19:09
# Fork: 1 of 2
# Warmup Iteration   1: 1395.723 ns/op
# Warmup Iteration   2: 1143.511 ns/op
# Warmup Iteration   3: 882.172 ns/op
Iteration   1: 882.379 ns/op
Iteration   2: 882.245 ns/op
Iteration   3: 881.892 ns/op
Iteration   4: 882.670 ns/op
Iteration   5: 882.448 ns/op

# Run progress: 67.40% complete, ETA 00:19:08
# Fork: 2 of 2
# Warmup Iteration   1: 1622.237 ns/op
# Warmup Iteration   2: 1132.932 ns/op
# Warmup Iteration   3: 859.177 ns/op
Iteration   1: 860.873 ns/op
Iteration   2: 860.101 ns/op
Iteration   3: 860.282 ns/op
Iteration   4: 860.078 ns/op
Iteration   5: 860.321 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  871.329 ±(99.9%) 17.532 ns/op [Average]
  (min, avg, max) = (860.078, 871.329, 882.670), stdev = 11.596
  CI (99.9%): [853.797, 888.861] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 67.43% complete, ETA 00:19:07
# Fork: 1 of 2
# Warmup Iteration   1: 9385.235 ns/op
# Warmup Iteration   2: 5096.617 ns/op
# Warmup Iteration   3: 3558.163 ns/op
Iteration   1: 3553.149 ns/op
Iteration   2: 3555.763 ns/op
Iteration   3: 3554.313 ns/op
Iteration   4: 3537.346 ns/op
Iteration   5: 3535.213 ns/op

# Run progress: 67.47% complete, ETA 00:19:06
# Fork: 2 of 2
# Warmup Iteration   1: 10054.855 ns/op
# Warmup Iteration   2: 4526.360 ns/op
# Warmup Iteration   3: 3528.903 ns/op
Iteration   1: 3528.723 ns/op
Iteration   2: 3537.570 ns/op
Iteration   3: 3540.211 ns/op
Iteration   4: 3512.288 ns/op
Iteration   5: 3527.594 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3538.217 ±(99.9%) 20.652 ns/op [Average]
  (min, avg, max) = (3512.288, 3538.217, 3555.763), stdev = 13.660
  CI (99.9%): [3517.565, 3558.869] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 67.50% complete, ETA 00:19:04
# Fork: 1 of 2
# Warmup Iteration   1: 24.114 ns/op
# Warmup Iteration   2: 27.615 ns/op
# Warmup Iteration   3: 19.031 ns/op
Iteration   1: 19.000 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 18.852 ns/op
Iteration   5: 18.850 ns/op

# Run progress: 67.53% complete, ETA 00:19:03
# Fork: 2 of 2
# Warmup Iteration   1: 24.030 ns/op
# Warmup Iteration   2: 27.573 ns/op
# Warmup Iteration   3: 19.026 ns/op
Iteration   1: 19.013 ns/op
Iteration   2: 18.959 ns/op
Iteration   3: 18.930 ns/op
Iteration   4: 18.843 ns/op
Iteration   5: 18.843 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.922 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (18.843, 18.922, 19.013), stdev = 0.068
  CI (99.9%): [18.819, 19.025] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 67.57% complete, ETA 00:19:02
# Fork: 1 of 2
# Warmup Iteration   1: 913.876 ns/op
# Warmup Iteration   2: 605.970 ns/op
# Warmup Iteration   3: 404.158 ns/op
Iteration   1: 411.493 ns/op
Iteration   2: 408.713 ns/op
Iteration   3: 414.343 ns/op
Iteration   4: 408.397 ns/op
Iteration   5: 407.267 ns/op

# Run progress: 67.60% complete, ETA 00:19:01
# Fork: 2 of 2
# Warmup Iteration   1: 1102.879 ns/op
# Warmup Iteration   2: 569.426 ns/op
# Warmup Iteration   3: 403.496 ns/op
Iteration   1: 407.297 ns/op
Iteration   2: 407.338 ns/op
Iteration   3: 407.644 ns/op
Iteration   4: 422.090 ns/op
Iteration   5: 404.590 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  409.917 ±(99.9%) 7.611 ns/op [Average]
  (min, avg, max) = (404.590, 409.917, 422.090), stdev = 5.034
  CI (99.9%): [402.306, 417.528] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 67.64% complete, ETA 00:19:00
# Fork: 1 of 2
# Warmup Iteration   1: 23434.469 ns/op
# Warmup Iteration   2: 948.218 ns/op
# Warmup Iteration   3: 623.977 ns/op
Iteration   1: 572.884 ns/op
Iteration   2: 571.976 ns/op
Iteration   3: 571.945 ns/op
Iteration   4: 567.210 ns/op
Iteration   5: 566.156 ns/op

# Run progress: 67.67% complete, ETA 00:18:58
# Fork: 2 of 2
# Warmup Iteration   1: 20568.361 ns/op
# Warmup Iteration   2: 895.453 ns/op
# Warmup Iteration   3: 619.008 ns/op
Iteration   1: 558.699 ns/op
Iteration   2: 552.304 ns/op
Iteration   3: 552.463 ns/op
Iteration   4: 552.590 ns/op
Iteration   5: 551.340 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  561.757 ±(99.9%) 13.882 ns/op [Average]
  (min, avg, max) = (551.340, 561.757, 572.884), stdev = 9.182
  CI (99.9%): [547.875, 575.638] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 67.71% complete, ETA 00:18:57
# Fork: 1 of 2
# Warmup Iteration   1: 10953.519 ns/op
# Warmup Iteration   2: 536.655 ns/op
# Warmup Iteration   3: 380.860 ns/op
Iteration   1: 381.295 ns/op
Iteration   2: 385.071 ns/op
Iteration   3: 380.707 ns/op
Iteration   4: 380.911 ns/op
Iteration   5: 380.636 ns/op

# Run progress: 67.74% complete, ETA 00:18:56
# Fork: 2 of 2
# Warmup Iteration   1: 31799.363 ns/op
# Warmup Iteration   2: 669.746 ns/op
# Warmup Iteration   3: 425.218 ns/op
Iteration   1: 391.058 ns/op
Iteration   2: 386.964 ns/op
Iteration   3: 387.415 ns/op
Iteration   4: 386.336 ns/op
Iteration   5: 389.244 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  384.964 ±(99.9%) 5.836 ns/op [Average]
  (min, avg, max) = (380.636, 384.964, 391.058), stdev = 3.860
  CI (99.9%): [379.128, 390.799] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 67.78% complete, ETA 00:18:55
# Fork: 1 of 2
# Warmup Iteration   1: 1578.131 ns/op
# Warmup Iteration   2: 1176.674 ns/op
# Warmup Iteration   3: 883.161 ns/op
Iteration   1: 888.649 ns/op
Iteration   2: 885.932 ns/op
Iteration   3: 884.547 ns/op
Iteration   4: 878.027 ns/op
Iteration   5: 888.201 ns/op

# Run progress: 67.81% complete, ETA 00:18:53
# Fork: 2 of 2
# Warmup Iteration   1: 1421.640 ns/op
# Warmup Iteration   2: 1160.617 ns/op
# Warmup Iteration   3: 882.117 ns/op
Iteration   1: 881.193 ns/op
Iteration   2: 885.537 ns/op
Iteration   3: 885.695 ns/op
Iteration   4: 879.174 ns/op
Iteration   5: 884.110 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  884.106 ±(99.9%) 5.410 ns/op [Average]
  (min, avg, max) = (878.027, 884.106, 888.649), stdev = 3.579
  CI (99.9%): [878.696, 889.517] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 67.85% complete, ETA 00:18:52
# Fork: 1 of 2
# Warmup Iteration   1: 8887.159 ns/op
# Warmup Iteration   2: 5008.452 ns/op
# Warmup Iteration   3: 3520.335 ns/op
Iteration   1: 3521.167 ns/op
Iteration   2: 3521.332 ns/op
Iteration   3: 3520.548 ns/op
Iteration   4: 3505.724 ns/op
Iteration   5: 3503.861 ns/op

# Run progress: 67.88% complete, ETA 00:18:51
# Fork: 2 of 2
# Warmup Iteration   1: 9970.956 ns/op
# Warmup Iteration   2: 5160.815 ns/op
# Warmup Iteration   3: 3549.805 ns/op
Iteration   1: 3550.139 ns/op
Iteration   2: 3549.232 ns/op
Iteration   3: 3549.929 ns/op
Iteration   4: 3527.123 ns/op
Iteration   5: 3524.045 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3527.310 ±(99.9%) 25.987 ns/op [Average]
  (min, avg, max) = (3503.861, 3527.310, 3550.139), stdev = 17.189
  CI (99.9%): [3501.323, 3553.297] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 67.92% complete, ETA 00:18:50
# Fork: 1 of 2
# Warmup Iteration   1: 23.703 ns/op
# Warmup Iteration   2: 26.871 ns/op
# Warmup Iteration   3: 19.047 ns/op
Iteration   1: 18.981 ns/op
Iteration   2: 18.964 ns/op
Iteration   3: 18.945 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.855 ns/op

# Run progress: 67.95% complete, ETA 00:18:48
# Fork: 2 of 2
# Warmup Iteration   1: 23.223 ns/op
# Warmup Iteration   2: 28.555 ns/op
# Warmup Iteration   3: 19.042 ns/op
Iteration   1: 18.994 ns/op
Iteration   2: 18.938 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 18.836 ns/op
Iteration   5: 18.843 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (18.831, 18.915, 18.994), stdev = 0.066
  CI (99.9%): [18.815, 19.015] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 67.99% complete, ETA 00:18:47
# Fork: 1 of 2
# Warmup Iteration   1: 134.336 ns/op
# Warmup Iteration   2: 137.570 ns/op
# Warmup Iteration   3: 92.476 ns/op
Iteration   1: 92.575 ns/op
Iteration   2: 92.567 ns/op
Iteration   3: 92.482 ns/op
Iteration   4: 92.885 ns/op
Iteration   5: 92.898 ns/op

# Run progress: 68.02% complete, ETA 00:18:46
# Fork: 2 of 2
# Warmup Iteration   1: 163.107 ns/op
# Warmup Iteration   2: 137.847 ns/op
# Warmup Iteration   3: 91.697 ns/op
Iteration   1: 91.693 ns/op
Iteration   2: 91.752 ns/op
Iteration   3: 91.780 ns/op
Iteration   4: 92.209 ns/op
Iteration   5: 92.239 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  92.308 ±(99.9%) 0.682 ns/op [Average]
  (min, avg, max) = (91.693, 92.308, 92.898), stdev = 0.451
  CI (99.9%): [91.626, 92.990] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 68.06% complete, ETA 00:18:45
# Fork: 1 of 2
# Warmup Iteration   1: 1576.292 ns/op
# Warmup Iteration   2: 140.703 ns/op
# Warmup Iteration   3: 117.370 ns/op
Iteration   1: 117.552 ns/op
Iteration   2: 117.429 ns/op
Iteration   3: 117.468 ns/op
Iteration   4: 117.727 ns/op
Iteration   5: 117.633 ns/op

# Run progress: 68.09% complete, ETA 00:18:44
# Fork: 2 of 2
# Warmup Iteration   1: 1247.443 ns/op
# Warmup Iteration   2: 138.932 ns/op
# Warmup Iteration   3: 117.172 ns/op
Iteration   1: 117.103 ns/op
Iteration   2: 117.184 ns/op
Iteration   3: 117.176 ns/op
Iteration   4: 117.474 ns/op
Iteration   5: 117.520 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.427 ±(99.9%) 0.314 ns/op [Average]
  (min, avg, max) = (117.103, 117.427, 117.727), stdev = 0.208
  CI (99.9%): [117.113, 117.740] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 68.13% complete, ETA 00:18:42
# Fork: 1 of 2
# Warmup Iteration   1: 675.554 ns/op
# Warmup Iteration   2: 165.342 ns/op
# Warmup Iteration   3: 114.556 ns/op
Iteration   1: 114.693 ns/op
Iteration   2: 114.649 ns/op
Iteration   3: 114.680 ns/op
Iteration   4: 114.699 ns/op
Iteration   5: 114.739 ns/op

# Run progress: 68.16% complete, ETA 00:18:41
# Fork: 2 of 2
# Warmup Iteration   1: 520.949 ns/op
# Warmup Iteration   2: 162.536 ns/op
# Warmup Iteration   3: 114.535 ns/op
Iteration   1: 114.632 ns/op
Iteration   2: 114.480 ns/op
Iteration   3: 114.589 ns/op
Iteration   4: 114.701 ns/op
Iteration   5: 114.725 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.659 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (114.480, 114.659, 114.739), stdev = 0.077
  CI (99.9%): [114.542, 114.775] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 68.19% complete, ETA 00:18:40
# Fork: 1 of 2
# Warmup Iteration   1: 197.527 ns/op
# Warmup Iteration   2: 190.783 ns/op
# Warmup Iteration   3: 136.832 ns/op
Iteration   1: 136.916 ns/op
Iteration   2: 136.913 ns/op
Iteration   3: 145.356 ns/op
Iteration   4: 137.450 ns/op
Iteration   5: 137.489 ns/op

# Run progress: 68.23% complete, ETA 00:18:39
# Fork: 2 of 2
# Warmup Iteration   1: 200.144 ns/op
# Warmup Iteration   2: 209.313 ns/op
# Warmup Iteration   3: 136.913 ns/op
Iteration   1: 136.932 ns/op
Iteration   2: 136.942 ns/op
Iteration   3: 136.896 ns/op
Iteration   4: 137.440 ns/op
Iteration   5: 137.419 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.975 ±(99.9%) 3.941 ns/op [Average]
  (min, avg, max) = (136.896, 137.975, 145.356), stdev = 2.607
  CI (99.9%): [134.035, 141.916] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 68.26% complete, ETA 00:18:37
# Fork: 1 of 2
# Warmup Iteration   1: 226.756 ns/op
# Warmup Iteration   2: 204.149 ns/op
# Warmup Iteration   3: 146.741 ns/op
Iteration   1: 146.556 ns/op
Iteration   2: 146.394 ns/op
Iteration   3: 146.597 ns/op
Iteration   4: 146.512 ns/op
Iteration   5: 146.386 ns/op

# Run progress: 68.30% complete, ETA 00:18:36
# Fork: 2 of 2
# Warmup Iteration   1: 223.605 ns/op
# Warmup Iteration   2: 216.344 ns/op
# Warmup Iteration   3: 146.755 ns/op
Iteration   1: 146.722 ns/op
Iteration   2: 146.550 ns/op
Iteration   3: 146.599 ns/op
Iteration   4: 146.498 ns/op
Iteration   5: 146.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.543 ±(99.9%) 0.154 ns/op [Average]
  (min, avg, max) = (146.386, 146.543, 146.722), stdev = 0.102
  CI (99.9%): [146.389, 146.697] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 68.33% complete, ETA 00:18:35
# Fork: 1 of 2
# Warmup Iteration   1: 23.767 ns/op
# Warmup Iteration   2: 30.839 ns/op
# Warmup Iteration   3: 19.087 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.957 ns/op
Iteration   3: 18.992 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.863 ns/op

# Run progress: 68.37% complete, ETA 00:18:34
# Fork: 2 of 2
# Warmup Iteration   1: 23.726 ns/op
# Warmup Iteration   2: 30.941 ns/op
# Warmup Iteration   3: 19.033 ns/op
Iteration   1: 19.011 ns/op
Iteration   2: 18.980 ns/op
Iteration   3: 18.962 ns/op
Iteration   4: 18.844 ns/op
Iteration   5: 18.845 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.928 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (18.831, 18.928, 19.011), stdev = 0.073
  CI (99.9%): [18.818, 19.037] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 68.40% complete, ETA 00:18:33
# Fork: 1 of 2
# Warmup Iteration   1: 3583.014 ns/op
# Warmup Iteration   2: 1136.282 ns/op
# Warmup Iteration   3: 803.304 ns/op
Iteration   1: 795.292 ns/op
Iteration   2: 800.437 ns/op
Iteration   3: 808.046 ns/op
Iteration   4: 805.596 ns/op
Iteration   5: 804.030 ns/op

# Run progress: 68.44% complete, ETA 00:18:31
# Fork: 2 of 2
# Warmup Iteration   1: 3379.866 ns/op
# Warmup Iteration   2: 1157.810 ns/op
# Warmup Iteration   3: 798.137 ns/op
Iteration   1: 798.608 ns/op
Iteration   2: 805.098 ns/op
Iteration   3: 802.418 ns/op
Iteration   4: 795.039 ns/op
Iteration   5: 805.162 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  801.973 ±(99.9%) 6.776 ns/op [Average]
  (min, avg, max) = (795.039, 801.973, 808.046), stdev = 4.482
  CI (99.9%): [795.197, 808.748] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 68.47% complete, ETA 00:18:30
# Fork: 1 of 2
# Warmup Iteration   1: 33917.421 ns/op
# Warmup Iteration   2: 1382.489 ns/op
# Warmup Iteration   3: 982.990 ns/op
Iteration   1: 832.288 ns/op
Iteration   2: 830.765 ns/op
Iteration   3: 832.645 ns/op
Iteration   4: 832.287 ns/op
Iteration   5: 824.775 ns/op

# Run progress: 68.51% complete, ETA 00:18:29
# Fork: 2 of 2
# Warmup Iteration   1: 11930.291 ns/op
# Warmup Iteration   2: 1061.971 ns/op
# Warmup Iteration   3: 910.728 ns/op
Iteration   1: 840.736 ns/op
Iteration   2: 841.623 ns/op
Iteration   3: 838.696 ns/op
Iteration   4: 840.459 ns/op
Iteration   5: 854.264 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  836.854 ±(99.9%) 12.341 ns/op [Average]
  (min, avg, max) = (824.775, 836.854, 854.264), stdev = 8.163
  CI (99.9%): [824.513, 849.195] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 68.54% complete, ETA 00:18:28
# Fork: 1 of 2
# Warmup Iteration   1: 10849.882 ns/op
# Warmup Iteration   2: 1365.540 ns/op
# Warmup Iteration   3: 842.336 ns/op
Iteration   1: 837.613 ns/op
Iteration   2: 840.449 ns/op
Iteration   3: 845.089 ns/op
Iteration   4: 842.252 ns/op
Iteration   5: 841.133 ns/op

# Run progress: 68.58% complete, ETA 00:18:26
# Fork: 2 of 2
# Warmup Iteration   1: 10708.008 ns/op
# Warmup Iteration   2: 1177.021 ns/op
# Warmup Iteration   3: 848.941 ns/op
Iteration   1: 844.923 ns/op
Iteration   2: 848.138 ns/op
Iteration   3: 849.370 ns/op
Iteration   4: 850.570 ns/op
Iteration   5: 848.246 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  844.778 ±(99.9%) 6.528 ns/op [Average]
  (min, avg, max) = (837.613, 844.778, 850.570), stdev = 4.318
  CI (99.9%): [838.250, 851.306] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 68.61% complete, ETA 00:18:25
# Fork: 1 of 2
# Warmup Iteration   1: 1260.705 ns/op
# Warmup Iteration   2: 1055.386 ns/op
# Warmup Iteration   3: 791.854 ns/op
Iteration   1: 792.823 ns/op
Iteration   2: 791.135 ns/op
Iteration   3: 791.403 ns/op
Iteration   4: 794.389 ns/op
Iteration   5: 792.107 ns/op

# Run progress: 68.65% complete, ETA 00:18:24
# Fork: 2 of 2
# Warmup Iteration   1: 1434.086 ns/op
# Warmup Iteration   2: 1050.881 ns/op
# Warmup Iteration   3: 796.154 ns/op
Iteration   1: 800.366 ns/op
Iteration   2: 796.146 ns/op
Iteration   3: 798.236 ns/op
Iteration   4: 801.777 ns/op
Iteration   5: 803.981 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  796.236 ±(99.9%) 7.006 ns/op [Average]
  (min, avg, max) = (791.135, 796.236, 803.981), stdev = 4.634
  CI (99.9%): [789.231, 803.242] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 68.68% complete, ETA 00:18:23
# Fork: 1 of 2
# Warmup Iteration   1: 11827.386 ns/op
# Warmup Iteration   2: 6439.855 ns/op
# Warmup Iteration   3: 5032.411 ns/op
Iteration   1: 4586.857 ns/op
Iteration   2: 4585.574 ns/op
Iteration   3: 4576.541 ns/op
Iteration   4: 4565.734 ns/op
Iteration   5: 4564.316 ns/op

# Run progress: 68.72% complete, ETA 00:18:22
# Fork: 2 of 2
# Warmup Iteration   1: 18898.197 ns/op
# Warmup Iteration   2: 5212.273 ns/op
# Warmup Iteration   3: 4399.064 ns/op
Iteration   1: 4047.246 ns/op
Iteration   2: 4035.211 ns/op
Iteration   3: 4058.263 ns/op
Iteration   4: 4032.943 ns/op
Iteration   5: 4030.467 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4308.315 ±(99.9%) 426.578 ns/op [Average]
  (min, avg, max) = (4030.467, 4308.315, 4586.857), stdev = 282.155
  CI (99.9%): [3881.737, 4734.893] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 68.75% complete, ETA 00:18:20
# Fork: 1 of 2
# Warmup Iteration   1: 24.138 ns/op
# Warmup Iteration   2: 29.717 ns/op
# Warmup Iteration   3: 19.025 ns/op
Iteration   1: 18.989 ns/op
Iteration   2: 18.988 ns/op
Iteration   3: 18.953 ns/op
Iteration   4: 18.817 ns/op
Iteration   5: 18.852 ns/op

# Run progress: 68.78% complete, ETA 00:18:19
# Fork: 2 of 2
# Warmup Iteration   1: 23.745 ns/op
# Warmup Iteration   2: 31.056 ns/op
# Warmup Iteration   3: 19.064 ns/op
Iteration   1: 18.995 ns/op
Iteration   2: 18.974 ns/op
Iteration   3: 18.988 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.844 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (18.817, 18.923, 18.995), stdev = 0.077
  CI (99.9%): [18.807, 19.039] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 68.82% complete, ETA 00:18:18
# Fork: 1 of 2
# Warmup Iteration   1: 1884.907 ns/op
# Warmup Iteration   2: 959.457 ns/op
# Warmup Iteration   3: 750.861 ns/op
Iteration   1: 751.075 ns/op
Iteration   2: 750.904 ns/op
Iteration   3: 751.417 ns/op
Iteration   4: 751.510 ns/op
Iteration   5: 752.772 ns/op

# Run progress: 68.85% complete, ETA 00:18:17
# Fork: 2 of 2
# Warmup Iteration   1: 2481.108 ns/op
# Warmup Iteration   2: 1023.578 ns/op
# Warmup Iteration   3: 760.623 ns/op
Iteration   1: 750.390 ns/op
Iteration   2: 750.572 ns/op
Iteration   3: 750.347 ns/op
Iteration   4: 762.250 ns/op
Iteration   5: 750.432 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  752.167 ±(99.9%) 5.470 ns/op [Average]
  (min, avg, max) = (750.347, 752.167, 762.250), stdev = 3.618
  CI (99.9%): [746.696, 757.637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 68.89% complete, ETA 00:18:15
# Fork: 1 of 2
# Warmup Iteration   1: 3131.815 ns/op
# Warmup Iteration   2: 1100.169 ns/op
# Warmup Iteration   3: 803.802 ns/op
Iteration   1: 803.443 ns/op
Iteration   2: 803.385 ns/op
Iteration   3: 804.325 ns/op
Iteration   4: 805.883 ns/op
Iteration   5: 805.281 ns/op

# Run progress: 68.92% complete, ETA 00:18:14
# Fork: 2 of 2
# Warmup Iteration   1: 3046.431 ns/op
# Warmup Iteration   2: 1074.443 ns/op
# Warmup Iteration   3: 807.402 ns/op
Iteration   1: 808.259 ns/op
Iteration   2: 807.940 ns/op
Iteration   3: 807.917 ns/op
Iteration   4: 808.676 ns/op
Iteration   5: 809.373 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  806.448 ±(99.9%) 3.410 ns/op [Average]
  (min, avg, max) = (803.385, 806.448, 809.373), stdev = 2.255
  CI (99.9%): [803.038, 809.858] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 68.96% complete, ETA 00:18:13
# Fork: 1 of 2
# Warmup Iteration   1: 11449.813 ns/op
# Warmup Iteration   2: 1216.083 ns/op
# Warmup Iteration   3: 782.172 ns/op
Iteration   1: 782.781 ns/op
Iteration   2: 784.062 ns/op
Iteration   3: 783.542 ns/op
Iteration   4: 783.318 ns/op
Iteration   5: 781.779 ns/op

# Run progress: 68.99% complete, ETA 00:18:12
# Fork: 2 of 2
# Warmup Iteration   1: 11290.650 ns/op
# Warmup Iteration   2: 1179.000 ns/op
# Warmup Iteration   3: 782.837 ns/op
Iteration   1: 781.749 ns/op
Iteration   2: 781.376 ns/op
Iteration   3: 780.758 ns/op
Iteration   4: 780.183 ns/op
Iteration   5: 780.151 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  781.970 ±(99.9%) 2.122 ns/op [Average]
  (min, avg, max) = (780.151, 781.970, 784.062), stdev = 1.404
  CI (99.9%): [779.848, 784.092] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 69.03% complete, ETA 00:18:11
# Fork: 1 of 2
# Warmup Iteration   1: 1134.843 ns/op
# Warmup Iteration   2: 950.682 ns/op
# Warmup Iteration   3: 718.710 ns/op
Iteration   1: 719.012 ns/op
Iteration   2: 719.346 ns/op
Iteration   3: 719.216 ns/op
Iteration   4: 720.894 ns/op
Iteration   5: 720.926 ns/op

# Run progress: 69.06% complete, ETA 00:18:09
# Fork: 2 of 2
# Warmup Iteration   1: 1644.090 ns/op
# Warmup Iteration   2: 1086.039 ns/op
# Warmup Iteration   3: 718.464 ns/op
Iteration   1: 719.108 ns/op
Iteration   2: 718.703 ns/op
Iteration   3: 718.660 ns/op
Iteration   4: 721.108 ns/op
Iteration   5: 720.475 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  719.745 ±(99.9%) 1.491 ns/op [Average]
  (min, avg, max) = (718.660, 719.745, 721.108), stdev = 0.986
  CI (99.9%): [718.254, 721.236] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 69.10% complete, ETA 00:18:08
# Fork: 1 of 2
# Warmup Iteration   1: 4633.241 ns/op
# Warmup Iteration   2: 1160.309 ns/op
# Warmup Iteration   3: 810.574 ns/op
Iteration   1: 810.535 ns/op
Iteration   2: 810.790 ns/op
Iteration   3: 810.514 ns/op
Iteration   4: 812.254 ns/op
Iteration   5: 812.700 ns/op

# Run progress: 69.13% complete, ETA 00:18:07
# Fork: 2 of 2
# Warmup Iteration   1: 2027.720 ns/op
# Warmup Iteration   2: 1139.598 ns/op
# Warmup Iteration   3: 800.718 ns/op
Iteration   1: 801.705 ns/op
Iteration   2: 802.765 ns/op
Iteration   3: 801.432 ns/op
Iteration   4: 801.111 ns/op
Iteration   5: 801.364 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  806.517 ±(99.9%) 7.813 ns/op [Average]
  (min, avg, max) = (801.111, 806.517, 812.700), stdev = 5.168
  CI (99.9%): [798.703, 814.330] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 69.17% complete, ETA 00:18:06
# Fork: 1 of 2
# Warmup Iteration   1: 23.783 ns/op
# Warmup Iteration   2: 26.748 ns/op
# Warmup Iteration   3: 19.067 ns/op
Iteration   1: 19.016 ns/op
Iteration   2: 18.963 ns/op
Iteration   3: 18.977 ns/op
Iteration   4: 18.819 ns/op
Iteration   5: 18.832 ns/op

# Run progress: 69.20% complete, ETA 00:18:04
# Fork: 2 of 2
# Warmup Iteration   1: 25.565 ns/op
# Warmup Iteration   2: 26.972 ns/op
# Warmup Iteration   3: 19.047 ns/op
Iteration   1: 18.967 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.942 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.836 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.914 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (18.819, 18.914, 19.016), stdev = 0.075
  CI (99.9%): [18.800, 19.028] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 69.24% complete, ETA 00:18:03
# Fork: 1 of 2
# Warmup Iteration   1: 579.071 ns/op
# Warmup Iteration   2: 459.130 ns/op
# Warmup Iteration   3: 318.458 ns/op
Iteration   1: 318.110 ns/op
Iteration   2: 319.354 ns/op
Iteration   3: 320.125 ns/op
Iteration   4: 317.623 ns/op
Iteration   5: 320.053 ns/op

# Run progress: 69.27% complete, ETA 00:18:02
# Fork: 2 of 2
# Warmup Iteration   1: 489.186 ns/op
# Warmup Iteration   2: 448.664 ns/op
# Warmup Iteration   3: 318.632 ns/op
Iteration   1: 320.671 ns/op
Iteration   2: 318.170 ns/op
Iteration   3: 318.753 ns/op
Iteration   4: 317.629 ns/op
Iteration   5: 317.702 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  318.819 ±(99.9%) 1.744 ns/op [Average]
  (min, avg, max) = (317.623, 318.819, 320.671), stdev = 1.153
  CI (99.9%): [317.075, 320.563] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 69.31% complete, ETA 00:18:01
# Fork: 1 of 2
# Warmup Iteration   1: 2268.586 ns/op
# Warmup Iteration   2: 531.375 ns/op
# Warmup Iteration   3: 398.453 ns/op
Iteration   1: 398.913 ns/op
Iteration   2: 398.591 ns/op
Iteration   3: 398.843 ns/op
Iteration   4: 399.160 ns/op
Iteration   5: 399.120 ns/op

# Run progress: 69.34% complete, ETA 00:18:00
# Fork: 2 of 2
# Warmup Iteration   1: 4876.306 ns/op
# Warmup Iteration   2: 561.343 ns/op
# Warmup Iteration   3: 398.461 ns/op
Iteration   1: 398.677 ns/op
Iteration   2: 398.576 ns/op
Iteration   3: 398.510 ns/op
Iteration   4: 399.191 ns/op
Iteration   5: 399.203 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  398.879 ±(99.9%) 0.420 ns/op [Average]
  (min, avg, max) = (398.510, 398.879, 399.203), stdev = 0.278
  CI (99.9%): [398.459, 399.298] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 69.38% complete, ETA 00:17:58
# Fork: 1 of 2
# Warmup Iteration   1: 6782.746 ns/op
# Warmup Iteration   2: 626.602 ns/op
# Warmup Iteration   3: 432.772 ns/op
Iteration   1: 432.759 ns/op
Iteration   2: 432.583 ns/op
Iteration   3: 432.945 ns/op
Iteration   4: 432.677 ns/op
Iteration   5: 433.208 ns/op

# Run progress: 69.41% complete, ETA 00:17:57
# Fork: 2 of 2
# Warmup Iteration   1: 3117.845 ns/op
# Warmup Iteration   2: 590.329 ns/op
# Warmup Iteration   3: 436.486 ns/op
Iteration   1: 436.751 ns/op
Iteration   2: 436.636 ns/op
Iteration   3: 436.821 ns/op
Iteration   4: 437.469 ns/op
Iteration   5: 436.775 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  434.862 ±(99.9%) 3.259 ns/op [Average]
  (min, avg, max) = (432.583, 434.862, 437.469), stdev = 2.155
  CI (99.9%): [431.604, 438.121] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 69.44% complete, ETA 00:17:56
# Fork: 1 of 2
# Warmup Iteration   1: 1272.527 ns/op
# Warmup Iteration   2: 1175.827 ns/op
# Warmup Iteration   3: 739.140 ns/op
Iteration   1: 738.645 ns/op
Iteration   2: 740.832 ns/op
Iteration   3: 739.185 ns/op
Iteration   4: 749.029 ns/op
Iteration   5: 750.002 ns/op

# Run progress: 69.48% complete, ETA 00:17:55
# Fork: 2 of 2
# Warmup Iteration   1: 1430.947 ns/op
# Warmup Iteration   2: 979.218 ns/op
# Warmup Iteration   3: 739.321 ns/op
Iteration   1: 738.134 ns/op
Iteration   2: 739.676 ns/op
Iteration   3: 739.464 ns/op
Iteration   4: 740.154 ns/op
Iteration   5: 740.386 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  741.551 ±(99.9%) 6.468 ns/op [Average]
  (min, avg, max) = (738.134, 741.551, 750.002), stdev = 4.278
  CI (99.9%): [735.082, 748.019] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 69.51% complete, ETA 00:17:53
# Fork: 1 of 2
# Warmup Iteration   1: 17296.381 ns/op
# Warmup Iteration   2: 5068.790 ns/op
# Warmup Iteration   3: 4029.583 ns/op
Iteration   1: 3653.214 ns/op
Iteration   2: 3649.616 ns/op
Iteration   3: 3650.462 ns/op
Iteration   4: 3634.932 ns/op
Iteration   5: 3634.393 ns/op

# Run progress: 69.55% complete, ETA 00:17:52
# Fork: 2 of 2
# Warmup Iteration   1: 16141.281 ns/op
# Warmup Iteration   2: 5273.126 ns/op
# Warmup Iteration   3: 4128.941 ns/op
Iteration   1: 3747.428 ns/op
Iteration   2: 3746.231 ns/op
Iteration   3: 3745.417 ns/op
Iteration   4: 3725.969 ns/op
Iteration   5: 3728.957 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3691.662 ±(99.9%) 76.406 ns/op [Average]
  (min, avg, max) = (3634.393, 3691.662, 3747.428), stdev = 50.538
  CI (99.9%): [3615.256, 3768.068] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 69.58% complete, ETA 00:17:51
# Fork: 1 of 2
# Warmup Iteration   1: 23.900 ns/op
# Warmup Iteration   2: 29.392 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 18.998 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.974 ns/op
Iteration   4: 18.816 ns/op
Iteration   5: 18.852 ns/op

# Run progress: 69.62% complete, ETA 00:17:50
# Fork: 2 of 2
# Warmup Iteration   1: 24.667 ns/op
# Warmup Iteration   2: 27.077 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 19.012 ns/op
Iteration   2: 18.973 ns/op
Iteration   3: 18.932 ns/op
Iteration   4: 18.814 ns/op
Iteration   5: 18.830 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.917 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (18.814, 18.917, 19.012), stdev = 0.080
  CI (99.9%): [18.796, 19.037] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 69.65% complete, ETA 00:17:49
# Fork: 1 of 2
# Warmup Iteration   1: 940.163 ns/op
# Warmup Iteration   2: 601.390 ns/op
# Warmup Iteration   3: 427.846 ns/op
Iteration   1: 429.102 ns/op
Iteration   2: 429.438 ns/op
Iteration   3: 429.234 ns/op
Iteration   4: 426.988 ns/op
Iteration   5: 424.934 ns/op

# Run progress: 69.69% complete, ETA 00:17:47
# Fork: 2 of 2
# Warmup Iteration   1: 1259.539 ns/op
# Warmup Iteration   2: 564.671 ns/op
# Warmup Iteration   3: 435.419 ns/op
Iteration   1: 435.139 ns/op
Iteration   2: 433.568 ns/op
Iteration   3: 439.633 ns/op
Iteration   4: 433.859 ns/op
Iteration   5: 435.120 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  431.702 ±(99.9%) 6.772 ns/op [Average]
  (min, avg, max) = (424.934, 431.702, 439.633), stdev = 4.479
  CI (99.9%): [424.930, 438.473] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 69.72% complete, ETA 00:17:46
# Fork: 1 of 2
# Warmup Iteration   1: 17905.547 ns/op
# Warmup Iteration   2: 687.384 ns/op
# Warmup Iteration   3: 551.322 ns/op
Iteration   1: 506.391 ns/op
Iteration   2: 503.731 ns/op
Iteration   3: 501.528 ns/op
Iteration   4: 500.481 ns/op
Iteration   5: 501.782 ns/op

# Run progress: 69.76% complete, ETA 00:17:45
# Fork: 2 of 2
# Warmup Iteration   1: 18463.594 ns/op
# Warmup Iteration   2: 786.201 ns/op
# Warmup Iteration   3: 570.646 ns/op
Iteration   1: 519.857 ns/op
Iteration   2: 520.741 ns/op
Iteration   3: 518.280 ns/op
Iteration   4: 519.964 ns/op
Iteration   5: 520.257 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  511.301 ±(99.9%) 13.810 ns/op [Average]
  (min, avg, max) = (500.481, 511.301, 520.741), stdev = 9.134
  CI (99.9%): [497.492, 525.111] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 69.79% complete, ETA 00:17:44
# Fork: 1 of 2
# Warmup Iteration   1: 6195.022 ns/op
# Warmup Iteration   2: 489.043 ns/op
# Warmup Iteration   3: 339.826 ns/op
Iteration   1: 341.616 ns/op
Iteration   2: 338.780 ns/op
Iteration   3: 340.754 ns/op
Iteration   4: 339.934 ns/op
Iteration   5: 337.958 ns/op

# Run progress: 69.83% complete, ETA 00:17:42
# Fork: 2 of 2
# Warmup Iteration   1: 2991.982 ns/op
# Warmup Iteration   2: 487.458 ns/op
# Warmup Iteration   3: 340.196 ns/op
Iteration   1: 339.041 ns/op
Iteration   2: 339.445 ns/op
Iteration   3: 343.274 ns/op
Iteration   4: 337.280 ns/op
Iteration   5: 341.620 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  339.970 ±(99.9%) 2.797 ns/op [Average]
  (min, avg, max) = (337.280, 339.970, 343.274), stdev = 1.850
  CI (99.9%): [337.173, 342.767] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 69.86% complete, ETA 00:17:41
# Fork: 1 of 2
# Warmup Iteration   1: 1727.563 ns/op
# Warmup Iteration   2: 1136.031 ns/op
# Warmup Iteration   3: 858.127 ns/op
Iteration   1: 856.022 ns/op
Iteration   2: 855.431 ns/op
Iteration   3: 861.184 ns/op
Iteration   4: 858.774 ns/op
Iteration   5: 860.967 ns/op

# Run progress: 69.90% complete, ETA 00:17:40
# Fork: 2 of 2
# Warmup Iteration   1: 1619.171 ns/op
# Warmup Iteration   2: 1203.729 ns/op
# Warmup Iteration   3: 854.933 ns/op
Iteration   1: 852.380 ns/op
Iteration   2: 851.117 ns/op
Iteration   3: 854.969 ns/op
Iteration   4: 855.042 ns/op
Iteration   5: 859.924 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  856.581 ±(99.9%) 5.298 ns/op [Average]
  (min, avg, max) = (851.117, 856.581, 861.184), stdev = 3.504
  CI (99.9%): [851.283, 861.879] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 69.93% complete, ETA 00:17:39
# Fork: 1 of 2
# Warmup Iteration   1: 14858.904 ns/op
# Warmup Iteration   2: 5242.553 ns/op
# Warmup Iteration   3: 4228.002 ns/op
Iteration   1: 3829.399 ns/op
Iteration   2: 3827.052 ns/op
Iteration   3: 3827.858 ns/op
Iteration   4: 3810.049 ns/op
Iteration   5: 3810.783 ns/op

# Run progress: 69.97% complete, ETA 00:17:38
# Fork: 2 of 2
# Warmup Iteration   1: 10901.086 ns/op
# Warmup Iteration   2: 4974.765 ns/op
# Warmup Iteration   3: 3528.192 ns/op
Iteration   1: 3527.923 ns/op
Iteration   2: 3530.947 ns/op
Iteration   3: 3532.649 ns/op
Iteration   4: 3517.382 ns/op
Iteration   5: 3516.938 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3673.098 ±(99.9%) 236.072 ns/op [Average]
  (min, avg, max) = (3516.938, 3673.098, 3829.399), stdev = 156.147
  CI (99.9%): [3437.026, 3909.170] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 70.00% complete, ETA 00:17:36
# Fork: 1 of 2
# Warmup Iteration   1: 24.824 ns/op
# Warmup Iteration   2: 26.761 ns/op
# Warmup Iteration   3: 19.853 ns/op
Iteration   1: 19.691 ns/op
Iteration   2: 19.641 ns/op
Iteration   3: 19.671 ns/op
Iteration   4: 19.314 ns/op
Iteration   5: 19.292 ns/op

# Run progress: 70.03% complete, ETA 00:17:35
# Fork: 2 of 2
# Warmup Iteration   1: 24.947 ns/op
# Warmup Iteration   2: 28.356 ns/op
# Warmup Iteration   3: 19.551 ns/op
Iteration   1: 19.371 ns/op
Iteration   2: 19.460 ns/op
Iteration   3: 19.459 ns/op
Iteration   4: 19.613 ns/op
Iteration   5: 19.540 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.505 ±(99.9%) 0.224 ns/op [Average]
  (min, avg, max) = (19.292, 19.505, 19.691), stdev = 0.148
  CI (99.9%): [19.281, 19.729] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 70.07% complete, ETA 00:17:34
# Fork: 1 of 2
# Warmup Iteration   1: 116.556 ns/op
# Warmup Iteration   2: 120.916 ns/op
# Warmup Iteration   3: 81.235 ns/op
Iteration   1: 81.241 ns/op
Iteration   2: 81.215 ns/op
Iteration   3: 81.282 ns/op
Iteration   4: 81.593 ns/op
Iteration   5: 81.571 ns/op

# Run progress: 70.10% complete, ETA 00:17:33
# Fork: 2 of 2
# Warmup Iteration   1: 120.155 ns/op
# Warmup Iteration   2: 122.149 ns/op
# Warmup Iteration   3: 81.183 ns/op
Iteration   1: 81.225 ns/op
Iteration   2: 81.206 ns/op
Iteration   3: 81.153 ns/op
Iteration   4: 81.513 ns/op
Iteration   5: 81.524 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  81.352 ±(99.9%) 0.264 ns/op [Average]
  (min, avg, max) = (81.153, 81.352, 81.593), stdev = 0.175
  CI (99.9%): [81.088, 81.616] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 70.14% complete, ETA 00:17:31
# Fork: 1 of 2
# Warmup Iteration   1: 462.860 ns/op
# Warmup Iteration   2: 168.935 ns/op
# Warmup Iteration   3: 111.821 ns/op
Iteration   1: 111.855 ns/op
Iteration   2: 111.847 ns/op
Iteration   3: 111.999 ns/op
Iteration   4: 112.309 ns/op
Iteration   5: 112.314 ns/op

# Run progress: 70.17% complete, ETA 00:17:30
# Fork: 2 of 2
# Warmup Iteration   1: 492.795 ns/op
# Warmup Iteration   2: 157.615 ns/op
# Warmup Iteration   3: 116.470 ns/op
Iteration   1: 116.538 ns/op
Iteration   2: 116.577 ns/op
Iteration   3: 116.500 ns/op
Iteration   4: 117.048 ns/op
Iteration   5: 116.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.387 ±(99.9%) 3.717 ns/op [Average]
  (min, avg, max) = (111.847, 114.387, 117.048), stdev = 2.459
  CI (99.9%): [110.670, 118.105] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 70.21% complete, ETA 00:17:29
# Fork: 1 of 2
# Warmup Iteration   1: 364.654 ns/op
# Warmup Iteration   2: 157.743 ns/op
# Warmup Iteration   3: 112.517 ns/op
Iteration   1: 112.532 ns/op
Iteration   2: 112.684 ns/op
Iteration   3: 112.591 ns/op
Iteration   4: 112.884 ns/op
Iteration   5: 112.906 ns/op

# Run progress: 70.24% complete, ETA 00:17:28
# Fork: 2 of 2
# Warmup Iteration   1: 454.807 ns/op
# Warmup Iteration   2: 162.351 ns/op
# Warmup Iteration   3: 112.543 ns/op
Iteration   1: 112.584 ns/op
Iteration   2: 112.532 ns/op
Iteration   3: 112.579 ns/op
Iteration   4: 112.956 ns/op
Iteration   5: 112.851 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.710 ±(99.9%) 0.257 ns/op [Average]
  (min, avg, max) = (112.532, 112.710, 112.956), stdev = 0.170
  CI (99.9%): [112.453, 112.967] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 70.28% complete, ETA 00:17:27
# Fork: 1 of 2
# Warmup Iteration   1: 104.121 ns/op
# Warmup Iteration   2: 106.673 ns/op
# Warmup Iteration   3: 73.558 ns/op
Iteration   1: 73.594 ns/op
Iteration   2: 73.530 ns/op
Iteration   3: 73.585 ns/op
Iteration   4: 74.271 ns/op
Iteration   5: 74.285 ns/op

# Run progress: 70.31% complete, ETA 00:17:25
# Fork: 2 of 2
# Warmup Iteration   1: 105.246 ns/op
# Warmup Iteration   2: 107.390 ns/op
# Warmup Iteration   3: 73.545 ns/op
Iteration   1: 73.602 ns/op
Iteration   2: 73.560 ns/op
Iteration   3: 73.572 ns/op
Iteration   4: 74.267 ns/op
Iteration   5: 74.301 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.857 ±(99.9%) 0.553 ns/op [Average]
  (min, avg, max) = (73.530, 73.857, 74.301), stdev = 0.366
  CI (99.9%): [73.304, 74.410] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 70.35% complete, ETA 00:17:24
# Fork: 1 of 2
# Warmup Iteration   1: 229.402 ns/op
# Warmup Iteration   2: 239.508 ns/op
# Warmup Iteration   3: 156.865 ns/op
Iteration   1: 156.773 ns/op
Iteration   2: 156.895 ns/op
Iteration   3: 156.908 ns/op
Iteration   4: 155.812 ns/op
Iteration   5: 155.777 ns/op

# Run progress: 70.38% complete, ETA 00:17:23
# Fork: 2 of 2
# Warmup Iteration   1: 194.684 ns/op
# Warmup Iteration   2: 199.454 ns/op
# Warmup Iteration   3: 137.250 ns/op
Iteration   1: 137.160 ns/op
Iteration   2: 136.985 ns/op
Iteration   3: 137.134 ns/op
Iteration   4: 137.075 ns/op
Iteration   5: 136.860 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.738 ±(99.9%) 15.462 ns/op [Average]
  (min, avg, max) = (136.860, 146.738, 156.908), stdev = 10.227
  CI (99.9%): [131.276, 162.200] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 70.42% complete, ETA 00:17:22
# Fork: 1 of 2
# Warmup Iteration   1: 23.400 ns/op
# Warmup Iteration   2: 27.071 ns/op
# Warmup Iteration   3: 19.040 ns/op
Iteration   1: 18.998 ns/op
Iteration   2: 18.954 ns/op
Iteration   3: 18.943 ns/op
Iteration   4: 18.835 ns/op
Iteration   5: 18.859 ns/op

# Run progress: 70.45% complete, ETA 00:17:20
# Fork: 2 of 2
# Warmup Iteration   1: 25.013 ns/op
# Warmup Iteration   2: 28.117 ns/op
# Warmup Iteration   3: 19.044 ns/op
Iteration   1: 19.013 ns/op
Iteration   2: 18.953 ns/op
Iteration   3: 18.964 ns/op
Iteration   4: 18.853 ns/op
Iteration   5: 18.854 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (18.835, 18.923, 19.013), stdev = 0.066
  CI (99.9%): [18.823, 19.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 70.49% complete, ETA 00:17:19
# Fork: 1 of 2
# Warmup Iteration   1: 8430.657 ns/op
# Warmup Iteration   2: 1096.438 ns/op
# Warmup Iteration   3: 771.713 ns/op
Iteration   1: 771.179 ns/op
Iteration   2: 772.435 ns/op
Iteration   3: 771.110 ns/op
Iteration   4: 767.991 ns/op
Iteration   5: 770.597 ns/op

# Run progress: 70.52% complete, ETA 00:17:18
# Fork: 2 of 2
# Warmup Iteration   1: 7712.174 ns/op
# Warmup Iteration   2: 1105.393 ns/op
# Warmup Iteration   3: 794.837 ns/op
Iteration   1: 805.581 ns/op
Iteration   2: 799.066 ns/op
Iteration   3: 796.814 ns/op
Iteration   4: 804.572 ns/op
Iteration   5: 795.488 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  785.483 ±(99.9%) 24.118 ns/op [Average]
  (min, avg, max) = (767.991, 785.483, 805.581), stdev = 15.952
  CI (99.9%): [761.365, 809.601] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 70.56% complete, ETA 00:17:17
# Fork: 1 of 2
# Warmup Iteration   1: 47349.705 ns/op
# Warmup Iteration   2: 1259.048 ns/op
# Warmup Iteration   3: 1032.760 ns/op
Iteration   1: 869.949 ns/op
Iteration   2: 873.773 ns/op
Iteration   3: 874.180 ns/op
Iteration   4: 870.256 ns/op
Iteration   5: 872.732 ns/op

# Run progress: 70.59% complete, ETA 00:17:15
# Fork: 2 of 2
# Warmup Iteration   1: 11172.690 ns/op
# Warmup Iteration   2: 1116.413 ns/op
# Warmup Iteration   3: 954.274 ns/op
Iteration   1: 868.238 ns/op
Iteration   2: 867.946 ns/op
Iteration   3: 867.997 ns/op
Iteration   4: 869.338 ns/op
Iteration   5: 866.750 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  870.116 ±(99.9%) 3.950 ns/op [Average]
  (min, avg, max) = (866.750, 870.116, 874.180), stdev = 2.613
  CI (99.9%): [866.166, 874.066] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 70.63% complete, ETA 00:17:14
# Fork: 1 of 2
# Warmup Iteration   1: 9772.206 ns/op
# Warmup Iteration   2: 1158.099 ns/op
# Warmup Iteration   3: 1348.116 ns/op
Iteration   1: 1368.920 ns/op
Iteration   2: 881.568 ns/op
Iteration   3: 882.804 ns/op
Iteration   4: 883.392 ns/op
Iteration   5: 884.627 ns/op

# Run progress: 70.66% complete, ETA 00:17:13
# Fork: 2 of 2
# Warmup Iteration   1: 7658.461 ns/op
# Warmup Iteration   2: 1292.837 ns/op
# Warmup Iteration   3: 889.382 ns/op
Iteration   1: 889.248 ns/op
Iteration   2: 887.934 ns/op
Iteration   3: 887.044 ns/op
Iteration   4: 895.075 ns/op
Iteration   5: 887.775 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  934.839 ±(99.9%) 230.664 ns/op [Average]
  (min, avg, max) = (881.568, 934.839, 1368.920), stdev = 152.570
  CI (99.9%): [704.174, 1165.503] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 70.69% complete, ETA 00:17:12
# Fork: 1 of 2
# Warmup Iteration   1: 1477.179 ns/op
# Warmup Iteration   2: 1082.436 ns/op
# Warmup Iteration   3: 730.939 ns/op
Iteration   1: 732.934 ns/op
Iteration   2: 728.916 ns/op
Iteration   3: 734.955 ns/op
Iteration   4: 741.449 ns/op
Iteration   5: 736.688 ns/op

# Run progress: 70.73% complete, ETA 00:17:11
# Fork: 2 of 2
# Warmup Iteration   1: 1648.832 ns/op
# Warmup Iteration   2: 971.330 ns/op
# Warmup Iteration   3: 731.535 ns/op
Iteration   1: 732.084 ns/op
Iteration   2: 736.893 ns/op
Iteration   3: 734.812 ns/op
Iteration   4: 739.206 ns/op
Iteration   5: 734.931 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  735.287 ±(99.9%) 5.398 ns/op [Average]
  (min, avg, max) = (728.916, 735.287, 741.449), stdev = 3.570
  CI (99.9%): [729.889, 740.685] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 70.76% complete, ETA 00:17:09
# Fork: 1 of 2
# Warmup Iteration   1: 13777.258 ns/op
# Warmup Iteration   2: 6056.541 ns/op
# Warmup Iteration   3: 5032.506 ns/op
Iteration   1: 4577.684 ns/op
Iteration   2: 4584.723 ns/op
Iteration   3: 4575.701 ns/op
Iteration   4: 4559.033 ns/op
Iteration   5: 4554.026 ns/op

# Run progress: 70.80% complete, ETA 00:17:08
# Fork: 2 of 2
# Warmup Iteration   1: 17318.267 ns/op
# Warmup Iteration   2: 6223.270 ns/op
# Warmup Iteration   3: 5124.004 ns/op
Iteration   1: 4661.841 ns/op
Iteration   2: 4661.705 ns/op
Iteration   3: 4657.496 ns/op
Iteration   4: 4637.269 ns/op
Iteration   5: 4639.713 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4610.919 ±(99.9%) 67.283 ns/op [Average]
  (min, avg, max) = (4554.026, 4610.919, 4661.841), stdev = 44.504
  CI (99.9%): [4543.636, 4678.202] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 70.83% complete, ETA 00:17:07
# Fork: 1 of 2
# Warmup Iteration   1: 23.487 ns/op
# Warmup Iteration   2: 125.101 ns/op
# Warmup Iteration   3: 18.943 ns/op
Iteration   1: 18.934 ns/op
Iteration   2: 18.976 ns/op
Iteration   3: 18.961 ns/op
Iteration   4: 18.841 ns/op
Iteration   5: 18.840 ns/op

# Run progress: 70.87% complete, ETA 00:17:06
# Fork: 2 of 2
# Warmup Iteration   1: 23.736 ns/op
# Warmup Iteration   2: 116.260 ns/op
# Warmup Iteration   3: 18.945 ns/op
Iteration   1: 18.927 ns/op
Iteration   2: 18.989 ns/op
Iteration   3: 18.943 ns/op
Iteration   4: 18.815 ns/op
Iteration   5: 18.845 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.907 ±(99.9%) 0.098 ns/op [Average]
  (min, avg, max) = (18.815, 18.907, 18.989), stdev = 0.065
  CI (99.9%): [18.809, 19.005] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 70.90% complete, ETA 00:17:04
# Fork: 1 of 2
# Warmup Iteration   1: 274.613 ns/op
# Warmup Iteration   2: 421.457 ns/op
# Warmup Iteration   3: 142.023 ns/op
Iteration   1: 142.029 ns/op
Iteration   2: 142.006 ns/op
Iteration   3: 141.754 ns/op
Iteration   4: 142.512 ns/op
Iteration   5: 142.493 ns/op

# Run progress: 70.94% complete, ETA 00:17:03
# Fork: 2 of 2
# Warmup Iteration   1: 276.474 ns/op
# Warmup Iteration   2: 476.774 ns/op
# Warmup Iteration   3: 142.226 ns/op
Iteration   1: 141.800 ns/op
Iteration   2: 141.929 ns/op
Iteration   3: 142.514 ns/op
Iteration   4: 142.702 ns/op
Iteration   5: 142.702 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  142.244 ±(99.9%) 0.567 ns/op [Average]
  (min, avg, max) = (141.754, 142.244, 142.702), stdev = 0.375
  CI (99.9%): [141.677, 142.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 70.97% complete, ETA 00:17:02
# Fork: 1 of 2
# Warmup Iteration   1: 494.956 ns/op
# Warmup Iteration   2: 517.898 ns/op
# Warmup Iteration   3: 163.961 ns/op
Iteration   1: 163.976 ns/op
Iteration   2: 163.969 ns/op
Iteration   3: 163.944 ns/op
Iteration   4: 164.951 ns/op
Iteration   5: 164.778 ns/op

# Run progress: 71.01% complete, ETA 00:17:01
# Fork: 2 of 2
# Warmup Iteration   1: 417.752 ns/op
# Warmup Iteration   2: 508.629 ns/op
# Warmup Iteration   3: 164.007 ns/op
Iteration   1: 164.028 ns/op
Iteration   2: 163.968 ns/op
Iteration   3: 164.074 ns/op
Iteration   4: 164.788 ns/op
Iteration   5: 164.805 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  164.328 ±(99.9%) 0.660 ns/op [Average]
  (min, avg, max) = (163.944, 164.328, 164.951), stdev = 0.436
  CI (99.9%): [163.668, 164.988] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 71.04% complete, ETA 00:17:00
# Fork: 1 of 2
# Warmup Iteration   1: 593.168 ns/op
# Warmup Iteration   2: 686.624 ns/op
# Warmup Iteration   3: 210.913 ns/op
Iteration   1: 211.079 ns/op
Iteration   2: 210.882 ns/op
Iteration   3: 210.944 ns/op
Iteration   4: 211.666 ns/op
Iteration   5: 211.505 ns/op

# Run progress: 71.08% complete, ETA 00:16:58
# Fork: 2 of 2
# Warmup Iteration   1: 548.852 ns/op
# Warmup Iteration   2: 598.939 ns/op
# Warmup Iteration   3: 213.671 ns/op
Iteration   1: 213.675 ns/op
Iteration   2: 213.834 ns/op
Iteration   3: 213.780 ns/op
Iteration   4: 214.304 ns/op
Iteration   5: 214.517 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  212.619 ±(99.9%) 2.294 ns/op [Average]
  (min, avg, max) = (210.882, 212.619, 214.517), stdev = 1.518
  CI (99.9%): [210.324, 214.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 71.11% complete, ETA 00:16:57
# Fork: 1 of 2
# Warmup Iteration   1: 106.698 ns/op
# Warmup Iteration   2: 276.979 ns/op
# Warmup Iteration   3: 73.734 ns/op
Iteration   1: 73.769 ns/op
Iteration   2: 73.749 ns/op
Iteration   3: 73.727 ns/op
Iteration   4: 74.472 ns/op
Iteration   5: 74.582 ns/op

# Run progress: 71.15% complete, ETA 00:16:56
# Fork: 2 of 2
# Warmup Iteration   1: 106.056 ns/op
# Warmup Iteration   2: 269.237 ns/op
# Warmup Iteration   3: 73.741 ns/op
Iteration   1: 73.731 ns/op
Iteration   2: 73.729 ns/op
Iteration   3: 73.729 ns/op
Iteration   4: 74.397 ns/op
Iteration   5: 74.522 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.041 ±(99.9%) 0.593 ns/op [Average]
  (min, avg, max) = (73.727, 74.041, 74.582), stdev = 0.392
  CI (99.9%): [73.447, 74.634] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 71.18% complete, ETA 00:16:55
# Fork: 1 of 2
# Warmup Iteration   1: 249.860 ns/op
# Warmup Iteration   2: 441.484 ns/op
# Warmup Iteration   3: 133.261 ns/op
Iteration   1: 132.443 ns/op
Iteration   2: 133.469 ns/op
Iteration   3: 132.341 ns/op
Iteration   4: 132.744 ns/op
Iteration   5: 132.252 ns/op

# Run progress: 71.22% complete, ETA 00:16:54
# Fork: 2 of 2
# Warmup Iteration   1: 243.142 ns/op
# Warmup Iteration   2: 487.981 ns/op
# Warmup Iteration   3: 138.594 ns/op
Iteration   1: 139.265 ns/op
Iteration   2: 139.064 ns/op
Iteration   3: 138.678 ns/op
Iteration   4: 139.583 ns/op
Iteration   5: 139.621 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  135.946 ±(99.9%) 5.291 ns/op [Average]
  (min, avg, max) = (132.252, 135.946, 139.621), stdev = 3.500
  CI (99.9%): [130.655, 141.237] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 71.25% complete, ETA 00:16:52
# Fork: 1 of 2
# Warmup Iteration   1: 25.813 ns/op
# Warmup Iteration   2: 27.982 ns/op
# Warmup Iteration   3: 18.948 ns/op
Iteration   1: 18.933 ns/op
Iteration   2: 18.945 ns/op
Iteration   3: 18.940 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.830 ns/op

# Run progress: 71.28% complete, ETA 00:16:51
# Fork: 2 of 2
# Warmup Iteration   1: 25.617 ns/op
# Warmup Iteration   2: 30.186 ns/op
# Warmup Iteration   3: 18.936 ns/op
Iteration   1: 18.927 ns/op
Iteration   2: 18.949 ns/op
Iteration   3: 18.969 ns/op
Iteration   4: 18.815 ns/op
Iteration   5: 18.829 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.897 ±(99.9%) 0.093 ns/op [Average]
  (min, avg, max) = (18.815, 18.897, 18.969), stdev = 0.061
  CI (99.9%): [18.805, 18.990] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 71.32% complete, ETA 00:16:50
# Fork: 1 of 2
# Warmup Iteration   1: 434.897 ns/op
# Warmup Iteration   2: 304.425 ns/op
# Warmup Iteration   3: 231.876 ns/op
Iteration   1: 232.075 ns/op
Iteration   2: 231.936 ns/op
Iteration   3: 232.101 ns/op
Iteration   4: 231.673 ns/op
Iteration   5: 231.416 ns/op

# Run progress: 71.35% complete, ETA 00:16:49
# Fork: 2 of 2
# Warmup Iteration   1: 429.858 ns/op
# Warmup Iteration   2: 305.969 ns/op
# Warmup Iteration   3: 231.225 ns/op
Iteration   1: 231.188 ns/op
Iteration   2: 231.122 ns/op
Iteration   3: 231.107 ns/op
Iteration   4: 230.744 ns/op
Iteration   5: 230.723 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.409 ±(99.9%) 0.781 ns/op [Average]
  (min, avg, max) = (230.723, 231.409, 232.101), stdev = 0.517
  CI (99.9%): [230.627, 232.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 71.39% complete, ETA 00:16:47
# Fork: 1 of 2
# Warmup Iteration   1: 377.519 ns/op
# Warmup Iteration   2: 255.169 ns/op
# Warmup Iteration   3: 185.384 ns/op
Iteration   1: 185.568 ns/op
Iteration   2: 185.547 ns/op
Iteration   3: 185.454 ns/op
Iteration   4: 186.630 ns/op
Iteration   5: 185.735 ns/op

# Run progress: 71.42% complete, ETA 00:16:46
# Fork: 2 of 2
# Warmup Iteration   1: 382.243 ns/op
# Warmup Iteration   2: 280.834 ns/op
# Warmup Iteration   3: 183.724 ns/op
Iteration   1: 184.689 ns/op
Iteration   2: 183.853 ns/op
Iteration   3: 183.595 ns/op
Iteration   4: 183.865 ns/op
Iteration   5: 183.809 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  184.874 ±(99.9%) 1.591 ns/op [Average]
  (min, avg, max) = (183.595, 184.874, 186.630), stdev = 1.052
  CI (99.9%): [183.284, 186.465] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 71.46% complete, ETA 00:16:45
# Fork: 1 of 2
# Warmup Iteration   1: 401.437 ns/op
# Warmup Iteration   2: 261.814 ns/op
# Warmup Iteration   3: 191.106 ns/op
Iteration   1: 191.112 ns/op
Iteration   2: 191.801 ns/op
Iteration   3: 191.881 ns/op
Iteration   4: 192.227 ns/op
Iteration   5: 193.142 ns/op

# Run progress: 71.49% complete, ETA 00:16:44
# Fork: 2 of 2
# Warmup Iteration   1: 361.806 ns/op
# Warmup Iteration   2: 271.648 ns/op
# Warmup Iteration   3: 196.711 ns/op
Iteration   1: 196.647 ns/op
Iteration   2: 196.563 ns/op
Iteration   3: 196.554 ns/op
Iteration   4: 197.026 ns/op
Iteration   5: 197.027 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  194.398 ±(99.9%) 3.851 ns/op [Average]
  (min, avg, max) = (191.112, 194.398, 197.027), stdev = 2.547
  CI (99.9%): [190.547, 198.249] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 71.53% complete, ETA 00:16:43
# Fork: 1 of 2
# Warmup Iteration   1: 104.930 ns/op
# Warmup Iteration   2: 117.934 ns/op
# Warmup Iteration   3: 73.738 ns/op
Iteration   1: 73.778 ns/op
Iteration   2: 73.762 ns/op
Iteration   3: 73.784 ns/op
Iteration   4: 74.535 ns/op
Iteration   5: 74.476 ns/op

# Run progress: 71.56% complete, ETA 00:16:41
# Fork: 2 of 2
# Warmup Iteration   1: 103.173 ns/op
# Warmup Iteration   2: 111.986 ns/op
# Warmup Iteration   3: 73.680 ns/op
Iteration   1: 73.781 ns/op
Iteration   2: 73.709 ns/op
Iteration   3: 73.774 ns/op
Iteration   4: 74.497 ns/op
Iteration   5: 74.422 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.052 ±(99.9%) 0.563 ns/op [Average]
  (min, avg, max) = (73.709, 74.052, 74.535), stdev = 0.372
  CI (99.9%): [73.489, 74.615] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 71.60% complete, ETA 00:16:40
# Fork: 1 of 2
# Warmup Iteration   1: 239.226 ns/op
# Warmup Iteration   2: 239.083 ns/op
# Warmup Iteration   3: 137.824 ns/op
Iteration   1: 137.731 ns/op
Iteration   2: 137.873 ns/op
Iteration   3: 137.934 ns/op
Iteration   4: 138.304 ns/op
Iteration   5: 138.294 ns/op

# Run progress: 71.63% complete, ETA 00:16:39
# Fork: 2 of 2
# Warmup Iteration   1: 295.254 ns/op
# Warmup Iteration   2: 232.781 ns/op
# Warmup Iteration   3: 138.172 ns/op
Iteration   1: 138.089 ns/op
Iteration   2: 138.375 ns/op
Iteration   3: 137.284 ns/op
Iteration   4: 138.201 ns/op
Iteration   5: 138.146 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.023 ±(99.9%) 0.501 ns/op [Average]
  (min, avg, max) = (137.284, 138.023, 138.375), stdev = 0.331
  CI (99.9%): [137.522, 138.524] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 71.67% complete, ETA 00:16:38
# Fork: 1 of 2
# Warmup Iteration   1: 23.670 ns/op
# Warmup Iteration   2: 29.369 ns/op
# Warmup Iteration   3: 18.948 ns/op
Iteration   1: 35.584 ns/op
Iteration   2: 18.983 ns/op
Iteration   3: 18.971 ns/op
Iteration   4: 19.773 ns/op
Iteration   5: 19.520 ns/op

# Run progress: 71.70% complete, ETA 00:16:36
# Fork: 2 of 2
# Warmup Iteration   1: 25.417 ns/op
# Warmup Iteration   2: 29.389 ns/op
# Warmup Iteration   3: 18.930 ns/op
Iteration   1: 35.062 ns/op
Iteration   2: 18.949 ns/op
Iteration   3: 18.970 ns/op
Iteration   4: 18.835 ns/op
Iteration   5: 18.826 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  22.347 ±(99.9%) 10.351 ns/op [Average]
  (min, avg, max) = (18.826, 22.347, 35.584), stdev = 6.847
  CI (99.9%): [11.996, 32.699] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 71.74% complete, ETA 00:16:35
# Fork: 1 of 2
# Warmup Iteration   1: 403.701 ns/op
# Warmup Iteration   2: 326.306 ns/op
# Warmup Iteration   3: 231.883 ns/op
Iteration   1: 420.356 ns/op
Iteration   2: 231.908 ns/op
Iteration   3: 231.833 ns/op
Iteration   4: 232.181 ns/op
Iteration   5: 232.799 ns/op

# Run progress: 71.77% complete, ETA 00:16:34
# Fork: 2 of 2
# Warmup Iteration   1: 376.599 ns/op
# Warmup Iteration   2: 325.963 ns/op
# Warmup Iteration   3: 231.159 ns/op
Iteration   1: 444.879 ns/op
Iteration   2: 230.635 ns/op
Iteration   3: 231.967 ns/op
Iteration   4: 232.293 ns/op
Iteration   5: 231.869 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  272.072 ±(99.9%) 128.226 ns/op [Average]
  (min, avg, max) = (230.635, 272.072, 444.879), stdev = 84.814
  CI (99.9%): [143.845, 400.298] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 71.81% complete, ETA 00:16:33
# Fork: 1 of 2
# Warmup Iteration   1: 336.023 ns/op
# Warmup Iteration   2: 229.122 ns/op
# Warmup Iteration   3: 163.399 ns/op
Iteration   1: 289.503 ns/op
Iteration   2: 163.827 ns/op
Iteration   3: 163.453 ns/op
Iteration   4: 164.472 ns/op
Iteration   5: 164.528 ns/op

# Run progress: 71.84% complete, ETA 00:16:32
# Fork: 2 of 2
# Warmup Iteration   1: 315.254 ns/op
# Warmup Iteration   2: 228.134 ns/op
# Warmup Iteration   3: 163.564 ns/op
Iteration   1: 325.652 ns/op
Iteration   2: 164.536 ns/op
Iteration   3: 163.403 ns/op
Iteration   4: 164.814 ns/op
Iteration   5: 164.327 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  192.852 ±(99.9%) 92.322 ns/op [Average]
  (min, avg, max) = (163.403, 192.852, 325.652), stdev = 61.065
  CI (99.9%): [100.530, 285.174] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 71.88% complete, ETA 00:16:30
# Fork: 1 of 2
# Warmup Iteration   1: 424.383 ns/op
# Warmup Iteration   2: 285.628 ns/op
# Warmup Iteration   3: 210.668 ns/op
Iteration   1: 415.623 ns/op
Iteration   2: 229.544 ns/op
Iteration   3: 210.801 ns/op
Iteration   4: 213.019 ns/op
Iteration   5: 211.018 ns/op

# Run progress: 71.91% complete, ETA 00:16:29
# Fork: 2 of 2
# Warmup Iteration   1: 374.537 ns/op
# Warmup Iteration   2: 306.163 ns/op
# Warmup Iteration   3: 212.324 ns/op
Iteration   1: 418.162 ns/op
Iteration   2: 222.216 ns/op
Iteration   3: 210.234 ns/op
Iteration   4: 211.474 ns/op
Iteration   5: 210.764 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  255.286 ±(99.9%) 129.123 ns/op [Average]
  (min, avg, max) = (210.234, 255.286, 418.162), stdev = 85.407
  CI (99.9%): [126.162, 384.409] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 71.94% complete, ETA 00:16:28
# Fork: 1 of 2
# Warmup Iteration   1: 105.821 ns/op
# Warmup Iteration   2: 106.987 ns/op
# Warmup Iteration   3: 73.701 ns/op
Iteration   1: 137.339 ns/op
Iteration   2: 73.744 ns/op
Iteration   3: 73.784 ns/op
Iteration   4: 74.495 ns/op
Iteration   5: 74.464 ns/op

# Run progress: 71.98% complete, ETA 00:16:27
# Fork: 2 of 2
# Warmup Iteration   1: 105.076 ns/op
# Warmup Iteration   2: 111.208 ns/op
# Warmup Iteration   3: 73.733 ns/op
Iteration   1: 139.502 ns/op
Iteration   2: 73.815 ns/op
Iteration   3: 73.778 ns/op
Iteration   4: 74.406 ns/op
Iteration   5: 74.384 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  86.971 ±(99.9%) 41.006 ns/op [Average]
  (min, avg, max) = (73.744, 86.971, 139.502), stdev = 27.123
  CI (99.9%): [45.965, 127.977] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 72.01% complete, ETA 00:16:26
# Fork: 1 of 2
# Warmup Iteration   1: 269.459 ns/op
# Warmup Iteration   2: 250.676 ns/op
# Warmup Iteration   3: 144.321 ns/op
Iteration   1: 292.329 ns/op
Iteration   2: 144.196 ns/op
Iteration   3: 144.177 ns/op
Iteration   4: 144.896 ns/op
Iteration   5: 144.787 ns/op

# Run progress: 72.05% complete, ETA 00:16:24
# Fork: 2 of 2
# Warmup Iteration   1: 253.547 ns/op
# Warmup Iteration   2: 248.923 ns/op
# Warmup Iteration   3: 145.080 ns/op
Iteration   1: 283.566 ns/op
Iteration   2: 144.332 ns/op
Iteration   3: 144.612 ns/op
Iteration   4: 145.351 ns/op
Iteration   5: 145.024 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  173.327 ±(99.9%) 91.387 ns/op [Average]
  (min, avg, max) = (144.177, 173.327, 292.329), stdev = 60.447
  CI (99.9%): [81.940, 264.714] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 72.08% complete, ETA 00:16:23
# Fork: 1 of 2
# Warmup Iteration   1: 25.494 ns/op
# Warmup Iteration   2: 26.673 ns/op
# Warmup Iteration   3: 18.944 ns/op
Iteration   1: 18.973 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.952 ns/op
Iteration   4: 18.832 ns/op
Iteration   5: 18.831 ns/op

# Run progress: 72.12% complete, ETA 00:16:22
# Fork: 2 of 2
# Warmup Iteration   1: 23.750 ns/op
# Warmup Iteration   2: 31.015 ns/op
# Warmup Iteration   3: 18.970 ns/op
Iteration   1: 18.974 ns/op
Iteration   2: 18.992 ns/op
Iteration   3: 18.968 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.839 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (18.831, 18.915, 18.992), stdev = 0.070
  CI (99.9%): [18.809, 19.020] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 72.15% complete, ETA 00:16:21
# Fork: 1 of 2
# Warmup Iteration   1: 115.413 ns/op
# Warmup Iteration   2: 122.219 ns/op
# Warmup Iteration   3: 81.318 ns/op
Iteration   1: 81.347 ns/op
Iteration   2: 81.335 ns/op
Iteration   3: 81.305 ns/op
Iteration   4: 81.782 ns/op
Iteration   5: 81.834 ns/op

# Run progress: 72.19% complete, ETA 00:16:19
# Fork: 2 of 2
# Warmup Iteration   1: 113.663 ns/op
# Warmup Iteration   2: 112.861 ns/op
# Warmup Iteration   3: 81.241 ns/op
Iteration   1: 81.269 ns/op
Iteration   2: 81.276 ns/op
Iteration   3: 81.241 ns/op
Iteration   4: 81.594 ns/op
Iteration   5: 81.603 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  81.459 ±(99.9%) 0.339 ns/op [Average]
  (min, avg, max) = (81.241, 81.459, 81.834), stdev = 0.224
  CI (99.9%): [81.120, 81.798] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 72.22% complete, ETA 00:16:18
# Fork: 1 of 2
# Warmup Iteration   1: 3773.333 ns/op
# Warmup Iteration   2: 159.276 ns/op
# Warmup Iteration   3: 115.075 ns/op
Iteration   1: 115.067 ns/op
Iteration   2: 115.081 ns/op
Iteration   3: 115.073 ns/op
Iteration   4: 115.450 ns/op
Iteration   5: 115.416 ns/op

# Run progress: 72.26% complete, ETA 00:16:17
# Fork: 2 of 2
# Warmup Iteration   1: 4126.551 ns/op
# Warmup Iteration   2: 136.957 ns/op
# Warmup Iteration   3: 115.048 ns/op
Iteration   1: 115.105 ns/op
Iteration   2: 115.128 ns/op
Iteration   3: 115.085 ns/op
Iteration   4: 115.397 ns/op
Iteration   5: 115.412 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.221 ±(99.9%) 0.259 ns/op [Average]
  (min, avg, max) = (115.067, 115.221, 115.450), stdev = 0.171
  CI (99.9%): [114.962, 115.480] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 72.29% complete, ETA 00:16:16
# Fork: 1 of 2
# Warmup Iteration   1: 764.150 ns/op
# Warmup Iteration   2: 174.275 ns/op
# Warmup Iteration   3: 112.592 ns/op
Iteration   1: 112.619 ns/op
Iteration   2: 112.667 ns/op
Iteration   3: 112.736 ns/op
Iteration   4: 112.960 ns/op
Iteration   5: 113.075 ns/op

# Run progress: 72.33% complete, ETA 00:16:15
# Fork: 2 of 2
# Warmup Iteration   1: 366.007 ns/op
# Warmup Iteration   2: 155.215 ns/op
# Warmup Iteration   3: 112.537 ns/op
Iteration   1: 112.600 ns/op
Iteration   2: 112.715 ns/op
Iteration   3: 112.461 ns/op
Iteration   4: 112.912 ns/op
Iteration   5: 112.951 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.770 ±(99.9%) 0.296 ns/op [Average]
  (min, avg, max) = (112.461, 112.770, 113.075), stdev = 0.196
  CI (99.9%): [112.474, 113.065] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 72.36% complete, ETA 00:16:13
# Fork: 1 of 2
# Warmup Iteration   1: 104.552 ns/op
# Warmup Iteration   2: 106.440 ns/op
# Warmup Iteration   3: 73.695 ns/op
Iteration   1: 73.782 ns/op
Iteration   2: 73.721 ns/op
Iteration   3: 73.770 ns/op
Iteration   4: 74.473 ns/op
Iteration   5: 74.544 ns/op

# Run progress: 72.40% complete, ETA 00:16:12
# Fork: 2 of 2
# Warmup Iteration   1: 105.245 ns/op
# Warmup Iteration   2: 113.200 ns/op
# Warmup Iteration   3: 73.707 ns/op
Iteration   1: 73.772 ns/op
Iteration   2: 73.647 ns/op
Iteration   3: 73.733 ns/op
Iteration   4: 74.591 ns/op
Iteration   5: 74.584 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.062 ±(99.9%) 0.637 ns/op [Average]
  (min, avg, max) = (73.647, 74.062, 74.591), stdev = 0.421
  CI (99.9%): [73.425, 74.699] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 72.43% complete, ETA 00:16:11
# Fork: 1 of 2
# Warmup Iteration   1: 220.478 ns/op
# Warmup Iteration   2: 237.188 ns/op
# Warmup Iteration   3: 131.555 ns/op
Iteration   1: 131.791 ns/op
Iteration   2: 131.041 ns/op
Iteration   3: 131.004 ns/op
Iteration   4: 132.017 ns/op
Iteration   5: 131.961 ns/op

# Run progress: 72.47% complete, ETA 00:16:10
# Fork: 2 of 2
# Warmup Iteration   1: 233.959 ns/op
# Warmup Iteration   2: 204.772 ns/op
# Warmup Iteration   3: 134.767 ns/op
Iteration   1: 134.824 ns/op
Iteration   2: 134.956 ns/op
Iteration   3: 136.311 ns/op
Iteration   4: 135.884 ns/op
Iteration   5: 135.642 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  133.543 ±(99.9%) 3.258 ns/op [Average]
  (min, avg, max) = (131.004, 133.543, 136.311), stdev = 2.155
  CI (99.9%): [130.285, 136.801] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 72.50% complete, ETA 00:16:08
# Fork: 1 of 2
# Warmup Iteration   1: 23.383 ns/op
# Warmup Iteration   2: 125.258 ns/op
# Warmup Iteration   3: 18.926 ns/op
Iteration   1: 18.958 ns/op
Iteration   2: 18.989 ns/op
Iteration   3: 18.995 ns/op
Iteration   4: 18.818 ns/op
Iteration   5: 18.811 ns/op

# Run progress: 72.53% complete, ETA 00:16:07
# Fork: 2 of 2
# Warmup Iteration   1: 25.502 ns/op
# Warmup Iteration   2: 87.980 ns/op
# Warmup Iteration   3: 18.965 ns/op
Iteration   1: 18.944 ns/op
Iteration   2: 18.991 ns/op
Iteration   3: 18.978 ns/op
Iteration   4: 18.849 ns/op
Iteration   5: 18.832 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.916 ±(99.9%) 0.119 ns/op [Average]
  (min, avg, max) = (18.811, 18.916, 18.995), stdev = 0.079
  CI (99.9%): [18.797, 19.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 72.57% complete, ETA 00:16:06
# Fork: 1 of 2
# Warmup Iteration   1: 259.716 ns/op
# Warmup Iteration   2: 439.104 ns/op
# Warmup Iteration   3: 137.331 ns/op
Iteration   1: 137.280 ns/op
Iteration   2: 137.264 ns/op
Iteration   3: 137.349 ns/op
Iteration   4: 138.171 ns/op
Iteration   5: 138.656 ns/op

# Run progress: 72.60% complete, ETA 00:16:05
# Fork: 2 of 2
# Warmup Iteration   1: 218.801 ns/op
# Warmup Iteration   2: 465.745 ns/op
# Warmup Iteration   3: 137.307 ns/op
Iteration   1: 137.330 ns/op
Iteration   2: 137.405 ns/op
Iteration   3: 137.587 ns/op
Iteration   4: 138.193 ns/op
Iteration   5: 138.197 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.743 ±(99.9%) 0.770 ns/op [Average]
  (min, avg, max) = (137.264, 137.743, 138.656), stdev = 0.509
  CI (99.9%): [136.973, 138.513] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 72.64% complete, ETA 00:16:04
# Fork: 1 of 2
# Warmup Iteration   1: 360.318 ns/op
# Warmup Iteration   2: 484.345 ns/op
# Warmup Iteration   3: 156.141 ns/op
Iteration   1: 156.228 ns/op
Iteration   2: 156.329 ns/op
Iteration   3: 156.205 ns/op
Iteration   4: 156.802 ns/op
Iteration   5: 156.764 ns/op

# Run progress: 72.67% complete, ETA 00:16:02
# Fork: 2 of 2
# Warmup Iteration   1: 350.488 ns/op
# Warmup Iteration   2: 528.043 ns/op
# Warmup Iteration   3: 156.458 ns/op
Iteration   1: 156.535 ns/op
Iteration   2: 156.505 ns/op
Iteration   3: 156.483 ns/op
Iteration   4: 157.112 ns/op
Iteration   5: 157.123 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.609 ±(99.9%) 0.503 ns/op [Average]
  (min, avg, max) = (156.205, 156.609, 157.123), stdev = 0.333
  CI (99.9%): [156.105, 157.112] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 72.71% complete, ETA 00:16:01
# Fork: 1 of 2
# Warmup Iteration   1: 499.894 ns/op
# Warmup Iteration   2: 665.117 ns/op
# Warmup Iteration   3: 204.845 ns/op
Iteration   1: 205.013 ns/op
Iteration   2: 204.917 ns/op
Iteration   3: 205.069 ns/op
Iteration   4: 205.423 ns/op
Iteration   5: 205.555 ns/op

# Run progress: 72.74% complete, ETA 00:16:00
# Fork: 2 of 2
# Warmup Iteration   1: 492.758 ns/op
# Warmup Iteration   2: 668.892 ns/op
# Warmup Iteration   3: 204.516 ns/op
Iteration   1: 204.575 ns/op
Iteration   2: 204.602 ns/op
Iteration   3: 205.231 ns/op
Iteration   4: 205.201 ns/op
Iteration   5: 205.260 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  205.085 ±(99.9%) 0.485 ns/op [Average]
  (min, avg, max) = (204.575, 205.085, 205.555), stdev = 0.321
  CI (99.9%): [204.599, 205.570] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 72.78% complete, ETA 00:15:59
# Fork: 1 of 2
# Warmup Iteration   1: 105.402 ns/op
# Warmup Iteration   2: 289.776 ns/op
# Warmup Iteration   3: 74.225 ns/op
Iteration   1: 74.163 ns/op
Iteration   2: 74.243 ns/op
Iteration   3: 74.192 ns/op
Iteration   4: 74.944 ns/op
Iteration   5: 74.893 ns/op

# Run progress: 72.81% complete, ETA 00:15:57
# Fork: 2 of 2
# Warmup Iteration   1: 105.781 ns/op
# Warmup Iteration   2: 307.794 ns/op
# Warmup Iteration   3: 73.764 ns/op
Iteration   1: 73.745 ns/op
Iteration   2: 73.769 ns/op
Iteration   3: 73.762 ns/op
Iteration   4: 74.410 ns/op
Iteration   5: 74.604 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.273 ±(99.9%) 0.672 ns/op [Average]
  (min, avg, max) = (73.745, 74.273, 74.944), stdev = 0.444
  CI (99.9%): [73.601, 74.944] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 72.85% complete, ETA 00:15:56
# Fork: 1 of 2
# Warmup Iteration   1: 223.258 ns/op
# Warmup Iteration   2: 442.178 ns/op
# Warmup Iteration   3: 131.387 ns/op
Iteration   1: 131.193 ns/op
Iteration   2: 130.060 ns/op
Iteration   3: 130.650 ns/op
Iteration   4: 131.051 ns/op
Iteration   5: 131.012 ns/op

# Run progress: 72.88% complete, ETA 00:15:55
# Fork: 2 of 2
# Warmup Iteration   1: 228.001 ns/op
# Warmup Iteration   2: 462.787 ns/op
# Warmup Iteration   3: 131.189 ns/op
Iteration   1: 131.534 ns/op
Iteration   2: 131.563 ns/op
Iteration   3: 131.567 ns/op
Iteration   4: 131.603 ns/op
Iteration   5: 131.965 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.220 ±(99.9%) 0.840 ns/op [Average]
  (min, avg, max) = (130.060, 131.220, 131.965), stdev = 0.556
  CI (99.9%): [130.379, 132.060] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 72.92% complete, ETA 00:15:54
# Fork: 1 of 2
# Warmup Iteration   1: 23.608 ns/op
# Warmup Iteration   2: 28.578 ns/op
# Warmup Iteration   3: 19.019 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.934 ns/op
Iteration   3: 18.978 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.853 ns/op

# Run progress: 72.95% complete, ETA 00:15:53
# Fork: 2 of 2
# Warmup Iteration   1: 25.552 ns/op
# Warmup Iteration   2: 28.358 ns/op
# Warmup Iteration   3: 18.996 ns/op
Iteration   1: 18.974 ns/op
Iteration   2: 18.952 ns/op
Iteration   3: 18.937 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.822 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.910 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (18.822, 18.910, 18.992), stdev = 0.069
  CI (99.9%): [18.806, 19.014] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 72.99% complete, ETA 00:15:51
# Fork: 1 of 2
# Warmup Iteration   1: 7870.615 ns/op
# Warmup Iteration   2: 942.368 ns/op
# Warmup Iteration   3: 717.409 ns/op
Iteration   1: 718.453 ns/op
Iteration   2: 717.813 ns/op
Iteration   3: 718.867 ns/op
Iteration   4: 717.300 ns/op
Iteration   5: 718.089 ns/op

# Run progress: 73.02% complete, ETA 00:15:50
# Fork: 2 of 2
# Warmup Iteration   1: 11289.497 ns/op
# Warmup Iteration   2: 1058.154 ns/op
# Warmup Iteration   3: 725.024 ns/op
Iteration   1: 724.100 ns/op
Iteration   2: 723.853 ns/op
Iteration   3: 725.181 ns/op
Iteration   4: 725.845 ns/op
Iteration   5: 727.591 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  721.709 ±(99.9%) 5.973 ns/op [Average]
  (min, avg, max) = (717.300, 721.709, 727.591), stdev = 3.951
  CI (99.9%): [715.736, 727.682] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 73.06% complete, ETA 00:15:49
# Fork: 1 of 2
# Warmup Iteration   1: 3568.977 ns/op
# Warmup Iteration   2: 1107.174 ns/op
# Warmup Iteration   3: 864.538 ns/op
Iteration   1: 855.730 ns/op
Iteration   2: 855.502 ns/op
Iteration   3: 855.801 ns/op
Iteration   4: 857.380 ns/op
Iteration   5: 857.607 ns/op

# Run progress: 73.09% complete, ETA 00:15:48
# Fork: 2 of 2
# Warmup Iteration   1: 7388.801 ns/op
# Warmup Iteration   2: 1190.679 ns/op
# Warmup Iteration   3: 857.549 ns/op
Iteration   1: 856.949 ns/op
Iteration   2: 857.525 ns/op
Iteration   3: 857.107 ns/op
Iteration   4: 858.416 ns/op
Iteration   5: 858.234 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  857.025 ±(99.9%) 1.563 ns/op [Average]
  (min, avg, max) = (855.502, 857.025, 858.416), stdev = 1.034
  CI (99.9%): [855.462, 858.588] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 73.13% complete, ETA 00:15:46
# Fork: 1 of 2
# Warmup Iteration   1: 7118.549 ns/op
# Warmup Iteration   2: 1179.665 ns/op
# Warmup Iteration   3: 858.258 ns/op
Iteration   1: 858.404 ns/op
Iteration   2: 858.291 ns/op
Iteration   3: 858.192 ns/op
Iteration   4: 860.031 ns/op
Iteration   5: 860.043 ns/op

# Run progress: 73.16% complete, ETA 00:15:45
# Fork: 2 of 2
# Warmup Iteration   1: 7731.287 ns/op
# Warmup Iteration   2: 1221.248 ns/op
# Warmup Iteration   3: 882.278 ns/op
Iteration   1: 882.717 ns/op
Iteration   2: 882.728 ns/op
Iteration   3: 882.924 ns/op
Iteration   4: 884.578 ns/op
Iteration   5: 883.595 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  871.150 ±(99.9%) 19.416 ns/op [Average]
  (min, avg, max) = (858.192, 871.150, 884.578), stdev = 12.843
  CI (99.9%): [851.734, 890.566] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 73.19% complete, ETA 00:15:44
# Fork: 1 of 2
# Warmup Iteration   1: 1261.564 ns/op
# Warmup Iteration   2: 1010.960 ns/op
# Warmup Iteration   3: 767.609 ns/op
Iteration   1: 768.213 ns/op
Iteration   2: 768.315 ns/op
Iteration   3: 768.510 ns/op
Iteration   4: 768.172 ns/op
Iteration   5: 768.037 ns/op

# Run progress: 73.23% complete, ETA 00:15:43
# Fork: 2 of 2
# Warmup Iteration   1: 1128.110 ns/op
# Warmup Iteration   2: 1013.357 ns/op
# Warmup Iteration   3: 767.617 ns/op
Iteration   1: 768.269 ns/op
Iteration   2: 767.817 ns/op
Iteration   3: 767.618 ns/op
Iteration   4: 767.826 ns/op
Iteration   5: 768.032 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  768.081 ±(99.9%) 0.407 ns/op [Average]
  (min, avg, max) = (767.618, 768.081, 768.510), stdev = 0.269
  CI (99.9%): [767.674, 768.488] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 73.26% complete, ETA 00:15:42
# Fork: 1 of 2
# Warmup Iteration   1: 1817.047 ns/op
# Warmup Iteration   2: 1122.703 ns/op
# Warmup Iteration   3: 766.108 ns/op
Iteration   1: 766.599 ns/op
Iteration   2: 767.294 ns/op
Iteration   3: 766.705 ns/op
Iteration   4: 766.346 ns/op
Iteration   5: 766.351 ns/op

# Run progress: 73.30% complete, ETA 00:15:40
# Fork: 2 of 2
# Warmup Iteration   1: 1828.082 ns/op
# Warmup Iteration   2: 1151.571 ns/op
# Warmup Iteration   3: 766.424 ns/op
Iteration   1: 765.640 ns/op
Iteration   2: 766.857 ns/op
Iteration   3: 765.741 ns/op
Iteration   4: 766.644 ns/op
Iteration   5: 766.504 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  766.468 ±(99.9%) 0.745 ns/op [Average]
  (min, avg, max) = (765.640, 766.468, 767.294), stdev = 0.493
  CI (99.9%): [765.723, 767.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 73.33% complete, ETA 00:15:39
# Fork: 1 of 2
# Warmup Iteration   1: 24.110 ns/op
# Warmup Iteration   2: 29.067 ns/op
# Warmup Iteration   3: 19.039 ns/op
Iteration   1: 19.009 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.986 ns/op
Iteration   4: 18.832 ns/op
Iteration   5: 18.858 ns/op

# Run progress: 73.37% complete, ETA 00:15:38
# Fork: 2 of 2
# Warmup Iteration   1: 23.259 ns/op
# Warmup Iteration   2: 30.709 ns/op
# Warmup Iteration   3: 19.031 ns/op
Iteration   1: 18.977 ns/op
Iteration   2: 18.963 ns/op
Iteration   3: 18.953 ns/op
Iteration   4: 18.824 ns/op
Iteration   5: 18.848 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.922 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (18.824, 18.922, 19.009), stdev = 0.072
  CI (99.9%): [18.813, 19.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 73.40% complete, ETA 00:15:37
# Fork: 1 of 2
# Warmup Iteration   1: 1129.097 ns/op
# Warmup Iteration   2: 671.469 ns/op
# Warmup Iteration   3: 501.017 ns/op
Iteration   1: 502.695 ns/op
Iteration   2: 502.163 ns/op
Iteration   3: 502.698 ns/op
Iteration   4: 502.153 ns/op
Iteration   5: 502.981 ns/op

# Run progress: 73.44% complete, ETA 00:15:35
# Fork: 2 of 2
# Warmup Iteration   1: 1078.470 ns/op
# Warmup Iteration   2: 682.900 ns/op
# Warmup Iteration   3: 501.581 ns/op
Iteration   1: 502.472 ns/op
Iteration   2: 501.719 ns/op
Iteration   3: 500.878 ns/op
Iteration   4: 515.082 ns/op
Iteration   5: 518.256 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  505.110 ±(99.9%) 9.323 ns/op [Average]
  (min, avg, max) = (500.878, 505.110, 518.256), stdev = 6.167
  CI (99.9%): [495.787, 514.433] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 73.47% complete, ETA 00:15:34
# Fork: 1 of 2
# Warmup Iteration   1: 11020.441 ns/op
# Warmup Iteration   2: 1461.081 ns/op
# Warmup Iteration   3: 1113.786 ns/op
Iteration   1: 1114.115 ns/op
Iteration   2: 1114.522 ns/op
Iteration   3: 1114.242 ns/op
Iteration   4: 1116.227 ns/op
Iteration   5: 1115.751 ns/op

# Run progress: 73.51% complete, ETA 00:15:33
# Fork: 2 of 2
# Warmup Iteration   1: 12948.910 ns/op
# Warmup Iteration   2: 1419.648 ns/op
# Warmup Iteration   3: 1222.849 ns/op
Iteration   1: 1114.537 ns/op
Iteration   2: 1113.978 ns/op
Iteration   3: 1113.653 ns/op
Iteration   4: 1117.529 ns/op
Iteration   5: 1115.614 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1115.017 ±(99.9%) 1.852 ns/op [Average]
  (min, avg, max) = (1113.653, 1115.017, 1117.529), stdev = 1.225
  CI (99.9%): [1113.165, 1116.869] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 73.54% complete, ETA 00:15:32
# Fork: 1 of 2
# Warmup Iteration   1: 37819.451 ns/op
# Warmup Iteration   2: 1708.943 ns/op
# Warmup Iteration   3: 1331.890 ns/op
Iteration   1: 1117.920 ns/op
Iteration   2: 1116.846 ns/op
Iteration   3: 1116.966 ns/op
Iteration   4: 1118.976 ns/op
Iteration   5: 1118.443 ns/op

# Run progress: 73.58% complete, ETA 00:15:31
# Fork: 2 of 2
# Warmup Iteration   1: 7796.619 ns/op
# Warmup Iteration   2: 1554.481 ns/op
# Warmup Iteration   3: 1113.947 ns/op
Iteration   1: 1114.831 ns/op
Iteration   2: 1114.695 ns/op
Iteration   3: 1114.275 ns/op
Iteration   4: 1115.909 ns/op
Iteration   5: 1116.037 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1116.490 ±(99.9%) 2.459 ns/op [Average]
  (min, avg, max) = (1114.275, 1116.490, 1118.976), stdev = 1.627
  CI (99.9%): [1114.030, 1118.949] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 73.61% complete, ETA 00:15:29
# Fork: 1 of 2
# Warmup Iteration   1: 1805.129 ns/op
# Warmup Iteration   2: 1260.838 ns/op
# Warmup Iteration   3: 950.282 ns/op
Iteration   1: 960.885 ns/op
Iteration   2: 964.082 ns/op
Iteration   3: 967.892 ns/op
Iteration   4: 950.775 ns/op
Iteration   5: 967.982 ns/op

# Run progress: 73.65% complete, ETA 00:15:28
# Fork: 2 of 2
# Warmup Iteration   1: 1848.924 ns/op
# Warmup Iteration   2: 1311.803 ns/op
# Warmup Iteration   3: 949.489 ns/op
Iteration   1: 949.857 ns/op
Iteration   2: 949.900 ns/op
Iteration   3: 950.092 ns/op
Iteration   4: 950.270 ns/op
Iteration   5: 951.494 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  956.323 ±(99.9%) 11.962 ns/op [Average]
  (min, avg, max) = (949.857, 956.323, 967.982), stdev = 7.912
  CI (99.9%): [944.361, 968.285] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 73.68% complete, ETA 00:15:27
# Fork: 1 of 2
# Warmup Iteration   1: 11447.984 ns/op
# Warmup Iteration   2: 4844.628 ns/op
# Warmup Iteration   3: 3767.356 ns/op
Iteration   1: 3526.333 ns/op
Iteration   2: 3514.749 ns/op
Iteration   3: 3521.326 ns/op
Iteration   4: 3495.782 ns/op
Iteration   5: 3490.950 ns/op

# Run progress: 73.72% complete, ETA 00:15:26
# Fork: 2 of 2
# Warmup Iteration   1: 14775.899 ns/op
# Warmup Iteration   2: 5162.795 ns/op
# Warmup Iteration   3: 4140.051 ns/op
Iteration   1: 3724.307 ns/op
Iteration   2: 3732.976 ns/op
Iteration   3: 3737.410 ns/op
Iteration   4: 3725.314 ns/op
Iteration   5: 3720.102 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3618.925 ±(99.9%) 174.720 ns/op [Average]
  (min, avg, max) = (3490.950, 3618.925, 3737.410), stdev = 115.566
  CI (99.9%): [3444.205, 3793.645] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 73.75% complete, ETA 00:15:24
# Fork: 1 of 2
# Warmup Iteration   1: 25.576 ns/op
# Warmup Iteration   2: 29.281 ns/op
# Warmup Iteration   3: 19.016 ns/op
Iteration   1: 19.008 ns/op
Iteration   2: 18.961 ns/op
Iteration   3: 18.972 ns/op
Iteration   4: 18.818 ns/op
Iteration   5: 18.834 ns/op

# Run progress: 73.78% complete, ETA 00:15:23
# Fork: 2 of 2
# Warmup Iteration   1: 23.781 ns/op
# Warmup Iteration   2: 30.167 ns/op
# Warmup Iteration   3: 19.015 ns/op
Iteration   1: 18.989 ns/op
Iteration   2: 18.953 ns/op
Iteration   3: 18.929 ns/op
Iteration   4: 18.836 ns/op
Iteration   5: 18.841 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.914 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (18.818, 18.914, 19.008), stdev = 0.074
  CI (99.9%): [18.803, 19.025] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 73.82% complete, ETA 00:15:22
# Fork: 1 of 2
# Warmup Iteration   1: 6429.573 ns/op
# Warmup Iteration   2: 712.883 ns/op
# Warmup Iteration   3: 505.945 ns/op
Iteration   1: 505.482 ns/op
Iteration   2: 509.313 ns/op
Iteration   3: 504.133 ns/op
Iteration   4: 508.212 ns/op
Iteration   5: 505.720 ns/op

# Run progress: 73.85% complete, ETA 00:15:21
# Fork: 2 of 2
# Warmup Iteration   1: 31224.545 ns/op
# Warmup Iteration   2: 785.284 ns/op
# Warmup Iteration   3: 563.399 ns/op
Iteration   1: 516.202 ns/op
Iteration   2: 524.954 ns/op
Iteration   3: 519.215 ns/op
Iteration   4: 523.052 ns/op
Iteration   5: 522.105 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  513.839 ±(99.9%) 12.276 ns/op [Average]
  (min, avg, max) = (504.133, 513.839, 524.954), stdev = 8.120
  CI (99.9%): [501.563, 526.115] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 73.89% complete, ETA 00:15:20
# Fork: 1 of 2
# Warmup Iteration   1: 14593.555 ns/op
# Warmup Iteration   2: 1021.988 ns/op
# Warmup Iteration   3: 734.459 ns/op
Iteration   1: 660.937 ns/op
Iteration   2: 661.551 ns/op
Iteration   3: 661.434 ns/op
Iteration   4: 659.620 ns/op
Iteration   5: 664.076 ns/op

# Run progress: 73.92% complete, ETA 00:15:18
# Fork: 2 of 2
# Warmup Iteration   1: 23865.792 ns/op
# Warmup Iteration   2: 914.368 ns/op
# Warmup Iteration   3: 731.632 ns/op
Iteration   1: 664.579 ns/op
Iteration   2: 664.676 ns/op
Iteration   3: 663.414 ns/op
Iteration   4: 662.742 ns/op
Iteration   5: 662.376 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  662.540 ±(99.9%) 2.530 ns/op [Average]
  (min, avg, max) = (659.620, 662.540, 664.676), stdev = 1.673
  CI (99.9%): [660.010, 665.070] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 73.96% complete, ETA 00:15:17
# Fork: 1 of 2
# Warmup Iteration   1: 7576.709 ns/op
# Warmup Iteration   2: 863.221 ns/op
# Warmup Iteration   3: 586.793 ns/op
Iteration   1: 587.826 ns/op
Iteration   2: 590.710 ns/op
Iteration   3: 589.513 ns/op
Iteration   4: 585.920 ns/op
Iteration   5: 588.140 ns/op

# Run progress: 73.99% complete, ETA 00:15:16
# Fork: 2 of 2
# Warmup Iteration   1: 7466.939 ns/op
# Warmup Iteration   2: 934.821 ns/op
# Warmup Iteration   3: 600.479 ns/op
Iteration   1: 603.507 ns/op
Iteration   2: 600.627 ns/op
Iteration   3: 603.255 ns/op
Iteration   4: 603.515 ns/op
Iteration   5: 603.400 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  595.641 ±(99.9%) 11.717 ns/op [Average]
  (min, avg, max) = (585.920, 595.641, 603.515), stdev = 7.750
  CI (99.9%): [583.924, 607.359] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 74.03% complete, ETA 00:15:15
# Fork: 1 of 2
# Warmup Iteration   1: 1569.823 ns/op
# Warmup Iteration   2: 1279.129 ns/op
# Warmup Iteration   3: 972.719 ns/op
Iteration   1: 977.029 ns/op
Iteration   2: 975.285 ns/op
Iteration   3: 973.450 ns/op
Iteration   4: 974.446 ns/op
Iteration   5: 972.143 ns/op

# Run progress: 74.06% complete, ETA 00:15:13
# Fork: 2 of 2
# Warmup Iteration   1: 1835.799 ns/op
# Warmup Iteration   2: 1413.189 ns/op
# Warmup Iteration   3: 971.390 ns/op
Iteration   1: 963.663 ns/op
Iteration   2: 963.237 ns/op
Iteration   3: 970.347 ns/op
Iteration   4: 972.128 ns/op
Iteration   5: 973.050 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  971.478 ±(99.9%) 6.976 ns/op [Average]
  (min, avg, max) = (963.237, 971.478, 977.029), stdev = 4.614
  CI (99.9%): [964.502, 978.454] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 74.10% complete, ETA 00:15:12
# Fork: 1 of 2
# Warmup Iteration   1: 10401.462 ns/op
# Warmup Iteration   2: 5148.456 ns/op
# Warmup Iteration   3: 3801.242 ns/op
Iteration   1: 3802.395 ns/op
Iteration   2: 3800.241 ns/op
Iteration   3: 3806.703 ns/op
Iteration   4: 3791.874 ns/op
Iteration   5: 3796.769 ns/op

# Run progress: 74.13% complete, ETA 00:15:11
# Fork: 2 of 2
# Warmup Iteration   1: 10353.603 ns/op
# Warmup Iteration   2: 5457.839 ns/op
# Warmup Iteration   3: 3856.441 ns/op
Iteration   1: 3852.185 ns/op
Iteration   2: 3855.847 ns/op
Iteration   3: 3856.650 ns/op
Iteration   4: 3831.506 ns/op
Iteration   5: 3832.162 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3822.633 ±(99.9%) 39.305 ns/op [Average]
  (min, avg, max) = (3791.874, 3822.633, 3856.650), stdev = 25.998
  CI (99.9%): [3783.328, 3861.938] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 74.17% complete, ETA 00:15:10
# Fork: 1 of 2
# Warmup Iteration   1: 23.460 ns/op
# Warmup Iteration   2: 28.514 ns/op
# Warmup Iteration   3: 19.053 ns/op
Iteration   1: 19.007 ns/op
Iteration   2: 18.981 ns/op
Iteration   3: 18.980 ns/op
Iteration   4: 18.855 ns/op
Iteration   5: 18.850 ns/op

# Run progress: 74.20% complete, ETA 00:15:09
# Fork: 2 of 2
# Warmup Iteration   1: 25.920 ns/op
# Warmup Iteration   2: 30.290 ns/op
# Warmup Iteration   3: 19.029 ns/op
Iteration   1: 18.994 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.954 ns/op
Iteration   4: 18.822 ns/op
Iteration   5: 18.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.924 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (18.822, 18.924, 19.007), stdev = 0.073
  CI (99.9%): [18.814, 19.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 74.24% complete, ETA 00:15:07
# Fork: 1 of 2
# Warmup Iteration   1: 680.595 ns/op
# Warmup Iteration   2: 476.109 ns/op
# Warmup Iteration   3: 318.912 ns/op
Iteration   1: 319.916 ns/op
Iteration   2: 319.935 ns/op
Iteration   3: 320.096 ns/op
Iteration   4: 320.049 ns/op
Iteration   5: 319.549 ns/op

# Run progress: 74.27% complete, ETA 00:15:06
# Fork: 2 of 2
# Warmup Iteration   1: 753.897 ns/op
# Warmup Iteration   2: 420.283 ns/op
# Warmup Iteration   3: 308.938 ns/op
Iteration   1: 308.417 ns/op
Iteration   2: 308.790 ns/op
Iteration   3: 309.352 ns/op
Iteration   4: 310.699 ns/op
Iteration   5: 309.453 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  314.626 ±(99.9%) 8.468 ns/op [Average]
  (min, avg, max) = (308.417, 314.626, 320.096), stdev = 5.601
  CI (99.9%): [306.158, 323.093] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 74.31% complete, ETA 00:15:05
# Fork: 1 of 2
# Warmup Iteration   1: 4070.983 ns/op
# Warmup Iteration   2: 623.269 ns/op
# Warmup Iteration   3: 479.146 ns/op
Iteration   1: 479.977 ns/op
Iteration   2: 480.109 ns/op
Iteration   3: 479.082 ns/op
Iteration   4: 480.064 ns/op
Iteration   5: 480.390 ns/op

# Run progress: 74.34% complete, ETA 00:15:04
# Fork: 2 of 2
# Warmup Iteration   1: 3023.390 ns/op
# Warmup Iteration   2: 659.238 ns/op
# Warmup Iteration   3: 472.685 ns/op
Iteration   1: 472.775 ns/op
Iteration   2: 472.776 ns/op
Iteration   3: 472.785 ns/op
Iteration   4: 473.128 ns/op
Iteration   5: 473.002 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  476.409 ±(99.9%) 5.627 ns/op [Average]
  (min, avg, max) = (472.775, 476.409, 480.390), stdev = 3.722
  CI (99.9%): [470.782, 482.036] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 74.38% complete, ETA 00:15:02
# Fork: 1 of 2
# Warmup Iteration   1: 4275.534 ns/op
# Warmup Iteration   2: 715.116 ns/op
# Warmup Iteration   3: 473.111 ns/op
Iteration   1: 473.521 ns/op
Iteration   2: 473.856 ns/op
Iteration   3: 473.435 ns/op
Iteration   4: 473.817 ns/op
Iteration   5: 473.957 ns/op

# Run progress: 74.41% complete, ETA 00:15:01
# Fork: 2 of 2
# Warmup Iteration   1: 3912.271 ns/op
# Warmup Iteration   2: 597.925 ns/op
# Warmup Iteration   3: 453.007 ns/op
Iteration   1: 453.433 ns/op
Iteration   2: 453.560 ns/op
Iteration   3: 453.440 ns/op
Iteration   4: 454.440 ns/op
Iteration   5: 454.841 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  463.830 ±(99.9%) 15.772 ns/op [Average]
  (min, avg, max) = (453.433, 463.830, 473.957), stdev = 10.432
  CI (99.9%): [448.058, 479.602] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 74.44% complete, ETA 00:15:00
# Fork: 1 of 2
# Warmup Iteration   1: 1573.883 ns/op
# Warmup Iteration   2: 1114.350 ns/op
# Warmup Iteration   3: 846.647 ns/op
Iteration   1: 845.987 ns/op
Iteration   2: 846.510 ns/op
Iteration   3: 846.486 ns/op
Iteration   4: 846.803 ns/op
Iteration   5: 847.593 ns/op

# Run progress: 74.48% complete, ETA 00:14:59
# Fork: 2 of 2
# Warmup Iteration   1: 1599.742 ns/op
# Warmup Iteration   2: 1199.709 ns/op
# Warmup Iteration   3: 847.282 ns/op
Iteration   1: 847.518 ns/op
Iteration   2: 846.877 ns/op
Iteration   3: 847.429 ns/op
Iteration   4: 847.656 ns/op
Iteration   5: 848.007 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  847.086 ±(99.9%) 0.977 ns/op [Average]
  (min, avg, max) = (845.987, 847.086, 848.007), stdev = 0.646
  CI (99.9%): [846.109, 848.063] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 74.51% complete, ETA 00:14:58
# Fork: 1 of 2
# Warmup Iteration   1: 10846.752 ns/op
# Warmup Iteration   2: 4789.179 ns/op
# Warmup Iteration   3: 3466.592 ns/op
Iteration   1: 3466.454 ns/op
Iteration   2: 3469.223 ns/op
Iteration   3: 3468.638 ns/op
Iteration   4: 3446.874 ns/op
Iteration   5: 3445.213 ns/op

# Run progress: 74.55% complete, ETA 00:14:56
# Fork: 2 of 2
# Warmup Iteration   1: 10461.302 ns/op
# Warmup Iteration   2: 4897.353 ns/op
# Warmup Iteration   3: 3463.064 ns/op
Iteration   1: 3462.401 ns/op
Iteration   2: 3462.585 ns/op
Iteration   3: 3462.937 ns/op
Iteration   4: 3443.881 ns/op
Iteration   5: 3444.001 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3457.221 ±(99.9%) 16.345 ns/op [Average]
  (min, avg, max) = (3443.881, 3457.221, 3469.223), stdev = 10.811
  CI (99.9%): [3440.876, 3473.565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 74.58% complete, ETA 00:14:55
# Fork: 1 of 2
# Warmup Iteration   1: 26.289 ns/op
# Warmup Iteration   2: 30.506 ns/op
# Warmup Iteration   3: 19.034 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.955 ns/op
Iteration   3: 18.951 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.852 ns/op

# Run progress: 74.62% complete, ETA 00:14:54
# Fork: 2 of 2
# Warmup Iteration   1: 25.609 ns/op
# Warmup Iteration   2: 28.239 ns/op
# Warmup Iteration   3: 19.056 ns/op
Iteration   1: 19.008 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.956 ns/op
Iteration   4: 18.818 ns/op
Iteration   5: 18.836 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.916 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (18.818, 18.916, 19.008), stdev = 0.073
  CI (99.9%): [18.806, 19.026] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 74.65% complete, ETA 00:14:53
# Fork: 1 of 2
# Warmup Iteration   1: 10797.864 ns/op
# Warmup Iteration   2: 1138.494 ns/op
# Warmup Iteration   3: 812.264 ns/op
Iteration   1: 817.972 ns/op
Iteration   2: 813.577 ns/op
Iteration   3: 816.240 ns/op
Iteration   4: 815.012 ns/op
Iteration   5: 814.562 ns/op

# Run progress: 74.69% complete, ETA 00:14:51
# Fork: 2 of 2
# Warmup Iteration   1: 11114.919 ns/op
# Warmup Iteration   2: 1184.050 ns/op
# Warmup Iteration   3: 819.532 ns/op
Iteration   1: 822.263 ns/op
Iteration   2: 820.796 ns/op
Iteration   3: 816.354 ns/op
Iteration   4: 819.451 ns/op
Iteration   5: 819.515 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  817.574 ±(99.9%) 4.355 ns/op [Average]
  (min, avg, max) = (813.577, 817.574, 822.263), stdev = 2.881
  CI (99.9%): [813.219, 821.930] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 74.72% complete, ETA 00:14:50
# Fork: 1 of 2
# Warmup Iteration   1: 28041.639 ns/op
# Warmup Iteration   2: 1241.283 ns/op
# Warmup Iteration   3: 819.223 ns/op
Iteration   1: 736.625 ns/op
Iteration   2: 742.249 ns/op
Iteration   3: 739.179 ns/op
Iteration   4: 741.304 ns/op
Iteration   5: 739.907 ns/op

# Run progress: 74.76% complete, ETA 00:14:49
# Fork: 2 of 2
# Warmup Iteration   1: 38160.556 ns/op
# Warmup Iteration   2: 2923.821 ns/op
# Warmup Iteration   3: 899.979 ns/op
Iteration   1: 755.372 ns/op
Iteration   2: 752.587 ns/op
Iteration   3: 758.725 ns/op
Iteration   4: 757.209 ns/op
Iteration   5: 752.756 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  747.591 ±(99.9%) 12.817 ns/op [Average]
  (min, avg, max) = (736.625, 747.591, 758.725), stdev = 8.477
  CI (99.9%): [734.775, 760.408] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 74.79% complete, ETA 00:14:48
# Fork: 1 of 2
# Warmup Iteration   1: 31319.630 ns/op
# Warmup Iteration   2: 1147.459 ns/op
# Warmup Iteration   3: 1280.415 ns/op
Iteration   1: 738.786 ns/op
Iteration   2: 739.840 ns/op
Iteration   3: 743.493 ns/op
Iteration   4: 740.853 ns/op
Iteration   5: 741.265 ns/op

# Run progress: 74.83% complete, ETA 00:14:46
# Fork: 2 of 2
# Warmup Iteration   1: 31676.385 ns/op
# Warmup Iteration   2: 1074.350 ns/op
# Warmup Iteration   3: 830.248 ns/op
Iteration   1: 751.613 ns/op
Iteration   2: 752.175 ns/op
Iteration   3: 751.086 ns/op
Iteration   4: 751.093 ns/op
Iteration   5: 750.258 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  746.046 ±(99.9%) 8.504 ns/op [Average]
  (min, avg, max) = (738.786, 746.046, 752.175), stdev = 5.625
  CI (99.9%): [737.542, 754.550] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 74.86% complete, ETA 00:14:45
# Fork: 1 of 2
# Warmup Iteration   1: 1171.263 ns/op
# Warmup Iteration   2: 809.148 ns/op
# Warmup Iteration   3: 592.019 ns/op
Iteration   1: 589.567 ns/op
Iteration   2: 586.643 ns/op
Iteration   3: 592.294 ns/op
Iteration   4: 591.595 ns/op
Iteration   5: 587.585 ns/op

# Run progress: 74.90% complete, ETA 00:14:44
# Fork: 2 of 2
# Warmup Iteration   1: 944.432 ns/op
# Warmup Iteration   2: 785.277 ns/op
# Warmup Iteration   3: 590.251 ns/op
Iteration   1: 592.157 ns/op
Iteration   2: 592.371 ns/op
Iteration   3: 590.131 ns/op
Iteration   4: 590.741 ns/op
Iteration   5: 592.016 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  590.510 ±(99.9%) 3.082 ns/op [Average]
  (min, avg, max) = (586.643, 590.510, 592.371), stdev = 2.038
  CI (99.9%): [587.428, 593.592] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 74.93% complete, ETA 00:14:43
# Fork: 1 of 2
# Warmup Iteration   1: 15706.216 ns/op
# Warmup Iteration   2: 5758.286 ns/op
# Warmup Iteration   3: 4936.477 ns/op
Iteration   1: 4492.592 ns/op
Iteration   2: 4498.162 ns/op
Iteration   3: 4507.632 ns/op
Iteration   4: 4478.204 ns/op
Iteration   5: 4472.017 ns/op

# Run progress: 74.97% complete, ETA 00:14:42
# Fork: 2 of 2
# Warmup Iteration   1: 12615.118 ns/op
# Warmup Iteration   2: 6073.686 ns/op
# Warmup Iteration   3: 4927.740 ns/op
Iteration   1: 4472.193 ns/op
Iteration   2: 4476.114 ns/op
Iteration   3: 4472.188 ns/op
Iteration   4: 4451.315 ns/op
Iteration   5: 4455.862 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4477.628 ±(99.9%) 26.691 ns/op [Average]
  (min, avg, max) = (4451.315, 4477.628, 4507.632), stdev = 17.655
  CI (99.9%): [4450.937, 4504.319] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 75.00% complete, ETA 00:14:40
# Fork: 1 of 2
# Warmup Iteration   1: 23.807 ns/op
# Warmup Iteration   2: 28.803 ns/op
# Warmup Iteration   3: 19.020 ns/op
Iteration   1: 18.991 ns/op
Iteration   2: 18.937 ns/op
Iteration   3: 18.928 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.844 ns/op

# Run progress: 75.03% complete, ETA 00:14:39
# Fork: 2 of 2
# Warmup Iteration   1: 23.963 ns/op
# Warmup Iteration   2: 28.669 ns/op
# Warmup Iteration   3: 19.029 ns/op
Iteration   1: 19.004 ns/op
Iteration   2: 18.971 ns/op
Iteration   3: 18.957 ns/op
Iteration   4: 18.834 ns/op
Iteration   5: 18.848 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (18.833, 18.915, 19.004), stdev = 0.068
  CI (99.9%): [18.811, 19.018] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 75.07% complete, ETA 00:14:38
# Fork: 1 of 2
# Warmup Iteration   1: 2076.108 ns/op
# Warmup Iteration   2: 1149.935 ns/op
# Warmup Iteration   3: 852.278 ns/op
Iteration   1: 853.001 ns/op
Iteration   2: 852.101 ns/op
Iteration   3: 852.376 ns/op
Iteration   4: 852.495 ns/op
Iteration   5: 855.192 ns/op

# Run progress: 75.10% complete, ETA 00:14:37
# Fork: 2 of 2
# Warmup Iteration   1: 2040.276 ns/op
# Warmup Iteration   2: 1191.783 ns/op
# Warmup Iteration   3: 866.969 ns/op
Iteration   1: 867.866 ns/op
Iteration   2: 868.009 ns/op
Iteration   3: 867.309 ns/op
Iteration   4: 868.040 ns/op
Iteration   5: 867.937 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  860.433 ±(99.9%) 11.863 ns/op [Average]
  (min, avg, max) = (852.101, 860.433, 868.040), stdev = 7.847
  CI (99.9%): [848.569, 872.296] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 75.14% complete, ETA 00:14:35
# Fork: 1 of 2
# Warmup Iteration   1: 31314.638 ns/op
# Warmup Iteration   2: 1458.798 ns/op
# Warmup Iteration   3: 909.161 ns/op
Iteration   1: 834.793 ns/op
Iteration   2: 835.186 ns/op
Iteration   3: 834.767 ns/op
Iteration   4: 834.461 ns/op
Iteration   5: 834.381 ns/op

# Run progress: 75.17% complete, ETA 00:14:34
# Fork: 2 of 2
# Warmup Iteration   1: 23856.731 ns/op
# Warmup Iteration   2: 1332.187 ns/op
# Warmup Iteration   3: 931.248 ns/op
Iteration   1: 828.637 ns/op
Iteration   2: 828.212 ns/op
Iteration   3: 827.823 ns/op
Iteration   4: 827.601 ns/op
Iteration   5: 827.606 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  831.347 ±(99.9%) 5.400 ns/op [Average]
  (min, avg, max) = (827.601, 831.347, 835.186), stdev = 3.572
  CI (99.9%): [825.946, 836.747] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 75.21% complete, ETA 00:14:33
# Fork: 1 of 2
# Warmup Iteration   1: 16915.717 ns/op
# Warmup Iteration   2: 1336.519 ns/op
# Warmup Iteration   3: 958.853 ns/op
Iteration   1: 873.029 ns/op
Iteration   2: 873.082 ns/op
Iteration   3: 872.971 ns/op
Iteration   4: 872.313 ns/op
Iteration   5: 872.127 ns/op

# Run progress: 75.24% complete, ETA 00:14:32
# Fork: 2 of 2
# Warmup Iteration   1: 39263.793 ns/op
# Warmup Iteration   2: 1599.400 ns/op
# Warmup Iteration   3: 1047.208 ns/op
Iteration   1: 874.691 ns/op
Iteration   2: 871.314 ns/op
Iteration   3: 871.662 ns/op
Iteration   4: 870.795 ns/op
Iteration   5: 871.284 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  872.327 ±(99.9%) 1.747 ns/op [Average]
  (min, avg, max) = (870.795, 872.327, 874.691), stdev = 1.155
  CI (99.9%): [870.580, 874.073] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 75.28% complete, ETA 00:14:31
# Fork: 1 of 2
# Warmup Iteration   1: 1501.115 ns/op
# Warmup Iteration   2: 1309.103 ns/op
# Warmup Iteration   3: 940.278 ns/op
Iteration   1: 940.550 ns/op
Iteration   2: 940.403 ns/op
Iteration   3: 940.408 ns/op
Iteration   4: 940.976 ns/op
Iteration   5: 940.944 ns/op

# Run progress: 75.31% complete, ETA 00:14:29
# Fork: 2 of 2
# Warmup Iteration   1: 1795.797 ns/op
# Warmup Iteration   2: 1268.979 ns/op
# Warmup Iteration   3: 956.396 ns/op
Iteration   1: 958.628 ns/op
Iteration   2: 965.724 ns/op
Iteration   3: 969.822 ns/op
Iteration   4: 960.279 ns/op
Iteration   5: 968.587 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  952.632 ±(99.9%) 19.734 ns/op [Average]
  (min, avg, max) = (940.403, 952.632, 969.822), stdev = 13.053
  CI (99.9%): [932.898, 972.366] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 75.35% complete, ETA 00:14:28
# Fork: 1 of 2
# Warmup Iteration   1: 11083.529 ns/op
# Warmup Iteration   2: 5847.937 ns/op
# Warmup Iteration   3: 3993.816 ns/op
Iteration   1: 3977.452 ns/op
Iteration   2: 3997.748 ns/op
Iteration   3: 3978.000 ns/op
Iteration   4: 3987.098 ns/op
Iteration   5: 3968.292 ns/op

# Run progress: 75.38% complete, ETA 00:14:27
# Fork: 2 of 2
# Warmup Iteration   1: 10835.615 ns/op
# Warmup Iteration   2: 5365.795 ns/op
# Warmup Iteration   3: 3973.104 ns/op
Iteration   1: 3974.657 ns/op
Iteration   2: 3974.950 ns/op
Iteration   3: 3973.090 ns/op
Iteration   4: 3949.200 ns/op
Iteration   5: 3948.200 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3972.869 ±(99.9%) 22.906 ns/op [Average]
  (min, avg, max) = (3948.200, 3972.869, 3997.748), stdev = 15.151
  CI (99.9%): [3949.962, 3995.775] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 75.42% complete, ETA 00:14:26
# Fork: 1 of 2
# Warmup Iteration   1: 24.293 ns/op
# Warmup Iteration   2: 27.761 ns/op
# Warmup Iteration   3: 19.022 ns/op
Iteration   1: 19.015 ns/op
Iteration   2: 18.984 ns/op
Iteration   3: 18.983 ns/op
Iteration   4: 18.835 ns/op
Iteration   5: 18.841 ns/op

# Run progress: 75.45% complete, ETA 00:14:24
# Fork: 2 of 2
# Warmup Iteration   1: 23.960 ns/op
# Warmup Iteration   2: 30.414 ns/op
# Warmup Iteration   3: 19.034 ns/op
Iteration   1: 18.922 ns/op
Iteration   2: 18.917 ns/op
Iteration   3: 18.944 ns/op
Iteration   4: 18.834 ns/op
Iteration   5: 18.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.911 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (18.834, 18.911, 19.015), stdev = 0.071
  CI (99.9%): [18.804, 19.018] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 75.49% complete, ETA 00:14:23
# Fork: 1 of 2
# Warmup Iteration   1: 6664.261 ns/op
# Warmup Iteration   2: 1090.616 ns/op
# Warmup Iteration   3: 777.630 ns/op
Iteration   1: 778.526 ns/op
Iteration   2: 777.949 ns/op
Iteration   3: 778.285 ns/op
Iteration   4: 777.779 ns/op
Iteration   5: 779.286 ns/op

# Run progress: 75.52% complete, ETA 00:14:22
# Fork: 2 of 2
# Warmup Iteration   1: 6115.258 ns/op
# Warmup Iteration   2: 1095.318 ns/op
# Warmup Iteration   3: 751.939 ns/op
Iteration   1: 752.007 ns/op
Iteration   2: 752.338 ns/op
Iteration   3: 752.682 ns/op
Iteration   4: 752.933 ns/op
Iteration   5: 753.310 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  765.509 ±(99.9%) 20.502 ns/op [Average]
  (min, avg, max) = (752.007, 765.509, 779.286), stdev = 13.561
  CI (99.9%): [745.008, 786.011] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 75.56% complete, ETA 00:14:21
# Fork: 1 of 2
# Warmup Iteration   1: 23431.610 ns/op
# Warmup Iteration   2: 1297.744 ns/op
# Warmup Iteration   3: 976.078 ns/op
Iteration   1: 891.555 ns/op
Iteration   2: 891.433 ns/op
Iteration   3: 891.316 ns/op
Iteration   4: 889.175 ns/op
Iteration   5: 889.261 ns/op

# Run progress: 75.59% complete, ETA 00:14:20
# Fork: 2 of 2
# Warmup Iteration   1: 29695.490 ns/op
# Warmup Iteration   2: 1770.292 ns/op
# Warmup Iteration   3: 968.389 ns/op
Iteration   1: 880.997 ns/op
Iteration   2: 881.064 ns/op
Iteration   3: 880.622 ns/op
Iteration   4: 879.166 ns/op
Iteration   5: 878.797 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  885.338 ±(99.9%) 8.461 ns/op [Average]
  (min, avg, max) = (878.797, 885.338, 891.555), stdev = 5.596
  CI (99.9%): [876.877, 893.799] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 75.63% complete, ETA 00:14:18
# Fork: 1 of 2
# Warmup Iteration   1: 10856.154 ns/op
# Warmup Iteration   2: 1201.446 ns/op
# Warmup Iteration   3: 864.660 ns/op
Iteration   1: 862.163 ns/op
Iteration   2: 873.551 ns/op
Iteration   3: 859.290 ns/op
Iteration   4: 870.232 ns/op
Iteration   5: 858.274 ns/op

# Run progress: 75.66% complete, ETA 00:14:17
# Fork: 2 of 2
# Warmup Iteration   1: 7876.278 ns/op
# Warmup Iteration   2: 1233.011 ns/op
# Warmup Iteration   3: 853.467 ns/op
Iteration   1: 853.721 ns/op
Iteration   2: 853.221 ns/op
Iteration   3: 853.576 ns/op
Iteration   4: 853.910 ns/op
Iteration   5: 853.794 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  859.173 ±(99.9%) 11.177 ns/op [Average]
  (min, avg, max) = (853.221, 859.173, 873.551), stdev = 7.393
  CI (99.9%): [847.996, 870.350] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 75.69% complete, ETA 00:14:16
# Fork: 1 of 2
# Warmup Iteration   1: 1243.582 ns/op
# Warmup Iteration   2: 1109.913 ns/op
# Warmup Iteration   3: 840.459 ns/op
Iteration   1: 841.353 ns/op
Iteration   2: 840.893 ns/op
Iteration   3: 841.163 ns/op
Iteration   4: 840.917 ns/op
Iteration   5: 841.164 ns/op

# Run progress: 75.73% complete, ETA 00:14:15
# Fork: 2 of 2
# Warmup Iteration   1: 1274.820 ns/op
# Warmup Iteration   2: 1179.570 ns/op
# Warmup Iteration   3: 844.988 ns/op
Iteration   1: 845.656 ns/op
Iteration   2: 845.489 ns/op
Iteration   3: 845.442 ns/op
Iteration   4: 845.688 ns/op
Iteration   5: 845.816 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  843.358 ±(99.9%) 3.610 ns/op [Average]
  (min, avg, max) = (840.893, 843.358, 845.816), stdev = 2.388
  CI (99.9%): [839.748, 846.968] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 75.76% complete, ETA 00:14:13
# Fork: 1 of 2
# Warmup Iteration   1: 2231.494 ns/op
# Warmup Iteration   2: 1159.455 ns/op
# Warmup Iteration   3: 830.138 ns/op
Iteration   1: 830.650 ns/op
Iteration   2: 830.793 ns/op
Iteration   3: 830.492 ns/op
Iteration   4: 829.405 ns/op
Iteration   5: 829.601 ns/op

# Run progress: 75.80% complete, ETA 00:14:12
# Fork: 2 of 2
# Warmup Iteration   1: 2254.253 ns/op
# Warmup Iteration   2: 1196.515 ns/op
# Warmup Iteration   3: 821.706 ns/op
Iteration   1: 822.164 ns/op
Iteration   2: 821.713 ns/op
Iteration   3: 821.237 ns/op
Iteration   4: 822.641 ns/op
Iteration   5: 822.558 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  826.125 ±(99.9%) 6.533 ns/op [Average]
  (min, avg, max) = (821.237, 826.125, 830.793), stdev = 4.321
  CI (99.9%): [819.592, 832.659] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 75.83% complete, ETA 00:14:11
# Fork: 1 of 2
# Warmup Iteration   1: 23.773 ns/op
# Warmup Iteration   2: 31.480 ns/op
# Warmup Iteration   3: 19.043 ns/op
Iteration   1: 18.996 ns/op
Iteration   2: 18.971 ns/op
Iteration   3: 18.966 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.828 ns/op

# Run progress: 75.87% complete, ETA 00:14:10
# Fork: 2 of 2
# Warmup Iteration   1: 24.972 ns/op
# Warmup Iteration   2: 30.993 ns/op
# Warmup Iteration   3: 19.009 ns/op
Iteration   1: 19.003 ns/op
Iteration   2: 18.969 ns/op
Iteration   3: 18.962 ns/op
Iteration   4: 18.817 ns/op
Iteration   5: 18.858 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.920 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (18.817, 18.920, 19.003), stdev = 0.077
  CI (99.9%): [18.803, 19.036] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 75.90% complete, ETA 00:14:09
# Fork: 1 of 2
# Warmup Iteration   1: 47519.627 ns/op
# Warmup Iteration   2: 1288.376 ns/op
# Warmup Iteration   3: 980.711 ns/op
Iteration   1: 836.018 ns/op
Iteration   2: 839.347 ns/op
Iteration   3: 836.538 ns/op
Iteration   4: 834.577 ns/op
Iteration   5: 839.593 ns/op

# Run progress: 75.94% complete, ETA 00:14:07
# Fork: 2 of 2
# Warmup Iteration   1: 44202.909 ns/op
# Warmup Iteration   2: 1166.726 ns/op
# Warmup Iteration   3: 1000.147 ns/op
Iteration   1: 841.805 ns/op
Iteration   2: 838.303 ns/op
Iteration   3: 840.811 ns/op
Iteration   4: 840.131 ns/op
Iteration   5: 842.977 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  839.010 ±(99.9%) 4.023 ns/op [Average]
  (min, avg, max) = (834.577, 839.010, 842.977), stdev = 2.661
  CI (99.9%): [834.987, 843.033] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 75.97% complete, ETA 00:14:06
# Fork: 1 of 2
# Warmup Iteration   1: 28702.335 ns/op
# Warmup Iteration   2: 1609.034 ns/op
# Warmup Iteration   3: 1043.882 ns/op
Iteration   1: 946.249 ns/op
Iteration   2: 954.570 ns/op
Iteration   3: 948.625 ns/op
Iteration   4: 945.242 ns/op
Iteration   5: 945.222 ns/op

# Run progress: 76.01% complete, ETA 00:14:05
# Fork: 2 of 2
# Warmup Iteration   1: 35226.875 ns/op
# Warmup Iteration   2: 1778.415 ns/op
# Warmup Iteration   3: 1038.058 ns/op
Iteration   1: 951.612 ns/op
Iteration   2: 949.074 ns/op
Iteration   3: 947.106 ns/op
Iteration   4: 948.717 ns/op
Iteration   5: 954.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  949.054 ±(99.9%) 5.137 ns/op [Average]
  (min, avg, max) = (945.222, 949.054, 954.570), stdev = 3.398
  CI (99.9%): [943.918, 954.191] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 76.04% complete, ETA 00:14:04
# Fork: 1 of 2
# Warmup Iteration   1: 25361.881 ns/op
# Warmup Iteration   2: 1435.964 ns/op
# Warmup Iteration   3: 1009.606 ns/op
Iteration   1: 925.653 ns/op
Iteration   2: 922.575 ns/op
Iteration   3: 924.396 ns/op
Iteration   4: 923.545 ns/op
Iteration   5: 926.301 ns/op

# Run progress: 76.08% complete, ETA 00:14:02
# Fork: 2 of 2
# Warmup Iteration   1: 44239.724 ns/op
# Warmup Iteration   2: 1770.175 ns/op
# Warmup Iteration   3: 1067.131 ns/op
Iteration   1: 913.055 ns/op
Iteration   2: 911.045 ns/op
Iteration   3: 912.592 ns/op
Iteration   4: 911.880 ns/op
Iteration   5: 911.079 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  918.212 ±(99.9%) 10.167 ns/op [Average]
  (min, avg, max) = (911.045, 918.212, 926.301), stdev = 6.725
  CI (99.9%): [908.045, 928.379] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 76.11% complete, ETA 00:14:01
# Fork: 1 of 2
# Warmup Iteration   1: 1602.802 ns/op
# Warmup Iteration   2: 1354.096 ns/op
# Warmup Iteration   3: 1027.529 ns/op
Iteration   1: 1030.784 ns/op
Iteration   2: 1024.515 ns/op
Iteration   3: 1032.542 ns/op
Iteration   4: 1026.563 ns/op
Iteration   5: 1026.863 ns/op

# Run progress: 76.15% complete, ETA 00:14:00
# Fork: 2 of 2
# Warmup Iteration   1: 1900.879 ns/op
# Warmup Iteration   2: 1520.054 ns/op
# Warmup Iteration   3: 1025.181 ns/op
Iteration   1: 1027.804 ns/op
Iteration   2: 1028.041 ns/op
Iteration   3: 1031.930 ns/op
Iteration   4: 1035.077 ns/op
Iteration   5: 1029.005 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1029.312 ±(99.9%) 4.866 ns/op [Average]
  (min, avg, max) = (1024.515, 1029.312, 1035.077), stdev = 3.219
  CI (99.9%): [1024.446, 1034.179] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 76.18% complete, ETA 00:13:59
# Fork: 1 of 2
# Warmup Iteration   1: 13102.344 ns/op
# Warmup Iteration   2: 5349.936 ns/op
# Warmup Iteration   3: 4332.370 ns/op
Iteration   1: 3905.892 ns/op
Iteration   2: 3901.575 ns/op
Iteration   3: 3906.463 ns/op
Iteration   4: 3893.816 ns/op
Iteration   5: 3893.790 ns/op

# Run progress: 76.22% complete, ETA 00:13:57
# Fork: 2 of 2
# Warmup Iteration   1: 11457.202 ns/op
# Warmup Iteration   2: 5384.987 ns/op
# Warmup Iteration   3: 4206.405 ns/op
Iteration   1: 3819.175 ns/op
Iteration   2: 3816.740 ns/op
Iteration   3: 3821.069 ns/op
Iteration   4: 3799.494 ns/op
Iteration   5: 3801.745 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3855.976 ±(99.9%) 71.670 ns/op [Average]
  (min, avg, max) = (3799.494, 3855.976, 3906.463), stdev = 47.405
  CI (99.9%): [3784.306, 3927.646] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 76.25% complete, ETA 00:13:56
# Fork: 1 of 2
# Warmup Iteration   1: 23.912 ns/op
# Warmup Iteration   2: 30.299 ns/op
# Warmup Iteration   3: 19.020 ns/op
Iteration   1: 18.986 ns/op
Iteration   2: 19.012 ns/op
Iteration   3: 18.946 ns/op
Iteration   4: 18.845 ns/op
Iteration   5: 18.851 ns/op

# Run progress: 76.28% complete, ETA 00:13:55
# Fork: 2 of 2
# Warmup Iteration   1: 23.244 ns/op
# Warmup Iteration   2: 30.936 ns/op
# Warmup Iteration   3: 19.036 ns/op
Iteration   1: 19.016 ns/op
Iteration   2: 18.941 ns/op
Iteration   3: 18.966 ns/op
Iteration   4: 18.849 ns/op
Iteration   5: 18.855 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.927 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (18.845, 18.927, 19.016), stdev = 0.070
  CI (99.9%): [18.820, 19.033] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 76.32% complete, ETA 00:13:54
# Fork: 1 of 2
# Warmup Iteration   1: 138.837 ns/op
# Warmup Iteration   2: 130.076 ns/op
# Warmup Iteration   3: 95.532 ns/op
Iteration   1: 95.540 ns/op
Iteration   2: 95.641 ns/op
Iteration   3: 95.482 ns/op
Iteration   4: 95.775 ns/op
Iteration   5: 95.647 ns/op

# Run progress: 76.35% complete, ETA 00:13:53
# Fork: 2 of 2
# Warmup Iteration   1: 139.285 ns/op
# Warmup Iteration   2: 133.512 ns/op
# Warmup Iteration   3: 95.590 ns/op
Iteration   1: 95.524 ns/op
Iteration   2: 95.570 ns/op
Iteration   3: 95.488 ns/op
Iteration   4: 95.748 ns/op
Iteration   5: 95.797 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.621 ±(99.9%) 0.180 ns/op [Average]
  (min, avg, max) = (95.482, 95.621, 95.797), stdev = 0.119
  CI (99.9%): [95.441, 95.801] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 76.39% complete, ETA 00:13:51
# Fork: 1 of 2
# Warmup Iteration   1: 702.389 ns/op
# Warmup Iteration   2: 153.270 ns/op
# Warmup Iteration   3: 114.790 ns/op
Iteration   1: 114.754 ns/op
Iteration   2: 114.372 ns/op
Iteration   3: 114.439 ns/op
Iteration   4: 114.524 ns/op
Iteration   5: 115.692 ns/op

# Run progress: 76.42% complete, ETA 00:13:50
# Fork: 2 of 2
# Warmup Iteration   1: 776.274 ns/op
# Warmup Iteration   2: 168.723 ns/op
# Warmup Iteration   3: 114.558 ns/op
Iteration   1: 114.620 ns/op
Iteration   2: 114.482 ns/op
Iteration   3: 114.109 ns/op
Iteration   4: 114.948 ns/op
Iteration   5: 114.563 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.650 ±(99.9%) 0.648 ns/op [Average]
  (min, avg, max) = (114.109, 114.650, 115.692), stdev = 0.428
  CI (99.9%): [114.003, 115.298] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 76.46% complete, ETA 00:13:49
# Fork: 1 of 2
# Warmup Iteration   1: 3187.844 ns/op
# Warmup Iteration   2: 177.814 ns/op
# Warmup Iteration   3: 115.831 ns/op
Iteration   1: 116.080 ns/op
Iteration   2: 115.804 ns/op
Iteration   3: 115.822 ns/op
Iteration   4: 116.138 ns/op
Iteration   5: 116.178 ns/op

# Run progress: 76.49% complete, ETA 00:13:48
# Fork: 2 of 2
# Warmup Iteration   1: 3160.660 ns/op
# Warmup Iteration   2: 139.120 ns/op
# Warmup Iteration   3: 115.684 ns/op
Iteration   1: 115.622 ns/op
Iteration   2: 115.659 ns/op
Iteration   3: 116.183 ns/op
Iteration   4: 115.971 ns/op
Iteration   5: 115.873 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.933 ±(99.9%) 0.315 ns/op [Average]
  (min, avg, max) = (115.622, 115.933, 116.183), stdev = 0.209
  CI (99.9%): [115.618, 116.248] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 76.53% complete, ETA 00:13:46
# Fork: 1 of 2
# Warmup Iteration   1: 104.980 ns/op
# Warmup Iteration   2: 113.451 ns/op
# Warmup Iteration   3: 73.518 ns/op
Iteration   1: 73.571 ns/op
Iteration   2: 73.532 ns/op
Iteration   3: 73.610 ns/op
Iteration   4: 74.285 ns/op
Iteration   5: 74.242 ns/op

# Run progress: 76.56% complete, ETA 00:13:45
# Fork: 2 of 2
# Warmup Iteration   1: 105.670 ns/op
# Warmup Iteration   2: 106.250 ns/op
# Warmup Iteration   3: 73.549 ns/op
Iteration   1: 73.568 ns/op
Iteration   2: 73.606 ns/op
Iteration   3: 73.560 ns/op
Iteration   4: 74.456 ns/op
Iteration   5: 74.430 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.886 ±(99.9%) 0.616 ns/op [Average]
  (min, avg, max) = (73.532, 73.886, 74.456), stdev = 0.407
  CI (99.9%): [73.270, 74.502] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 76.60% complete, ETA 00:13:44
# Fork: 1 of 2
# Warmup Iteration   1: 220.326 ns/op
# Warmup Iteration   2: 225.622 ns/op
# Warmup Iteration   3: 156.476 ns/op
Iteration   1: 156.940 ns/op
Iteration   2: 157.040 ns/op
Iteration   3: 156.861 ns/op
Iteration   4: 157.049 ns/op
Iteration   5: 157.010 ns/op

# Run progress: 76.63% complete, ETA 00:13:43
# Fork: 2 of 2
# Warmup Iteration   1: 222.717 ns/op
# Warmup Iteration   2: 219.781 ns/op
# Warmup Iteration   3: 156.903 ns/op
Iteration   1: 156.818 ns/op
Iteration   2: 156.937 ns/op
Iteration   3: 156.851 ns/op
Iteration   4: 157.200 ns/op
Iteration   5: 157.149 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.985 ±(99.9%) 0.193 ns/op [Average]
  (min, avg, max) = (156.818, 156.985, 157.200), stdev = 0.127
  CI (99.9%): [156.793, 157.178] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 76.67% complete, ETA 00:13:42
# Fork: 1 of 2
# Warmup Iteration   1: 24.265 ns/op
# Warmup Iteration   2: 30.592 ns/op
# Warmup Iteration   3: 19.060 ns/op
Iteration   1: 19.028 ns/op
Iteration   2: 18.947 ns/op
Iteration   3: 18.956 ns/op
Iteration   4: 18.839 ns/op
Iteration   5: 18.854 ns/op

# Run progress: 76.70% complete, ETA 00:13:40
# Fork: 2 of 2
# Warmup Iteration   1: 25.833 ns/op
# Warmup Iteration   2: 28.077 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 19.007 ns/op
Iteration   2: 18.966 ns/op
Iteration   3: 18.962 ns/op
Iteration   4: 18.810 ns/op
Iteration   5: 18.823 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (18.810, 18.919, 19.028), stdev = 0.080
  CI (99.9%): [18.798, 19.040] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 76.74% complete, ETA 00:13:39
# Fork: 1 of 2
# Warmup Iteration   1: 11087.849 ns/op
# Warmup Iteration   2: 815.253 ns/op
# Warmup Iteration   3: 553.176 ns/op
Iteration   1: 551.612 ns/op
Iteration   2: 553.834 ns/op
Iteration   3: 552.146 ns/op
Iteration   4: 552.595 ns/op
Iteration   5: 553.462 ns/op

# Run progress: 76.77% complete, ETA 00:13:38
# Fork: 2 of 2
# Warmup Iteration   1: 2176.989 ns/op
# Warmup Iteration   2: 766.124 ns/op
# Warmup Iteration   3: 533.293 ns/op
Iteration   1: 533.622 ns/op
Iteration   2: 533.150 ns/op
Iteration   3: 533.041 ns/op
Iteration   4: 533.438 ns/op
Iteration   5: 534.574 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  543.147 ±(99.9%) 15.311 ns/op [Average]
  (min, avg, max) = (533.041, 543.147, 553.834), stdev = 10.127
  CI (99.9%): [527.836, 558.458] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 76.81% complete, ETA 00:13:37
# Fork: 1 of 2
# Warmup Iteration   1: 11469.923 ns/op
# Warmup Iteration   2: 655.929 ns/op
# Warmup Iteration   3: 496.781 ns/op
Iteration   1: 449.216 ns/op
Iteration   2: 453.724 ns/op
Iteration   3: 452.874 ns/op
Iteration   4: 453.309 ns/op
Iteration   5: 447.449 ns/op

# Run progress: 76.84% complete, ETA 00:13:35
# Fork: 2 of 2
# Warmup Iteration   1: 11261.653 ns/op
# Warmup Iteration   2: 630.943 ns/op
# Warmup Iteration   3: 449.434 ns/op
Iteration   1: 447.694 ns/op
Iteration   2: 447.138 ns/op
Iteration   3: 446.679 ns/op
Iteration   4: 447.497 ns/op
Iteration   5: 446.182 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  449.176 ±(99.9%) 4.473 ns/op [Average]
  (min, avg, max) = (446.182, 449.176, 453.724), stdev = 2.959
  CI (99.9%): [444.703, 453.650] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 76.88% complete, ETA 00:13:34
# Fork: 1 of 2
# Warmup Iteration   1: 31027.256 ns/op
# Warmup Iteration   2: 863.234 ns/op
# Warmup Iteration   3: 552.498 ns/op
Iteration   1: 502.981 ns/op
Iteration   2: 502.343 ns/op
Iteration   3: 503.468 ns/op
Iteration   4: 504.058 ns/op
Iteration   5: 502.990 ns/op

# Run progress: 76.91% complete, ETA 00:13:33
# Fork: 2 of 2
# Warmup Iteration   1: 28030.169 ns/op
# Warmup Iteration   2: 840.852 ns/op
# Warmup Iteration   3: 553.635 ns/op
Iteration   1: 506.971 ns/op
Iteration   2: 504.907 ns/op
Iteration   3: 506.978 ns/op
Iteration   4: 505.709 ns/op
Iteration   5: 506.537 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  504.694 ±(99.9%) 2.674 ns/op [Average]
  (min, avg, max) = (502.343, 504.694, 506.978), stdev = 1.768
  CI (99.9%): [502.021, 507.368] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 76.94% complete, ETA 00:13:32
# Fork: 1 of 2
# Warmup Iteration   1: 412.534 ns/op
# Warmup Iteration   2: 373.877 ns/op
# Warmup Iteration   3: 276.852 ns/op
Iteration   1: 276.988 ns/op
Iteration   2: 277.908 ns/op
Iteration   3: 276.937 ns/op
Iteration   4: 277.556 ns/op
Iteration   5: 277.621 ns/op

# Run progress: 76.98% complete, ETA 00:13:31
# Fork: 2 of 2
# Warmup Iteration   1: 416.297 ns/op
# Warmup Iteration   2: 364.276 ns/op
# Warmup Iteration   3: 276.874 ns/op
Iteration   1: 276.912 ns/op
Iteration   2: 277.014 ns/op
Iteration   3: 277.002 ns/op
Iteration   4: 277.712 ns/op
Iteration   5: 277.545 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  277.319 ±(99.9%) 0.578 ns/op [Average]
  (min, avg, max) = (276.912, 277.319, 277.908), stdev = 0.382
  CI (99.9%): [276.742, 277.897] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 77.01% complete, ETA 00:13:29
# Fork: 1 of 2
# Warmup Iteration   1: 2886.255 ns/op
# Warmup Iteration   2: 1511.503 ns/op
# Warmup Iteration   3: 1059.212 ns/op
Iteration   1: 1057.085 ns/op
Iteration   2: 1061.242 ns/op
Iteration   3: 1059.450 ns/op
Iteration   4: 1057.955 ns/op
Iteration   5: 1058.833 ns/op

# Run progress: 77.05% complete, ETA 00:13:28
# Fork: 2 of 2
# Warmup Iteration   1: 3012.595 ns/op
# Warmup Iteration   2: 1459.025 ns/op
# Warmup Iteration   3: 1061.900 ns/op
Iteration   1: 1062.206 ns/op
Iteration   2: 1061.831 ns/op
Iteration   3: 1065.316 ns/op
Iteration   4: 1062.271 ns/op
Iteration   5: 1060.685 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1060.687 ±(99.9%) 3.678 ns/op [Average]
  (min, avg, max) = (1057.085, 1060.687, 1065.316), stdev = 2.433
  CI (99.9%): [1057.009, 1064.366] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 77.08% complete, ETA 00:13:27
# Fork: 1 of 2
# Warmup Iteration   1: 24.673 ns/op
# Warmup Iteration   2: 31.674 ns/op
# Warmup Iteration   3: 19.010 ns/op
Iteration   1: 19.006 ns/op
Iteration   2: 18.944 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.858 ns/op

# Run progress: 77.12% complete, ETA 00:13:26
# Fork: 2 of 2
# Warmup Iteration   1: 25.075 ns/op
# Warmup Iteration   2: 25.675 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 18.981 ns/op
Iteration   2: 18.974 ns/op
Iteration   3: 18.963 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (18.829, 18.919, 19.006), stdev = 0.071
  CI (99.9%): [18.811, 19.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 77.15% complete, ETA 00:13:24
# Fork: 1 of 2
# Warmup Iteration   1: 3054.968 ns/op
# Warmup Iteration   2: 1373.514 ns/op
# Warmup Iteration   3: 945.507 ns/op
Iteration   1: 946.331 ns/op
Iteration   2: 945.540 ns/op
Iteration   3: 945.656 ns/op
Iteration   4: 945.566 ns/op
Iteration   5: 945.909 ns/op

# Run progress: 77.19% complete, ETA 00:13:23
# Fork: 2 of 2
# Warmup Iteration   1: 3051.477 ns/op
# Warmup Iteration   2: 1300.963 ns/op
# Warmup Iteration   3: 952.803 ns/op
Iteration   1: 952.957 ns/op
Iteration   2: 952.763 ns/op
Iteration   3: 952.395 ns/op
Iteration   4: 953.898 ns/op
Iteration   5: 952.897 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  949.391 ±(99.9%) 5.759 ns/op [Average]
  (min, avg, max) = (945.540, 949.391, 953.898), stdev = 3.810
  CI (99.9%): [943.632, 955.151] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 77.22% complete, ETA 00:13:22
# Fork: 1 of 2
# Warmup Iteration   1: 7888.320 ns/op
# Warmup Iteration   2: 1260.857 ns/op
# Warmup Iteration   3: 876.426 ns/op
Iteration   1: 877.354 ns/op
Iteration   2: 878.845 ns/op
Iteration   3: 876.132 ns/op
Iteration   4: 878.135 ns/op
Iteration   5: 876.411 ns/op

# Run progress: 77.26% complete, ETA 00:13:21
# Fork: 2 of 2
# Warmup Iteration   1: 8787.016 ns/op
# Warmup Iteration   2: 1280.407 ns/op
# Warmup Iteration   3: 881.969 ns/op
Iteration   1: 882.691 ns/op
Iteration   2: 882.807 ns/op
Iteration   3: 882.442 ns/op
Iteration   4: 882.039 ns/op
Iteration   5: 882.413 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  879.927 ±(99.9%) 4.236 ns/op [Average]
  (min, avg, max) = (876.132, 879.927, 882.807), stdev = 2.802
  CI (99.9%): [875.691, 884.163] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 77.29% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: 11115.543 ns/op
# Warmup Iteration   2: 1356.609 ns/op
# Warmup Iteration   3: 908.992 ns/op
Iteration   1: 909.397 ns/op
Iteration   2: 909.486 ns/op
Iteration   3: 909.287 ns/op
Iteration   4: 906.218 ns/op
Iteration   5: 906.404 ns/op

# Run progress: 77.33% complete, ETA 00:13:18
# Fork: 2 of 2
# Warmup Iteration   1: 7828.189 ns/op
# Warmup Iteration   2: 1213.539 ns/op
# Warmup Iteration   3: 923.932 ns/op
Iteration   1: 922.951 ns/op
Iteration   2: 923.464 ns/op
Iteration   3: 923.580 ns/op
Iteration   4: 920.365 ns/op
Iteration   5: 920.802 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  915.195 ±(99.9%) 11.448 ns/op [Average]
  (min, avg, max) = (906.218, 915.195, 923.580), stdev = 7.572
  CI (99.9%): [903.748, 926.643] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 77.36% complete, ETA 00:13:17
# Fork: 1 of 2
# Warmup Iteration   1: 1957.552 ns/op
# Warmup Iteration   2: 1468.789 ns/op
# Warmup Iteration   3: 986.192 ns/op
Iteration   1: 989.148 ns/op
Iteration   2: 986.028 ns/op
Iteration   3: 989.306 ns/op
Iteration   4: 992.655 ns/op
Iteration   5: 988.610 ns/op

# Run progress: 77.40% complete, ETA 00:13:16
# Fork: 2 of 2
# Warmup Iteration   1: 2001.057 ns/op
# Warmup Iteration   2: 1386.749 ns/op
# Warmup Iteration   3: 1005.509 ns/op
Iteration   1: 1005.937 ns/op
Iteration   2: 1015.880 ns/op
Iteration   3: 1015.772 ns/op
Iteration   4: 1014.243 ns/op
Iteration   5: 1005.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1000.286 ±(99.9%) 18.701 ns/op [Average]
  (min, avg, max) = (986.028, 1000.286, 1015.880), stdev = 12.370
  CI (99.9%): [981.585, 1018.987] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 77.43% complete, ETA 00:13:15
# Fork: 1 of 2
# Warmup Iteration   1: 8561.182 ns/op
# Warmup Iteration   2: 5286.358 ns/op
# Warmup Iteration   3: 3739.344 ns/op
Iteration   1: 3740.481 ns/op
Iteration   2: 3745.035 ns/op
Iteration   3: 3757.909 ns/op
Iteration   4: 3725.767 ns/op
Iteration   5: 3718.187 ns/op

# Run progress: 77.47% complete, ETA 00:13:13
# Fork: 2 of 2
# Warmup Iteration   1: 14188.255 ns/op
# Warmup Iteration   2: 5476.602 ns/op
# Warmup Iteration   3: 4833.847 ns/op
Iteration   1: 4048.936 ns/op
Iteration   2: 4047.866 ns/op
Iteration   3: 4039.466 ns/op
Iteration   4: 4028.300 ns/op
Iteration   5: 4022.471 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3887.442 ±(99.9%) 239.811 ns/op [Average]
  (min, avg, max) = (3718.187, 3887.442, 4048.936), stdev = 158.620
  CI (99.9%): [3647.631, 4127.253] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 77.50% complete, ETA 00:13:12
# Fork: 1 of 2
# Warmup Iteration   1: 23.459 ns/op
# Warmup Iteration   2: 26.538 ns/op
# Warmup Iteration   3: 19.029 ns/op
Iteration   1: 18.986 ns/op
Iteration   2: 18.942 ns/op
Iteration   3: 18.978 ns/op
Iteration   4: 18.822 ns/op
Iteration   5: 18.854 ns/op

# Run progress: 77.53% complete, ETA 00:13:11
# Fork: 2 of 2
# Warmup Iteration   1: 24.700 ns/op
# Warmup Iteration   2: 31.365 ns/op
# Warmup Iteration   3: 19.080 ns/op
Iteration   1: 19.021 ns/op
Iteration   2: 18.949 ns/op
Iteration   3: 18.995 ns/op
Iteration   4: 18.845 ns/op
Iteration   5: 18.876 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.927 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (18.822, 18.927, 19.021), stdev = 0.071
  CI (99.9%): [18.819, 19.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 77.57% complete, ETA 00:13:10
# Fork: 1 of 2
# Warmup Iteration   1: 2456.083 ns/op
# Warmup Iteration   2: 946.622 ns/op
# Warmup Iteration   3: 661.024 ns/op
Iteration   1: 661.043 ns/op
Iteration   2: 660.975 ns/op
Iteration   3: 660.968 ns/op
Iteration   4: 661.432 ns/op
Iteration   5: 661.471 ns/op

# Run progress: 77.60% complete, ETA 00:13:09
# Fork: 2 of 2
# Warmup Iteration   1: 2159.884 ns/op
# Warmup Iteration   2: 900.963 ns/op
# Warmup Iteration   3: 642.599 ns/op
Iteration   1: 643.504 ns/op
Iteration   2: 642.683 ns/op
Iteration   3: 643.041 ns/op
Iteration   4: 644.119 ns/op
Iteration   5: 642.940 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  652.217 ±(99.9%) 14.293 ns/op [Average]
  (min, avg, max) = (642.683, 652.217, 661.471), stdev = 9.454
  CI (99.9%): [637.924, 666.510] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 77.64% complete, ETA 00:13:07
# Fork: 1 of 2
# Warmup Iteration   1: 10943.267 ns/op
# Warmup Iteration   2: 1172.513 ns/op
# Warmup Iteration   3: 793.395 ns/op
Iteration   1: 793.819 ns/op
Iteration   2: 794.911 ns/op
Iteration   3: 793.395 ns/op
Iteration   4: 806.692 ns/op
Iteration   5: 821.922 ns/op

# Run progress: 77.67% complete, ETA 00:13:06
# Fork: 2 of 2
# Warmup Iteration   1: 7825.760 ns/op
# Warmup Iteration   2: 1111.393 ns/op
# Warmup Iteration   3: 781.883 ns/op
Iteration   1: 781.896 ns/op
Iteration   2: 781.598 ns/op
Iteration   3: 782.001 ns/op
Iteration   4: 782.038 ns/op
Iteration   5: 781.760 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  792.003 ±(99.9%) 20.404 ns/op [Average]
  (min, avg, max) = (781.598, 792.003, 821.922), stdev = 13.496
  CI (99.9%): [771.600, 812.407] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 77.71% complete, ETA 00:13:05
# Fork: 1 of 2
# Warmup Iteration   1: 10642.263 ns/op
# Warmup Iteration   2: 1060.509 ns/op
# Warmup Iteration   3: 672.504 ns/op
Iteration   1: 672.476 ns/op
Iteration   2: 673.414 ns/op
Iteration   3: 673.960 ns/op
Iteration   4: 673.436 ns/op
Iteration   5: 673.599 ns/op

# Run progress: 77.74% complete, ETA 00:13:04
# Fork: 2 of 2
# Warmup Iteration   1: 11049.818 ns/op
# Warmup Iteration   2: 1039.551 ns/op
# Warmup Iteration   3: 685.085 ns/op
Iteration   1: 685.242 ns/op
Iteration   2: 685.458 ns/op
Iteration   3: 685.448 ns/op
Iteration   4: 685.649 ns/op
Iteration   5: 685.532 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  679.421 ±(99.9%) 9.650 ns/op [Average]
  (min, avg, max) = (672.476, 679.421, 685.649), stdev = 6.383
  CI (99.9%): [669.772, 689.071] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 77.78% complete, ETA 00:13:02
# Fork: 1 of 2
# Warmup Iteration   1: 1433.367 ns/op
# Warmup Iteration   2: 1257.430 ns/op
# Warmup Iteration   3: 969.067 ns/op
Iteration   1: 969.676 ns/op
Iteration   2: 969.882 ns/op
Iteration   3: 970.545 ns/op
Iteration   4: 970.168 ns/op
Iteration   5: 969.718 ns/op

# Run progress: 77.81% complete, ETA 00:13:01
# Fork: 2 of 2
# Warmup Iteration   1: 1595.457 ns/op
# Warmup Iteration   2: 1282.202 ns/op
# Warmup Iteration   3: 969.115 ns/op
Iteration   1: 969.631 ns/op
Iteration   2: 970.021 ns/op
Iteration   3: 969.237 ns/op
Iteration   4: 970.156 ns/op
Iteration   5: 970.279 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  969.931 ±(99.9%) 0.574 ns/op [Average]
  (min, avg, max) = (969.237, 969.931, 970.545), stdev = 0.380
  CI (99.9%): [969.357, 970.506] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 77.85% complete, ETA 00:13:00
# Fork: 1 of 2
# Warmup Iteration   1: 2311.504 ns/op
# Warmup Iteration   2: 1149.580 ns/op
# Warmup Iteration   3: 851.145 ns/op
Iteration   1: 850.835 ns/op
Iteration   2: 852.197 ns/op
Iteration   3: 850.893 ns/op
Iteration   4: 851.976 ns/op
Iteration   5: 851.039 ns/op

# Run progress: 77.88% complete, ETA 00:12:59
# Fork: 2 of 2
# Warmup Iteration   1: 1847.731 ns/op
# Warmup Iteration   2: 1210.781 ns/op
# Warmup Iteration   3: 851.478 ns/op
Iteration   1: 851.816 ns/op
Iteration   2: 852.779 ns/op
Iteration   3: 851.875 ns/op
Iteration   4: 852.803 ns/op
Iteration   5: 852.037 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  851.825 ±(99.9%) 1.074 ns/op [Average]
  (min, avg, max) = (850.835, 851.825, 852.803), stdev = 0.710
  CI (99.9%): [850.751, 852.899] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 77.92% complete, ETA 00:12:58
# Fork: 1 of 2
# Warmup Iteration   1: 25.657 ns/op
# Warmup Iteration   2: 29.544 ns/op
# Warmup Iteration   3: 19.033 ns/op
Iteration   1: 19.008 ns/op
Iteration   2: 18.931 ns/op
Iteration   3: 18.989 ns/op
Iteration   4: 18.826 ns/op
Iteration   5: 18.864 ns/op

# Run progress: 77.95% complete, ETA 00:12:56
# Fork: 2 of 2
# Warmup Iteration   1: 23.703 ns/op
# Warmup Iteration   2: 31.067 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 18.997 ns/op
Iteration   2: 18.970 ns/op
Iteration   3: 18.953 ns/op
Iteration   4: 18.816 ns/op
Iteration   5: 18.835 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (18.816, 18.919, 19.008), stdev = 0.076
  CI (99.9%): [18.804, 19.034] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 77.99% complete, ETA 00:12:55
# Fork: 1 of 2
# Warmup Iteration   1: 11009.923 ns/op
# Warmup Iteration   2: 1179.819 ns/op
# Warmup Iteration   3: 915.522 ns/op
Iteration   1: 842.775 ns/op
Iteration   2: 838.619 ns/op
Iteration   3: 839.216 ns/op
Iteration   4: 840.129 ns/op
Iteration   5: 844.278 ns/op

# Run progress: 78.02% complete, ETA 00:12:54
# Fork: 2 of 2
# Warmup Iteration   1: 11932.981 ns/op
# Warmup Iteration   2: 1148.458 ns/op
# Warmup Iteration   3: 915.323 ns/op
Iteration   1: 855.443 ns/op
Iteration   2: 850.167 ns/op
Iteration   3: 853.426 ns/op
Iteration   4: 845.499 ns/op
Iteration   5: 849.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  845.945 ±(99.9%) 9.091 ns/op [Average]
  (min, avg, max) = (838.619, 845.945, 855.443), stdev = 6.013
  CI (99.9%): [836.854, 855.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 78.06% complete, ETA 00:12:53
# Fork: 1 of 2
# Warmup Iteration   1: 27089.848 ns/op
# Warmup Iteration   2: 1447.388 ns/op
# Warmup Iteration   3: 1113.132 ns/op
Iteration   1: 1018.605 ns/op
Iteration   2: 1019.493 ns/op
Iteration   3: 1014.966 ns/op
Iteration   4: 1016.625 ns/op
Iteration   5: 1012.933 ns/op

# Run progress: 78.09% complete, ETA 00:12:51
# Fork: 2 of 2
# Warmup Iteration   1: 29639.596 ns/op
# Warmup Iteration   2: 1905.613 ns/op
# Warmup Iteration   3: 1128.612 ns/op
Iteration   1: 1022.849 ns/op
Iteration   2: 1021.365 ns/op
Iteration   3: 1021.877 ns/op
Iteration   4: 1025.680 ns/op
Iteration   5: 1022.633 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1019.702 ±(99.9%) 5.978 ns/op [Average]
  (min, avg, max) = (1012.933, 1019.702, 1025.680), stdev = 3.954
  CI (99.9%): [1013.725, 1025.680] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 78.13% complete, ETA 00:12:50
# Fork: 1 of 2
# Warmup Iteration   1: 39459.043 ns/op
# Warmup Iteration   2: 2295.536 ns/op
# Warmup Iteration   3: 1147.334 ns/op
Iteration   1: 960.681 ns/op
Iteration   2: 962.308 ns/op
Iteration   3: 960.319 ns/op
Iteration   4: 960.397 ns/op
Iteration   5: 959.402 ns/op

# Run progress: 78.16% complete, ETA 00:12:49
# Fork: 2 of 2
# Warmup Iteration   1: 28669.248 ns/op
# Warmup Iteration   2: 1330.147 ns/op
# Warmup Iteration   3: 1038.842 ns/op
Iteration   1: 950.795 ns/op
Iteration   2: 944.119 ns/op
Iteration   3: 947.429 ns/op
Iteration   4: 941.417 ns/op
Iteration   5: 945.967 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  953.283 ±(99.9%) 12.267 ns/op [Average]
  (min, avg, max) = (941.417, 953.283, 962.308), stdev = 8.114
  CI (99.9%): [941.017, 965.550] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 78.19% complete, ETA 00:12:48
# Fork: 1 of 2
# Warmup Iteration   1: 1624.624 ns/op
# Warmup Iteration   2: 1473.514 ns/op
# Warmup Iteration   3: 1020.710 ns/op
Iteration   1: 1020.035 ns/op
Iteration   2: 1023.358 ns/op
Iteration   3: 1022.777 ns/op
Iteration   4: 1022.272 ns/op
Iteration   5: 1021.196 ns/op

# Run progress: 78.23% complete, ETA 00:12:46
# Fork: 2 of 2
# Warmup Iteration   1: 2524.350 ns/op
# Warmup Iteration   2: 1343.004 ns/op
# Warmup Iteration   3: 1019.059 ns/op
Iteration   1: 1018.329 ns/op
Iteration   2: 1014.564 ns/op
Iteration   3: 1011.616 ns/op
Iteration   4: 1017.216 ns/op
Iteration   5: 1010.248 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1018.161 ±(99.9%) 7.078 ns/op [Average]
  (min, avg, max) = (1010.248, 1018.161, 1023.358), stdev = 4.681
  CI (99.9%): [1011.083, 1025.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 78.26% complete, ETA 00:12:45
# Fork: 1 of 2
# Warmup Iteration   1: 9387.518 ns/op
# Warmup Iteration   2: 5080.473 ns/op
# Warmup Iteration   3: 3780.994 ns/op
Iteration   1: 3784.421 ns/op
Iteration   2: 3778.891 ns/op
Iteration   3: 3779.843 ns/op
Iteration   4: 3770.862 ns/op
Iteration   5: 3767.612 ns/op

# Run progress: 78.30% complete, ETA 00:12:44
# Fork: 2 of 2
# Warmup Iteration   1: 14662.208 ns/op
# Warmup Iteration   2: 5161.969 ns/op
# Warmup Iteration   3: 4155.851 ns/op
Iteration   1: 3767.433 ns/op
Iteration   2: 3766.915 ns/op
Iteration   3: 3767.399 ns/op
Iteration   4: 3770.997 ns/op
Iteration   5: 3770.745 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3772.512 ±(99.9%) 9.451 ns/op [Average]
  (min, avg, max) = (3766.915, 3772.512, 3784.421), stdev = 6.251
  CI (99.9%): [3763.061, 3781.963] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 78.33% complete, ETA 00:12:43
# Fork: 1 of 2
# Warmup Iteration   1: 24.098 ns/op
# Warmup Iteration   2: 29.324 ns/op
# Warmup Iteration   3: 19.060 ns/op
Iteration   1: 19.029 ns/op
Iteration   2: 18.991 ns/op
Iteration   3: 18.972 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.846 ns/op

# Run progress: 78.37% complete, ETA 00:12:42
# Fork: 2 of 2
# Warmup Iteration   1: 25.489 ns/op
# Warmup Iteration   2: 26.628 ns/op
# Warmup Iteration   3: 19.040 ns/op
Iteration   1: 19.010 ns/op
Iteration   2: 18.951 ns/op
Iteration   3: 18.987 ns/op
Iteration   4: 19.573 ns/op
Iteration   5: 19.534 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.072 ±(99.9%) 0.397 ns/op [Average]
  (min, avg, max) = (18.828, 19.072, 19.573), stdev = 0.262
  CI (99.9%): [18.676, 19.469] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 78.40% complete, ETA 00:12:40
# Fork: 1 of 2
# Warmup Iteration   1: 322.561 ns/op
# Warmup Iteration   2: 311.193 ns/op
# Warmup Iteration   3: 227.807 ns/op
Iteration   1: 227.824 ns/op
Iteration   2: 228.333 ns/op
Iteration   3: 227.899 ns/op
Iteration   4: 227.984 ns/op
Iteration   5: 228.020 ns/op

# Run progress: 78.44% complete, ETA 00:12:39
# Fork: 2 of 2
# Warmup Iteration   1: 327.752 ns/op
# Warmup Iteration   2: 333.303 ns/op
# Warmup Iteration   3: 227.877 ns/op
Iteration   1: 227.864 ns/op
Iteration   2: 227.828 ns/op
Iteration   3: 227.813 ns/op
Iteration   4: 228.188 ns/op
Iteration   5: 228.524 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  228.028 ±(99.9%) 0.370 ns/op [Average]
  (min, avg, max) = (227.813, 228.028, 228.524), stdev = 0.245
  CI (99.9%): [227.658, 228.397] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 78.47% complete, ETA 00:12:38
# Fork: 1 of 2
# Warmup Iteration   1: 1025.038 ns/op
# Warmup Iteration   2: 212.153 ns/op
# Warmup Iteration   3: 152.628 ns/op
Iteration   1: 152.875 ns/op
Iteration   2: 152.715 ns/op
Iteration   3: 152.750 ns/op
Iteration   4: 153.192 ns/op
Iteration   5: 153.204 ns/op

# Run progress: 78.51% complete, ETA 00:12:37
# Fork: 2 of 2
# Warmup Iteration   1: 1333.532 ns/op
# Warmup Iteration   2: 215.645 ns/op
# Warmup Iteration   3: 156.278 ns/op
Iteration   1: 156.019 ns/op
Iteration   2: 154.571 ns/op
Iteration   3: 154.647 ns/op
Iteration   4: 155.423 ns/op
Iteration   5: 158.312 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  154.371 ±(99.9%) 2.752 ns/op [Average]
  (min, avg, max) = (152.715, 154.371, 158.312), stdev = 1.820
  CI (99.9%): [151.619, 157.123] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 78.54% complete, ETA 00:12:35
# Fork: 1 of 2
# Warmup Iteration   1: 963.816 ns/op
# Warmup Iteration   2: 228.133 ns/op
# Warmup Iteration   3: 145.068 ns/op
Iteration   1: 145.091 ns/op
Iteration   2: 145.144 ns/op
Iteration   3: 145.126 ns/op
Iteration   4: 145.693 ns/op
Iteration   5: 145.693 ns/op

# Run progress: 78.58% complete, ETA 00:12:34
# Fork: 2 of 2
# Warmup Iteration   1: 824.007 ns/op
# Warmup Iteration   2: 204.399 ns/op
# Warmup Iteration   3: 145.046 ns/op
Iteration   1: 145.084 ns/op
Iteration   2: 145.099 ns/op
Iteration   3: 145.067 ns/op
Iteration   4: 145.627 ns/op
Iteration   5: 145.694 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.332 ±(99.9%) 0.451 ns/op [Average]
  (min, avg, max) = (145.067, 145.332, 145.694), stdev = 0.298
  CI (99.9%): [144.881, 145.783] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 78.61% complete, ETA 00:12:33
# Fork: 1 of 2
# Warmup Iteration   1: 722.666 ns/op
# Warmup Iteration   2: 652.538 ns/op
# Warmup Iteration   3: 493.995 ns/op
Iteration   1: 494.057 ns/op
Iteration   2: 494.046 ns/op
Iteration   3: 493.972 ns/op
Iteration   4: 494.882 ns/op
Iteration   5: 494.840 ns/op

# Run progress: 78.65% complete, ETA 00:12:32
# Fork: 2 of 2
# Warmup Iteration   1: 713.069 ns/op
# Warmup Iteration   2: 698.658 ns/op
# Warmup Iteration   3: 494.108 ns/op
Iteration   1: 494.618 ns/op
Iteration   2: 494.285 ns/op
Iteration   3: 503.641 ns/op
Iteration   4: 494.773 ns/op
Iteration   5: 494.925 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  495.404 ±(99.9%) 4.412 ns/op [Average]
  (min, avg, max) = (493.972, 495.404, 503.641), stdev = 2.918
  CI (99.9%): [490.992, 499.816] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 78.68% complete, ETA 00:12:31
# Fork: 1 of 2
# Warmup Iteration   1: 309.314 ns/op
# Warmup Iteration   2: 263.972 ns/op
# Warmup Iteration   3: 179.442 ns/op
Iteration   1: 179.462 ns/op
Iteration   2: 180.446 ns/op
Iteration   3: 179.462 ns/op
Iteration   4: 181.218 ns/op
Iteration   5: 181.145 ns/op

# Run progress: 78.72% complete, ETA 00:12:29
# Fork: 2 of 2
# Warmup Iteration   1: 285.835 ns/op
# Warmup Iteration   2: 257.690 ns/op
# Warmup Iteration   3: 179.666 ns/op
Iteration   1: 179.488 ns/op
Iteration   2: 179.463 ns/op
Iteration   3: 179.993 ns/op
Iteration   4: 180.916 ns/op
Iteration   5: 180.827 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  180.242 ±(99.9%) 1.134 ns/op [Average]
  (min, avg, max) = (179.462, 180.242, 181.218), stdev = 0.750
  CI (99.9%): [179.108, 181.376] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 78.75% complete, ETA 00:12:28
# Fork: 1 of 2
# Warmup Iteration   1: 25.584 ns/op
# Warmup Iteration   2: 29.528 ns/op
# Warmup Iteration   3: 19.034 ns/op
Iteration   1: 19.001 ns/op
Iteration   2: 18.951 ns/op
Iteration   3: 18.960 ns/op
Iteration   4: 18.817 ns/op
Iteration   5: 18.847 ns/op

# Run progress: 78.78% complete, ETA 00:12:27
# Fork: 2 of 2
# Warmup Iteration   1: 24.410 ns/op
# Warmup Iteration   2: 28.646 ns/op
# Warmup Iteration   3: 19.020 ns/op
Iteration   1: 18.995 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.835 ns/op
Iteration   5: 18.838 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (18.817, 18.915, 19.001), stdev = 0.072
  CI (99.9%): [18.806, 19.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 78.82% complete, ETA 00:12:26
# Fork: 1 of 2
# Warmup Iteration   1: 4151.092 ns/op
# Warmup Iteration   2: 905.391 ns/op
# Warmup Iteration   3: 671.714 ns/op
Iteration   1: 669.882 ns/op
Iteration   2: 675.875 ns/op
Iteration   3: 671.063 ns/op
Iteration   4: 675.564 ns/op
Iteration   5: 673.381 ns/op

# Run progress: 78.85% complete, ETA 00:12:24
# Fork: 2 of 2
# Warmup Iteration   1: 2789.229 ns/op
# Warmup Iteration   2: 868.118 ns/op
# Warmup Iteration   3: 672.538 ns/op
Iteration   1: 671.881 ns/op
Iteration   2: 671.171 ns/op
Iteration   3: 671.939 ns/op
Iteration   4: 671.152 ns/op
Iteration   5: 671.197 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  672.310 ±(99.9%) 3.028 ns/op [Average]
  (min, avg, max) = (669.882, 672.310, 675.875), stdev = 2.003
  CI (99.9%): [669.283, 675.338] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 78.89% complete, ETA 00:12:23
# Fork: 1 of 2
# Warmup Iteration   1: 22176.566 ns/op
# Warmup Iteration   2: 899.191 ns/op
# Warmup Iteration   3: 691.016 ns/op
Iteration   1: 629.761 ns/op
Iteration   2: 630.853 ns/op
Iteration   3: 628.054 ns/op
Iteration   4: 627.450 ns/op
Iteration   5: 629.625 ns/op

# Run progress: 78.92% complete, ETA 00:12:22
# Fork: 2 of 2
# Warmup Iteration   1: 11220.274 ns/op
# Warmup Iteration   2: 1022.247 ns/op
# Warmup Iteration   3: 637.797 ns/op
Iteration   1: 636.060 ns/op
Iteration   2: 635.190 ns/op
Iteration   3: 636.732 ns/op
Iteration   4: 634.933 ns/op
Iteration   5: 634.855 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  632.351 ±(99.9%) 5.353 ns/op [Average]
  (min, avg, max) = (627.450, 632.351, 636.732), stdev = 3.540
  CI (99.9%): [626.999, 637.704] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 78.96% complete, ETA 00:12:21
# Fork: 1 of 2
# Warmup Iteration   1: 33836.886 ns/op
# Warmup Iteration   2: 1159.836 ns/op
# Warmup Iteration   3: 859.058 ns/op
Iteration   1: 721.529 ns/op
Iteration   2: 720.477 ns/op
Iteration   3: 720.735 ns/op
Iteration   4: 720.968 ns/op
Iteration   5: 719.168 ns/op

# Run progress: 78.99% complete, ETA 00:12:20
# Fork: 2 of 2
# Warmup Iteration   1: 35450.801 ns/op
# Warmup Iteration   2: 1087.774 ns/op
# Warmup Iteration   3: 864.276 ns/op
Iteration   1: 724.603 ns/op
Iteration   2: 728.325 ns/op
Iteration   3: 728.435 ns/op
Iteration   4: 728.817 ns/op
Iteration   5: 726.233 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  723.929 ±(99.9%) 5.715 ns/op [Average]
  (min, avg, max) = (719.168, 723.929, 728.817), stdev = 3.780
  CI (99.9%): [718.214, 729.644] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 79.03% complete, ETA 00:12:18
# Fork: 1 of 2
# Warmup Iteration   1: 2392.321 ns/op
# Warmup Iteration   2: 1659.172 ns/op
# Warmup Iteration   3: 1258.375 ns/op
Iteration   1: 1258.638 ns/op
Iteration   2: 1260.607 ns/op
Iteration   3: 1250.912 ns/op
Iteration   4: 1258.819 ns/op
Iteration   5: 1252.222 ns/op

# Run progress: 79.06% complete, ETA 00:12:17
# Fork: 2 of 2
# Warmup Iteration   1: 2416.793 ns/op
# Warmup Iteration   2: 1667.319 ns/op
# Warmup Iteration   3: 1249.447 ns/op
Iteration   1: 1251.887 ns/op
Iteration   2: 1255.420 ns/op
Iteration   3: 1259.915 ns/op
Iteration   4: 1257.085 ns/op
Iteration   5: 1258.614 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1256.412 ±(99.9%) 5.409 ns/op [Average]
  (min, avg, max) = (1250.912, 1256.412, 1260.607), stdev = 3.577
  CI (99.9%): [1251.003, 1261.820] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 79.10% complete, ETA 00:12:16
# Fork: 1 of 2
# Warmup Iteration   1: 2052.843 ns/op
# Warmup Iteration   2: 1337.642 ns/op
# Warmup Iteration   3: 938.651 ns/op
Iteration   1: 938.093 ns/op
Iteration   2: 937.854 ns/op
Iteration   3: 936.025 ns/op
Iteration   4: 937.046 ns/op
Iteration   5: 934.746 ns/op

# Run progress: 79.13% complete, ETA 00:12:15
# Fork: 2 of 2
# Warmup Iteration   1: 2393.176 ns/op
# Warmup Iteration   2: 1285.041 ns/op
# Warmup Iteration   3: 931.303 ns/op
Iteration   1: 931.742 ns/op
Iteration   2: 930.692 ns/op
Iteration   3: 933.801 ns/op
Iteration   4: 932.319 ns/op
Iteration   5: 932.679 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  934.500 ±(99.9%) 4.022 ns/op [Average]
  (min, avg, max) = (930.692, 934.500, 938.093), stdev = 2.660
  CI (99.9%): [930.477, 938.522] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 79.17% complete, ETA 00:12:13
# Fork: 1 of 2
# Warmup Iteration   1: 24.666 ns/op
# Warmup Iteration   2: 30.596 ns/op
# Warmup Iteration   3: 19.025 ns/op
Iteration   1: 18.958 ns/op
Iteration   2: 18.955 ns/op
Iteration   3: 18.934 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.853 ns/op

# Run progress: 79.20% complete, ETA 00:12:12
# Fork: 2 of 2
# Warmup Iteration   1: 23.982 ns/op
# Warmup Iteration   2: 30.437 ns/op
# Warmup Iteration   3: 19.063 ns/op
Iteration   1: 19.015 ns/op
Iteration   2: 18.988 ns/op
Iteration   3: 18.991 ns/op
Iteration   4: 18.826 ns/op
Iteration   5: 18.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (18.826, 18.919, 19.015), stdev = 0.074
  CI (99.9%): [18.807, 19.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 79.24% complete, ETA 00:12:11
# Fork: 1 of 2
# Warmup Iteration   1: 2123.045 ns/op
# Warmup Iteration   2: 910.619 ns/op
# Warmup Iteration   3: 677.679 ns/op
Iteration   1: 678.320 ns/op
Iteration   2: 678.001 ns/op
Iteration   3: 678.285 ns/op
Iteration   4: 678.915 ns/op
Iteration   5: 679.078 ns/op

# Run progress: 79.27% complete, ETA 00:12:10
# Fork: 2 of 2
# Warmup Iteration   1: 2037.745 ns/op
# Warmup Iteration   2: 938.544 ns/op
# Warmup Iteration   3: 655.526 ns/op
Iteration   1: 664.663 ns/op
Iteration   2: 655.438 ns/op
Iteration   3: 654.942 ns/op
Iteration   4: 655.103 ns/op
Iteration   5: 656.482 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  667.923 ±(99.9%) 17.403 ns/op [Average]
  (min, avg, max) = (654.942, 667.923, 679.078), stdev = 11.511
  CI (99.9%): [650.519, 685.326] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 79.31% complete, ETA 00:12:09
# Fork: 1 of 2
# Warmup Iteration   1: 43012.166 ns/op
# Warmup Iteration   2: 2164.058 ns/op
# Warmup Iteration   3: 1212.746 ns/op
Iteration   1: 1027.959 ns/op
Iteration   2: 1029.206 ns/op
Iteration   3: 1029.958 ns/op
Iteration   4: 1028.587 ns/op
Iteration   5: 1028.256 ns/op

# Run progress: 79.34% complete, ETA 00:12:07
# Fork: 2 of 2
# Warmup Iteration   1: 13214.444 ns/op
# Warmup Iteration   2: 1434.067 ns/op
# Warmup Iteration   3: 1118.944 ns/op
Iteration   1: 1028.513 ns/op
Iteration   2: 1030.568 ns/op
Iteration   3: 1028.009 ns/op
Iteration   4: 1032.145 ns/op
Iteration   5: 1032.572 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1029.577 ±(99.9%) 2.558 ns/op [Average]
  (min, avg, max) = (1027.959, 1029.577, 1032.572), stdev = 1.692
  CI (99.9%): [1027.020, 1032.135] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 79.38% complete, ETA 00:12:06
# Fork: 1 of 2
# Warmup Iteration   1: 9081.970 ns/op
# Warmup Iteration   2: 1439.183 ns/op
# Warmup Iteration   3: 1036.468 ns/op
Iteration   1: 1037.735 ns/op
Iteration   2: 1038.702 ns/op
Iteration   3: 1036.723 ns/op
Iteration   4: 1037.746 ns/op
Iteration   5: 1035.758 ns/op

# Run progress: 79.41% complete, ETA 00:12:05
# Fork: 2 of 2
# Warmup Iteration   1: 7759.310 ns/op
# Warmup Iteration   2: 1452.033 ns/op
# Warmup Iteration   3: 1019.225 ns/op
Iteration   1: 1019.514 ns/op
Iteration   2: 1019.600 ns/op
Iteration   3: 1019.467 ns/op
Iteration   4: 1019.314 ns/op
Iteration   5: 1019.781 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1028.434 ±(99.9%) 14.228 ns/op [Average]
  (min, avg, max) = (1019.314, 1028.434, 1038.702), stdev = 9.411
  CI (99.9%): [1014.206, 1042.662] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 79.44% complete, ETA 00:12:04
# Fork: 1 of 2
# Warmup Iteration   1: 2021.269 ns/op
# Warmup Iteration   2: 1370.447 ns/op
# Warmup Iteration   3: 1036.892 ns/op
Iteration   1: 1033.224 ns/op
Iteration   2: 1032.963 ns/op
Iteration   3: 1033.369 ns/op
Iteration   4: 1035.226 ns/op
Iteration   5: 1035.527 ns/op

# Run progress: 79.48% complete, ETA 00:12:02
# Fork: 2 of 2
# Warmup Iteration   1: 1607.171 ns/op
# Warmup Iteration   2: 1345.079 ns/op
# Warmup Iteration   3: 1035.344 ns/op
Iteration   1: 1035.924 ns/op
Iteration   2: 1035.613 ns/op
Iteration   3: 1035.333 ns/op
Iteration   4: 1035.557 ns/op
Iteration   5: 1036.815 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1034.955 ±(99.9%) 1.966 ns/op [Average]
  (min, avg, max) = (1032.963, 1034.955, 1036.815), stdev = 1.300
  CI (99.9%): [1032.989, 1036.921] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 79.51% complete, ETA 00:12:01
# Fork: 1 of 2
# Warmup Iteration   1: 10846.045 ns/op
# Warmup Iteration   2: 4752.137 ns/op
# Warmup Iteration   3: 4027.234 ns/op
Iteration   1: 3711.116 ns/op
Iteration   2: 3710.985 ns/op
Iteration   3: 3716.850 ns/op
Iteration   4: 3689.203 ns/op
Iteration   5: 3683.757 ns/op

# Run progress: 79.55% complete, ETA 00:12:00
# Fork: 2 of 2
# Warmup Iteration   1: 14739.869 ns/op
# Warmup Iteration   2: 5446.543 ns/op
# Warmup Iteration   3: 4396.912 ns/op
Iteration   1: 3965.749 ns/op
Iteration   2: 3969.508 ns/op
Iteration   3: 3969.095 ns/op
Iteration   4: 3952.626 ns/op
Iteration   5: 3950.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3831.896 ±(99.9%) 207.153 ns/op [Average]
  (min, avg, max) = (3683.757, 3831.896, 3969.508), stdev = 137.019
  CI (99.9%): [3624.743, 4039.050] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 79.58% complete, ETA 00:11:59
# Fork: 1 of 2
# Warmup Iteration   1: 23.467 ns/op
# Warmup Iteration   2: 30.180 ns/op
# Warmup Iteration   3: 19.051 ns/op
Iteration   1: 19.013 ns/op
Iteration   2: 18.978 ns/op
Iteration   3: 18.957 ns/op
Iteration   4: 18.842 ns/op
Iteration   5: 18.837 ns/op

# Run progress: 79.62% complete, ETA 00:11:58
# Fork: 2 of 2
# Warmup Iteration   1: 25.554 ns/op
# Warmup Iteration   2: 29.026 ns/op
# Warmup Iteration   3: 19.037 ns/op
Iteration   1: 19.011 ns/op
Iteration   2: 18.971 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 19.576 ns/op
Iteration   5: 19.538 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.069 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (18.837, 19.069, 19.576), stdev = 0.265
  CI (99.9%): [18.669, 19.469] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 79.65% complete, ETA 00:11:56
# Fork: 1 of 2
# Warmup Iteration   1: 2583.444 ns/op
# Warmup Iteration   2: 1004.740 ns/op
# Warmup Iteration   3: 728.165 ns/op
Iteration   1: 727.351 ns/op
Iteration   2: 726.393 ns/op
Iteration   3: 730.128 ns/op
Iteration   4: 727.416 ns/op
Iteration   5: 730.620 ns/op

# Run progress: 79.69% complete, ETA 00:11:55
# Fork: 2 of 2
# Warmup Iteration   1: 2521.300 ns/op
# Warmup Iteration   2: 1005.369 ns/op
# Warmup Iteration   3: 719.540 ns/op
Iteration   1: 719.715 ns/op
Iteration   2: 719.854 ns/op
Iteration   3: 719.966 ns/op
Iteration   4: 720.467 ns/op
Iteration   5: 720.446 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  724.236 ±(99.9%) 6.880 ns/op [Average]
  (min, avg, max) = (719.715, 724.236, 730.620), stdev = 4.551
  CI (99.9%): [717.356, 731.116] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 79.72% complete, ETA 00:11:54
# Fork: 1 of 2
# Warmup Iteration   1: 11036.257 ns/op
# Warmup Iteration   2: 1292.389 ns/op
# Warmup Iteration   3: 853.919 ns/op
Iteration   1: 864.154 ns/op
Iteration   2: 853.408 ns/op
Iteration   3: 866.159 ns/op
Iteration   4: 854.049 ns/op
Iteration   5: 866.431 ns/op

# Run progress: 79.76% complete, ETA 00:11:53
# Fork: 2 of 2
# Warmup Iteration   1: 11092.803 ns/op
# Warmup Iteration   2: 1251.764 ns/op
# Warmup Iteration   3: 842.542 ns/op
Iteration   1: 842.777 ns/op
Iteration   2: 842.758 ns/op
Iteration   3: 842.301 ns/op
Iteration   4: 842.862 ns/op
Iteration   5: 842.850 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  851.775 ±(99.9%) 15.888 ns/op [Average]
  (min, avg, max) = (842.301, 851.775, 866.431), stdev = 10.509
  CI (99.9%): [835.887, 867.663] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 79.79% complete, ETA 00:11:51
# Fork: 1 of 2
# Warmup Iteration   1: 40269.936 ns/op
# Warmup Iteration   2: 1457.120 ns/op
# Warmup Iteration   3: 1001.503 ns/op
Iteration   1: 855.121 ns/op
Iteration   2: 852.243 ns/op
Iteration   3: 851.831 ns/op
Iteration   4: 852.977 ns/op
Iteration   5: 853.613 ns/op

# Run progress: 79.83% complete, ETA 00:11:50
# Fork: 2 of 2
# Warmup Iteration   1: 11301.064 ns/op
# Warmup Iteration   2: 1355.311 ns/op
# Warmup Iteration   3: 886.135 ns/op
Iteration   1: 886.398 ns/op
Iteration   2: 885.999 ns/op
Iteration   3: 886.415 ns/op
Iteration   4: 887.054 ns/op
Iteration   5: 886.288 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  869.794 ±(99.9%) 26.548 ns/op [Average]
  (min, avg, max) = (851.831, 869.794, 887.054), stdev = 17.560
  CI (99.9%): [843.246, 896.342] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 79.86% complete, ETA 00:11:49
# Fork: 1 of 2
# Warmup Iteration   1: 1469.274 ns/op
# Warmup Iteration   2: 1228.759 ns/op
# Warmup Iteration   3: 935.042 ns/op
Iteration   1: 935.441 ns/op
Iteration   2: 937.015 ns/op
Iteration   3: 935.727 ns/op
Iteration   4: 935.662 ns/op
Iteration   5: 936.307 ns/op

# Run progress: 79.90% complete, ETA 00:11:48
# Fork: 2 of 2
# Warmup Iteration   1: 1463.346 ns/op
# Warmup Iteration   2: 1228.981 ns/op
# Warmup Iteration   3: 935.723 ns/op
Iteration   1: 936.178 ns/op
Iteration   2: 957.778 ns/op
Iteration   3: 952.644 ns/op
Iteration   4: 936.912 ns/op
Iteration   5: 962.054 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  942.572 ±(99.9%) 15.942 ns/op [Average]
  (min, avg, max) = (935.441, 942.572, 962.054), stdev = 10.545
  CI (99.9%): [926.630, 958.514] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 79.93% complete, ETA 00:11:47
# Fork: 1 of 2
# Warmup Iteration   1: 2140.665 ns/op
# Warmup Iteration   2: 1263.083 ns/op
# Warmup Iteration   3: 880.085 ns/op
Iteration   1: 881.164 ns/op
Iteration   2: 878.141 ns/op
Iteration   3: 879.054 ns/op
Iteration   4: 883.792 ns/op
Iteration   5: 882.756 ns/op

# Run progress: 79.97% complete, ETA 00:11:45
# Fork: 2 of 2
# Warmup Iteration   1: 1912.281 ns/op
# Warmup Iteration   2: 1295.964 ns/op
# Warmup Iteration   3: 875.007 ns/op
Iteration   1: 874.736 ns/op
Iteration   2: 876.260 ns/op
Iteration   3: 875.325 ns/op
Iteration   4: 875.628 ns/op
Iteration   5: 875.031 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  878.189 ±(99.9%) 5.095 ns/op [Average]
  (min, avg, max) = (874.736, 878.189, 883.792), stdev = 3.370
  CI (99.9%): [873.093, 883.284] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 80.00% complete, ETA 00:11:44
# Fork: 1 of 2
# Warmup Iteration   1: 25.262 ns/op
# Warmup Iteration   2: 29.702 ns/op
# Warmup Iteration   3: 19.038 ns/op
Iteration   1: 19.008 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.956 ns/op
Iteration   4: 18.820 ns/op
Iteration   5: 18.853 ns/op

# Run progress: 80.03% complete, ETA 00:11:43
# Fork: 2 of 2
# Warmup Iteration   1: 24.264 ns/op
# Warmup Iteration   2: 26.723 ns/op
# Warmup Iteration   3: 19.038 ns/op
Iteration   1: 18.999 ns/op
Iteration   2: 18.991 ns/op
Iteration   3: 18.977 ns/op
Iteration   4: 19.576 ns/op
Iteration   5: 19.531 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.067 ±(99.9%) 0.399 ns/op [Average]
  (min, avg, max) = (18.820, 19.067, 19.576), stdev = 0.264
  CI (99.9%): [18.668, 19.466] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 80.07% complete, ETA 00:11:42
# Fork: 1 of 2
# Warmup Iteration   1: 48530.307 ns/op
# Warmup Iteration   2: 1267.083 ns/op
# Warmup Iteration   3: 978.931 ns/op
Iteration   1: 843.041 ns/op
Iteration   2: 838.054 ns/op
Iteration   3: 840.361 ns/op
Iteration   4: 839.857 ns/op
Iteration   5: 847.051 ns/op

# Run progress: 80.10% complete, ETA 00:11:40
# Fork: 2 of 2
# Warmup Iteration   1: 47567.120 ns/op
# Warmup Iteration   2: 1326.668 ns/op
# Warmup Iteration   3: 1007.995 ns/op
Iteration   1: 845.162 ns/op
Iteration   2: 845.852 ns/op
Iteration   3: 843.963 ns/op
Iteration   4: 843.443 ns/op
Iteration   5: 845.357 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  843.214 ±(99.9%) 4.415 ns/op [Average]
  (min, avg, max) = (838.054, 843.214, 847.051), stdev = 2.920
  CI (99.9%): [838.799, 847.629] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 80.14% complete, ETA 00:11:39
# Fork: 1 of 2
# Warmup Iteration   1: 27583.540 ns/op
# Warmup Iteration   2: 1474.297 ns/op
# Warmup Iteration   3: 1103.864 ns/op
Iteration   1: 1006.146 ns/op
Iteration   2: 1007.136 ns/op
Iteration   3: 1006.669 ns/op
Iteration   4: 1013.638 ns/op
Iteration   5: 1011.802 ns/op

# Run progress: 80.17% complete, ETA 00:11:38
# Fork: 2 of 2
# Warmup Iteration   1: 15918.046 ns/op
# Warmup Iteration   2: 1401.971 ns/op
# Warmup Iteration   3: 1128.758 ns/op
Iteration   1: 1017.542 ns/op
Iteration   2: 1014.426 ns/op
Iteration   3: 1017.520 ns/op
Iteration   4: 1016.487 ns/op
Iteration   5: 1014.292 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1012.566 ±(99.9%) 6.730 ns/op [Average]
  (min, avg, max) = (1006.146, 1012.566, 1017.542), stdev = 4.451
  CI (99.9%): [1005.836, 1019.295] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 80.21% complete, ETA 00:11:37
# Fork: 1 of 2
# Warmup Iteration   1: 15361.041 ns/op
# Warmup Iteration   2: 1501.067 ns/op
# Warmup Iteration   3: 1085.614 ns/op
Iteration   1: 992.562 ns/op
Iteration   2: 984.648 ns/op
Iteration   3: 987.186 ns/op
Iteration   4: 987.264 ns/op
Iteration   5: 990.628 ns/op

# Run progress: 80.24% complete, ETA 00:11:36
# Fork: 2 of 2
# Warmup Iteration   1: 54532.624 ns/op
# Warmup Iteration   2: 1823.741 ns/op
# Warmup Iteration   3: 1191.966 ns/op
Iteration   1: 993.080 ns/op
Iteration   2: 992.173 ns/op
Iteration   3: 989.940 ns/op
Iteration   4: 991.124 ns/op
Iteration   5: 992.219 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  990.082 ±(99.9%) 4.256 ns/op [Average]
  (min, avg, max) = (984.648, 990.082, 993.080), stdev = 2.815
  CI (99.9%): [985.826, 994.339] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 80.28% complete, ETA 00:11:34
# Fork: 1 of 2
# Warmup Iteration   1: 1983.400 ns/op
# Warmup Iteration   2: 1357.822 ns/op
# Warmup Iteration   3: 1037.377 ns/op
Iteration   1: 1041.946 ns/op
Iteration   2: 1050.234 ns/op
Iteration   3: 1034.167 ns/op
Iteration   4: 1042.737 ns/op
Iteration   5: 1039.776 ns/op

# Run progress: 80.31% complete, ETA 00:11:33
# Fork: 2 of 2
# Warmup Iteration   1: 1928.966 ns/op
# Warmup Iteration   2: 1370.011 ns/op
# Warmup Iteration   3: 1027.980 ns/op
Iteration   1: 1028.354 ns/op
Iteration   2: 1023.415 ns/op
Iteration   3: 1022.568 ns/op
Iteration   4: 1031.101 ns/op
Iteration   5: 1030.697 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1034.499 ±(99.9%) 13.596 ns/op [Average]
  (min, avg, max) = (1022.568, 1034.499, 1050.234), stdev = 8.993
  CI (99.9%): [1020.904, 1048.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 80.35% complete, ETA 00:11:32
# Fork: 1 of 2
# Warmup Iteration   1: 10808.823 ns/op
# Warmup Iteration   2: 5521.643 ns/op
# Warmup Iteration   3: 3845.199 ns/op
Iteration   1: 3845.595 ns/op
Iteration   2: 3849.117 ns/op
Iteration   3: 3843.648 ns/op
Iteration   4: 3843.837 ns/op
Iteration   5: 3842.050 ns/op

# Run progress: 80.38% complete, ETA 00:11:31
# Fork: 2 of 2
# Warmup Iteration   1: 11142.039 ns/op
# Warmup Iteration   2: 5497.866 ns/op
# Warmup Iteration   3: 3886.848 ns/op
Iteration   1: 3891.338 ns/op
Iteration   2: 3888.706 ns/op
Iteration   3: 3888.891 ns/op
Iteration   4: 3876.437 ns/op
Iteration   5: 3877.427 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3864.705 ±(99.9%) 32.543 ns/op [Average]
  (min, avg, max) = (3842.050, 3864.705, 3891.338), stdev = 21.525
  CI (99.9%): [3832.161, 3897.248] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 80.42% complete, ETA 00:11:29
# Fork: 1 of 2
# Warmup Iteration   1: 24.001 ns/op
# Warmup Iteration   2: 31.577 ns/op
# Warmup Iteration   3: 19.003 ns/op
Iteration   1: 19.000 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.950 ns/op
Iteration   4: 18.826 ns/op
Iteration   5: 18.849 ns/op

# Run progress: 80.45% complete, ETA 00:11:28
# Fork: 2 of 2
# Warmup Iteration   1: 24.465 ns/op
# Warmup Iteration   2: 30.484 ns/op
# Warmup Iteration   3: 19.040 ns/op
Iteration   1: 18.970 ns/op
Iteration   2: 18.989 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.821 ns/op
Iteration   5: 18.825 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (18.821, 18.915, 19.000), stdev = 0.074
  CI (99.9%): [18.802, 19.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 80.49% complete, ETA 00:11:27
# Fork: 1 of 2
# Warmup Iteration   1: 394.464 ns/op
# Warmup Iteration   2: 336.339 ns/op
# Warmup Iteration   3: 231.420 ns/op
Iteration   1: 231.338 ns/op
Iteration   2: 231.293 ns/op
Iteration   3: 231.175 ns/op
Iteration   4: 231.960 ns/op
Iteration   5: 231.331 ns/op

# Run progress: 80.52% complete, ETA 00:11:26
# Fork: 2 of 2
# Warmup Iteration   1: 349.700 ns/op
# Warmup Iteration   2: 331.355 ns/op
# Warmup Iteration   3: 231.046 ns/op
Iteration   1: 231.302 ns/op
Iteration   2: 231.369 ns/op
Iteration   3: 231.350 ns/op
Iteration   4: 231.250 ns/op
Iteration   5: 231.326 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.370 ±(99.9%) 0.325 ns/op [Average]
  (min, avg, max) = (231.175, 231.370, 231.960), stdev = 0.215
  CI (99.9%): [231.044, 231.695] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 80.56% complete, ETA 00:11:25
# Fork: 1 of 2
# Warmup Iteration   1: 660.005 ns/op
# Warmup Iteration   2: 408.380 ns/op
# Warmup Iteration   3: 301.137 ns/op
Iteration   1: 301.342 ns/op
Iteration   2: 301.323 ns/op
Iteration   3: 301.131 ns/op
Iteration   4: 301.879 ns/op
Iteration   5: 301.773 ns/op

# Run progress: 80.59% complete, ETA 00:11:23
# Fork: 2 of 2
# Warmup Iteration   1: 681.137 ns/op
# Warmup Iteration   2: 434.219 ns/op
# Warmup Iteration   3: 301.071 ns/op
Iteration   1: 301.401 ns/op
Iteration   2: 301.181 ns/op
Iteration   3: 301.322 ns/op
Iteration   4: 301.514 ns/op
Iteration   5: 301.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  301.475 ±(99.9%) 0.421 ns/op [Average]
  (min, avg, max) = (301.131, 301.475, 301.888), stdev = 0.279
  CI (99.9%): [301.054, 301.897] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 80.63% complete, ETA 00:11:22
# Fork: 1 of 2
# Warmup Iteration   1: 562.754 ns/op
# Warmup Iteration   2: 453.393 ns/op
# Warmup Iteration   3: 304.708 ns/op
Iteration   1: 305.505 ns/op
Iteration   2: 305.271 ns/op
Iteration   3: 304.775 ns/op
Iteration   4: 306.124 ns/op
Iteration   5: 305.157 ns/op

# Run progress: 80.66% complete, ETA 00:11:21
# Fork: 2 of 2
# Warmup Iteration   1: 657.625 ns/op
# Warmup Iteration   2: 411.390 ns/op
# Warmup Iteration   3: 303.125 ns/op
Iteration   1: 303.275 ns/op
Iteration   2: 303.611 ns/op
Iteration   3: 303.543 ns/op
Iteration   4: 303.739 ns/op
Iteration   5: 303.737 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  304.474 ±(99.9%) 1.521 ns/op [Average]
  (min, avg, max) = (303.275, 304.474, 306.124), stdev = 1.006
  CI (99.9%): [302.953, 305.995] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 80.69% complete, ETA 00:11:20
# Fork: 1 of 2
# Warmup Iteration   1: 385.971 ns/op
# Warmup Iteration   2: 436.602 ns/op
# Warmup Iteration   3: 268.632 ns/op
Iteration   1: 268.695 ns/op
Iteration   2: 268.721 ns/op
Iteration   3: 268.781 ns/op
Iteration   4: 269.246 ns/op
Iteration   5: 269.246 ns/op

# Run progress: 80.73% complete, ETA 00:11:18
# Fork: 2 of 2
# Warmup Iteration   1: 391.699 ns/op
# Warmup Iteration   2: 379.904 ns/op
# Warmup Iteration   3: 268.684 ns/op
Iteration   1: 268.593 ns/op
Iteration   2: 268.732 ns/op
Iteration   3: 268.750 ns/op
Iteration   4: 269.266 ns/op
Iteration   5: 269.437 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  268.947 ±(99.9%) 0.471 ns/op [Average]
  (min, avg, max) = (268.593, 268.947, 269.437), stdev = 0.312
  CI (99.9%): [268.476, 269.418] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 80.76% complete, ETA 00:11:17
# Fork: 1 of 2
# Warmup Iteration   1: 259.024 ns/op
# Warmup Iteration   2: 226.607 ns/op
# Warmup Iteration   3: 162.065 ns/op
Iteration   1: 162.334 ns/op
Iteration   2: 162.152 ns/op
Iteration   3: 162.420 ns/op
Iteration   4: 162.459 ns/op
Iteration   5: 162.468 ns/op

# Run progress: 80.80% complete, ETA 00:11:16
# Fork: 2 of 2
# Warmup Iteration   1: 360.176 ns/op
# Warmup Iteration   2: 236.318 ns/op
# Warmup Iteration   3: 162.439 ns/op
Iteration   1: 162.224 ns/op
Iteration   2: 162.645 ns/op
Iteration   3: 162.567 ns/op
Iteration   4: 162.477 ns/op
Iteration   5: 162.360 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.410 ±(99.9%) 0.225 ns/op [Average]
  (min, avg, max) = (162.152, 162.410, 162.645), stdev = 0.149
  CI (99.9%): [162.185, 162.636] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 80.83% complete, ETA 00:11:15
# Fork: 1 of 2
# Warmup Iteration   1: 25.115 ns/op
# Warmup Iteration   2: 29.133 ns/op
# Warmup Iteration   3: 19.054 ns/op
Iteration   1: 18.991 ns/op
Iteration   2: 18.945 ns/op
Iteration   3: 18.966 ns/op
Iteration   4: 18.844 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 80.87% complete, ETA 00:11:13
# Fork: 2 of 2
# Warmup Iteration   1: 25.002 ns/op
# Warmup Iteration   2: 27.820 ns/op
# Warmup Iteration   3: 19.044 ns/op
Iteration   1: 19.006 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.939 ns/op
Iteration   4: 18.830 ns/op
Iteration   5: 18.853 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.918 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (18.830, 18.918, 19.006), stdev = 0.067
  CI (99.9%): [18.816, 19.020] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 80.90% complete, ETA 00:11:12
# Fork: 1 of 2
# Warmup Iteration   1: 2917.350 ns/op
# Warmup Iteration   2: 805.757 ns/op
# Warmup Iteration   3: 571.070 ns/op
Iteration   1: 566.362 ns/op
Iteration   2: 566.802 ns/op
Iteration   3: 570.480 ns/op
Iteration   4: 568.380 ns/op
Iteration   5: 567.736 ns/op

# Run progress: 80.94% complete, ETA 00:11:11
# Fork: 2 of 2
# Warmup Iteration   1: 3320.935 ns/op
# Warmup Iteration   2: 915.610 ns/op
# Warmup Iteration   3: 563.723 ns/op
Iteration   1: 560.130 ns/op
Iteration   2: 560.379 ns/op
Iteration   3: 559.832 ns/op
Iteration   4: 561.452 ns/op
Iteration   5: 561.544 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  564.310 ±(99.9%) 6.081 ns/op [Average]
  (min, avg, max) = (559.832, 564.310, 570.480), stdev = 4.022
  CI (99.9%): [558.229, 570.391] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 80.97% complete, ETA 00:11:10
# Fork: 1 of 2
# Warmup Iteration   1: 43571.315 ns/op
# Warmup Iteration   2: 1723.470 ns/op
# Warmup Iteration   3: 903.483 ns/op
Iteration   1: 752.858 ns/op
Iteration   2: 751.424 ns/op
Iteration   3: 750.841 ns/op
Iteration   4: 751.559 ns/op
Iteration   5: 752.236 ns/op

# Run progress: 81.01% complete, ETA 00:11:09
# Fork: 2 of 2
# Warmup Iteration   1: 43050.666 ns/op
# Warmup Iteration   2: 1440.010 ns/op
# Warmup Iteration   3: 897.435 ns/op
Iteration   1: 758.836 ns/op
Iteration   2: 765.363 ns/op
Iteration   3: 759.001 ns/op
Iteration   4: 761.866 ns/op
Iteration   5: 763.221 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  756.720 ±(99.9%) 8.393 ns/op [Average]
  (min, avg, max) = (750.841, 756.720, 765.363), stdev = 5.552
  CI (99.9%): [748.327, 765.114] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 81.04% complete, ETA 00:11:07
# Fork: 1 of 2
# Warmup Iteration   1: 22473.179 ns/op
# Warmup Iteration   2: 968.052 ns/op
# Warmup Iteration   3: 830.228 ns/op
Iteration   1: 746.203 ns/op
Iteration   2: 747.576 ns/op
Iteration   3: 745.226 ns/op
Iteration   4: 747.905 ns/op
Iteration   5: 748.869 ns/op

# Run progress: 81.08% complete, ETA 00:11:06
# Fork: 2 of 2
# Warmup Iteration   1: 27274.297 ns/op
# Warmup Iteration   2: 1179.931 ns/op
# Warmup Iteration   3: 817.298 ns/op
Iteration   1: 751.337 ns/op
Iteration   2: 749.379 ns/op
Iteration   3: 749.761 ns/op
Iteration   4: 751.518 ns/op
Iteration   5: 751.821 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  748.959 ±(99.9%) 3.410 ns/op [Average]
  (min, avg, max) = (745.226, 748.959, 751.821), stdev = 2.255
  CI (99.9%): [745.550, 752.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 81.11% complete, ETA 00:11:05
# Fork: 1 of 2
# Warmup Iteration   1: 1189.662 ns/op
# Warmup Iteration   2: 914.096 ns/op
# Warmup Iteration   3: 617.852 ns/op
Iteration   1: 616.486 ns/op
Iteration   2: 618.257 ns/op
Iteration   3: 616.023 ns/op
Iteration   4: 616.122 ns/op
Iteration   5: 614.654 ns/op

# Run progress: 81.15% complete, ETA 00:11:04
# Fork: 2 of 2
# Warmup Iteration   1: 1411.094 ns/op
# Warmup Iteration   2: 816.287 ns/op
# Warmup Iteration   3: 607.822 ns/op
Iteration   1: 609.776 ns/op
Iteration   2: 611.514 ns/op
Iteration   3: 609.782 ns/op
Iteration   4: 611.075 ns/op
Iteration   5: 613.675 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  613.736 ±(99.9%) 4.594 ns/op [Average]
  (min, avg, max) = (609.776, 613.736, 618.257), stdev = 3.039
  CI (99.9%): [609.142, 618.331] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 81.18% complete, ETA 00:11:02
# Fork: 1 of 2
# Warmup Iteration   1: 2350.010 ns/op
# Warmup Iteration   2: 1540.909 ns/op
# Warmup Iteration   3: 1079.550 ns/op
Iteration   1: 1082.653 ns/op
Iteration   2: 1081.738 ns/op
Iteration   3: 1078.808 ns/op
Iteration   4: 1076.715 ns/op
Iteration   5: 1075.911 ns/op

# Run progress: 81.22% complete, ETA 00:11:01
# Fork: 2 of 2
# Warmup Iteration   1: 3425.055 ns/op
# Warmup Iteration   2: 1539.021 ns/op
# Warmup Iteration   3: 1089.833 ns/op
Iteration   1: 1086.242 ns/op
Iteration   2: 1088.226 ns/op
Iteration   3: 1091.161 ns/op
Iteration   4: 1085.944 ns/op
Iteration   5: 1085.088 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1083.249 ±(99.9%) 7.574 ns/op [Average]
  (min, avg, max) = (1075.911, 1083.249, 1091.161), stdev = 5.010
  CI (99.9%): [1075.675, 1090.823] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 81.25% complete, ETA 00:11:00
# Fork: 1 of 2
# Warmup Iteration   1: 23.551 ns/op
# Warmup Iteration   2: 29.352 ns/op
# Warmup Iteration   3: 19.049 ns/op
Iteration   1: 19.017 ns/op
Iteration   2: 18.972 ns/op
Iteration   3: 18.935 ns/op
Iteration   4: 18.815 ns/op
Iteration   5: 18.855 ns/op

# Run progress: 81.28% complete, ETA 00:10:59
# Fork: 2 of 2
# Warmup Iteration   1: 24.008 ns/op
# Warmup Iteration   2: 31.350 ns/op
# Warmup Iteration   3: 19.068 ns/op
Iteration   1: 19.003 ns/op
Iteration   2: 18.953 ns/op
Iteration   3: 18.939 ns/op
Iteration   4: 18.830 ns/op
Iteration   5: 18.858 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.918 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (18.815, 18.918, 19.017), stdev = 0.073
  CI (99.9%): [18.808, 19.028] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 81.32% complete, ETA 00:10:58
# Fork: 1 of 2
# Warmup Iteration   1: 2611.264 ns/op
# Warmup Iteration   2: 1139.466 ns/op
# Warmup Iteration   3: 791.598 ns/op
Iteration   1: 792.098 ns/op
Iteration   2: 791.416 ns/op
Iteration   3: 791.211 ns/op
Iteration   4: 791.648 ns/op
Iteration   5: 791.389 ns/op

# Run progress: 81.35% complete, ETA 00:10:56
# Fork: 2 of 2
# Warmup Iteration   1: 2158.534 ns/op
# Warmup Iteration   2: 1172.648 ns/op
# Warmup Iteration   3: 799.226 ns/op
Iteration   1: 800.789 ns/op
Iteration   2: 799.850 ns/op
Iteration   3: 800.142 ns/op
Iteration   4: 799.748 ns/op
Iteration   5: 799.161 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  795.745 ±(99.9%) 6.718 ns/op [Average]
  (min, avg, max) = (791.211, 795.745, 800.789), stdev = 4.443
  CI (99.9%): [789.028, 802.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 81.39% complete, ETA 00:10:55
# Fork: 1 of 2
# Warmup Iteration   1: 23359.323 ns/op
# Warmup Iteration   2: 1130.407 ns/op
# Warmup Iteration   3: 934.896 ns/op
Iteration   1: 846.376 ns/op
Iteration   2: 845.392 ns/op
Iteration   3: 845.941 ns/op
Iteration   4: 845.189 ns/op
Iteration   5: 845.936 ns/op

# Run progress: 81.42% complete, ETA 00:10:54
# Fork: 2 of 2
# Warmup Iteration   1: 46693.192 ns/op
# Warmup Iteration   2: 1582.397 ns/op
# Warmup Iteration   3: 1045.121 ns/op
Iteration   1: 892.472 ns/op
Iteration   2: 886.399 ns/op
Iteration   3: 884.932 ns/op
Iteration   4: 882.275 ns/op
Iteration   5: 886.250 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  866.116 ±(99.9%) 32.652 ns/op [Average]
  (min, avg, max) = (845.189, 866.116, 892.472), stdev = 21.597
  CI (99.9%): [833.465, 898.768] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 81.46% complete, ETA 00:10:53
# Fork: 1 of 2
# Warmup Iteration   1: 11046.338 ns/op
# Warmup Iteration   2: 1284.758 ns/op
# Warmup Iteration   3: 868.897 ns/op
Iteration   1: 869.140 ns/op
Iteration   2: 868.360 ns/op
Iteration   3: 869.070 ns/op
Iteration   4: 869.102 ns/op
Iteration   5: 869.085 ns/op

# Run progress: 81.49% complete, ETA 00:10:51
# Fork: 2 of 2
# Warmup Iteration   1: 10943.657 ns/op
# Warmup Iteration   2: 1198.226 ns/op
# Warmup Iteration   3: 842.693 ns/op
Iteration   1: 842.761 ns/op
Iteration   2: 842.789 ns/op
Iteration   3: 842.680 ns/op
Iteration   4: 842.668 ns/op
Iteration   5: 843.174 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  855.883 ±(99.9%) 20.830 ns/op [Average]
  (min, avg, max) = (842.668, 855.883, 869.140), stdev = 13.778
  CI (99.9%): [835.053, 876.713] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 81.53% complete, ETA 00:10:50
# Fork: 1 of 2
# Warmup Iteration   1: 1900.891 ns/op
# Warmup Iteration   2: 1598.081 ns/op
# Warmup Iteration   3: 997.564 ns/op
Iteration   1: 997.804 ns/op
Iteration   2: 997.825 ns/op
Iteration   3: 998.161 ns/op
Iteration   4: 998.695 ns/op
Iteration   5: 999.102 ns/op

# Run progress: 81.56% complete, ETA 00:10:49
# Fork: 2 of 2
# Warmup Iteration   1: 1959.008 ns/op
# Warmup Iteration   2: 1361.704 ns/op
# Warmup Iteration   3: 1006.333 ns/op
Iteration   1: 1006.417 ns/op
Iteration   2: 1006.788 ns/op
Iteration   3: 1006.404 ns/op
Iteration   4: 1005.864 ns/op
Iteration   5: 1005.336 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1002.239 ±(99.9%) 6.303 ns/op [Average]
  (min, avg, max) = (997.804, 1002.239, 1006.788), stdev = 4.169
  CI (99.9%): [995.937, 1008.542] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 81.60% complete, ETA 00:10:48
# Fork: 1 of 2
# Warmup Iteration   1: 9531.271 ns/op
# Warmup Iteration   2: 5252.002 ns/op
# Warmup Iteration   3: 3729.921 ns/op
Iteration   1: 3724.589 ns/op
Iteration   2: 3715.376 ns/op
Iteration   3: 3713.603 ns/op
Iteration   4: 3700.630 ns/op
Iteration   5: 3701.106 ns/op

# Run progress: 81.63% complete, ETA 00:10:47
# Fork: 2 of 2
# Warmup Iteration   1: 12444.152 ns/op
# Warmup Iteration   2: 5171.686 ns/op
# Warmup Iteration   3: 4055.256 ns/op
Iteration   1: 3721.271 ns/op
Iteration   2: 3720.988 ns/op
Iteration   3: 3718.932 ns/op
Iteration   4: 3701.720 ns/op
Iteration   5: 3698.760 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3711.697 ±(99.9%) 15.246 ns/op [Average]
  (min, avg, max) = (3698.760, 3711.697, 3724.589), stdev = 10.084
  CI (99.9%): [3696.451, 3726.944] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 81.67% complete, ETA 00:10:45
# Fork: 1 of 2
# Warmup Iteration   1: 23.477 ns/op
# Warmup Iteration   2: 28.718 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 19.012 ns/op
Iteration   2: 18.979 ns/op
Iteration   3: 18.955 ns/op
Iteration   4: 18.826 ns/op
Iteration   5: 18.863 ns/op

# Run progress: 81.70% complete, ETA 00:10:44
# Fork: 2 of 2
# Warmup Iteration   1: 23.983 ns/op
# Warmup Iteration   2: 30.667 ns/op
# Warmup Iteration   3: 19.044 ns/op
Iteration   1: 18.996 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.977 ns/op
Iteration   4: 18.834 ns/op
Iteration   5: 18.846 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.925 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (18.826, 18.925, 19.012), stdev = 0.073
  CI (99.9%): [18.814, 19.036] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 81.74% complete, ETA 00:10:43
# Fork: 1 of 2
# Warmup Iteration   1: 2902.416 ns/op
# Warmup Iteration   2: 893.801 ns/op
# Warmup Iteration   3: 691.466 ns/op
Iteration   1: 690.471 ns/op
Iteration   2: 691.698 ns/op
Iteration   3: 690.785 ns/op
Iteration   4: 697.946 ns/op
Iteration   5: 693.543 ns/op

# Run progress: 81.77% complete, ETA 00:10:42
# Fork: 2 of 2
# Warmup Iteration   1: 2628.985 ns/op
# Warmup Iteration   2: 945.603 ns/op
# Warmup Iteration   3: 668.704 ns/op
Iteration   1: 669.821 ns/op
Iteration   2: 671.749 ns/op
Iteration   3: 669.640 ns/op
Iteration   4: 668.037 ns/op
Iteration   5: 667.531 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  681.122 ±(99.9%) 19.079 ns/op [Average]
  (min, avg, max) = (667.531, 681.122, 697.946), stdev = 12.620
  CI (99.9%): [662.043, 700.201] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 81.81% complete, ETA 00:10:40
# Fork: 1 of 2
# Warmup Iteration   1: 28211.547 ns/op
# Warmup Iteration   2: 1804.970 ns/op
# Warmup Iteration   3: 1439.099 ns/op
Iteration   1: 1273.060 ns/op
Iteration   2: 1256.946 ns/op
Iteration   3: 1299.790 ns/op
Iteration   4: 1214.640 ns/op
Iteration   5: 1216.632 ns/op

# Run progress: 81.84% complete, ETA 00:10:39
# Fork: 2 of 2
# Warmup Iteration   1: 10808.839 ns/op
# Warmup Iteration   2: 1786.325 ns/op
# Warmup Iteration   3: 1203.787 ns/op
Iteration   1: 1258.147 ns/op
Iteration   2: 1259.877 ns/op
Iteration   3: 1280.894 ns/op
Iteration   4: 1028.462 ns/op
Iteration   5: 1280.803 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1236.925 ±(99.9%) 118.036 ns/op [Average]
  (min, avg, max) = (1028.462, 1236.925, 1299.790), stdev = 78.074
  CI (99.9%): [1118.889, 1354.961] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 81.88% complete, ETA 00:10:38
# Fork: 1 of 2
# Warmup Iteration   1: 30376.460 ns/op
# Warmup Iteration   2: 2211.930 ns/op
# Warmup Iteration   3: 1511.976 ns/op
Iteration   1: 1085.662 ns/op
Iteration   2: 1031.912 ns/op
Iteration   3: 1081.229 ns/op
Iteration   4: 1033.466 ns/op
Iteration   5: 1173.072 ns/op

# Run progress: 81.91% complete, ETA 00:10:37
# Fork: 2 of 2
# Warmup Iteration   1: 10875.690 ns/op
# Warmup Iteration   2: 1683.654 ns/op
# Warmup Iteration   3: 1320.047 ns/op
Iteration   1: 1098.183 ns/op
Iteration   2: 1312.807 ns/op
Iteration   3: 1251.036 ns/op
Iteration   4: 1250.819 ns/op
Iteration   5: 1231.213 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1154.940 ±(99.9%) 153.554 ns/op [Average]
  (min, avg, max) = (1031.912, 1154.940, 1312.807), stdev = 101.566
  CI (99.9%): [1001.386, 1308.494] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 81.94% complete, ETA 00:10:36
# Fork: 1 of 2
# Warmup Iteration   1: 1485.050 ns/op
# Warmup Iteration   2: 1003.060 ns/op
# Warmup Iteration   3: 756.246 ns/op
Iteration   1: 757.062 ns/op
Iteration   2: 756.529 ns/op
Iteration   3: 756.659 ns/op
Iteration   4: 757.392 ns/op
Iteration   5: 756.909 ns/op

# Run progress: 81.98% complete, ETA 00:10:34
# Fork: 2 of 2
# Warmup Iteration   1: 1438.317 ns/op
# Warmup Iteration   2: 1101.131 ns/op
# Warmup Iteration   3: 754.905 ns/op
Iteration   1: 754.228 ns/op
Iteration   2: 755.532 ns/op
Iteration   3: 755.171 ns/op
Iteration   4: 755.989 ns/op
Iteration   5: 754.930 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  756.040 ±(99.9%) 1.576 ns/op [Average]
  (min, avg, max) = (754.228, 756.040, 757.392), stdev = 1.042
  CI (99.9%): [754.464, 757.616] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 82.01% complete, ETA 00:10:33
# Fork: 1 of 2
# Warmup Iteration   1: 1857.757 ns/op
# Warmup Iteration   2: 1256.441 ns/op
# Warmup Iteration   3: 868.785 ns/op
Iteration   1: 869.215 ns/op
Iteration   2: 869.566 ns/op
Iteration   3: 869.278 ns/op
Iteration   4: 870.317 ns/op
Iteration   5: 869.764 ns/op

# Run progress: 82.05% complete, ETA 00:10:32
# Fork: 2 of 2
# Warmup Iteration   1: 1871.887 ns/op
# Warmup Iteration   2: 1240.754 ns/op
# Warmup Iteration   3: 869.114 ns/op
Iteration   1: 869.321 ns/op
Iteration   2: 869.788 ns/op
Iteration   3: 871.037 ns/op
Iteration   4: 869.749 ns/op
Iteration   5: 870.101 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  869.814 ±(99.9%) 0.842 ns/op [Average]
  (min, avg, max) = (869.215, 869.814, 871.037), stdev = 0.557
  CI (99.9%): [868.972, 870.656] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 82.08% complete, ETA 00:10:31
# Fork: 1 of 2
# Warmup Iteration   1: 25.598 ns/op
# Warmup Iteration   2: 29.512 ns/op
# Warmup Iteration   3: 19.039 ns/op
Iteration   1: 19.014 ns/op
Iteration   2: 18.993 ns/op
Iteration   3: 18.957 ns/op
Iteration   4: 18.816 ns/op
Iteration   5: 18.823 ns/op

# Run progress: 82.12% complete, ETA 00:10:29
# Fork: 2 of 2
# Warmup Iteration   1: 25.604 ns/op
# Warmup Iteration   2: 27.888 ns/op
# Warmup Iteration   3: 19.040 ns/op
Iteration   1: 19.010 ns/op
Iteration   2: 18.984 ns/op
Iteration   3: 18.978 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.846 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.925 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (18.816, 18.925, 19.014), stdev = 0.084
  CI (99.9%): [18.798, 19.053] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 82.15% complete, ETA 00:10:28
# Fork: 1 of 2
# Warmup Iteration   1: 2772.641 ns/op
# Warmup Iteration   2: 951.625 ns/op
# Warmup Iteration   3: 722.784 ns/op
Iteration   1: 723.688 ns/op
Iteration   2: 725.789 ns/op
Iteration   3: 719.225 ns/op
Iteration   4: 721.558 ns/op
Iteration   5: 719.293 ns/op

# Run progress: 82.19% complete, ETA 00:10:27
# Fork: 2 of 2
# Warmup Iteration   1: 3635.276 ns/op
# Warmup Iteration   2: 933.111 ns/op
# Warmup Iteration   3: 708.204 ns/op
Iteration   1: 709.663 ns/op
Iteration   2: 707.292 ns/op
Iteration   3: 710.339 ns/op
Iteration   4: 709.609 ns/op
Iteration   5: 709.835 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  715.629 ±(99.9%) 10.481 ns/op [Average]
  (min, avg, max) = (707.292, 715.629, 725.789), stdev = 6.933
  CI (99.9%): [705.148, 726.110] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 82.22% complete, ETA 00:10:26
# Fork: 1 of 2
# Warmup Iteration   1: 29026.365 ns/op
# Warmup Iteration   2: 1737.085 ns/op
# Warmup Iteration   3: 1152.773 ns/op
Iteration   1: 1047.230 ns/op
Iteration   2: 1052.080 ns/op
Iteration   3: 1047.200 ns/op
Iteration   4: 1048.309 ns/op
Iteration   5: 1049.836 ns/op

# Run progress: 82.26% complete, ETA 00:10:25
# Fork: 2 of 2
# Warmup Iteration   1: 23586.549 ns/op
# Warmup Iteration   2: 1776.571 ns/op
# Warmup Iteration   3: 1141.716 ns/op
Iteration   1: 1052.139 ns/op
Iteration   2: 1048.896 ns/op
Iteration   3: 1050.637 ns/op
Iteration   4: 1041.667 ns/op
Iteration   5: 1041.926 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1047.992 ±(99.9%) 5.595 ns/op [Average]
  (min, avg, max) = (1041.667, 1047.992, 1052.139), stdev = 3.701
  CI (99.9%): [1042.398, 1053.587] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 82.29% complete, ETA 00:10:23
# Fork: 1 of 2
# Warmup Iteration   1: 35877.005 ns/op
# Warmup Iteration   2: 1681.872 ns/op
# Warmup Iteration   3: 1197.615 ns/op
Iteration   1: 1016.416 ns/op
Iteration   2: 1014.074 ns/op
Iteration   3: 1014.933 ns/op
Iteration   4: 1015.529 ns/op
Iteration   5: 1014.126 ns/op

# Run progress: 82.33% complete, ETA 00:10:22
# Fork: 2 of 2
# Warmup Iteration   1: 29031.463 ns/op
# Warmup Iteration   2: 1695.532 ns/op
# Warmup Iteration   3: 1112.861 ns/op
Iteration   1: 1019.295 ns/op
Iteration   2: 1019.944 ns/op
Iteration   3: 1019.753 ns/op
Iteration   4: 1017.403 ns/op
Iteration   5: 1022.227 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1017.370 ±(99.9%) 4.253 ns/op [Average]
  (min, avg, max) = (1014.074, 1017.370, 1022.227), stdev = 2.813
  CI (99.9%): [1013.117, 1021.623] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 82.36% complete, ETA 00:10:21
# Fork: 1 of 2
# Warmup Iteration   1: 1656.523 ns/op
# Warmup Iteration   2: 1356.503 ns/op
# Warmup Iteration   3: 1030.192 ns/op
Iteration   1: 1030.107 ns/op
Iteration   2: 1027.770 ns/op
Iteration   3: 1029.515 ns/op
Iteration   4: 1028.553 ns/op
Iteration   5: 1035.052 ns/op

# Run progress: 82.40% complete, ETA 00:10:20
# Fork: 2 of 2
# Warmup Iteration   1: 2170.935 ns/op
# Warmup Iteration   2: 1405.183 ns/op
# Warmup Iteration   3: 1034.437 ns/op
Iteration   1: 1033.706 ns/op
Iteration   2: 1034.312 ns/op
Iteration   3: 1038.519 ns/op
Iteration   4: 1029.620 ns/op
Iteration   5: 1035.385 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1032.254 ±(99.9%) 5.430 ns/op [Average]
  (min, avg, max) = (1027.770, 1032.254, 1038.519), stdev = 3.591
  CI (99.9%): [1026.824, 1037.683] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 82.43% complete, ETA 00:10:18
# Fork: 1 of 2
# Warmup Iteration   1: 12775.269 ns/op
# Warmup Iteration   2: 5039.092 ns/op
# Warmup Iteration   3: 4194.573 ns/op
Iteration   1: 3788.979 ns/op
Iteration   2: 3793.013 ns/op
Iteration   3: 3785.532 ns/op
Iteration   4: 3765.583 ns/op
Iteration   5: 3770.563 ns/op

# Run progress: 82.47% complete, ETA 00:10:17
# Fork: 2 of 2
# Warmup Iteration   1: 18770.984 ns/op
# Warmup Iteration   2: 4904.892 ns/op
# Warmup Iteration   3: 4238.217 ns/op
Iteration   1: 3842.562 ns/op
Iteration   2: 3841.147 ns/op
Iteration   3: 3841.972 ns/op
Iteration   4: 3824.643 ns/op
Iteration   5: 3821.174 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3807.517 ±(99.9%) 45.600 ns/op [Average]
  (min, avg, max) = (3765.583, 3807.517, 3842.562), stdev = 30.162
  CI (99.9%): [3761.917, 3853.117] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 82.50% complete, ETA 00:10:16
# Fork: 1 of 2
# Warmup Iteration   1: 23.930 ns/op
# Warmup Iteration   2: 26.425 ns/op
# Warmup Iteration   3: 19.022 ns/op
Iteration   1: 19.019 ns/op
Iteration   2: 18.970 ns/op
Iteration   3: 18.954 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.848 ns/op

# Run progress: 82.53% complete, ETA 00:10:15
# Fork: 2 of 2
# Warmup Iteration   1: 24.000 ns/op
# Warmup Iteration   2: 31.132 ns/op
# Warmup Iteration   3: 19.065 ns/op
Iteration   1: 19.005 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.968 ns/op
Iteration   4: 18.823 ns/op
Iteration   5: 18.844 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (18.823, 18.923, 19.019), stdev = 0.077
  CI (99.9%): [18.807, 19.039] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 82.57% complete, ETA 00:10:14
# Fork: 1 of 2
# Warmup Iteration   1: 143.617 ns/op
# Warmup Iteration   2: 141.484 ns/op
# Warmup Iteration   3: 95.587 ns/op
Iteration   1: 95.617 ns/op
Iteration   2: 95.582 ns/op
Iteration   3: 95.572 ns/op
Iteration   4: 95.753 ns/op
Iteration   5: 95.828 ns/op

# Run progress: 82.60% complete, ETA 00:10:12
# Fork: 2 of 2
# Warmup Iteration   1: 154.105 ns/op
# Warmup Iteration   2: 144.860 ns/op
# Warmup Iteration   3: 95.542 ns/op
Iteration   1: 95.654 ns/op
Iteration   2: 95.675 ns/op
Iteration   3: 95.659 ns/op
Iteration   4: 95.794 ns/op
Iteration   5: 95.776 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.691 ±(99.9%) 0.138 ns/op [Average]
  (min, avg, max) = (95.572, 95.691, 95.828), stdev = 0.091
  CI (99.9%): [95.554, 95.829] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 82.64% complete, ETA 00:10:11
# Fork: 1 of 2
# Warmup Iteration   1: 647.753 ns/op
# Warmup Iteration   2: 186.107 ns/op
# Warmup Iteration   3: 113.397 ns/op
Iteration   1: 113.410 ns/op
Iteration   2: 113.458 ns/op
Iteration   3: 113.424 ns/op
Iteration   4: 113.561 ns/op
Iteration   5: 113.547 ns/op

# Run progress: 82.67% complete, ETA 00:10:10
# Fork: 2 of 2
# Warmup Iteration   1: 597.544 ns/op
# Warmup Iteration   2: 159.365 ns/op
# Warmup Iteration   3: 113.473 ns/op
Iteration   1: 113.280 ns/op
Iteration   2: 113.500 ns/op
Iteration   3: 113.225 ns/op
Iteration   4: 114.281 ns/op
Iteration   5: 114.125 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  113.581 ±(99.9%) 0.524 ns/op [Average]
  (min, avg, max) = (113.225, 113.581, 114.281), stdev = 0.347
  CI (99.9%): [113.057, 114.105] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 82.71% complete, ETA 00:10:09
# Fork: 1 of 2
# Warmup Iteration   1: 1522.315 ns/op
# Warmup Iteration   2: 163.317 ns/op
# Warmup Iteration   3: 115.933 ns/op
Iteration   1: 115.841 ns/op
Iteration   2: 116.458 ns/op
Iteration   3: 116.510 ns/op
Iteration   4: 116.606 ns/op
Iteration   5: 116.586 ns/op

# Run progress: 82.74% complete, ETA 00:10:07
# Fork: 2 of 2
# Warmup Iteration   1: 1263.772 ns/op
# Warmup Iteration   2: 167.299 ns/op
# Warmup Iteration   3: 116.538 ns/op
Iteration   1: 116.685 ns/op
Iteration   2: 116.657 ns/op
Iteration   3: 116.629 ns/op
Iteration   4: 116.553 ns/op
Iteration   5: 116.452 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.498 ±(99.9%) 0.369 ns/op [Average]
  (min, avg, max) = (115.841, 116.498, 116.685), stdev = 0.244
  CI (99.9%): [116.129, 116.866] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 82.78% complete, ETA 00:10:06
# Fork: 1 of 2
# Warmup Iteration   1: 104.139 ns/op
# Warmup Iteration   2: 106.806 ns/op
# Warmup Iteration   3: 73.548 ns/op
Iteration   1: 73.542 ns/op
Iteration   2: 73.587 ns/op
Iteration   3: 73.547 ns/op
Iteration   4: 74.294 ns/op
Iteration   5: 74.263 ns/op

# Run progress: 82.81% complete, ETA 00:10:05
# Fork: 2 of 2
# Warmup Iteration   1: 104.145 ns/op
# Warmup Iteration   2: 106.729 ns/op
# Warmup Iteration   3: 73.553 ns/op
Iteration   1: 73.532 ns/op
Iteration   2: 73.540 ns/op
Iteration   3: 73.590 ns/op
Iteration   4: 74.311 ns/op
Iteration   5: 74.277 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.848 ±(99.9%) 0.571 ns/op [Average]
  (min, avg, max) = (73.532, 73.848, 74.311), stdev = 0.378
  CI (99.9%): [73.278, 74.419] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 82.85% complete, ETA 00:10:04
# Fork: 1 of 2
# Warmup Iteration   1: 227.318 ns/op
# Warmup Iteration   2: 227.748 ns/op
# Warmup Iteration   3: 156.696 ns/op
Iteration   1: 156.995 ns/op
Iteration   2: 157.013 ns/op
Iteration   3: 156.690 ns/op
Iteration   4: 156.977 ns/op
Iteration   5: 156.968 ns/op

# Run progress: 82.88% complete, ETA 00:10:03
# Fork: 2 of 2
# Warmup Iteration   1: 223.381 ns/op
# Warmup Iteration   2: 225.630 ns/op
# Warmup Iteration   3: 156.498 ns/op
Iteration   1: 156.634 ns/op
Iteration   2: 156.142 ns/op
Iteration   3: 156.161 ns/op
Iteration   4: 155.850 ns/op
Iteration   5: 155.841 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.527 ±(99.9%) 0.731 ns/op [Average]
  (min, avg, max) = (155.841, 156.527, 157.013), stdev = 0.483
  CI (99.9%): [155.796, 157.258] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 82.92% complete, ETA 00:10:01
# Fork: 1 of 2
# Warmup Iteration   1: 24.783 ns/op
# Warmup Iteration   2: 30.941 ns/op
# Warmup Iteration   3: 19.098 ns/op
Iteration   1: 18.982 ns/op
Iteration   2: 18.956 ns/op
Iteration   3: 18.955 ns/op
Iteration   4: 18.838 ns/op
Iteration   5: 18.861 ns/op

# Run progress: 82.95% complete, ETA 00:10:00
# Fork: 2 of 2
# Warmup Iteration   1: 25.760 ns/op
# Warmup Iteration   2: 29.912 ns/op
# Warmup Iteration   3: 19.014 ns/op
Iteration   1: 18.993 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.945 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.833 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (18.831, 18.915, 18.993), stdev = 0.066
  CI (99.9%): [18.815, 19.015] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 82.99% complete, ETA 00:09:59
# Fork: 1 of 2
# Warmup Iteration   1: 22959.400 ns/op
# Warmup Iteration   2: 973.486 ns/op
# Warmup Iteration   3: 730.973 ns/op
Iteration   1: 678.942 ns/op
Iteration   2: 678.265 ns/op
Iteration   3: 678.990 ns/op
Iteration   4: 673.950 ns/op
Iteration   5: 672.624 ns/op

# Run progress: 83.02% complete, ETA 00:09:58
# Fork: 2 of 2
# Warmup Iteration   1: 17567.644 ns/op
# Warmup Iteration   2: 973.453 ns/op
# Warmup Iteration   3: 733.046 ns/op
Iteration   1: 676.465 ns/op
Iteration   2: 673.217 ns/op
Iteration   3: 677.108 ns/op
Iteration   4: 678.188 ns/op
Iteration   5: 675.274 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  676.302 ±(99.9%) 3.631 ns/op [Average]
  (min, avg, max) = (672.624, 676.302, 678.990), stdev = 2.402
  CI (99.9%): [672.671, 679.934] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 83.06% complete, ETA 00:09:56
# Fork: 1 of 2
# Warmup Iteration   1: 11029.733 ns/op
# Warmup Iteration   2: 1041.875 ns/op
# Warmup Iteration   3: 684.609 ns/op
Iteration   1: 684.197 ns/op
Iteration   2: 687.852 ns/op
Iteration   3: 686.987 ns/op
Iteration   4: 685.011 ns/op
Iteration   5: 684.876 ns/op

# Run progress: 83.09% complete, ETA 00:09:55
# Fork: 2 of 2
# Warmup Iteration   1: 10776.959 ns/op
# Warmup Iteration   2: 875.364 ns/op
# Warmup Iteration   3: 747.844 ns/op
Iteration   1: 684.745 ns/op
Iteration   2: 685.431 ns/op
Iteration   3: 684.783 ns/op
Iteration   4: 685.697 ns/op
Iteration   5: 684.772 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  685.435 ±(99.9%) 1.723 ns/op [Average]
  (min, avg, max) = (684.197, 685.435, 687.852), stdev = 1.139
  CI (99.9%): [683.713, 687.158] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 83.13% complete, ETA 00:09:54
# Fork: 1 of 2
# Warmup Iteration   1: 18560.607 ns/op
# Warmup Iteration   2: 1095.087 ns/op
# Warmup Iteration   3: 855.434 ns/op
Iteration   1: 786.821 ns/op
Iteration   2: 787.190 ns/op
Iteration   3: 785.776 ns/op
Iteration   4: 791.777 ns/op
Iteration   5: 789.989 ns/op

# Run progress: 83.16% complete, ETA 00:09:53
# Fork: 2 of 2
# Warmup Iteration   1: 27994.999 ns/op
# Warmup Iteration   2: 1056.842 ns/op
# Warmup Iteration   3: 833.272 ns/op
Iteration   1: 751.162 ns/op
Iteration   2: 759.026 ns/op
Iteration   3: 751.257 ns/op
Iteration   4: 754.030 ns/op
Iteration   5: 752.497 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  770.953 ±(99.9%) 27.969 ns/op [Average]
  (min, avg, max) = (751.162, 770.953, 791.777), stdev = 18.499
  CI (99.9%): [742.984, 798.921] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 83.19% complete, ETA 00:09:52
# Fork: 1 of 2
# Warmup Iteration   1: 1101.097 ns/op
# Warmup Iteration   2: 757.716 ns/op
# Warmup Iteration   3: 563.059 ns/op
Iteration   1: 565.560 ns/op
Iteration   2: 567.687 ns/op
Iteration   3: 569.770 ns/op
Iteration   4: 568.280 ns/op
Iteration   5: 570.021 ns/op

# Run progress: 83.23% complete, ETA 00:09:50
# Fork: 2 of 2
# Warmup Iteration   1: 1008.582 ns/op
# Warmup Iteration   2: 754.345 ns/op
# Warmup Iteration   3: 567.206 ns/op
Iteration   1: 567.418 ns/op
Iteration   2: 567.530 ns/op
Iteration   3: 566.924 ns/op
Iteration   4: 568.256 ns/op
Iteration   5: 570.674 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  568.212 ±(99.9%) 2.355 ns/op [Average]
  (min, avg, max) = (565.560, 568.212, 570.674), stdev = 1.557
  CI (99.9%): [565.858, 570.567] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 83.26% complete, ETA 00:09:49
# Fork: 1 of 2
# Warmup Iteration   1: 2386.593 ns/op
# Warmup Iteration   2: 1440.461 ns/op
# Warmup Iteration   3: 1068.800 ns/op
Iteration   1: 1068.532 ns/op
Iteration   2: 1073.329 ns/op
Iteration   3: 1074.564 ns/op
Iteration   4: 1072.961 ns/op
Iteration   5: 1073.250 ns/op

# Run progress: 83.30% complete, ETA 00:09:48
# Fork: 2 of 2
# Warmup Iteration   1: 2774.683 ns/op
# Warmup Iteration   2: 1464.150 ns/op
# Warmup Iteration   3: 1066.520 ns/op
Iteration   1: 1069.543 ns/op
Iteration   2: 1071.327 ns/op
Iteration   3: 1063.330 ns/op
Iteration   4: 1068.605 ns/op
Iteration   5: 1068.588 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1070.403 ±(99.9%) 5.094 ns/op [Average]
  (min, avg, max) = (1063.330, 1070.403, 1074.564), stdev = 3.369
  CI (99.9%): [1065.309, 1075.497] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 83.33% complete, ETA 00:09:47
# Fork: 1 of 2
# Warmup Iteration   1: 25.067 ns/op
# Warmup Iteration   2: 147.675 ns/op
# Warmup Iteration   3: 18.953 ns/op
Iteration   1: 18.947 ns/op
Iteration   2: 18.990 ns/op
Iteration   3: 18.991 ns/op
Iteration   4: 18.845 ns/op
Iteration   5: 18.856 ns/op

# Run progress: 83.37% complete, ETA 00:09:45
# Fork: 2 of 2
# Warmup Iteration   1: 25.143 ns/op
# Warmup Iteration   2: 122.422 ns/op
# Warmup Iteration   3: 18.957 ns/op
Iteration   1: 18.990 ns/op
Iteration   2: 18.964 ns/op
Iteration   3: 18.982 ns/op
Iteration   4: 18.826 ns/op
Iteration   5: 18.849 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.924 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (18.826, 18.924, 18.991), stdev = 0.071
  CI (99.9%): [18.817, 19.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 83.40% complete, ETA 00:09:44
# Fork: 1 of 2
# Warmup Iteration   1: 250.817 ns/op
# Warmup Iteration   2: 499.369 ns/op
# Warmup Iteration   3: 137.666 ns/op
Iteration   1: 137.550 ns/op
Iteration   2: 137.172 ns/op
Iteration   3: 137.321 ns/op
Iteration   4: 138.167 ns/op
Iteration   5: 138.551 ns/op

# Run progress: 83.44% complete, ETA 00:09:43
# Fork: 2 of 2
# Warmup Iteration   1: 259.470 ns/op
# Warmup Iteration   2: 459.912 ns/op
# Warmup Iteration   3: 137.439 ns/op
Iteration   1: 138.009 ns/op
Iteration   2: 137.230 ns/op
Iteration   3: 137.357 ns/op
Iteration   4: 138.187 ns/op
Iteration   5: 138.185 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.773 ±(99.9%) 0.754 ns/op [Average]
  (min, avg, max) = (137.172, 137.773, 138.551), stdev = 0.499
  CI (99.9%): [137.019, 138.527] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 83.47% complete, ETA 00:09:42
# Fork: 1 of 2
# Warmup Iteration   1: 347.518 ns/op
# Warmup Iteration   2: 539.142 ns/op
# Warmup Iteration   3: 156.475 ns/op
Iteration   1: 156.225 ns/op
Iteration   2: 156.171 ns/op
Iteration   3: 156.167 ns/op
Iteration   4: 156.738 ns/op
Iteration   5: 156.844 ns/op

# Run progress: 83.51% complete, ETA 00:09:41
# Fork: 2 of 2
# Warmup Iteration   1: 389.744 ns/op
# Warmup Iteration   2: 534.306 ns/op
# Warmup Iteration   3: 159.580 ns/op
Iteration   1: 159.651 ns/op
Iteration   2: 159.733 ns/op
Iteration   3: 159.714 ns/op
Iteration   4: 160.098 ns/op
Iteration   5: 160.049 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  158.139 ±(99.9%) 2.754 ns/op [Average]
  (min, avg, max) = (156.167, 158.139, 160.098), stdev = 1.821
  CI (99.9%): [155.385, 160.893] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 83.54% complete, ETA 00:09:39
# Fork: 1 of 2
# Warmup Iteration   1: 481.964 ns/op
# Warmup Iteration   2: 612.936 ns/op
# Warmup Iteration   3: 205.715 ns/op
Iteration   1: 205.752 ns/op
Iteration   2: 205.800 ns/op
Iteration   3: 205.781 ns/op
Iteration   4: 206.348 ns/op
Iteration   5: 206.422 ns/op

# Run progress: 83.58% complete, ETA 00:09:38
# Fork: 2 of 2
# Warmup Iteration   1: 492.904 ns/op
# Warmup Iteration   2: 661.147 ns/op
# Warmup Iteration   3: 204.855 ns/op
Iteration   1: 204.664 ns/op
Iteration   2: 204.683 ns/op
Iteration   3: 205.042 ns/op
Iteration   4: 205.520 ns/op
Iteration   5: 205.184 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  205.520 ±(99.9%) 0.939 ns/op [Average]
  (min, avg, max) = (204.664, 205.520, 206.422), stdev = 0.621
  CI (99.9%): [204.580, 206.459] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 83.61% complete, ETA 00:09:37
# Fork: 1 of 2
# Warmup Iteration   1: 104.598 ns/op
# Warmup Iteration   2: 297.841 ns/op
# Warmup Iteration   3: 73.786 ns/op
Iteration   1: 73.789 ns/op
Iteration   2: 73.679 ns/op
Iteration   3: 73.724 ns/op
Iteration   4: 74.421 ns/op
Iteration   5: 74.501 ns/op

# Run progress: 83.65% complete, ETA 00:09:36
# Fork: 2 of 2
# Warmup Iteration   1: 104.049 ns/op
# Warmup Iteration   2: 291.353 ns/op
# Warmup Iteration   3: 73.720 ns/op
Iteration   1: 73.751 ns/op
Iteration   2: 73.726 ns/op
Iteration   3: 73.761 ns/op
Iteration   4: 74.502 ns/op
Iteration   5: 74.447 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.030 ±(99.9%) 0.572 ns/op [Average]
  (min, avg, max) = (73.679, 74.030, 74.502), stdev = 0.378
  CI (99.9%): [73.458, 74.602] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 83.68% complete, ETA 00:09:34
# Fork: 1 of 2
# Warmup Iteration   1: 212.694 ns/op
# Warmup Iteration   2: 510.577 ns/op
# Warmup Iteration   3: 131.611 ns/op
Iteration   1: 131.533 ns/op
Iteration   2: 131.881 ns/op
Iteration   3: 131.720 ns/op
Iteration   4: 132.000 ns/op
Iteration   5: 131.949 ns/op

# Run progress: 83.72% complete, ETA 00:09:33
# Fork: 2 of 2
# Warmup Iteration   1: 220.999 ns/op
# Warmup Iteration   2: 481.310 ns/op
# Warmup Iteration   3: 131.284 ns/op
Iteration   1: 131.630 ns/op
Iteration   2: 131.355 ns/op
Iteration   3: 131.571 ns/op
Iteration   4: 132.009 ns/op
Iteration   5: 131.674 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.732 ±(99.9%) 0.334 ns/op [Average]
  (min, avg, max) = (131.355, 131.732, 132.009), stdev = 0.221
  CI (99.9%): [131.398, 132.066] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 83.75% complete, ETA 00:09:32
# Fork: 1 of 2
# Warmup Iteration   1: 23.304 ns/op
# Warmup Iteration   2: 143.374 ns/op
# Warmup Iteration   3: 18.927 ns/op
Iteration   1: 18.935 ns/op
Iteration   2: 18.964 ns/op
Iteration   3: 18.948 ns/op
Iteration   4: 19.778 ns/op
Iteration   5: 19.869 ns/op

# Run progress: 83.78% complete, ETA 00:09:31
# Fork: 2 of 2
# Warmup Iteration   1: 25.797 ns/op
# Warmup Iteration   2: 137.919 ns/op
# Warmup Iteration   3: 18.937 ns/op
Iteration   1: 18.966 ns/op
Iteration   2: 18.974 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.835 ns/op
Iteration   5: 18.815 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.104 ±(99.9%) 0.580 ns/op [Average]
  (min, avg, max) = (18.815, 19.104, 19.869), stdev = 0.384
  CI (99.9%): [18.524, 19.684] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 83.82% complete, ETA 00:09:30
# Fork: 1 of 2
# Warmup Iteration   1: 222.570 ns/op
# Warmup Iteration   2: 434.391 ns/op
# Warmup Iteration   3: 138.786 ns/op
Iteration   1: 138.798 ns/op
Iteration   2: 138.991 ns/op
Iteration   3: 138.815 ns/op
Iteration   4: 139.273 ns/op
Iteration   5: 139.369 ns/op

# Run progress: 83.85% complete, ETA 00:09:28
# Fork: 2 of 2
# Warmup Iteration   1: 237.227 ns/op
# Warmup Iteration   2: 431.889 ns/op
# Warmup Iteration   3: 138.837 ns/op
Iteration   1: 138.863 ns/op
Iteration   2: 138.820 ns/op
Iteration   3: 138.744 ns/op
Iteration   4: 139.260 ns/op
Iteration   5: 139.148 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.008 ±(99.9%) 0.353 ns/op [Average]
  (min, avg, max) = (138.744, 139.008, 139.369), stdev = 0.234
  CI (99.9%): [138.655, 139.361] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 83.89% complete, ETA 00:09:27
# Fork: 1 of 2
# Warmup Iteration   1: 450.466 ns/op
# Warmup Iteration   2: 559.179 ns/op
# Warmup Iteration   3: 164.136 ns/op
Iteration   1: 164.504 ns/op
Iteration   2: 164.305 ns/op
Iteration   3: 164.178 ns/op
Iteration   4: 165.011 ns/op
Iteration   5: 164.798 ns/op

# Run progress: 83.92% complete, ETA 00:09:26
# Fork: 2 of 2
# Warmup Iteration   1: 407.968 ns/op
# Warmup Iteration   2: 531.056 ns/op
# Warmup Iteration   3: 164.083 ns/op
Iteration   1: 164.095 ns/op
Iteration   2: 164.144 ns/op
Iteration   3: 164.125 ns/op
Iteration   4: 164.924 ns/op
Iteration   5: 164.867 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  164.495 ±(99.9%) 0.561 ns/op [Average]
  (min, avg, max) = (164.095, 164.495, 165.011), stdev = 0.371
  CI (99.9%): [163.935, 165.056] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 83.96% complete, ETA 00:09:25
# Fork: 1 of 2
# Warmup Iteration   1: 773.115 ns/op
# Warmup Iteration   2: 699.528 ns/op
# Warmup Iteration   3: 210.571 ns/op
Iteration   1: 210.718 ns/op
Iteration   2: 210.730 ns/op
Iteration   3: 210.631 ns/op
Iteration   4: 211.141 ns/op
Iteration   5: 211.121 ns/op

# Run progress: 83.99% complete, ETA 00:09:23
# Fork: 2 of 2
# Warmup Iteration   1: 591.552 ns/op
# Warmup Iteration   2: 647.247 ns/op
# Warmup Iteration   3: 210.024 ns/op
Iteration   1: 210.096 ns/op
Iteration   2: 210.116 ns/op
Iteration   3: 210.134 ns/op
Iteration   4: 210.670 ns/op
Iteration   5: 210.678 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  210.604 ±(99.9%) 0.577 ns/op [Average]
  (min, avg, max) = (210.096, 210.604, 211.141), stdev = 0.382
  CI (99.9%): [210.026, 211.181] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 84.03% complete, ETA 00:09:22
# Fork: 1 of 2
# Warmup Iteration   1: 105.515 ns/op
# Warmup Iteration   2: 291.622 ns/op
# Warmup Iteration   3: 73.729 ns/op
Iteration   1: 73.682 ns/op
Iteration   2: 73.839 ns/op
Iteration   3: 73.813 ns/op
Iteration   4: 74.452 ns/op
Iteration   5: 74.457 ns/op

# Run progress: 84.06% complete, ETA 00:09:21
# Fork: 2 of 2
# Warmup Iteration   1: 104.973 ns/op
# Warmup Iteration   2: 295.147 ns/op
# Warmup Iteration   3: 73.751 ns/op
Iteration   1: 73.730 ns/op
Iteration   2: 73.758 ns/op
Iteration   3: 73.720 ns/op
Iteration   4: 74.531 ns/op
Iteration   5: 74.612 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.059 ±(99.9%) 0.597 ns/op [Average]
  (min, avg, max) = (73.682, 74.059, 74.612), stdev = 0.395
  CI (99.9%): [73.462, 74.657] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 84.10% complete, ETA 00:09:20
# Fork: 1 of 2
# Warmup Iteration   1: 261.193 ns/op
# Warmup Iteration   2: 490.775 ns/op
# Warmup Iteration   3: 133.010 ns/op
Iteration   1: 132.081 ns/op
Iteration   2: 132.134 ns/op
Iteration   3: 133.045 ns/op
Iteration   4: 133.332 ns/op
Iteration   5: 133.337 ns/op

# Run progress: 84.13% complete, ETA 00:09:19
# Fork: 2 of 2
# Warmup Iteration   1: 246.101 ns/op
# Warmup Iteration   2: 501.298 ns/op
# Warmup Iteration   3: 138.312 ns/op
Iteration   1: 138.272 ns/op
Iteration   2: 138.817 ns/op
Iteration   3: 138.661 ns/op
Iteration   4: 139.423 ns/op
Iteration   5: 139.401 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  135.850 ±(99.9%) 4.950 ns/op [Average]
  (min, avg, max) = (132.081, 135.850, 139.423), stdev = 3.274
  CI (99.9%): [130.900, 140.801] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 84.17% complete, ETA 00:09:17
# Fork: 1 of 2
# Warmup Iteration   1: 23.435 ns/op
# Warmup Iteration   2: 129.396 ns/op
# Warmup Iteration   3: 18.928 ns/op
Iteration   1: 18.959 ns/op
Iteration   2: 18.973 ns/op
Iteration   3: 19.007 ns/op
Iteration   4: 18.839 ns/op
Iteration   5: 18.833 ns/op

# Run progress: 84.20% complete, ETA 00:09:16
# Fork: 2 of 2
# Warmup Iteration   1: 23.724 ns/op
# Warmup Iteration   2: 116.377 ns/op
# Warmup Iteration   3: 18.920 ns/op
Iteration   1: 18.962 ns/op
Iteration   2: 18.943 ns/op
Iteration   3: 18.965 ns/op
Iteration   4: 18.834 ns/op
Iteration   5: 18.824 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.914 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (18.824, 18.914, 19.007), stdev = 0.072
  CI (99.9%): [18.805, 19.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 84.24% complete, ETA 00:09:15
# Fork: 1 of 2
# Warmup Iteration   1: 272.679 ns/op
# Warmup Iteration   2: 499.252 ns/op
# Warmup Iteration   3: 144.059 ns/op
Iteration   1: 144.091 ns/op
Iteration   2: 144.119 ns/op
Iteration   3: 144.177 ns/op
Iteration   4: 144.634 ns/op
Iteration   5: 144.592 ns/op

# Run progress: 84.27% complete, ETA 00:09:14
# Fork: 2 of 2
# Warmup Iteration   1: 277.415 ns/op
# Warmup Iteration   2: 492.328 ns/op
# Warmup Iteration   3: 144.204 ns/op
Iteration   1: 144.264 ns/op
Iteration   2: 144.232 ns/op
Iteration   3: 144.253 ns/op
Iteration   4: 144.764 ns/op
Iteration   5: 144.775 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  144.390 ±(99.9%) 0.408 ns/op [Average]
  (min, avg, max) = (144.091, 144.390, 144.775), stdev = 0.270
  CI (99.9%): [143.982, 144.798] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 84.31% complete, ETA 00:09:12
# Fork: 1 of 2
# Warmup Iteration   1: 2221.125 ns/op
# Warmup Iteration   2: 608.575 ns/op
# Warmup Iteration   3: 179.686 ns/op
Iteration   1: 180.023 ns/op
Iteration   2: 179.697 ns/op
Iteration   3: 179.949 ns/op
Iteration   4: 180.157 ns/op
Iteration   5: 179.996 ns/op

# Run progress: 84.34% complete, ETA 00:09:11
# Fork: 2 of 2
# Warmup Iteration   1: 503.218 ns/op
# Warmup Iteration   2: 606.654 ns/op
# Warmup Iteration   3: 175.854 ns/op
Iteration   1: 175.766 ns/op
Iteration   2: 175.369 ns/op
Iteration   3: 175.452 ns/op
Iteration   4: 175.930 ns/op
Iteration   5: 176.340 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  177.868 ±(99.9%) 3.368 ns/op [Average]
  (min, avg, max) = (175.369, 177.868, 180.157), stdev = 2.228
  CI (99.9%): [174.499, 181.236] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 84.38% complete, ETA 00:09:10
# Fork: 1 of 2
# Warmup Iteration   1: 709.555 ns/op
# Warmup Iteration   2: 749.763 ns/op
# Warmup Iteration   3: 231.867 ns/op
Iteration   1: 231.432 ns/op
Iteration   2: 231.441 ns/op
Iteration   3: 231.597 ns/op
Iteration   4: 231.752 ns/op
Iteration   5: 232.153 ns/op

# Run progress: 84.41% complete, ETA 00:09:09
# Fork: 2 of 2
# Warmup Iteration   1: 615.831 ns/op
# Warmup Iteration   2: 773.450 ns/op
# Warmup Iteration   3: 231.018 ns/op
Iteration   1: 231.226 ns/op
Iteration   2: 229.741 ns/op
Iteration   3: 229.214 ns/op
Iteration   4: 231.709 ns/op
Iteration   5: 232.092 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.236 ±(99.9%) 1.478 ns/op [Average]
  (min, avg, max) = (229.214, 231.236, 232.153), stdev = 0.977
  CI (99.9%): [229.758, 232.713] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 84.44% complete, ETA 00:09:08
# Fork: 1 of 2
# Warmup Iteration   1: 106.227 ns/op
# Warmup Iteration   2: 274.617 ns/op
# Warmup Iteration   3: 73.736 ns/op
Iteration   1: 73.767 ns/op
Iteration   2: 73.690 ns/op
Iteration   3: 73.799 ns/op
Iteration   4: 74.574 ns/op
Iteration   5: 74.511 ns/op

# Run progress: 84.48% complete, ETA 00:09:06
# Fork: 2 of 2
# Warmup Iteration   1: 105.075 ns/op
# Warmup Iteration   2: 297.868 ns/op
# Warmup Iteration   3: 74.209 ns/op
Iteration   1: 74.182 ns/op
Iteration   2: 74.241 ns/op
Iteration   3: 74.220 ns/op
Iteration   4: 74.933 ns/op
Iteration   5: 74.903 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.282 ±(99.9%) 0.678 ns/op [Average]
  (min, avg, max) = (73.690, 74.282, 74.933), stdev = 0.449
  CI (99.9%): [73.604, 74.960] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 84.51% complete, ETA 00:09:05
# Fork: 1 of 2
# Warmup Iteration   1: 232.021 ns/op
# Warmup Iteration   2: 490.724 ns/op
# Warmup Iteration   3: 140.077 ns/op
Iteration   1: 140.556 ns/op
Iteration   2: 140.432 ns/op
Iteration   3: 140.748 ns/op
Iteration   4: 140.411 ns/op
Iteration   5: 140.165 ns/op

# Run progress: 84.55% complete, ETA 00:09:04
# Fork: 2 of 2
# Warmup Iteration   1: 255.175 ns/op
# Warmup Iteration   2: 512.927 ns/op
# Warmup Iteration   3: 147.012 ns/op
Iteration   1: 147.110 ns/op
Iteration   2: 147.403 ns/op
Iteration   3: 148.307 ns/op
Iteration   4: 147.209 ns/op
Iteration   5: 147.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  143.941 ±(99.9%) 5.572 ns/op [Average]
  (min, avg, max) = (140.165, 143.941, 148.307), stdev = 3.686
  CI (99.9%): [138.369, 149.514] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 84.58% complete, ETA 00:09:03
# Fork: 1 of 2
# Warmup Iteration   1: 23.881 ns/op
# Warmup Iteration   2: 26.649 ns/op
# Warmup Iteration   3: 18.951 ns/op
Iteration   1: 18.991 ns/op
Iteration   2: 18.986 ns/op
Iteration   3: 18.978 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.845 ns/op

# Run progress: 84.62% complete, ETA 00:09:01
# Fork: 2 of 2
# Warmup Iteration   1: 25.107 ns/op
# Warmup Iteration   2: 27.993 ns/op
# Warmup Iteration   3: 18.974 ns/op
Iteration   1: 18.995 ns/op
Iteration   2: 19.009 ns/op
Iteration   3: 19.000 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.833 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.930 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (18.831, 18.930, 19.009), stdev = 0.082
  CI (99.9%): [18.806, 19.054] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 84.65% complete, ETA 00:09:00
# Fork: 1 of 2
# Warmup Iteration   1: 139.914 ns/op
# Warmup Iteration   2: 144.352 ns/op
# Warmup Iteration   3: 95.793 ns/op
Iteration   1: 95.781 ns/op
Iteration   2: 95.816 ns/op
Iteration   3: 95.722 ns/op
Iteration   4: 96.142 ns/op
Iteration   5: 96.013 ns/op

# Run progress: 84.69% complete, ETA 00:08:59
# Fork: 2 of 2
# Warmup Iteration   1: 142.640 ns/op
# Warmup Iteration   2: 144.355 ns/op
# Warmup Iteration   3: 95.752 ns/op
Iteration   1: 95.847 ns/op
Iteration   2: 95.755 ns/op
Iteration   3: 95.756 ns/op
Iteration   4: 96.008 ns/op
Iteration   5: 95.950 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.879 ±(99.9%) 0.213 ns/op [Average]
  (min, avg, max) = (95.722, 95.879, 96.142), stdev = 0.141
  CI (99.9%): [95.666, 96.092] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 84.72% complete, ETA 00:08:58
# Fork: 1 of 2
# Warmup Iteration   1: 3760.336 ns/op
# Warmup Iteration   2: 156.866 ns/op
# Warmup Iteration   3: 114.246 ns/op
Iteration   1: 114.109 ns/op
Iteration   2: 114.517 ns/op
Iteration   3: 114.912 ns/op
Iteration   4: 115.102 ns/op
Iteration   5: 115.230 ns/op

# Run progress: 84.76% complete, ETA 00:08:57
# Fork: 2 of 2
# Warmup Iteration   1: 847.379 ns/op
# Warmup Iteration   2: 194.649 ns/op
# Warmup Iteration   3: 114.669 ns/op
Iteration   1: 114.338 ns/op
Iteration   2: 114.211 ns/op
Iteration   3: 114.435 ns/op
Iteration   4: 114.972 ns/op
Iteration   5: 115.110 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.694 ±(99.9%) 0.628 ns/op [Average]
  (min, avg, max) = (114.109, 114.694, 115.230), stdev = 0.415
  CI (99.9%): [114.066, 115.322] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 84.79% complete, ETA 00:08:55
# Fork: 1 of 2
# Warmup Iteration   1: 1558.304 ns/op
# Warmup Iteration   2: 186.655 ns/op
# Warmup Iteration   3: 116.596 ns/op
Iteration   1: 116.471 ns/op
Iteration   2: 116.599 ns/op
Iteration   3: 116.398 ns/op
Iteration   4: 116.558 ns/op
Iteration   5: 116.560 ns/op

# Run progress: 84.83% complete, ETA 00:08:54
# Fork: 2 of 2
# Warmup Iteration   1: 1472.126 ns/op
# Warmup Iteration   2: 183.612 ns/op
# Warmup Iteration   3: 115.450 ns/op
Iteration   1: 115.375 ns/op
Iteration   2: 115.328 ns/op
Iteration   3: 115.590 ns/op
Iteration   4: 115.825 ns/op
Iteration   5: 115.960 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.066 ±(99.9%) 0.775 ns/op [Average]
  (min, avg, max) = (115.328, 116.066, 116.599), stdev = 0.512
  CI (99.9%): [115.292, 116.841] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 84.86% complete, ETA 00:08:53
# Fork: 1 of 2
# Warmup Iteration   1: 104.828 ns/op
# Warmup Iteration   2: 106.419 ns/op
# Warmup Iteration   3: 73.719 ns/op
Iteration   1: 73.802 ns/op
Iteration   2: 73.747 ns/op
Iteration   3: 73.815 ns/op
Iteration   4: 74.409 ns/op
Iteration   5: 74.466 ns/op

# Run progress: 84.90% complete, ETA 00:08:52
# Fork: 2 of 2
# Warmup Iteration   1: 105.172 ns/op
# Warmup Iteration   2: 107.061 ns/op
# Warmup Iteration   3: 73.722 ns/op
Iteration   1: 73.737 ns/op
Iteration   2: 73.769 ns/op
Iteration   3: 73.747 ns/op
Iteration   4: 74.447 ns/op
Iteration   5: 74.510 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.045 ±(99.9%) 0.540 ns/op [Average]
  (min, avg, max) = (73.737, 74.045, 74.510), stdev = 0.357
  CI (99.9%): [73.505, 74.585] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 84.93% complete, ETA 00:08:50
# Fork: 1 of 2
# Warmup Iteration   1: 228.641 ns/op
# Warmup Iteration   2: 213.996 ns/op
# Warmup Iteration   3: 131.533 ns/op
Iteration   1: 131.010 ns/op
Iteration   2: 131.576 ns/op
Iteration   3: 130.985 ns/op
Iteration   4: 131.892 ns/op
Iteration   5: 131.650 ns/op

# Run progress: 84.97% complete, ETA 00:08:49
# Fork: 2 of 2
# Warmup Iteration   1: 220.432 ns/op
# Warmup Iteration   2: 247.261 ns/op
# Warmup Iteration   3: 130.988 ns/op
Iteration   1: 131.027 ns/op
Iteration   2: 131.031 ns/op
Iteration   3: 131.023 ns/op
Iteration   4: 132.019 ns/op
Iteration   5: 131.655 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.387 ±(99.9%) 0.622 ns/op [Average]
  (min, avg, max) = (130.985, 131.387, 132.019), stdev = 0.411
  CI (99.9%): [130.765, 132.009] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 85.00% complete, ETA 00:08:48
# Fork: 1 of 2
# Warmup Iteration   1: 23.992 ns/op
# Warmup Iteration   2: 31.396 ns/op
# Warmup Iteration   3: 25.263 ns/op
Iteration   1: 18.950 ns/op
Iteration   2: 18.961 ns/op
Iteration   3: 18.976 ns/op
Iteration   4: 18.846 ns/op
Iteration   5: 18.839 ns/op

# Run progress: 85.03% complete, ETA 00:08:47
# Fork: 2 of 2
# Warmup Iteration   1: 24.644 ns/op
# Warmup Iteration   2: 27.223 ns/op
# Warmup Iteration   3: 27.708 ns/op
Iteration   1: 18.935 ns/op
Iteration   2: 18.964 ns/op
Iteration   3: 18.950 ns/op
Iteration   4: 18.851 ns/op
Iteration   5: 18.816 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.909 ±(99.9%) 0.094 ns/op [Average]
  (min, avg, max) = (18.816, 18.909, 18.976), stdev = 0.062
  CI (99.9%): [18.814, 19.003] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 85.07% complete, ETA 00:08:46
# Fork: 1 of 2
# Warmup Iteration   1: 219.011 ns/op
# Warmup Iteration   2: 181.260 ns/op
# Warmup Iteration   3: 208.912 ns/op
Iteration   1: 137.266 ns/op
Iteration   2: 137.284 ns/op
Iteration   3: 137.284 ns/op
Iteration   4: 138.224 ns/op
Iteration   5: 138.112 ns/op

# Run progress: 85.10% complete, ETA 00:08:44
# Fork: 2 of 2
# Warmup Iteration   1: 245.107 ns/op
# Warmup Iteration   2: 200.131 ns/op
# Warmup Iteration   3: 203.047 ns/op
Iteration   1: 137.663 ns/op
Iteration   2: 137.408 ns/op
Iteration   3: 137.440 ns/op
Iteration   4: 138.070 ns/op
Iteration   5: 138.288 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.704 ±(99.9%) 0.641 ns/op [Average]
  (min, avg, max) = (137.266, 137.704, 138.288), stdev = 0.424
  CI (99.9%): [137.063, 138.345] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 85.14% complete, ETA 00:08:43
# Fork: 1 of 2
# Warmup Iteration   1: 417.597 ns/op
# Warmup Iteration   2: 230.910 ns/op
# Warmup Iteration   3: 216.880 ns/op
Iteration   1: 156.378 ns/op
Iteration   2: 156.379 ns/op
Iteration   3: 156.443 ns/op
Iteration   4: 157.113 ns/op
Iteration   5: 157.185 ns/op

# Run progress: 85.17% complete, ETA 00:08:42
# Fork: 2 of 2
# Warmup Iteration   1: 381.658 ns/op
# Warmup Iteration   2: 219.719 ns/op
# Warmup Iteration   3: 233.237 ns/op
Iteration   1: 163.776 ns/op
Iteration   2: 163.815 ns/op
Iteration   3: 163.833 ns/op
Iteration   4: 164.114 ns/op
Iteration   5: 164.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  160.317 ±(99.9%) 5.782 ns/op [Average]
  (min, avg, max) = (156.378, 160.317, 164.131), stdev = 3.824
  CI (99.9%): [154.535, 166.099] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 85.21% complete, ETA 00:08:41
# Fork: 1 of 2
# Warmup Iteration   1: 407.585 ns/op
# Warmup Iteration   2: 298.418 ns/op
# Warmup Iteration   3: 270.533 ns/op
Iteration   1: 204.921 ns/op
Iteration   2: 204.946 ns/op
Iteration   3: 204.694 ns/op
Iteration   4: 205.347 ns/op
Iteration   5: 205.373 ns/op

# Run progress: 85.24% complete, ETA 00:08:39
# Fork: 2 of 2
# Warmup Iteration   1: 438.626 ns/op
# Warmup Iteration   2: 281.998 ns/op
# Warmup Iteration   3: 306.535 ns/op
Iteration   1: 204.882 ns/op
Iteration   2: 204.796 ns/op
Iteration   3: 204.764 ns/op
Iteration   4: 205.374 ns/op
Iteration   5: 205.329 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  205.043 ±(99.9%) 0.423 ns/op [Average]
  (min, avg, max) = (204.694, 205.043, 205.374), stdev = 0.280
  CI (99.9%): [204.620, 205.465] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 85.28% complete, ETA 00:08:38
# Fork: 1 of 2
# Warmup Iteration   1: 103.696 ns/op
# Warmup Iteration   2: 105.612 ns/op
# Warmup Iteration   3: 110.062 ns/op
Iteration   1: 73.707 ns/op
Iteration   2: 73.748 ns/op
Iteration   3: 73.794 ns/op
Iteration   4: 74.501 ns/op
Iteration   5: 74.572 ns/op

# Run progress: 85.31% complete, ETA 00:08:37
# Fork: 2 of 2
# Warmup Iteration   1: 104.422 ns/op
# Warmup Iteration   2: 122.412 ns/op
# Warmup Iteration   3: 97.307 ns/op
Iteration   1: 73.740 ns/op
Iteration   2: 73.735 ns/op
Iteration   3: 73.714 ns/op
Iteration   4: 74.515 ns/op
Iteration   5: 74.453 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.048 ±(99.9%) 0.604 ns/op [Average]
  (min, avg, max) = (73.707, 74.048, 74.572), stdev = 0.400
  CI (99.9%): [73.444, 74.652] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 85.35% complete, ETA 00:08:36
# Fork: 1 of 2
# Warmup Iteration   1: 194.545 ns/op
# Warmup Iteration   2: 193.839 ns/op
# Warmup Iteration   3: 163.414 ns/op
Iteration   1: 112.218 ns/op
Iteration   2: 111.661 ns/op
Iteration   3: 112.266 ns/op
Iteration   4: 112.420 ns/op
Iteration   5: 112.226 ns/op

# Run progress: 85.38% complete, ETA 00:08:35
# Fork: 2 of 2
# Warmup Iteration   1: 191.790 ns/op
# Warmup Iteration   2: 198.527 ns/op
# Warmup Iteration   3: 169.385 ns/op
Iteration   1: 111.642 ns/op
Iteration   2: 112.069 ns/op
Iteration   3: 111.344 ns/op
Iteration   4: 112.189 ns/op
Iteration   5: 111.952 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  111.999 ±(99.9%) 0.520 ns/op [Average]
  (min, avg, max) = (111.344, 111.999, 112.420), stdev = 0.344
  CI (99.9%): [111.479, 112.518] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 85.42% complete, ETA 00:08:33
# Fork: 1 of 2
# Warmup Iteration   1: 24.008 ns/op
# Warmup Iteration   2: 30.518 ns/op
# Warmup Iteration   3: 19.025 ns/op
Iteration   1: 18.997 ns/op
Iteration   2: 18.959 ns/op
Iteration   3: 18.954 ns/op
Iteration   4: 18.816 ns/op
Iteration   5: 18.834 ns/op

# Run progress: 85.45% complete, ETA 00:08:32
# Fork: 2 of 2
# Warmup Iteration   1: 24.976 ns/op
# Warmup Iteration   2: 25.777 ns/op
# Warmup Iteration   3: 19.043 ns/op
Iteration   1: 18.982 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.968 ns/op
Iteration   4: 18.816 ns/op
Iteration   5: 18.868 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.914 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (18.816, 18.914, 18.997), stdev = 0.072
  CI (99.9%): [18.805, 19.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 85.49% complete, ETA 00:08:31
# Fork: 1 of 2
# Warmup Iteration   1: 2473.742 ns/op
# Warmup Iteration   2: 1233.176 ns/op
# Warmup Iteration   3: 872.472 ns/op
Iteration   1: 872.299 ns/op
Iteration   2: 872.288 ns/op
Iteration   3: 872.622 ns/op
Iteration   4: 872.616 ns/op
Iteration   5: 871.257 ns/op

# Run progress: 85.52% complete, ETA 00:08:30
# Fork: 2 of 2
# Warmup Iteration   1: 2366.672 ns/op
# Warmup Iteration   2: 1200.418 ns/op
# Warmup Iteration   3: 858.271 ns/op
Iteration   1: 858.599 ns/op
Iteration   2: 858.666 ns/op
Iteration   3: 858.706 ns/op
Iteration   4: 860.167 ns/op
Iteration   5: 859.749 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  865.697 ±(99.9%) 10.431 ns/op [Average]
  (min, avg, max) = (858.599, 865.697, 872.622), stdev = 6.899
  CI (99.9%): [855.266, 876.128] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 85.56% complete, ETA 00:08:28
# Fork: 1 of 2
# Warmup Iteration   1: 13993.489 ns/op
# Warmup Iteration   2: 1157.879 ns/op
# Warmup Iteration   3: 940.313 ns/op
Iteration   1: 869.044 ns/op
Iteration   2: 868.693 ns/op
Iteration   3: 868.570 ns/op
Iteration   4: 868.249 ns/op
Iteration   5: 868.088 ns/op

# Run progress: 85.59% complete, ETA 00:08:27
# Fork: 2 of 2
# Warmup Iteration   1: 17200.241 ns/op
# Warmup Iteration   2: 1316.205 ns/op
# Warmup Iteration   3: 958.697 ns/op
Iteration   1: 878.557 ns/op
Iteration   2: 877.889 ns/op
Iteration   3: 878.753 ns/op
Iteration   4: 876.467 ns/op
Iteration   5: 876.321 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  873.063 ±(99.9%) 7.328 ns/op [Average]
  (min, avg, max) = (868.088, 873.063, 878.753), stdev = 4.847
  CI (99.9%): [865.735, 880.391] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 85.63% complete, ETA 00:08:26
# Fork: 1 of 2
# Warmup Iteration   1: 42372.020 ns/op
# Warmup Iteration   2: 1524.255 ns/op
# Warmup Iteration   3: 1047.587 ns/op
Iteration   1: 887.471 ns/op
Iteration   2: 887.035 ns/op
Iteration   3: 886.920 ns/op
Iteration   4: 886.623 ns/op
Iteration   5: 886.279 ns/op

# Run progress: 85.66% complete, ETA 00:08:25
# Fork: 2 of 2
# Warmup Iteration   1: 12693.055 ns/op
# Warmup Iteration   2: 1150.258 ns/op
# Warmup Iteration   3: 976.944 ns/op
Iteration   1: 905.649 ns/op
Iteration   2: 903.339 ns/op
Iteration   3: 902.500 ns/op
Iteration   4: 901.978 ns/op
Iteration   5: 902.909 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  895.070 ±(99.9%) 13.161 ns/op [Average]
  (min, avg, max) = (886.279, 895.070, 905.649), stdev = 8.705
  CI (99.9%): [881.909, 908.231] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 85.69% complete, ETA 00:08:24
# Fork: 1 of 2
# Warmup Iteration   1: 1861.783 ns/op
# Warmup Iteration   2: 1246.130 ns/op
# Warmup Iteration   3: 949.543 ns/op
Iteration   1: 949.823 ns/op
Iteration   2: 950.321 ns/op
Iteration   3: 949.971 ns/op
Iteration   4: 949.774 ns/op
Iteration   5: 950.115 ns/op

# Run progress: 85.73% complete, ETA 00:08:22
# Fork: 2 of 2
# Warmup Iteration   1: 1521.852 ns/op
# Warmup Iteration   2: 1250.146 ns/op
# Warmup Iteration   3: 949.221 ns/op
Iteration   1: 949.704 ns/op
Iteration   2: 949.061 ns/op
Iteration   3: 949.252 ns/op
Iteration   4: 949.953 ns/op
Iteration   5: 950.147 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  949.812 ±(99.9%) 0.596 ns/op [Average]
  (min, avg, max) = (949.061, 949.812, 950.321), stdev = 0.394
  CI (99.9%): [949.216, 950.408] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 85.76% complete, ETA 00:08:21
# Fork: 1 of 2
# Warmup Iteration   1: 13590.365 ns/op
# Warmup Iteration   2: 5247.593 ns/op
# Warmup Iteration   3: 4146.581 ns/op
Iteration   1: 3835.735 ns/op
Iteration   2: 3833.687 ns/op
Iteration   3: 3832.493 ns/op
Iteration   4: 3815.264 ns/op
Iteration   5: 3818.535 ns/op

# Run progress: 85.80% complete, ETA 00:08:20
# Fork: 2 of 2
# Warmup Iteration   1: 15413.615 ns/op
# Warmup Iteration   2: 5288.296 ns/op
# Warmup Iteration   3: 4195.603 ns/op
Iteration   1: 3885.239 ns/op
Iteration   2: 3885.195 ns/op
Iteration   3: 3883.849 ns/op
Iteration   4: 3865.791 ns/op
Iteration   5: 3864.619 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3852.041 ±(99.9%) 42.225 ns/op [Average]
  (min, avg, max) = (3815.264, 3852.041, 3885.239), stdev = 27.929
  CI (99.9%): [3809.816, 3894.266] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 85.83% complete, ETA 00:08:19
# Fork: 1 of 2
# Warmup Iteration   1: 24.590 ns/op
# Warmup Iteration   2: 26.704 ns/op
# Warmup Iteration   3: 19.019 ns/op
Iteration   1: 19.003 ns/op
Iteration   2: 18.930 ns/op
Iteration   3: 18.953 ns/op
Iteration   4: 18.817 ns/op
Iteration   5: 18.853 ns/op

# Run progress: 85.87% complete, ETA 00:08:17
# Fork: 2 of 2
# Warmup Iteration   1: 25.429 ns/op
# Warmup Iteration   2: 29.554 ns/op
# Warmup Iteration   3: 19.011 ns/op
Iteration   1: 18.987 ns/op
Iteration   2: 18.927 ns/op
Iteration   3: 18.961 ns/op
Iteration   4: 18.811 ns/op
Iteration   5: 18.852 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.909 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (18.811, 18.909, 19.003), stdev = 0.070
  CI (99.9%): [18.803, 19.016] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 85.90% complete, ETA 00:08:16
# Fork: 1 of 2
# Warmup Iteration   1: 2367.864 ns/op
# Warmup Iteration   2: 1040.466 ns/op
# Warmup Iteration   3: 702.496 ns/op
Iteration   1: 702.919 ns/op
Iteration   2: 703.354 ns/op
Iteration   3: 703.464 ns/op
Iteration   4: 703.949 ns/op
Iteration   5: 703.672 ns/op

# Run progress: 85.94% complete, ETA 00:08:15
# Fork: 2 of 2
# Warmup Iteration   1: 1935.844 ns/op
# Warmup Iteration   2: 951.944 ns/op
# Warmup Iteration   3: 702.465 ns/op
Iteration   1: 702.493 ns/op
Iteration   2: 702.597 ns/op
Iteration   3: 702.740 ns/op
Iteration   4: 702.613 ns/op
Iteration   5: 702.997 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  703.080 ±(99.9%) 0.760 ns/op [Average]
  (min, avg, max) = (702.493, 703.080, 703.949), stdev = 0.503
  CI (99.9%): [702.320, 703.839] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 85.97% complete, ETA 00:08:14
# Fork: 1 of 2
# Warmup Iteration   1: 52729.267 ns/op
# Warmup Iteration   2: 1849.761 ns/op
# Warmup Iteration   3: 1126.368 ns/op
Iteration   1: 937.097 ns/op
Iteration   2: 937.300 ns/op
Iteration   3: 936.881 ns/op
Iteration   4: 938.780 ns/op
Iteration   5: 938.953 ns/op

# Run progress: 86.01% complete, ETA 00:08:13
# Fork: 2 of 2
# Warmup Iteration   1: 11166.730 ns/op
# Warmup Iteration   2: 1321.087 ns/op
# Warmup Iteration   3: 948.836 ns/op
Iteration   1: 949.941 ns/op
Iteration   2: 948.328 ns/op
Iteration   3: 948.054 ns/op
Iteration   4: 948.899 ns/op
Iteration   5: 949.218 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  943.345 ±(99.9%) 8.921 ns/op [Average]
  (min, avg, max) = (936.881, 943.345, 949.941), stdev = 5.901
  CI (99.9%): [934.424, 952.266] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 86.04% complete, ETA 00:08:11
# Fork: 1 of 2
# Warmup Iteration   1: 11043.952 ns/op
# Warmup Iteration   2: 1386.099 ns/op
# Warmup Iteration   3: 988.879 ns/op
Iteration   1: 989.101 ns/op
Iteration   2: 988.698 ns/op
Iteration   3: 988.963 ns/op
Iteration   4: 990.709 ns/op
Iteration   5: 991.436 ns/op

# Run progress: 86.08% complete, ETA 00:08:10
# Fork: 2 of 2
# Warmup Iteration   1: 11106.440 ns/op
# Warmup Iteration   2: 1319.580 ns/op
# Warmup Iteration   3: 986.107 ns/op
Iteration   1: 986.112 ns/op
Iteration   2: 987.182 ns/op
Iteration   3: 986.497 ns/op
Iteration   4: 988.396 ns/op
Iteration   5: 988.594 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  988.569 ±(99.9%) 2.547 ns/op [Average]
  (min, avg, max) = (986.112, 988.569, 991.436), stdev = 1.685
  CI (99.9%): [986.022, 991.116] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 86.11% complete, ETA 00:08:09
# Fork: 1 of 2
# Warmup Iteration   1: 1600.774 ns/op
# Warmup Iteration   2: 1134.585 ns/op
# Warmup Iteration   3: 868.345 ns/op
Iteration   1: 868.270 ns/op
Iteration   2: 868.243 ns/op
Iteration   3: 868.443 ns/op
Iteration   4: 868.681 ns/op
Iteration   5: 868.595 ns/op

# Run progress: 86.15% complete, ETA 00:08:08
# Fork: 2 of 2
# Warmup Iteration   1: 1437.534 ns/op
# Warmup Iteration   2: 1163.996 ns/op
# Warmup Iteration   3: 882.667 ns/op
Iteration   1: 883.251 ns/op
Iteration   2: 883.910 ns/op
Iteration   3: 882.966 ns/op
Iteration   4: 883.089 ns/op
Iteration   5: 883.160 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  875.861 ±(99.9%) 11.823 ns/op [Average]
  (min, avg, max) = (868.243, 875.861, 883.910), stdev = 7.820
  CI (99.9%): [864.038, 887.684] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 86.18% complete, ETA 00:08:06
# Fork: 1 of 2
# Warmup Iteration   1: 11733.721 ns/op
# Warmup Iteration   2: 5250.053 ns/op
# Warmup Iteration   3: 4627.350 ns/op
Iteration   1: 3759.756 ns/op
Iteration   2: 3755.136 ns/op
Iteration   3: 3759.881 ns/op
Iteration   4: 3797.939 ns/op
Iteration   5: 3792.432 ns/op

# Run progress: 86.22% complete, ETA 00:08:05
# Fork: 2 of 2
# Warmup Iteration   1: 11248.489 ns/op
# Warmup Iteration   2: 4856.910 ns/op
# Warmup Iteration   3: 3837.917 ns/op
Iteration   1: 3516.043 ns/op
Iteration   2: 3516.044 ns/op
Iteration   3: 3515.855 ns/op
Iteration   4: 3502.632 ns/op
Iteration   5: 3500.115 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3641.583 ±(99.9%) 210.640 ns/op [Average]
  (min, avg, max) = (3500.115, 3641.583, 3797.939), stdev = 139.325
  CI (99.9%): [3430.943, 3852.223] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 86.25% complete, ETA 00:08:04
# Fork: 1 of 2
# Warmup Iteration   1: 23.345 ns/op
# Warmup Iteration   2: 28.515 ns/op
# Warmup Iteration   3: 19.036 ns/op
Iteration   1: 18.981 ns/op
Iteration   2: 18.952 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 18.831 ns/op
Iteration   5: 18.843 ns/op

# Run progress: 86.28% complete, ETA 00:08:03
# Fork: 2 of 2
# Warmup Iteration   1: 24.316 ns/op
# Warmup Iteration   2: 27.041 ns/op
# Warmup Iteration   3: 19.025 ns/op
Iteration   1: 18.988 ns/op
Iteration   2: 18.975 ns/op
Iteration   3: 18.990 ns/op
Iteration   4: 18.865 ns/op
Iteration   5: 18.836 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (18.831, 18.923, 18.990), stdev = 0.070
  CI (99.9%): [18.818, 19.028] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 86.32% complete, ETA 00:08:02
# Fork: 1 of 2
# Warmup Iteration   1: 7456.113 ns/op
# Warmup Iteration   2: 1101.009 ns/op
# Warmup Iteration   3: 774.411 ns/op
Iteration   1: 775.076 ns/op
Iteration   2: 774.755 ns/op
Iteration   3: 777.168 ns/op
Iteration   4: 776.699 ns/op
Iteration   5: 776.492 ns/op

# Run progress: 86.35% complete, ETA 00:08:00
# Fork: 2 of 2
# Warmup Iteration   1: 7458.458 ns/op
# Warmup Iteration   2: 1189.104 ns/op
# Warmup Iteration   3: 786.044 ns/op
Iteration   1: 786.178 ns/op
Iteration   2: 789.075 ns/op
Iteration   3: 786.759 ns/op
Iteration   4: 788.048 ns/op
Iteration   5: 787.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  781.760 ±(99.9%) 9.251 ns/op [Average]
  (min, avg, max) = (774.755, 781.760, 789.075), stdev = 6.119
  CI (99.9%): [772.509, 791.011] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 86.39% complete, ETA 00:07:59
# Fork: 1 of 2
# Warmup Iteration   1: 33143.895 ns/op
# Warmup Iteration   2: 1530.926 ns/op
# Warmup Iteration   3: 1157.623 ns/op
Iteration   1: 953.958 ns/op
Iteration   2: 955.815 ns/op
Iteration   3: 954.516 ns/op
Iteration   4: 955.712 ns/op
Iteration   5: 957.360 ns/op

# Run progress: 86.42% complete, ETA 00:07:58
# Fork: 2 of 2
# Warmup Iteration   1: 29296.120 ns/op
# Warmup Iteration   2: 1421.614 ns/op
# Warmup Iteration   3: 1075.866 ns/op
Iteration   1: 978.533 ns/op
Iteration   2: 974.787 ns/op
Iteration   3: 977.438 ns/op
Iteration   4: 973.166 ns/op
Iteration   5: 982.937 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  966.422 ±(99.9%) 17.907 ns/op [Average]
  (min, avg, max) = (953.958, 966.422, 982.937), stdev = 11.845
  CI (99.9%): [948.515, 984.330] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 86.46% complete, ETA 00:07:57
# Fork: 1 of 2
# Warmup Iteration   1: 30079.672 ns/op
# Warmup Iteration   2: 1268.460 ns/op
# Warmup Iteration   3: 1024.417 ns/op
Iteration   1: 935.262 ns/op
Iteration   2: 929.399 ns/op
Iteration   3: 933.451 ns/op
Iteration   4: 937.843 ns/op
Iteration   5: 932.731 ns/op

# Run progress: 86.49% complete, ETA 00:07:55
# Fork: 2 of 2
# Warmup Iteration   1: 12262.130 ns/op
# Warmup Iteration   2: 1164.236 ns/op
# Warmup Iteration   3: 999.326 ns/op
Iteration   1: 918.305 ns/op
Iteration   2: 913.869 ns/op
Iteration   3: 916.880 ns/op
Iteration   4: 916.818 ns/op
Iteration   5: 915.421 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  924.998 ±(99.9%) 14.379 ns/op [Average]
  (min, avg, max) = (913.869, 924.998, 937.843), stdev = 9.511
  CI (99.9%): [910.618, 939.377] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 86.53% complete, ETA 00:07:54
# Fork: 1 of 2
# Warmup Iteration   1: 1648.086 ns/op
# Warmup Iteration   2: 1423.332 ns/op
# Warmup Iteration   3: 1021.544 ns/op
Iteration   1: 1022.846 ns/op
Iteration   2: 1028.165 ns/op
Iteration   3: 1027.303 ns/op
Iteration   4: 1021.516 ns/op
Iteration   5: 1024.428 ns/op

# Run progress: 86.56% complete, ETA 00:07:53
# Fork: 2 of 2
# Warmup Iteration   1: 1936.396 ns/op
# Warmup Iteration   2: 1496.092 ns/op
# Warmup Iteration   3: 1021.132 ns/op
Iteration   1: 1015.465 ns/op
Iteration   2: 1020.635 ns/op
Iteration   3: 1017.430 ns/op
Iteration   4: 1019.193 ns/op
Iteration   5: 1018.887 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1021.587 ±(99.9%) 6.260 ns/op [Average]
  (min, avg, max) = (1015.465, 1021.587, 1028.165), stdev = 4.141
  CI (99.9%): [1015.327, 1027.847] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 86.60% complete, ETA 00:07:52
# Fork: 1 of 2
# Warmup Iteration   1: 23695.812 ns/op
# Warmup Iteration   2: 5382.695 ns/op
# Warmup Iteration   3: 4236.501 ns/op
Iteration   1: 3844.755 ns/op
Iteration   2: 3848.366 ns/op
Iteration   3: 3846.367 ns/op
Iteration   4: 3827.069 ns/op
Iteration   5: 3830.200 ns/op

# Run progress: 86.63% complete, ETA 00:07:51
# Fork: 2 of 2
# Warmup Iteration   1: 16247.480 ns/op
# Warmup Iteration   2: 5263.585 ns/op
# Warmup Iteration   3: 4196.896 ns/op
Iteration   1: 3810.419 ns/op
Iteration   2: 3808.422 ns/op
Iteration   3: 3807.091 ns/op
Iteration   4: 3794.386 ns/op
Iteration   5: 3787.230 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3820.430 ±(99.9%) 33.380 ns/op [Average]
  (min, avg, max) = (3787.230, 3820.430, 3848.366), stdev = 22.079
  CI (99.9%): [3787.050, 3853.810] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 86.67% complete, ETA 00:07:49
# Fork: 1 of 2
# Warmup Iteration   1: 25.097 ns/op
# Warmup Iteration   2: 29.080 ns/op
# Warmup Iteration   3: 19.015 ns/op
Iteration   1: 19.019 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.951 ns/op
Iteration   4: 18.835 ns/op
Iteration   5: 18.846 ns/op

# Run progress: 86.70% complete, ETA 00:07:48
# Fork: 2 of 2
# Warmup Iteration   1: 24.824 ns/op
# Warmup Iteration   2: 29.810 ns/op
# Warmup Iteration   3: 19.073 ns/op
Iteration   1: 19.015 ns/op
Iteration   2: 18.971 ns/op
Iteration   3: 18.937 ns/op
Iteration   4: 18.845 ns/op
Iteration   5: 18.849 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (18.835, 18.923, 19.019), stdev = 0.073
  CI (99.9%): [18.813, 19.033] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 86.74% complete, ETA 00:07:47
# Fork: 1 of 2
# Warmup Iteration   1: 883.789 ns/op
# Warmup Iteration   2: 535.507 ns/op
# Warmup Iteration   3: 374.987 ns/op
Iteration   1: 377.879 ns/op
Iteration   2: 374.030 ns/op
Iteration   3: 369.822 ns/op
Iteration   4: 373.625 ns/op
Iteration   5: 375.240 ns/op

# Run progress: 86.77% complete, ETA 00:07:46
# Fork: 2 of 2
# Warmup Iteration   1: 795.604 ns/op
# Warmup Iteration   2: 432.906 ns/op
# Warmup Iteration   3: 334.232 ns/op
Iteration   1: 334.309 ns/op
Iteration   2: 334.365 ns/op
Iteration   3: 334.192 ns/op
Iteration   4: 334.493 ns/op
Iteration   5: 334.311 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  354.227 ±(99.9%) 31.838 ns/op [Average]
  (min, avg, max) = (334.192, 354.227, 377.879), stdev = 21.059
  CI (99.9%): [322.389, 386.065] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 86.81% complete, ETA 00:07:44
# Fork: 1 of 2
# Warmup Iteration   1: 11382.745 ns/op
# Warmup Iteration   2: 946.956 ns/op
# Warmup Iteration   3: 799.714 ns/op
Iteration   1: 731.881 ns/op
Iteration   2: 731.642 ns/op
Iteration   3: 731.885 ns/op
Iteration   4: 732.828 ns/op
Iteration   5: 732.708 ns/op

# Run progress: 86.84% complete, ETA 00:07:43
# Fork: 2 of 2
# Warmup Iteration   1: 28034.218 ns/op
# Warmup Iteration   2: 1023.295 ns/op
# Warmup Iteration   3: 837.914 ns/op
Iteration   1: 726.679 ns/op
Iteration   2: 725.798 ns/op
Iteration   3: 725.516 ns/op
Iteration   4: 734.003 ns/op
Iteration   5: 733.098 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  730.604 ±(99.9%) 4.934 ns/op [Average]
  (min, avg, max) = (725.516, 730.604, 734.003), stdev = 3.264
  CI (99.9%): [725.669, 735.538] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 86.88% complete, ETA 00:07:42
# Fork: 1 of 2
# Warmup Iteration   1: 11146.165 ns/op
# Warmup Iteration   2: 999.696 ns/op
# Warmup Iteration   3: 711.828 ns/op
Iteration   1: 712.136 ns/op
Iteration   2: 712.090 ns/op
Iteration   3: 712.156 ns/op
Iteration   4: 714.837 ns/op
Iteration   5: 739.520 ns/op

# Run progress: 86.91% complete, ETA 00:07:41
# Fork: 2 of 2
# Warmup Iteration   1: 42618.992 ns/op
# Warmup Iteration   2: 1296.733 ns/op
# Warmup Iteration   3: 862.404 ns/op
Iteration   1: 721.365 ns/op
Iteration   2: 721.483 ns/op
Iteration   3: 720.628 ns/op
Iteration   4: 723.862 ns/op
Iteration   5: 723.819 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  720.190 ±(99.9%) 12.621 ns/op [Average]
  (min, avg, max) = (712.090, 720.190, 739.520), stdev = 8.348
  CI (99.9%): [707.568, 732.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 86.94% complete, ETA 00:07:40
# Fork: 1 of 2
# Warmup Iteration   1: 1503.167 ns/op
# Warmup Iteration   2: 923.097 ns/op
# Warmup Iteration   3: 697.401 ns/op
Iteration   1: 697.908 ns/op
Iteration   2: 697.256 ns/op
Iteration   3: 698.071 ns/op
Iteration   4: 698.351 ns/op
Iteration   5: 698.529 ns/op

# Run progress: 86.98% complete, ETA 00:07:38
# Fork: 2 of 2
# Warmup Iteration   1: 1312.322 ns/op
# Warmup Iteration   2: 960.385 ns/op
# Warmup Iteration   3: 697.388 ns/op
Iteration   1: 697.756 ns/op
Iteration   2: 697.860 ns/op
Iteration   3: 697.614 ns/op
Iteration   4: 698.264 ns/op
Iteration   5: 698.265 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  697.987 ±(99.9%) 0.583 ns/op [Average]
  (min, avg, max) = (697.256, 697.987, 698.529), stdev = 0.385
  CI (99.9%): [697.405, 698.570] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 87.01% complete, ETA 00:07:37
# Fork: 1 of 2
# Warmup Iteration   1: 10871.786 ns/op
# Warmup Iteration   2: 5238.399 ns/op
# Warmup Iteration   3: 4231.341 ns/op
Iteration   1: 3830.306 ns/op
Iteration   2: 3833.408 ns/op
Iteration   3: 3832.704 ns/op
Iteration   4: 3813.616 ns/op
Iteration   5: 3815.793 ns/op

# Run progress: 87.05% complete, ETA 00:07:36
# Fork: 2 of 2
# Warmup Iteration   1: 9205.198 ns/op
# Warmup Iteration   2: 4890.918 ns/op
# Warmup Iteration   3: 3435.830 ns/op
Iteration   1: 3437.848 ns/op
Iteration   2: 3431.459 ns/op
Iteration   3: 3437.451 ns/op
Iteration   4: 3422.870 ns/op
Iteration   5: 3421.526 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3627.698 ±(99.9%) 314.939 ns/op [Average]
  (min, avg, max) = (3421.526, 3627.698, 3833.408), stdev = 208.313
  CI (99.9%): [3312.759, 3942.637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 87.08% complete, ETA 00:07:35
# Fork: 1 of 2
# Warmup Iteration   1: 23.386 ns/op
# Warmup Iteration   2: 30.549 ns/op
# Warmup Iteration   3: 19.043 ns/op
Iteration   1: 19.000 ns/op
Iteration   2: 18.978 ns/op
Iteration   3: 18.950 ns/op
Iteration   4: 18.842 ns/op
Iteration   5: 18.838 ns/op

# Run progress: 87.12% complete, ETA 00:07:33
# Fork: 2 of 2
# Warmup Iteration   1: 24.512 ns/op
# Warmup Iteration   2: 30.430 ns/op
# Warmup Iteration   3: 19.044 ns/op
Iteration   1: 19.001 ns/op
Iteration   2: 18.986 ns/op
Iteration   3: 18.960 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.846 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (18.827, 18.923, 19.001), stdev = 0.075
  CI (99.9%): [18.810, 19.036] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 87.15% complete, ETA 00:07:32
# Fork: 1 of 2
# Warmup Iteration   1: 2297.121 ns/op
# Warmup Iteration   2: 792.458 ns/op
# Warmup Iteration   3: 547.403 ns/op
Iteration   1: 547.857 ns/op
Iteration   2: 547.426 ns/op
Iteration   3: 544.584 ns/op
Iteration   4: 547.573 ns/op
Iteration   5: 548.519 ns/op

# Run progress: 87.19% complete, ETA 00:07:31
# Fork: 2 of 2
# Warmup Iteration   1: 2191.631 ns/op
# Warmup Iteration   2: 754.687 ns/op
# Warmup Iteration   3: 549.764 ns/op
Iteration   1: 553.567 ns/op
Iteration   2: 552.156 ns/op
Iteration   3: 550.076 ns/op
Iteration   4: 551.940 ns/op
Iteration   5: 553.683 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  549.738 ±(99.9%) 4.582 ns/op [Average]
  (min, avg, max) = (544.584, 549.738, 553.683), stdev = 3.030
  CI (99.9%): [545.157, 554.320] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 87.22% complete, ETA 00:07:30
# Fork: 1 of 2
# Warmup Iteration   1: 8208.447 ns/op
# Warmup Iteration   2: 746.659 ns/op
# Warmup Iteration   3: 547.711 ns/op
Iteration   1: 545.281 ns/op
Iteration   2: 550.595 ns/op
Iteration   3: 549.695 ns/op
Iteration   4: 548.108 ns/op
Iteration   5: 550.945 ns/op

# Run progress: 87.26% complete, ETA 00:07:28
# Fork: 2 of 2
# Warmup Iteration   1: 11237.379 ns/op
# Warmup Iteration   2: 836.259 ns/op
# Warmup Iteration   3: 534.665 ns/op
Iteration   1: 535.978 ns/op
Iteration   2: 535.072 ns/op
Iteration   3: 534.915 ns/op
Iteration   4: 536.162 ns/op
Iteration   5: 536.827 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  542.358 ±(99.9%) 10.752 ns/op [Average]
  (min, avg, max) = (534.915, 542.358, 550.945), stdev = 7.112
  CI (99.9%): [531.606, 553.110] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 87.29% complete, ETA 00:07:27
# Fork: 1 of 2
# Warmup Iteration   1: 26154.837 ns/op
# Warmup Iteration   2: 938.046 ns/op
# Warmup Iteration   3: 679.336 ns/op
Iteration   1: 617.001 ns/op
Iteration   2: 615.300 ns/op
Iteration   3: 615.971 ns/op
Iteration   4: 620.093 ns/op
Iteration   5: 617.505 ns/op

# Run progress: 87.33% complete, ETA 00:07:26
# Fork: 2 of 2
# Warmup Iteration   1: 27122.072 ns/op
# Warmup Iteration   2: 976.639 ns/op
# Warmup Iteration   3: 672.868 ns/op
Iteration   1: 611.102 ns/op
Iteration   2: 612.047 ns/op
Iteration   3: 610.173 ns/op
Iteration   4: 613.636 ns/op
Iteration   5: 611.600 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  614.443 ±(99.9%) 4.906 ns/op [Average]
  (min, avg, max) = (610.173, 614.443, 620.093), stdev = 3.245
  CI (99.9%): [609.537, 619.349] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 87.36% complete, ETA 00:07:25
# Fork: 1 of 2
# Warmup Iteration   1: 573.125 ns/op
# Warmup Iteration   2: 453.727 ns/op
# Warmup Iteration   3: 339.525 ns/op
Iteration   1: 335.422 ns/op
Iteration   2: 337.308 ns/op
Iteration   3: 335.459 ns/op
Iteration   4: 340.540 ns/op
Iteration   5: 337.264 ns/op

# Run progress: 87.40% complete, ETA 00:07:24
# Fork: 2 of 2
# Warmup Iteration   1: 520.172 ns/op
# Warmup Iteration   2: 451.409 ns/op
# Warmup Iteration   3: 337.115 ns/op
Iteration   1: 335.905 ns/op
Iteration   2: 336.534 ns/op
Iteration   3: 337.756 ns/op
Iteration   4: 336.183 ns/op
Iteration   5: 336.007 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.838 ±(99.9%) 2.306 ns/op [Average]
  (min, avg, max) = (335.422, 336.838, 340.540), stdev = 1.525
  CI (99.9%): [334.532, 339.144] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 87.43% complete, ETA 00:07:22
# Fork: 1 of 2
# Warmup Iteration   1: 14923.566 ns/op
# Warmup Iteration   2: 5788.320 ns/op
# Warmup Iteration   3: 4650.821 ns/op
Iteration   1: 4227.670 ns/op
Iteration   2: 4223.502 ns/op
Iteration   3: 4225.914 ns/op
Iteration   4: 4210.153 ns/op
Iteration   5: 4204.297 ns/op

# Run progress: 87.47% complete, ETA 00:07:21
# Fork: 2 of 2
# Warmup Iteration   1: 18680.333 ns/op
# Warmup Iteration   2: 5752.280 ns/op
# Warmup Iteration   3: 4917.620 ns/op
Iteration   1: 4474.730 ns/op
Iteration   2: 4469.532 ns/op
Iteration   3: 4475.167 ns/op
Iteration   4: 4447.879 ns/op
Iteration   5: 4450.094 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4340.894 ±(99.9%) 196.110 ns/op [Average]
  (min, avg, max) = (4204.297, 4340.894, 4475.167), stdev = 129.715
  CI (99.9%): [4144.784, 4537.004] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 87.50% complete, ETA 00:07:20
# Fork: 1 of 2
# Warmup Iteration   1: 23.940 ns/op
# Warmup Iteration   2: 30.577 ns/op
# Warmup Iteration   3: 19.053 ns/op
Iteration   1: 19.008 ns/op
Iteration   2: 18.991 ns/op
Iteration   3: 18.950 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.840 ns/op

# Run progress: 87.53% complete, ETA 00:07:19
# Fork: 2 of 2
# Warmup Iteration   1: 24.069 ns/op
# Warmup Iteration   2: 27.437 ns/op
# Warmup Iteration   3: 19.013 ns/op
Iteration   1: 18.982 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.961 ns/op
Iteration   4: 18.818 ns/op
Iteration   5: 18.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (18.818, 18.919, 19.008), stdev = 0.075
  CI (99.9%): [18.806, 19.032] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 87.57% complete, ETA 00:07:17
# Fork: 1 of 2
# Warmup Iteration   1: 4367.722 ns/op
# Warmup Iteration   2: 1403.834 ns/op
# Warmup Iteration   3: 995.323 ns/op
Iteration   1: 996.619 ns/op
Iteration   2: 995.073 ns/op
Iteration   3: 993.342 ns/op
Iteration   4: 985.116 ns/op
Iteration   5: 992.234 ns/op

# Run progress: 87.60% complete, ETA 00:07:16
# Fork: 2 of 2
# Warmup Iteration   1: 6897.863 ns/op
# Warmup Iteration   2: 1269.509 ns/op
# Warmup Iteration   3: 961.509 ns/op
Iteration   1: 968.369 ns/op
Iteration   2: 968.144 ns/op
Iteration   3: 976.861 ns/op
Iteration   4: 961.919 ns/op
Iteration   5: 980.216 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  981.789 ±(99.9%) 19.110 ns/op [Average]
  (min, avg, max) = (961.919, 981.789, 996.619), stdev = 12.640
  CI (99.9%): [962.680, 1000.899] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 87.64% complete, ETA 00:07:15
# Fork: 1 of 2
# Warmup Iteration   1: 7673.183 ns/op
# Warmup Iteration   2: 1715.085 ns/op
# Warmup Iteration   3: 1100.475 ns/op
Iteration   1: 1100.169 ns/op
Iteration   2: 1100.657 ns/op
Iteration   3: 1101.117 ns/op
Iteration   4: 1101.533 ns/op
Iteration   5: 1100.803 ns/op

# Run progress: 87.67% complete, ETA 00:07:14
# Fork: 2 of 2
# Warmup Iteration   1: 7809.374 ns/op
# Warmup Iteration   2: 1608.760 ns/op
# Warmup Iteration   3: 1117.389 ns/op
Iteration   1: 1102.196 ns/op
Iteration   2: 1123.433 ns/op
Iteration   3: 1113.730 ns/op
Iteration   4: 1102.711 ns/op
Iteration   5: 1114.048 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1106.040 ±(99.9%) 12.211 ns/op [Average]
  (min, avg, max) = (1100.169, 1106.040, 1123.433), stdev = 8.077
  CI (99.9%): [1093.829, 1118.250] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 87.71% complete, ETA 00:07:13
# Fork: 1 of 2
# Warmup Iteration   1: 7679.669 ns/op
# Warmup Iteration   2: 1538.396 ns/op
# Warmup Iteration   3: 1082.555 ns/op
Iteration   1: 1083.023 ns/op
Iteration   2: 1082.135 ns/op
Iteration   3: 1084.317 ns/op
Iteration   4: 1082.920 ns/op
Iteration   5: 1083.708 ns/op

# Run progress: 87.74% complete, ETA 00:07:11
# Fork: 2 of 2
# Warmup Iteration   1: 11784.158 ns/op
# Warmup Iteration   2: 1598.002 ns/op
# Warmup Iteration   3: 1211.675 ns/op
Iteration   1: 1107.079 ns/op
Iteration   2: 1105.994 ns/op
Iteration   3: 1106.391 ns/op
Iteration   4: 1106.739 ns/op
Iteration   5: 1106.187 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1094.849 ±(99.9%) 18.556 ns/op [Average]
  (min, avg, max) = (1082.135, 1094.849, 1107.079), stdev = 12.274
  CI (99.9%): [1076.294, 1113.405] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 87.78% complete, ETA 00:07:10
# Fork: 1 of 2
# Warmup Iteration   1: 1989.118 ns/op
# Warmup Iteration   2: 1343.073 ns/op
# Warmup Iteration   3: 1022.579 ns/op
Iteration   1: 1022.893 ns/op
Iteration   2: 1022.965 ns/op
Iteration   3: 1022.575 ns/op
Iteration   4: 1023.155 ns/op
Iteration   5: 1023.153 ns/op

# Run progress: 87.81% complete, ETA 00:07:09
# Fork: 2 of 2
# Warmup Iteration   1: 1886.458 ns/op
# Warmup Iteration   2: 1342.875 ns/op
# Warmup Iteration   3: 1015.689 ns/op
Iteration   1: 1015.008 ns/op
Iteration   2: 1015.916 ns/op
Iteration   3: 1016.696 ns/op
Iteration   4: 1017.136 ns/op
Iteration   5: 1018.520 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1019.802 ±(99.9%) 5.194 ns/op [Average]
  (min, avg, max) = (1015.008, 1019.802, 1023.155), stdev = 3.435
  CI (99.9%): [1014.608, 1024.995] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 87.85% complete, ETA 00:07:08
# Fork: 1 of 2
# Warmup Iteration   1: 11401.112 ns/op
# Warmup Iteration   2: 5182.177 ns/op
# Warmup Iteration   3: 3972.267 ns/op
Iteration   1: 3644.323 ns/op
Iteration   2: 3639.935 ns/op
Iteration   3: 3643.538 ns/op
Iteration   4: 3620.246 ns/op
Iteration   5: 3610.606 ns/op

# Run progress: 87.88% complete, ETA 00:07:06
# Fork: 2 of 2
# Warmup Iteration   1: 10476.917 ns/op
# Warmup Iteration   2: 4873.751 ns/op
# Warmup Iteration   3: 3640.104 ns/op
Iteration   1: 3635.132 ns/op
Iteration   2: 3636.590 ns/op
Iteration   3: 3635.506 ns/op
Iteration   4: 3611.600 ns/op
Iteration   5: 3611.859 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3628.933 ±(99.9%) 20.868 ns/op [Average]
  (min, avg, max) = (3610.606, 3628.933, 3644.323), stdev = 13.803
  CI (99.9%): [3608.065, 3649.802] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 87.92% complete, ETA 00:07:05
# Fork: 1 of 2
# Warmup Iteration   1: 25.832 ns/op
# Warmup Iteration   2: 30.560 ns/op
# Warmup Iteration   3: 19.006 ns/op
Iteration   1: 18.990 ns/op
Iteration   2: 18.964 ns/op
Iteration   3: 18.920 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.873 ns/op

# Run progress: 87.95% complete, ETA 00:07:04
# Fork: 2 of 2
# Warmup Iteration   1: 23.843 ns/op
# Warmup Iteration   2: 30.586 ns/op
# Warmup Iteration   3: 19.554 ns/op
Iteration   1: 19.369 ns/op
Iteration   2: 19.456 ns/op
Iteration   3: 19.463 ns/op
Iteration   4: 19.612 ns/op
Iteration   5: 19.539 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.201 ±(99.9%) 0.471 ns/op [Average]
  (min, avg, max) = (18.827, 19.201, 19.612), stdev = 0.311
  CI (99.9%): [18.731, 19.672] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 87.99% complete, ETA 00:07:03
# Fork: 1 of 2
# Warmup Iteration   1: 1873.499 ns/op
# Warmup Iteration   2: 1110.493 ns/op
# Warmup Iteration   3: 785.804 ns/op
Iteration   1: 786.335 ns/op
Iteration   2: 786.171 ns/op
Iteration   3: 793.705 ns/op
Iteration   4: 786.555 ns/op
Iteration   5: 793.689 ns/op

# Run progress: 88.02% complete, ETA 00:07:02
# Fork: 2 of 2
# Warmup Iteration   1: 1867.136 ns/op
# Warmup Iteration   2: 1116.564 ns/op
# Warmup Iteration   3: 792.823 ns/op
Iteration   1: 791.018 ns/op
Iteration   2: 793.488 ns/op
Iteration   3: 793.066 ns/op
Iteration   4: 793.532 ns/op
Iteration   5: 786.788 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  790.435 ±(99.9%) 5.305 ns/op [Average]
  (min, avg, max) = (786.171, 790.435, 793.705), stdev = 3.509
  CI (99.9%): [785.130, 795.740] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 88.06% complete, ETA 00:07:00
# Fork: 1 of 2
# Warmup Iteration   1: 7156.600 ns/op
# Warmup Iteration   2: 1303.733 ns/op
# Warmup Iteration   3: 898.918 ns/op
Iteration   1: 898.836 ns/op
Iteration   2: 896.959 ns/op
Iteration   3: 898.554 ns/op
Iteration   4: 898.120 ns/op
Iteration   5: 898.277 ns/op

# Run progress: 88.09% complete, ETA 00:06:59
# Fork: 2 of 2
# Warmup Iteration   1: 10905.594 ns/op
# Warmup Iteration   2: 1191.198 ns/op
# Warmup Iteration   3: 852.451 ns/op
Iteration   1: 853.698 ns/op
Iteration   2: 853.360 ns/op
Iteration   3: 854.131 ns/op
Iteration   4: 855.476 ns/op
Iteration   5: 855.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  876.276 ±(99.9%) 34.879 ns/op [Average]
  (min, avg, max) = (853.360, 876.276, 898.836), stdev = 23.070
  CI (99.9%): [841.397, 911.155] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 88.13% complete, ETA 00:06:58
# Fork: 1 of 2
# Warmup Iteration   1: 43767.632 ns/op
# Warmup Iteration   2: 1430.744 ns/op
# Warmup Iteration   3: 1009.867 ns/op
Iteration   1: 857.448 ns/op
Iteration   2: 840.963 ns/op
Iteration   3: 842.704 ns/op
Iteration   4: 844.656 ns/op
Iteration   5: 845.106 ns/op

# Run progress: 88.16% complete, ETA 00:06:57
# Fork: 2 of 2
# Warmup Iteration   1: 46575.886 ns/op
# Warmup Iteration   2: 1339.118 ns/op
# Warmup Iteration   3: 994.632 ns/op
Iteration   1: 838.471 ns/op
Iteration   2: 838.023 ns/op
Iteration   3: 836.239 ns/op
Iteration   4: 839.953 ns/op
Iteration   5: 838.143 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  842.171 ±(99.9%) 9.253 ns/op [Average]
  (min, avg, max) = (836.239, 842.171, 857.448), stdev = 6.120
  CI (99.9%): [832.917, 851.424] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 88.19% complete, ETA 00:06:55
# Fork: 1 of 2
# Warmup Iteration   1: 855.813 ns/op
# Warmup Iteration   2: 767.203 ns/op
# Warmup Iteration   3: 570.087 ns/op
Iteration   1: 581.936 ns/op
Iteration   2: 583.116 ns/op
Iteration   3: 580.317 ns/op
Iteration   4: 570.788 ns/op
Iteration   5: 570.754 ns/op

# Run progress: 88.23% complete, ETA 00:06:54
# Fork: 2 of 2
# Warmup Iteration   1: 957.563 ns/op
# Warmup Iteration   2: 760.597 ns/op
# Warmup Iteration   3: 570.163 ns/op
Iteration   1: 570.461 ns/op
Iteration   2: 570.278 ns/op
Iteration   3: 570.132 ns/op
Iteration   4: 570.666 ns/op
Iteration   5: 570.799 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  573.925 ±(99.9%) 8.273 ns/op [Average]
  (min, avg, max) = (570.132, 573.925, 583.116), stdev = 5.472
  CI (99.9%): [565.652, 582.198] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 88.26% complete, ETA 00:06:53
# Fork: 1 of 2
# Warmup Iteration   1: 559.351 ns/op
# Warmup Iteration   2: 497.731 ns/op
# Warmup Iteration   3: 341.185 ns/op
Iteration   1: 341.346 ns/op
Iteration   2: 341.213 ns/op
Iteration   3: 341.421 ns/op
Iteration   4: 341.828 ns/op
Iteration   5: 341.380 ns/op

# Run progress: 88.30% complete, ETA 00:06:52
# Fork: 2 of 2
# Warmup Iteration   1: 633.316 ns/op
# Warmup Iteration   2: 493.156 ns/op
# Warmup Iteration   3: 342.853 ns/op
Iteration   1: 342.094 ns/op
Iteration   2: 342.730 ns/op
Iteration   3: 343.615 ns/op
Iteration   4: 344.581 ns/op
Iteration   5: 344.145 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  342.435 ±(99.9%) 1.907 ns/op [Average]
  (min, avg, max) = (341.213, 342.435, 344.581), stdev = 1.261
  CI (99.9%): [340.529, 344.342] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 88.33% complete, ETA 00:06:51
# Fork: 1 of 2
# Warmup Iteration   1: 24.311 ns/op
# Warmup Iteration   2: 30.284 ns/op
# Warmup Iteration   3: 19.042 ns/op
Iteration   1: 18.998 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.951 ns/op
Iteration   4: 18.819 ns/op
Iteration   5: 18.855 ns/op

# Run progress: 88.37% complete, ETA 00:06:49
# Fork: 2 of 2
# Warmup Iteration   1: 25.120 ns/op
# Warmup Iteration   2: 29.438 ns/op
# Warmup Iteration   3: 19.000 ns/op
Iteration   1: 18.990 ns/op
Iteration   2: 18.958 ns/op
Iteration   3: 18.947 ns/op
Iteration   4: 18.848 ns/op
Iteration   5: 18.841 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.917 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (18.819, 18.917, 18.998), stdev = 0.068
  CI (99.9%): [18.814, 19.019] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 88.40% complete, ETA 00:06:48
# Fork: 1 of 2
# Warmup Iteration   1: 24859.061 ns/op
# Warmup Iteration   2: 1386.500 ns/op
# Warmup Iteration   3: 1029.171 ns/op
Iteration   1: 962.128 ns/op
Iteration   2: 957.926 ns/op
Iteration   3: 958.618 ns/op
Iteration   4: 959.327 ns/op
Iteration   5: 956.810 ns/op

# Run progress: 88.44% complete, ETA 00:06:47
# Fork: 2 of 2
# Warmup Iteration   1: 51597.221 ns/op
# Warmup Iteration   2: 1415.699 ns/op
# Warmup Iteration   3: 1110.281 ns/op
Iteration   1: 956.352 ns/op
Iteration   2: 956.002 ns/op
Iteration   3: 959.763 ns/op
Iteration   4: 963.632 ns/op
Iteration   5: 955.742 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  958.630 ±(99.9%) 4.009 ns/op [Average]
  (min, avg, max) = (955.742, 958.630, 963.632), stdev = 2.651
  CI (99.9%): [954.621, 962.639] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 88.47% complete, ETA 00:06:46
# Fork: 1 of 2
# Warmup Iteration   1: 24533.371 ns/op
# Warmup Iteration   2: 1927.444 ns/op
# Warmup Iteration   3: 1127.874 ns/op
Iteration   1: 1023.374 ns/op
Iteration   2: 1023.615 ns/op
Iteration   3: 1024.565 ns/op
Iteration   4: 1023.509 ns/op
Iteration   5: 1025.397 ns/op

# Run progress: 88.51% complete, ETA 00:06:44
# Fork: 2 of 2
# Warmup Iteration   1: 49450.478 ns/op
# Warmup Iteration   2: 1846.436 ns/op
# Warmup Iteration   3: 1206.899 ns/op
Iteration   1: 1023.869 ns/op
Iteration   2: 1024.374 ns/op
Iteration   3: 1031.173 ns/op
Iteration   4: 1030.553 ns/op
Iteration   5: 1027.271 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1025.770 ±(99.9%) 4.422 ns/op [Average]
  (min, avg, max) = (1023.374, 1025.770, 1031.173), stdev = 2.925
  CI (99.9%): [1021.348, 1030.192] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 88.54% complete, ETA 00:06:43
# Fork: 1 of 2
# Warmup Iteration   1: 30075.653 ns/op
# Warmup Iteration   2: 1419.865 ns/op
# Warmup Iteration   3: 1119.888 ns/op
Iteration   1: 1023.380 ns/op
Iteration   2: 1019.009 ns/op
Iteration   3: 1015.485 ns/op
Iteration   4: 1018.662 ns/op
Iteration   5: 1021.782 ns/op

# Run progress: 88.58% complete, ETA 00:06:42
# Fork: 2 of 2
# Warmup Iteration   1: 22493.784 ns/op
# Warmup Iteration   2: 1435.601 ns/op
# Warmup Iteration   3: 1145.582 ns/op
Iteration   1: 1055.803 ns/op
Iteration   2: 1051.756 ns/op
Iteration   3: 1056.981 ns/op
Iteration   4: 1055.585 ns/op
Iteration   5: 1051.738 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1037.018 ±(99.9%) 27.937 ns/op [Average]
  (min, avg, max) = (1015.485, 1037.018, 1056.981), stdev = 18.478
  CI (99.9%): [1009.081, 1064.955] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 88.61% complete, ETA 00:06:41
# Fork: 1 of 2
# Warmup Iteration   1: 2408.129 ns/op
# Warmup Iteration   2: 1345.776 ns/op
# Warmup Iteration   3: 1039.029 ns/op
Iteration   1: 1038.712 ns/op
Iteration   2: 1043.468 ns/op
Iteration   3: 1039.804 ns/op
Iteration   4: 1048.012 ns/op
Iteration   5: 1048.308 ns/op

# Run progress: 88.65% complete, ETA 00:06:40
# Fork: 2 of 2
# Warmup Iteration   1: 1998.261 ns/op
# Warmup Iteration   2: 1360.130 ns/op
# Warmup Iteration   3: 1037.203 ns/op
Iteration   1: 1047.496 ns/op
Iteration   2: 1045.270 ns/op
Iteration   3: 1042.549 ns/op
Iteration   4: 1035.962 ns/op
Iteration   5: 1048.217 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1043.780 ±(99.9%) 6.730 ns/op [Average]
  (min, avg, max) = (1035.962, 1043.780, 1048.308), stdev = 4.452
  CI (99.9%): [1037.049, 1050.510] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 88.68% complete, ETA 00:06:38
# Fork: 1 of 2
# Warmup Iteration   1: 11815.107 ns/op
# Warmup Iteration   2: 5255.691 ns/op
# Warmup Iteration   3: 4374.063 ns/op
Iteration   1: 3992.277 ns/op
Iteration   2: 3989.333 ns/op
Iteration   3: 3989.312 ns/op
Iteration   4: 3958.051 ns/op
Iteration   5: 3963.933 ns/op

# Run progress: 88.72% complete, ETA 00:06:37
# Fork: 2 of 2
# Warmup Iteration   1: 12948.765 ns/op
# Warmup Iteration   2: 5201.158 ns/op
# Warmup Iteration   3: 3935.072 ns/op
Iteration   1: 3606.057 ns/op
Iteration   2: 3601.765 ns/op
Iteration   3: 3606.296 ns/op
Iteration   4: 3576.269 ns/op
Iteration   5: 3580.069 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3786.336 ±(99.9%) 307.163 ns/op [Average]
  (min, avg, max) = (3576.269, 3786.336, 3992.277), stdev = 203.170
  CI (99.9%): [3479.173, 4093.500] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 88.75% complete, ETA 00:06:36
# Fork: 1 of 2
# Warmup Iteration   1: 25.493 ns/op
# Warmup Iteration   2: 28.757 ns/op
# Warmup Iteration   3: 19.030 ns/op
Iteration   1: 18.985 ns/op
Iteration   2: 18.959 ns/op
Iteration   3: 18.953 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.846 ns/op

# Run progress: 88.78% complete, ETA 00:06:35
# Fork: 2 of 2
# Warmup Iteration   1: 25.061 ns/op
# Warmup Iteration   2: 30.118 ns/op
# Warmup Iteration   3: 18.998 ns/op
Iteration   1: 18.997 ns/op
Iteration   2: 18.967 ns/op
Iteration   3: 18.969 ns/op
Iteration   4: 18.812 ns/op
Iteration   5: 18.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.916 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (18.812, 18.916, 18.997), stdev = 0.074
  CI (99.9%): [18.805, 19.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 88.82% complete, ETA 00:06:33
# Fork: 1 of 2
# Warmup Iteration   1: 232.754 ns/op
# Warmup Iteration   2: 189.818 ns/op
# Warmup Iteration   3: 138.264 ns/op
Iteration   1: 138.333 ns/op
Iteration   2: 138.288 ns/op
Iteration   3: 138.342 ns/op
Iteration   4: 138.610 ns/op
Iteration   5: 138.830 ns/op

# Run progress: 88.85% complete, ETA 00:06:32
# Fork: 2 of 2
# Warmup Iteration   1: 218.415 ns/op
# Warmup Iteration   2: 199.205 ns/op
# Warmup Iteration   3: 137.369 ns/op
Iteration   1: 137.507 ns/op
Iteration   2: 137.808 ns/op
Iteration   3: 137.484 ns/op
Iteration   4: 138.048 ns/op
Iteration   5: 138.048 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.130 ±(99.9%) 0.667 ns/op [Average]
  (min, avg, max) = (137.484, 138.130, 138.830), stdev = 0.441
  CI (99.9%): [137.462, 138.797] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 88.89% complete, ETA 00:06:31
# Fork: 1 of 2
# Warmup Iteration   1: 357.386 ns/op
# Warmup Iteration   2: 222.308 ns/op
# Warmup Iteration   3: 163.369 ns/op
Iteration   1: 163.137 ns/op
Iteration   2: 162.993 ns/op
Iteration   3: 163.342 ns/op
Iteration   4: 163.700 ns/op
Iteration   5: 163.667 ns/op

# Run progress: 88.92% complete, ETA 00:06:30
# Fork: 2 of 2
# Warmup Iteration   1: 351.647 ns/op
# Warmup Iteration   2: 219.301 ns/op
# Warmup Iteration   3: 155.830 ns/op
Iteration   1: 155.952 ns/op
Iteration   2: 155.918 ns/op
Iteration   3: 155.872 ns/op
Iteration   4: 156.481 ns/op
Iteration   5: 156.671 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  159.773 ±(99.9%) 5.749 ns/op [Average]
  (min, avg, max) = (155.872, 159.773, 163.700), stdev = 3.803
  CI (99.9%): [154.024, 165.523] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 88.96% complete, ETA 00:06:29
# Fork: 1 of 2
# Warmup Iteration   1: 508.268 ns/op
# Warmup Iteration   2: 276.961 ns/op
# Warmup Iteration   3: 204.913 ns/op
Iteration   1: 204.707 ns/op
Iteration   2: 204.666 ns/op
Iteration   3: 204.771 ns/op
Iteration   4: 205.867 ns/op
Iteration   5: 205.412 ns/op

# Run progress: 88.99% complete, ETA 00:06:27
# Fork: 2 of 2
# Warmup Iteration   1: 487.599 ns/op
# Warmup Iteration   2: 278.317 ns/op
# Warmup Iteration   3: 204.323 ns/op
Iteration   1: 204.221 ns/op
Iteration   2: 204.234 ns/op
Iteration   3: 204.215 ns/op
Iteration   4: 204.828 ns/op
Iteration   5: 204.769 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  204.769 ±(99.9%) 0.802 ns/op [Average]
  (min, avg, max) = (204.215, 204.769, 205.867), stdev = 0.530
  CI (99.9%): [203.967, 205.571] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 89.03% complete, ETA 00:06:26
# Fork: 1 of 2
# Warmup Iteration   1: 106.280 ns/op
# Warmup Iteration   2: 115.779 ns/op
# Warmup Iteration   3: 73.532 ns/op
Iteration   1: 73.584 ns/op
Iteration   2: 73.560 ns/op
Iteration   3: 73.527 ns/op
Iteration   4: 74.434 ns/op
Iteration   5: 74.446 ns/op

# Run progress: 89.06% complete, ETA 00:06:25
# Fork: 2 of 2
# Warmup Iteration   1: 105.872 ns/op
# Warmup Iteration   2: 103.298 ns/op
# Warmup Iteration   3: 73.557 ns/op
Iteration   1: 73.567 ns/op
Iteration   2: 73.583 ns/op
Iteration   3: 73.584 ns/op
Iteration   4: 74.256 ns/op
Iteration   5: 74.299 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  73.884 ±(99.9%) 0.624 ns/op [Average]
  (min, avg, max) = (73.527, 73.884, 74.446), stdev = 0.413
  CI (99.9%): [73.260, 74.508] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 89.10% complete, ETA 00:06:24
# Fork: 1 of 2
# Warmup Iteration   1: 237.253 ns/op
# Warmup Iteration   2: 217.806 ns/op
# Warmup Iteration   3: 156.284 ns/op
Iteration   1: 156.934 ns/op
Iteration   2: 156.374 ns/op
Iteration   3: 156.334 ns/op
Iteration   4: 157.024 ns/op
Iteration   5: 156.989 ns/op

# Run progress: 89.13% complete, ETA 00:06:22
# Fork: 2 of 2
# Warmup Iteration   1: 222.510 ns/op
# Warmup Iteration   2: 227.069 ns/op
# Warmup Iteration   3: 156.367 ns/op
Iteration   1: 156.963 ns/op
Iteration   2: 156.908 ns/op
Iteration   3: 156.907 ns/op
Iteration   4: 156.924 ns/op
Iteration   5: 157.007 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.836 ±(99.9%) 0.390 ns/op [Average]
  (min, avg, max) = (156.334, 156.836, 157.024), stdev = 0.258
  CI (99.9%): [156.447, 157.226] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 89.17% complete, ETA 00:06:21
# Fork: 1 of 2
# Warmup Iteration   1: 25.400 ns/op
# Warmup Iteration   2: 30.629 ns/op
# Warmup Iteration   3: 19.014 ns/op
Iteration   1: 18.978 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.970 ns/op
Iteration   4: 18.832 ns/op
Iteration   5: 18.852 ns/op

# Run progress: 89.20% complete, ETA 00:06:20
# Fork: 2 of 2
# Warmup Iteration   1: 25.583 ns/op
# Warmup Iteration   2: 31.062 ns/op
# Warmup Iteration   3: 19.020 ns/op
Iteration   1: 19.004 ns/op
Iteration   2: 18.965 ns/op
Iteration   3: 18.976 ns/op
Iteration   4: 18.839 ns/op
Iteration   5: 18.851 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (18.832, 18.923, 19.004), stdev = 0.069
  CI (99.9%): [18.818, 19.028] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 89.24% complete, ETA 00:06:19
# Fork: 1 of 2
# Warmup Iteration   1: 999.642 ns/op
# Warmup Iteration   2: 459.365 ns/op
# Warmup Iteration   3: 350.562 ns/op
Iteration   1: 350.679 ns/op
Iteration   2: 349.903 ns/op
Iteration   3: 349.717 ns/op
Iteration   4: 351.743 ns/op
Iteration   5: 351.478 ns/op

# Run progress: 89.27% complete, ETA 00:06:18
# Fork: 2 of 2
# Warmup Iteration   1: 1157.963 ns/op
# Warmup Iteration   2: 460.903 ns/op
# Warmup Iteration   3: 350.843 ns/op
Iteration   1: 352.726 ns/op
Iteration   2: 353.437 ns/op
Iteration   3: 349.976 ns/op
Iteration   4: 350.644 ns/op
Iteration   5: 349.734 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  351.004 ±(99.9%) 1.980 ns/op [Average]
  (min, avg, max) = (349.717, 351.004, 353.437), stdev = 1.309
  CI (99.9%): [349.024, 352.983] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 89.31% complete, ETA 00:06:16
# Fork: 1 of 2
# Warmup Iteration   1: 17348.890 ns/op
# Warmup Iteration   2: 528.121 ns/op
# Warmup Iteration   3: 343.581 ns/op
Iteration   1: 312.997 ns/op
Iteration   2: 313.209 ns/op
Iteration   3: 311.492 ns/op
Iteration   4: 313.160 ns/op
Iteration   5: 313.445 ns/op

# Run progress: 89.34% complete, ETA 00:06:15
# Fork: 2 of 2
# Warmup Iteration   1: 21414.655 ns/op
# Warmup Iteration   2: 643.200 ns/op
# Warmup Iteration   3: 354.881 ns/op
Iteration   1: 320.288 ns/op
Iteration   2: 320.202 ns/op
Iteration   3: 320.425 ns/op
Iteration   4: 320.933 ns/op
Iteration   5: 320.873 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  316.703 ±(99.9%) 6.182 ns/op [Average]
  (min, avg, max) = (311.492, 316.703, 320.933), stdev = 4.089
  CI (99.9%): [310.520, 322.885] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 89.38% complete, ETA 00:06:14
# Fork: 1 of 2
# Warmup Iteration   1: 31008.764 ns/op
# Warmup Iteration   2: 668.472 ns/op
# Warmup Iteration   3: 413.227 ns/op
Iteration   1: 371.665 ns/op
Iteration   2: 371.879 ns/op
Iteration   3: 371.668 ns/op
Iteration   4: 371.896 ns/op
Iteration   5: 371.846 ns/op

# Run progress: 89.41% complete, ETA 00:06:13
# Fork: 2 of 2
# Warmup Iteration   1: 27696.208 ns/op
# Warmup Iteration   2: 611.046 ns/op
# Warmup Iteration   3: 410.018 ns/op
Iteration   1: 372.757 ns/op
Iteration   2: 374.599 ns/op
Iteration   3: 374.426 ns/op
Iteration   4: 376.220 ns/op
Iteration   5: 373.600 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  373.056 ±(99.9%) 2.402 ns/op [Average]
  (min, avg, max) = (371.665, 373.056, 376.220), stdev = 1.589
  CI (99.9%): [370.654, 375.457] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 89.44% complete, ETA 00:06:11
# Fork: 1 of 2
# Warmup Iteration   1: 277.262 ns/op
# Warmup Iteration   2: 269.320 ns/op
# Warmup Iteration   3: 185.575 ns/op
Iteration   1: 185.382 ns/op
Iteration   2: 185.517 ns/op
Iteration   3: 186.921 ns/op
Iteration   4: 188.133 ns/op
Iteration   5: 185.800 ns/op

# Run progress: 89.48% complete, ETA 00:06:10
# Fork: 2 of 2
# Warmup Iteration   1: 280.135 ns/op
# Warmup Iteration   2: 261.643 ns/op
# Warmup Iteration   3: 185.194 ns/op
Iteration   1: 185.665 ns/op
Iteration   2: 185.279 ns/op
Iteration   3: 185.129 ns/op
Iteration   4: 185.560 ns/op
Iteration   5: 185.676 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  185.906 ±(99.9%) 1.394 ns/op [Average]
  (min, avg, max) = (185.129, 185.906, 188.133), stdev = 0.922
  CI (99.9%): [184.512, 187.300] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 89.51% complete, ETA 00:06:09
# Fork: 1 of 2
# Warmup Iteration   1: 1325.824 ns/op
# Warmup Iteration   2: 827.522 ns/op
# Warmup Iteration   3: 577.996 ns/op
Iteration   1: 580.221 ns/op
Iteration   2: 579.925 ns/op
Iteration   3: 577.299 ns/op
Iteration   4: 575.994 ns/op
Iteration   5: 577.620 ns/op

# Run progress: 89.55% complete, ETA 00:06:08
# Fork: 2 of 2
# Warmup Iteration   1: 1252.501 ns/op
# Warmup Iteration   2: 849.424 ns/op
# Warmup Iteration   3: 590.778 ns/op
Iteration   1: 591.217 ns/op
Iteration   2: 590.284 ns/op
Iteration   3: 590.357 ns/op
Iteration   4: 589.155 ns/op
Iteration   5: 590.039 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  584.211 ±(99.9%) 9.761 ns/op [Average]
  (min, avg, max) = (575.994, 584.211, 591.217), stdev = 6.456
  CI (99.9%): [574.450, 593.972] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 89.58% complete, ETA 00:06:07
# Fork: 1 of 2
# Warmup Iteration   1: 23.818 ns/op
# Warmup Iteration   2: 31.421 ns/op
# Warmup Iteration   3: 19.555 ns/op
Iteration   1: 19.375 ns/op
Iteration   2: 19.454 ns/op
Iteration   3: 19.461 ns/op
Iteration   4: 19.611 ns/op
Iteration   5: 19.542 ns/op

# Run progress: 89.62% complete, ETA 00:06:05
# Fork: 2 of 2
# Warmup Iteration   1: 23.600 ns/op
# Warmup Iteration   2: 28.709 ns/op
# Warmup Iteration   3: 19.048 ns/op
Iteration   1: 18.983 ns/op
Iteration   2: 18.943 ns/op
Iteration   3: 18.957 ns/op
Iteration   4: 18.814 ns/op
Iteration   5: 18.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.198 ±(99.9%) 0.478 ns/op [Average]
  (min, avg, max) = (18.814, 19.198, 19.611), stdev = 0.316
  CI (99.9%): [18.721, 19.676] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 89.65% complete, ETA 00:06:04
# Fork: 1 of 2
# Warmup Iteration   1: 2295.805 ns/op
# Warmup Iteration   2: 1309.317 ns/op
# Warmup Iteration   3: 939.643 ns/op
Iteration   1: 921.649 ns/op
Iteration   2: 922.389 ns/op
Iteration   3: 936.822 ns/op
Iteration   4: 1065.591 ns/op
Iteration   5: 922.158 ns/op

# Run progress: 89.69% complete, ETA 00:06:03
# Fork: 2 of 2
# Warmup Iteration   1: 2881.294 ns/op
# Warmup Iteration   2: 1213.375 ns/op
# Warmup Iteration   3: 912.799 ns/op
Iteration   1: 912.611 ns/op
Iteration   2: 912.721 ns/op
Iteration   3: 913.458 ns/op
Iteration   4: 917.304 ns/op
Iteration   5: 1070.771 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  949.548 ±(99.9%) 95.155 ns/op [Average]
  (min, avg, max) = (912.611, 949.548, 1070.771), stdev = 62.939
  CI (99.9%): [854.393, 1044.702] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 89.72% complete, ETA 00:06:02
# Fork: 1 of 2
# Warmup Iteration   1: 25344.019 ns/op
# Warmup Iteration   2: 1401.218 ns/op
# Warmup Iteration   3: 1000.958 ns/op
Iteration   1: 913.778 ns/op
Iteration   2: 913.981 ns/op
Iteration   3: 914.011 ns/op
Iteration   4: 913.745 ns/op
Iteration   5: 914.319 ns/op

# Run progress: 89.76% complete, ETA 00:06:00
# Fork: 2 of 2
# Warmup Iteration   1: 11335.994 ns/op
# Warmup Iteration   2: 1483.312 ns/op
# Warmup Iteration   3: 963.610 ns/op
Iteration   1: 963.709 ns/op
Iteration   2: 963.904 ns/op
Iteration   3: 963.683 ns/op
Iteration   4: 965.393 ns/op
Iteration   5: 965.224 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  939.175 ±(99.9%) 40.182 ns/op [Average]
  (min, avg, max) = (913.745, 939.175, 965.393), stdev = 26.578
  CI (99.9%): [898.993, 979.357] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 89.79% complete, ETA 00:05:59
# Fork: 1 of 2
# Warmup Iteration   1: 36476.538 ns/op
# Warmup Iteration   2: 1427.852 ns/op
# Warmup Iteration   3: 1103.895 ns/op
Iteration   1: 913.340 ns/op
Iteration   2: 913.223 ns/op
Iteration   3: 912.774 ns/op
Iteration   4: 912.507 ns/op
Iteration   5: 912.553 ns/op

# Run progress: 89.83% complete, ETA 00:05:58
# Fork: 2 of 2
# Warmup Iteration   1: 8051.201 ns/op
# Warmup Iteration   2: 1206.007 ns/op
# Warmup Iteration   3: 911.725 ns/op
Iteration   1: 912.107 ns/op
Iteration   2: 912.154 ns/op
Iteration   3: 911.915 ns/op
Iteration   4: 912.837 ns/op
Iteration   5: 913.057 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  912.647 ±(99.9%) 0.736 ns/op [Average]
  (min, avg, max) = (911.915, 912.647, 913.340), stdev = 0.487
  CI (99.9%): [911.911, 913.382] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 89.86% complete, ETA 00:05:57
# Fork: 1 of 2
# Warmup Iteration   1: 2598.220 ns/op
# Warmup Iteration   2: 1385.843 ns/op
# Warmup Iteration   3: 1047.655 ns/op
Iteration   1: 1050.292 ns/op
Iteration   2: 1045.375 ns/op
Iteration   3: 1048.539 ns/op
Iteration   4: 1048.226 ns/op
Iteration   5: 1050.763 ns/op

# Run progress: 89.90% complete, ETA 00:05:55
# Fork: 2 of 2
# Warmup Iteration   1: 1689.694 ns/op
# Warmup Iteration   2: 1396.846 ns/op
# Warmup Iteration   3: 1047.958 ns/op
Iteration   1: 1048.721 ns/op
Iteration   2: 1070.186 ns/op
Iteration   3: 1045.827 ns/op
Iteration   4: 1063.102 ns/op
Iteration   5: 1047.444 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1051.848 ±(99.9%) 12.323 ns/op [Average]
  (min, avg, max) = (1045.375, 1051.848, 1070.186), stdev = 8.151
  CI (99.9%): [1039.525, 1064.171] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 89.93% complete, ETA 00:05:54
# Fork: 1 of 2
# Warmup Iteration   1: 11174.247 ns/op
# Warmup Iteration   2: 4939.804 ns/op
# Warmup Iteration   3: 3546.514 ns/op
Iteration   1: 3549.317 ns/op
Iteration   2: 3548.531 ns/op
Iteration   3: 3550.805 ns/op
Iteration   4: 3532.087 ns/op
Iteration   5: 3524.427 ns/op

# Run progress: 89.97% complete, ETA 00:05:53
# Fork: 2 of 2
# Warmup Iteration   1: 11319.402 ns/op
# Warmup Iteration   2: 4753.518 ns/op
# Warmup Iteration   3: 3525.844 ns/op
Iteration   1: 3530.951 ns/op
Iteration   2: 3527.142 ns/op
Iteration   3: 3521.894 ns/op
Iteration   4: 3502.955 ns/op
Iteration   5: 3500.022 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3528.813 ±(99.9%) 27.024 ns/op [Average]
  (min, avg, max) = (3500.022, 3528.813, 3550.805), stdev = 17.875
  CI (99.9%): [3501.789, 3555.838] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 90.00% complete, ETA 00:05:52
# Fork: 1 of 2
# Warmup Iteration   1: 23.371 ns/op
# Warmup Iteration   2: 28.596 ns/op
# Warmup Iteration   3: 19.049 ns/op
Iteration   1: 18.998 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.941 ns/op
Iteration   4: 18.842 ns/op
Iteration   5: 18.843 ns/op

# Run progress: 90.03% complete, ETA 00:05:51
# Fork: 2 of 2
# Warmup Iteration   1: 23.963 ns/op
# Warmup Iteration   2: 30.207 ns/op
# Warmup Iteration   3: 19.013 ns/op
Iteration   1: 19.002 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 18.842 ns/op
Iteration   5: 18.853 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.920 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (18.842, 18.920, 19.002), stdev = 0.067
  CI (99.9%): [18.818, 19.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 90.07% complete, ETA 00:05:49
# Fork: 1 of 2
# Warmup Iteration   1: 1580.687 ns/op
# Warmup Iteration   2: 920.956 ns/op
# Warmup Iteration   3: 652.811 ns/op
Iteration   1: 654.142 ns/op
Iteration   2: 656.178 ns/op
Iteration   3: 652.732 ns/op
Iteration   4: 654.795 ns/op
Iteration   5: 654.631 ns/op

# Run progress: 90.10% complete, ETA 00:05:48
# Fork: 2 of 2
# Warmup Iteration   1: 1900.904 ns/op
# Warmup Iteration   2: 843.410 ns/op
# Warmup Iteration   3: 652.629 ns/op
Iteration   1: 652.865 ns/op
Iteration   2: 652.932 ns/op
Iteration   3: 652.820 ns/op
Iteration   4: 653.159 ns/op
Iteration   5: 653.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  653.738 ±(99.9%) 1.746 ns/op [Average]
  (min, avg, max) = (652.732, 653.738, 656.178), stdev = 1.155
  CI (99.9%): [651.992, 655.484] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 90.14% complete, ETA 00:05:47
# Fork: 1 of 2
# Warmup Iteration   1: 58192.359 ns/op
# Warmup Iteration   2: 1740.339 ns/op
# Warmup Iteration   3: 963.591 ns/op
Iteration   1: 815.204 ns/op
Iteration   2: 814.448 ns/op
Iteration   3: 814.425 ns/op
Iteration   4: 815.954 ns/op
Iteration   5: 816.530 ns/op

# Run progress: 90.17% complete, ETA 00:05:46
# Fork: 2 of 2
# Warmup Iteration   1: 33584.311 ns/op
# Warmup Iteration   2: 1548.070 ns/op
# Warmup Iteration   3: 915.193 ns/op
Iteration   1: 840.831 ns/op
Iteration   2: 841.113 ns/op
Iteration   3: 840.960 ns/op
Iteration   4: 843.182 ns/op
Iteration   5: 842.658 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  828.531 ±(99.9%) 21.114 ns/op [Average]
  (min, avg, max) = (814.425, 828.531, 843.182), stdev = 13.966
  CI (99.9%): [807.416, 849.645] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 90.21% complete, ETA 00:05:44
# Fork: 1 of 2
# Warmup Iteration   1: 39272.322 ns/op
# Warmup Iteration   2: 1334.152 ns/op
# Warmup Iteration   3: 980.946 ns/op
Iteration   1: 826.677 ns/op
Iteration   2: 819.333 ns/op
Iteration   3: 819.111 ns/op
Iteration   4: 821.290 ns/op
Iteration   5: 827.438 ns/op

# Run progress: 90.24% complete, ETA 00:05:43
# Fork: 2 of 2
# Warmup Iteration   1: 37875.691 ns/op
# Warmup Iteration   2: 1188.232 ns/op
# Warmup Iteration   3: 985.349 ns/op
Iteration   1: 820.257 ns/op
Iteration   2: 820.041 ns/op
Iteration   3: 819.586 ns/op
Iteration   4: 821.804 ns/op
Iteration   5: 821.613 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  821.715 ±(99.9%) 4.493 ns/op [Average]
  (min, avg, max) = (819.111, 821.715, 827.438), stdev = 2.972
  CI (99.9%): [817.222, 826.208] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 90.28% complete, ETA 00:05:42
# Fork: 1 of 2
# Warmup Iteration   1: 1859.706 ns/op
# Warmup Iteration   2: 1535.786 ns/op
# Warmup Iteration   3: 1164.405 ns/op
Iteration   1: 1165.108 ns/op
Iteration   2: 1165.111 ns/op
Iteration   3: 1164.916 ns/op
Iteration   4: 1165.391 ns/op
Iteration   5: 1164.719 ns/op

# Run progress: 90.31% complete, ETA 00:05:41
# Fork: 2 of 2
# Warmup Iteration   1: 1871.449 ns/op
# Warmup Iteration   2: 1547.713 ns/op
# Warmup Iteration   3: 1184.399 ns/op
Iteration   1: 1174.210 ns/op
Iteration   2: 1174.532 ns/op
Iteration   3: 1174.457 ns/op
Iteration   4: 1175.059 ns/op
Iteration   5: 1175.358 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1169.886 ±(99.9%) 7.727 ns/op [Average]
  (min, avg, max) = (1164.719, 1169.886, 1175.358), stdev = 5.111
  CI (99.9%): [1162.159, 1177.613] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 90.35% complete, ETA 00:05:40
# Fork: 1 of 2
# Warmup Iteration   1: 757.745 ns/op
# Warmup Iteration   2: 618.193 ns/op
# Warmup Iteration   3: 435.153 ns/op
Iteration   1: 435.474 ns/op
Iteration   2: 435.529 ns/op
Iteration   3: 435.453 ns/op
Iteration   4: 434.657 ns/op
Iteration   5: 435.003 ns/op

# Run progress: 90.38% complete, ETA 00:05:38
# Fork: 2 of 2
# Warmup Iteration   1: 915.528 ns/op
# Warmup Iteration   2: 628.695 ns/op
# Warmup Iteration   3: 435.556 ns/op
Iteration   1: 435.420 ns/op
Iteration   2: 435.491 ns/op
Iteration   3: 435.315 ns/op
Iteration   4: 435.430 ns/op
Iteration   5: 434.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  435.261 ±(99.9%) 0.470 ns/op [Average]
  (min, avg, max) = (434.657, 435.261, 435.529), stdev = 0.311
  CI (99.9%): [434.791, 435.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 90.42% complete, ETA 00:05:37
# Fork: 1 of 2
# Warmup Iteration   1: 24.372 ns/op
# Warmup Iteration   2: 27.434 ns/op
# Warmup Iteration   3: 19.032 ns/op
Iteration   1: 19.008 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.948 ns/op
Iteration   4: 19.865 ns/op
Iteration   5: 19.893 ns/op

# Run progress: 90.45% complete, ETA 00:05:36
# Fork: 2 of 2
# Warmup Iteration   1: 24.877 ns/op
# Warmup Iteration   2: 31.015 ns/op
# Warmup Iteration   3: 19.067 ns/op
Iteration   1: 18.985 ns/op
Iteration   2: 18.949 ns/op
Iteration   3: 18.977 ns/op
Iteration   4: 18.844 ns/op
Iteration   5: 18.852 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.128 ±(99.9%) 0.604 ns/op [Average]
  (min, avg, max) = (18.844, 19.128, 19.893), stdev = 0.399
  CI (99.9%): [18.524, 19.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 90.49% complete, ETA 00:05:35
# Fork: 1 of 2
# Warmup Iteration   1: 3688.446 ns/op
# Warmup Iteration   2: 1207.860 ns/op
# Warmup Iteration   3: 847.735 ns/op
Iteration   1: 850.859 ns/op
Iteration   2: 850.928 ns/op
Iteration   3: 853.623 ns/op
Iteration   4: 1498.512 ns/op
Iteration   5: 1494.412 ns/op

# Run progress: 90.52% complete, ETA 00:05:33
# Fork: 2 of 2
# Warmup Iteration   1: 3906.359 ns/op
# Warmup Iteration   2: 1205.417 ns/op
# Warmup Iteration   3: 843.149 ns/op
Iteration   1: 844.465 ns/op
Iteration   2: 843.881 ns/op
Iteration   3: 845.884 ns/op
Iteration   4: 863.389 ns/op
Iteration   5: 859.034 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  980.499 ±(99.9%) 411.238 ns/op [Average]
  (min, avg, max) = (843.881, 980.499, 1498.512), stdev = 272.008
  CI (99.9%): [569.261, 1391.736] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 90.56% complete, ETA 00:05:32
# Fork: 1 of 2
# Warmup Iteration   1: 30008.197 ns/op
# Warmup Iteration   2: 1652.643 ns/op
# Warmup Iteration   3: 1043.972 ns/op
Iteration   1: 942.543 ns/op
Iteration   2: 941.840 ns/op
Iteration   3: 944.531 ns/op
Iteration   4: 942.746 ns/op
Iteration   5: 942.247 ns/op

# Run progress: 90.59% complete, ETA 00:05:31
# Fork: 2 of 2
# Warmup Iteration   1: 29006.073 ns/op
# Warmup Iteration   2: 1429.199 ns/op
# Warmup Iteration   3: 1054.583 ns/op
Iteration   1: 964.670 ns/op
Iteration   2: 968.964 ns/op
Iteration   3: 959.635 ns/op
Iteration   4: 969.389 ns/op
Iteration   5: 961.464 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  953.803 ±(99.9%) 18.137 ns/op [Average]
  (min, avg, max) = (941.840, 953.803, 969.389), stdev = 11.997
  CI (99.9%): [935.666, 971.940] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 90.63% complete, ETA 00:05:30
# Fork: 1 of 2
# Warmup Iteration   1: 43369.468 ns/op
# Warmup Iteration   2: 4388.362 ns/op
# Warmup Iteration   3: 1150.316 ns/op
Iteration   1: 1032.173 ns/op
Iteration   2: 1037.137 ns/op
Iteration   3: 1040.513 ns/op
Iteration   4: 1037.854 ns/op
Iteration   5: 1038.355 ns/op

# Run progress: 90.66% complete, ETA 00:05:29
# Fork: 2 of 2
# Warmup Iteration   1: 53729.152 ns/op
# Warmup Iteration   2: 3086.399 ns/op
# Warmup Iteration   3: 1234.503 ns/op
Iteration   1: 1030.220 ns/op
Iteration   2: 1032.828 ns/op
Iteration   3: 1029.378 ns/op
Iteration   4: 1029.241 ns/op
Iteration   5: 1028.160 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1033.586 ±(99.9%) 6.789 ns/op [Average]
  (min, avg, max) = (1028.160, 1033.586, 1040.513), stdev = 4.491
  CI (99.9%): [1026.797, 1040.375] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 90.69% complete, ETA 00:05:27
# Fork: 1 of 2
# Warmup Iteration   1: 1983.193 ns/op
# Warmup Iteration   2: 1435.828 ns/op
# Warmup Iteration   3: 1041.146 ns/op
Iteration   1: 1049.094 ns/op
Iteration   2: 1042.407 ns/op
Iteration   3: 1050.964 ns/op
Iteration   4: 1044.675 ns/op
Iteration   5: 1047.392 ns/op

# Run progress: 90.73% complete, ETA 00:05:26
# Fork: 2 of 2
# Warmup Iteration   1: 1674.855 ns/op
# Warmup Iteration   2: 1371.595 ns/op
# Warmup Iteration   3: 1044.093 ns/op
Iteration   1: 1045.506 ns/op
Iteration   2: 1043.290 ns/op
Iteration   3: 1047.994 ns/op
Iteration   4: 1050.896 ns/op
Iteration   5: 1037.728 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1045.995 ±(99.9%) 6.270 ns/op [Average]
  (min, avg, max) = (1037.728, 1045.995, 1050.964), stdev = 4.147
  CI (99.9%): [1039.725, 1052.264] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 90.76% complete, ETA 00:05:25
# Fork: 1 of 2
# Warmup Iteration   1: 10811.314 ns/op
# Warmup Iteration   2: 5379.284 ns/op
# Warmup Iteration   3: 4353.647 ns/op
Iteration   1: 3918.843 ns/op
Iteration   2: 3920.368 ns/op
Iteration   3: 3918.693 ns/op
Iteration   4: 3901.068 ns/op
Iteration   5: 3896.725 ns/op

# Run progress: 90.80% complete, ETA 00:05:24
# Fork: 2 of 2
# Warmup Iteration   1: 12084.674 ns/op
# Warmup Iteration   2: 5140.891 ns/op
# Warmup Iteration   3: 4285.364 ns/op
Iteration   1: 3910.185 ns/op
Iteration   2: 3909.472 ns/op
Iteration   3: 3907.276 ns/op
Iteration   4: 3891.317 ns/op
Iteration   5: 3893.713 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3906.766 ±(99.9%) 16.211 ns/op [Average]
  (min, avg, max) = (3891.317, 3906.766, 3920.368), stdev = 10.723
  CI (99.9%): [3890.555, 3922.977] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 90.83% complete, ETA 00:05:22
# Fork: 1 of 2
# Warmup Iteration   1: 24.213 ns/op
# Warmup Iteration   2: 26.572 ns/op
# Warmup Iteration   3: 19.012 ns/op
Iteration   1: 19.015 ns/op
Iteration   2: 18.984 ns/op
Iteration   3: 18.953 ns/op
Iteration   4: 18.852 ns/op
Iteration   5: 18.810 ns/op

# Run progress: 90.87% complete, ETA 00:05:21
# Fork: 2 of 2
# Warmup Iteration   1: 24.106 ns/op
# Warmup Iteration   2: 27.486 ns/op
# Warmup Iteration   3: 19.057 ns/op
Iteration   1: 19.003 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.970 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.854 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.118 ns/op [Average]
  (min, avg, max) = (18.810, 18.923, 19.015), stdev = 0.078
  CI (99.9%): [18.805, 19.041] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 90.90% complete, ETA 00:05:20
# Fork: 1 of 2
# Warmup Iteration   1: 931.800 ns/op
# Warmup Iteration   2: 497.952 ns/op
# Warmup Iteration   3: 348.183 ns/op
Iteration   1: 348.361 ns/op
Iteration   2: 348.369 ns/op
Iteration   3: 348.350 ns/op
Iteration   4: 348.521 ns/op
Iteration   5: 348.505 ns/op

# Run progress: 90.94% complete, ETA 00:05:19
# Fork: 2 of 2
# Warmup Iteration   1: 1042.320 ns/op
# Warmup Iteration   2: 495.449 ns/op
# Warmup Iteration   3: 347.939 ns/op
Iteration   1: 348.098 ns/op
Iteration   2: 348.027 ns/op
Iteration   3: 348.101 ns/op
Iteration   4: 348.326 ns/op
Iteration   5: 348.401 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  348.306 ±(99.9%) 0.261 ns/op [Average]
  (min, avg, max) = (348.027, 348.306, 348.521), stdev = 0.172
  CI (99.9%): [348.045, 348.566] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 90.97% complete, ETA 00:05:18
# Fork: 1 of 2
# Warmup Iteration   1: 2503.616 ns/op
# Warmup Iteration   2: 440.500 ns/op
# Warmup Iteration   3: 336.340 ns/op
Iteration   1: 336.641 ns/op
Iteration   2: 336.683 ns/op
Iteration   3: 336.334 ns/op
Iteration   4: 336.885 ns/op
Iteration   5: 336.869 ns/op

# Run progress: 91.01% complete, ETA 00:05:16
# Fork: 2 of 2
# Warmup Iteration   1: 2387.774 ns/op
# Warmup Iteration   2: 443.966 ns/op
# Warmup Iteration   3: 334.232 ns/op
Iteration   1: 334.340 ns/op
Iteration   2: 334.324 ns/op
Iteration   3: 334.336 ns/op
Iteration   4: 335.052 ns/op
Iteration   5: 335.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.660 ±(99.9%) 1.698 ns/op [Average]
  (min, avg, max) = (334.324, 335.660, 336.885), stdev = 1.123
  CI (99.9%): [333.962, 337.358] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 91.04% complete, ETA 00:05:15
# Fork: 1 of 2
# Warmup Iteration   1: 4504.501 ns/op
# Warmup Iteration   2: 579.636 ns/op
# Warmup Iteration   3: 407.064 ns/op
Iteration   1: 422.147 ns/op
Iteration   2: 416.101 ns/op
Iteration   3: 426.743 ns/op
Iteration   4: 407.797 ns/op
Iteration   5: 420.094 ns/op

# Run progress: 91.08% complete, ETA 00:05:14
# Fork: 2 of 2
# Warmup Iteration   1: 7137.315 ns/op
# Warmup Iteration   2: 553.211 ns/op
# Warmup Iteration   3: 409.092 ns/op
Iteration   1: 409.020 ns/op
Iteration   2: 409.252 ns/op
Iteration   3: 408.995 ns/op
Iteration   4: 416.350 ns/op
Iteration   5: 409.719 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  414.622 ±(99.9%) 10.093 ns/op [Average]
  (min, avg, max) = (407.797, 414.622, 426.743), stdev = 6.676
  CI (99.9%): [404.528, 424.715] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 91.11% complete, ETA 00:05:13
# Fork: 1 of 2
# Warmup Iteration   1: 2034.406 ns/op
# Warmup Iteration   2: 1693.776 ns/op
# Warmup Iteration   3: 1297.310 ns/op
Iteration   1: 1296.751 ns/op
Iteration   2: 1297.120 ns/op
Iteration   3: 1297.652 ns/op
Iteration   4: 1299.838 ns/op
Iteration   5: 1297.625 ns/op

# Run progress: 91.15% complete, ETA 00:05:11
# Fork: 2 of 2
# Warmup Iteration   1: 1998.417 ns/op
# Warmup Iteration   2: 1838.091 ns/op
# Warmup Iteration   3: 1288.878 ns/op
Iteration   1: 1289.265 ns/op
Iteration   2: 1288.658 ns/op
Iteration   3: 1288.360 ns/op
Iteration   4: 1290.980 ns/op
Iteration   5: 1289.262 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1293.551 ±(99.9%) 6.950 ns/op [Average]
  (min, avg, max) = (1288.360, 1293.551, 1299.838), stdev = 4.597
  CI (99.9%): [1286.601, 1300.501] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 91.18% complete, ETA 00:05:10
# Fork: 1 of 2
# Warmup Iteration   1: 405.646 ns/op
# Warmup Iteration   2: 308.753 ns/op
# Warmup Iteration   3: 237.268 ns/op
Iteration   1: 237.066 ns/op
Iteration   2: 237.826 ns/op
Iteration   3: 237.409 ns/op
Iteration   4: 237.577 ns/op
Iteration   5: 237.597 ns/op

# Run progress: 91.22% complete, ETA 00:05:09
# Fork: 2 of 2
# Warmup Iteration   1: 366.897 ns/op
# Warmup Iteration   2: 322.037 ns/op
# Warmup Iteration   3: 237.470 ns/op
Iteration   1: 237.277 ns/op
Iteration   2: 237.472 ns/op
Iteration   3: 237.492 ns/op
Iteration   4: 237.645 ns/op
Iteration   5: 237.610 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.497 ±(99.9%) 0.319 ns/op [Average]
  (min, avg, max) = (237.066, 237.497, 237.826), stdev = 0.211
  CI (99.9%): [237.178, 237.816] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 91.25% complete, ETA 00:05:08
# Fork: 1 of 2
# Warmup Iteration   1: 24.268 ns/op
# Warmup Iteration   2: 27.981 ns/op
# Warmup Iteration   3: 19.032 ns/op
Iteration   1: 19.002 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 19.004 ns/op
Iteration   4: 18.833 ns/op
Iteration   5: 18.857 ns/op

# Run progress: 91.28% complete, ETA 00:05:07
# Fork: 2 of 2
# Warmup Iteration   1: 24.491 ns/op
# Warmup Iteration   2: 27.986 ns/op
# Warmup Iteration   3: 19.012 ns/op
Iteration   1: 18.989 ns/op
Iteration   2: 18.993 ns/op
Iteration   3: 18.958 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.843 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.927 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (18.828, 18.927, 19.004), stdev = 0.076
  CI (99.9%): [18.811, 19.042] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 91.32% complete, ETA 00:05:05
# Fork: 1 of 2
# Warmup Iteration   1: 1976.166 ns/op
# Warmup Iteration   2: 766.340 ns/op
# Warmup Iteration   3: 533.892 ns/op
Iteration   1: 533.588 ns/op
Iteration   2: 534.210 ns/op
Iteration   3: 533.985 ns/op
Iteration   4: 536.672 ns/op
Iteration   5: 534.132 ns/op

# Run progress: 91.35% complete, ETA 00:05:04
# Fork: 2 of 2
# Warmup Iteration   1: 2019.027 ns/op
# Warmup Iteration   2: 756.656 ns/op
# Warmup Iteration   3: 529.697 ns/op
Iteration   1: 532.079 ns/op
Iteration   2: 531.709 ns/op
Iteration   3: 529.646 ns/op
Iteration   4: 528.881 ns/op
Iteration   5: 528.559 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  532.346 ±(99.9%) 4.023 ns/op [Average]
  (min, avg, max) = (528.559, 532.346, 536.672), stdev = 2.661
  CI (99.9%): [528.323, 536.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 91.39% complete, ETA 00:05:03
# Fork: 1 of 2
# Warmup Iteration   1: 19910.199 ns/op
# Warmup Iteration   2: 978.059 ns/op
# Warmup Iteration   3: 572.468 ns/op
Iteration   1: 522.750 ns/op
Iteration   2: 521.916 ns/op
Iteration   3: 522.156 ns/op
Iteration   4: 522.348 ns/op
Iteration   5: 522.681 ns/op

# Run progress: 91.42% complete, ETA 00:05:02
# Fork: 2 of 2
# Warmup Iteration   1: 23547.616 ns/op
# Warmup Iteration   2: 897.464 ns/op
# Warmup Iteration   3: 578.570 ns/op
Iteration   1: 527.710 ns/op
Iteration   2: 527.053 ns/op
Iteration   3: 526.883 ns/op
Iteration   4: 527.839 ns/op
Iteration   5: 527.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  524.862 ±(99.9%) 4.008 ns/op [Average]
  (min, avg, max) = (521.916, 524.862, 527.839), stdev = 2.651
  CI (99.9%): [520.854, 528.869] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 91.46% complete, ETA 00:05:00
# Fork: 1 of 2
# Warmup Iteration   1: 27950.975 ns/op
# Warmup Iteration   2: 1059.879 ns/op
# Warmup Iteration   3: 717.472 ns/op
Iteration   1: 658.703 ns/op
Iteration   2: 655.712 ns/op
Iteration   3: 657.148 ns/op
Iteration   4: 659.434 ns/op
Iteration   5: 655.419 ns/op

# Run progress: 91.49% complete, ETA 00:04:59
# Fork: 2 of 2
# Warmup Iteration   1: 33418.114 ns/op
# Warmup Iteration   2: 1107.080 ns/op
# Warmup Iteration   3: 722.826 ns/op
Iteration   1: 655.898 ns/op
Iteration   2: 655.042 ns/op
Iteration   3: 654.920 ns/op
Iteration   4: 657.047 ns/op
Iteration   5: 655.407 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  656.473 ±(99.9%) 2.371 ns/op [Average]
  (min, avg, max) = (654.920, 656.473, 659.434), stdev = 1.569
  CI (99.9%): [654.101, 658.844] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 91.53% complete, ETA 00:04:58
# Fork: 1 of 2
# Warmup Iteration   1: 2357.091 ns/op
# Warmup Iteration   2: 1658.208 ns/op
# Warmup Iteration   3: 1259.109 ns/op
Iteration   1: 1264.393 ns/op
Iteration   2: 1262.737 ns/op
Iteration   3: 1262.725 ns/op
Iteration   4: 1264.049 ns/op
Iteration   5: 1266.401 ns/op

# Run progress: 91.56% complete, ETA 00:04:57
# Fork: 2 of 2
# Warmup Iteration   1: 2318.338 ns/op
# Warmup Iteration   2: 1869.788 ns/op
# Warmup Iteration   3: 1268.693 ns/op
Iteration   1: 1269.398 ns/op
Iteration   2: 1266.722 ns/op
Iteration   3: 1268.701 ns/op
Iteration   4: 1269.299 ns/op
Iteration   5: 1269.188 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1266.361 ±(99.9%) 4.126 ns/op [Average]
  (min, avg, max) = (1262.725, 1266.361, 1269.398), stdev = 2.729
  CI (99.9%): [1262.236, 1270.487] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 91.60% complete, ETA 00:04:56
# Fork: 1 of 2
# Warmup Iteration   1: 1649.760 ns/op
# Warmup Iteration   2: 868.421 ns/op
# Warmup Iteration   3: 627.341 ns/op
Iteration   1: 627.569 ns/op
Iteration   2: 627.730 ns/op
Iteration   3: 626.791 ns/op
Iteration   4: 628.912 ns/op
Iteration   5: 627.467 ns/op

# Run progress: 91.63% complete, ETA 00:04:54
# Fork: 2 of 2
# Warmup Iteration   1: 1299.207 ns/op
# Warmup Iteration   2: 857.978 ns/op
# Warmup Iteration   3: 627.443 ns/op
Iteration   1: 628.324 ns/op
Iteration   2: 630.344 ns/op
Iteration   3: 629.046 ns/op
Iteration   4: 625.493 ns/op
Iteration   5: 626.961 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  627.864 ±(99.9%) 2.060 ns/op [Average]
  (min, avg, max) = (625.493, 627.864, 630.344), stdev = 1.362
  CI (99.9%): [625.804, 629.924] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 91.67% complete, ETA 00:04:53
# Fork: 1 of 2
# Warmup Iteration   1: 23.806 ns/op
# Warmup Iteration   2: 31.039 ns/op
# Warmup Iteration   3: 19.034 ns/op
Iteration   1: 18.991 ns/op
Iteration   2: 18.990 ns/op
Iteration   3: 18.935 ns/op
Iteration   4: 18.821 ns/op
Iteration   5: 18.837 ns/op

# Run progress: 91.70% complete, ETA 00:04:52
# Fork: 2 of 2
# Warmup Iteration   1: 24.518 ns/op
# Warmup Iteration   2: 30.295 ns/op
# Warmup Iteration   3: 19.043 ns/op
Iteration   1: 19.021 ns/op
Iteration   2: 18.972 ns/op
Iteration   3: 18.948 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.846 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.117 ns/op [Average]
  (min, avg, max) = (18.821, 18.919, 19.021), stdev = 0.078
  CI (99.9%): [18.802, 19.036] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 91.74% complete, ETA 00:04:51
# Fork: 1 of 2
# Warmup Iteration   1: 3225.184 ns/op
# Warmup Iteration   2: 942.040 ns/op
# Warmup Iteration   3: 675.749 ns/op
Iteration   1: 674.768 ns/op
Iteration   2: 676.238 ns/op
Iteration   3: 674.623 ns/op
Iteration   4: 676.271 ns/op
Iteration   5: 675.660 ns/op

# Run progress: 91.77% complete, ETA 00:04:49
# Fork: 2 of 2
# Warmup Iteration   1: 2901.833 ns/op
# Warmup Iteration   2: 968.180 ns/op
# Warmup Iteration   3: 685.031 ns/op
Iteration   1: 685.661 ns/op
Iteration   2: 685.352 ns/op
Iteration   3: 684.025 ns/op
Iteration   4: 685.800 ns/op
Iteration   5: 686.977 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  680.538 ±(99.9%) 8.118 ns/op [Average]
  (min, avg, max) = (674.623, 680.538, 686.977), stdev = 5.370
  CI (99.9%): [672.419, 688.656] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 91.81% complete, ETA 00:04:48
# Fork: 1 of 2
# Warmup Iteration   1: 15523.305 ns/op
# Warmup Iteration   2: 2042.177 ns/op
# Warmup Iteration   3: 1214.255 ns/op
Iteration   1: 1096.108 ns/op
Iteration   2: 1098.235 ns/op
Iteration   3: 1095.401 ns/op
Iteration   4: 1095.309 ns/op
Iteration   5: 1095.168 ns/op

# Run progress: 91.84% complete, ETA 00:04:47
# Fork: 2 of 2
# Warmup Iteration   1: 15390.697 ns/op
# Warmup Iteration   2: 1677.200 ns/op
# Warmup Iteration   3: 1182.470 ns/op
Iteration   1: 1085.060 ns/op
Iteration   2: 1084.838 ns/op
Iteration   3: 1084.492 ns/op
Iteration   4: 1084.132 ns/op
Iteration   5: 1085.149 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1090.389 ±(99.9%) 9.114 ns/op [Average]
  (min, avg, max) = (1084.132, 1090.389, 1098.235), stdev = 6.028
  CI (99.9%): [1081.276, 1099.503] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 91.88% complete, ETA 00:04:46
# Fork: 1 of 2
# Warmup Iteration   1: 52278.099 ns/op
# Warmup Iteration   2: 2077.541 ns/op
# Warmup Iteration   3: 1301.644 ns/op
Iteration   1: 1101.352 ns/op
Iteration   2: 1101.641 ns/op
Iteration   3: 1101.114 ns/op
Iteration   4: 1101.274 ns/op
Iteration   5: 1100.858 ns/op

# Run progress: 91.91% complete, ETA 00:04:45
# Fork: 2 of 2
# Warmup Iteration   1: 11755.514 ns/op
# Warmup Iteration   2: 1546.338 ns/op
# Warmup Iteration   3: 1189.671 ns/op
Iteration   1: 1082.194 ns/op
Iteration   2: 1082.069 ns/op
Iteration   3: 1082.864 ns/op
Iteration   4: 1082.545 ns/op
Iteration   5: 1081.653 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1091.756 ±(99.9%) 15.136 ns/op [Average]
  (min, avg, max) = (1081.653, 1091.756, 1101.641), stdev = 10.011
  CI (99.9%): [1076.621, 1106.892] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 91.94% complete, ETA 00:04:43
# Fork: 1 of 2
# Warmup Iteration   1: 2023.402 ns/op
# Warmup Iteration   2: 1377.764 ns/op
# Warmup Iteration   3: 1045.894 ns/op
Iteration   1: 1047.900 ns/op
Iteration   2: 1046.410 ns/op
Iteration   3: 1046.644 ns/op
Iteration   4: 1047.181 ns/op
Iteration   5: 1047.248 ns/op

# Run progress: 91.98% complete, ETA 00:04:42
# Fork: 2 of 2
# Warmup Iteration   1: 1670.181 ns/op
# Warmup Iteration   2: 1370.820 ns/op
# Warmup Iteration   3: 1041.532 ns/op
Iteration   1: 1043.188 ns/op
Iteration   2: 1042.179 ns/op
Iteration   3: 1041.870 ns/op
Iteration   4: 1042.018 ns/op
Iteration   5: 1043.149 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1044.779 ±(99.9%) 3.764 ns/op [Average]
  (min, avg, max) = (1041.870, 1044.779, 1047.900), stdev = 2.490
  CI (99.9%): [1041.015, 1048.543] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 92.01% complete, ETA 00:04:41
# Fork: 1 of 2
# Warmup Iteration   1: 10761.676 ns/op
# Warmup Iteration   2: 5392.353 ns/op
# Warmup Iteration   3: 4267.415 ns/op
Iteration   1: 3855.221 ns/op
Iteration   2: 3854.946 ns/op
Iteration   3: 3851.334 ns/op
Iteration   4: 3838.779 ns/op
Iteration   5: 3839.257 ns/op

# Run progress: 92.05% complete, ETA 00:04:40
# Fork: 2 of 2
# Warmup Iteration   1: 11151.027 ns/op
# Warmup Iteration   2: 4944.603 ns/op
# Warmup Iteration   3: 3893.859 ns/op
Iteration   1: 3588.419 ns/op
Iteration   2: 3582.394 ns/op
Iteration   3: 3587.711 ns/op
Iteration   4: 3563.030 ns/op
Iteration   5: 3558.382 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3711.947 ±(99.9%) 217.305 ns/op [Average]
  (min, avg, max) = (3558.382, 3711.947, 3855.221), stdev = 143.734
  CI (99.9%): [3494.642, 3929.253] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 92.08% complete, ETA 00:04:38
# Fork: 1 of 2
# Warmup Iteration   1: 25.056 ns/op
# Warmup Iteration   2: 30.398 ns/op
# Warmup Iteration   3: 19.019 ns/op
Iteration   1: 19.018 ns/op
Iteration   2: 18.973 ns/op
Iteration   3: 19.007 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.840 ns/op

# Run progress: 92.12% complete, ETA 00:04:37
# Fork: 2 of 2
# Warmup Iteration   1: 25.056 ns/op
# Warmup Iteration   2: 30.706 ns/op
# Warmup Iteration   3: 19.028 ns/op
Iteration   1: 19.015 ns/op
Iteration   2: 18.961 ns/op
Iteration   3: 18.969 ns/op
Iteration   4: 18.847 ns/op
Iteration   5: 18.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.930 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (18.827, 18.930, 19.018), stdev = 0.081
  CI (99.9%): [18.808, 19.052] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 92.15% complete, ETA 00:04:36
# Fork: 1 of 2
# Warmup Iteration   1: 2949.726 ns/op
# Warmup Iteration   2: 1221.567 ns/op
# Warmup Iteration   3: 848.949 ns/op
Iteration   1: 849.290 ns/op
Iteration   2: 849.115 ns/op
Iteration   3: 849.294 ns/op
Iteration   4: 863.577 ns/op
Iteration   5: 848.941 ns/op

# Run progress: 92.19% complete, ETA 00:04:35
# Fork: 2 of 2
# Warmup Iteration   1: 2984.212 ns/op
# Warmup Iteration   2: 1106.398 ns/op
# Warmup Iteration   3: 856.018 ns/op
Iteration   1: 861.058 ns/op
Iteration   2: 861.149 ns/op
Iteration   3: 871.557 ns/op
Iteration   4: 858.153 ns/op
Iteration   5: 853.968 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  856.610 ±(99.9%) 11.752 ns/op [Average]
  (min, avg, max) = (848.941, 856.610, 871.557), stdev = 7.773
  CI (99.9%): [844.858, 868.362] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 92.22% complete, ETA 00:04:34
# Fork: 1 of 2
# Warmup Iteration   1: 8242.434 ns/op
# Warmup Iteration   2: 1576.029 ns/op
# Warmup Iteration   3: 1187.010 ns/op
Iteration   1: 1187.619 ns/op
Iteration   2: 1187.855 ns/op
Iteration   3: 1187.863 ns/op
Iteration   4: 1181.619 ns/op
Iteration   5: 1187.646 ns/op

# Run progress: 92.26% complete, ETA 00:04:32
# Fork: 2 of 2
# Warmup Iteration   1: 6517.733 ns/op
# Warmup Iteration   2: 1827.930 ns/op
# Warmup Iteration   3: 1194.409 ns/op
Iteration   1: 1194.027 ns/op
Iteration   2: 1193.149 ns/op
Iteration   3: 1194.490 ns/op
Iteration   4: 1197.198 ns/op
Iteration   5: 1193.795 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1190.526 ±(99.9%) 7.133 ns/op [Average]
  (min, avg, max) = (1181.619, 1190.526, 1197.198), stdev = 4.718
  CI (99.9%): [1183.393, 1197.660] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 92.29% complete, ETA 00:04:31
# Fork: 1 of 2
# Warmup Iteration   1: 12100.902 ns/op
# Warmup Iteration   2: 1611.255 ns/op
# Warmup Iteration   3: 1297.554 ns/op
Iteration   1: 1180.731 ns/op
Iteration   2: 1180.536 ns/op
Iteration   3: 1193.043 ns/op
Iteration   4: 1197.548 ns/op
Iteration   5: 1311.956 ns/op

# Run progress: 92.33% complete, ETA 00:04:30
# Fork: 2 of 2
# Warmup Iteration   1: 11686.935 ns/op
# Warmup Iteration   2: 1701.910 ns/op
# Warmup Iteration   3: 1313.232 ns/op
Iteration   1: 1188.987 ns/op
Iteration   2: 1188.308 ns/op
Iteration   3: 1188.803 ns/op
Iteration   4: 1188.755 ns/op
Iteration   5: 1188.850 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1200.752 ±(99.9%) 59.559 ns/op [Average]
  (min, avg, max) = (1180.536, 1200.752, 1311.956), stdev = 39.394
  CI (99.9%): [1141.193, 1260.310] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 92.36% complete, ETA 00:04:29
# Fork: 1 of 2
# Warmup Iteration   1: 1654.308 ns/op
# Warmup Iteration   2: 1251.162 ns/op
# Warmup Iteration   3: 958.217 ns/op
Iteration   1: 958.644 ns/op
Iteration   2: 958.768 ns/op
Iteration   3: 958.575 ns/op
Iteration   4: 957.609 ns/op
Iteration   5: 958.816 ns/op

# Run progress: 92.40% complete, ETA 00:04:27
# Fork: 2 of 2
# Warmup Iteration   1: 1724.215 ns/op
# Warmup Iteration   2: 1309.251 ns/op
# Warmup Iteration   3: 958.098 ns/op
Iteration   1: 958.201 ns/op
Iteration   2: 958.812 ns/op
Iteration   3: 958.473 ns/op
Iteration   4: 958.027 ns/op
Iteration   5: 958.055 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  958.398 ±(99.9%) 0.617 ns/op [Average]
  (min, avg, max) = (957.609, 958.398, 958.816), stdev = 0.408
  CI (99.9%): [957.781, 959.014] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 92.43% complete, ETA 00:04:26
# Fork: 1 of 2
# Warmup Iteration   1: 1590.498 ns/op
# Warmup Iteration   2: 991.737 ns/op
# Warmup Iteration   3: 700.268 ns/op
Iteration   1: 699.501 ns/op
Iteration   2: 700.100 ns/op
Iteration   3: 699.684 ns/op
Iteration   4: 698.674 ns/op
Iteration   5: 699.903 ns/op

# Run progress: 92.47% complete, ETA 00:04:25
# Fork: 2 of 2
# Warmup Iteration   1: 1588.842 ns/op
# Warmup Iteration   2: 1011.981 ns/op
# Warmup Iteration   3: 721.298 ns/op
Iteration   1: 729.377 ns/op
Iteration   2: 730.116 ns/op
Iteration   3: 730.003 ns/op
Iteration   4: 716.947 ns/op
Iteration   5: 716.452 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  712.076 ±(99.9%) 21.214 ns/op [Average]
  (min, avg, max) = (698.674, 712.076, 730.116), stdev = 14.031
  CI (99.9%): [690.862, 733.289] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 92.50% complete, ETA 00:04:24
# Fork: 1 of 2
# Warmup Iteration   1: 23.345 ns/op
# Warmup Iteration   2: 26.959 ns/op
# Warmup Iteration   3: 19.020 ns/op
Iteration   1: 19.025 ns/op
Iteration   2: 18.957 ns/op
Iteration   3: 18.926 ns/op
Iteration   4: 18.822 ns/op
Iteration   5: 18.819 ns/op

# Run progress: 92.53% complete, ETA 00:04:23
# Fork: 2 of 2
# Warmup Iteration   1: 23.942 ns/op
# Warmup Iteration   2: 30.747 ns/op
# Warmup Iteration   3: 19.057 ns/op
Iteration   1: 18.989 ns/op
Iteration   2: 18.980 ns/op
Iteration   3: 18.977 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.916 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (18.819, 18.916, 19.025), stdev = 0.081
  CI (99.9%): [18.794, 19.039] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 92.57% complete, ETA 00:04:21
# Fork: 1 of 2
# Warmup Iteration   1: 7691.502 ns/op
# Warmup Iteration   2: 1119.482 ns/op
# Warmup Iteration   3: 816.376 ns/op
Iteration   1: 816.543 ns/op
Iteration   2: 815.370 ns/op
Iteration   3: 818.213 ns/op
Iteration   4: 815.235 ns/op
Iteration   5: 820.260 ns/op

# Run progress: 92.60% complete, ETA 00:04:20
# Fork: 2 of 2
# Warmup Iteration   1: 7812.391 ns/op
# Warmup Iteration   2: 1118.253 ns/op
# Warmup Iteration   3: 810.382 ns/op
Iteration   1: 812.238 ns/op
Iteration   2: 810.303 ns/op
Iteration   3: 811.809 ns/op
Iteration   4: 809.032 ns/op
Iteration   5: 814.628 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  814.363 ±(99.9%) 5.337 ns/op [Average]
  (min, avg, max) = (809.032, 814.363, 820.260), stdev = 3.530
  CI (99.9%): [809.026, 819.700] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 92.64% complete, ETA 00:04:19
# Fork: 1 of 2
# Warmup Iteration   1: 20906.476 ns/op
# Warmup Iteration   2: 1251.015 ns/op
# Warmup Iteration   3: 1059.527 ns/op
Iteration   1: 966.249 ns/op
Iteration   2: 960.865 ns/op
Iteration   3: 961.409 ns/op
Iteration   4: 965.118 ns/op
Iteration   5: 968.359 ns/op

# Run progress: 92.67% complete, ETA 00:04:18
# Fork: 2 of 2
# Warmup Iteration   1: 20354.502 ns/op
# Warmup Iteration   2: 1414.806 ns/op
# Warmup Iteration   3: 1058.561 ns/op
Iteration   1: 968.763 ns/op
Iteration   2: 966.439 ns/op
Iteration   3: 970.468 ns/op
Iteration   4: 972.599 ns/op
Iteration   5: 967.986 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  966.826 ±(99.9%) 5.573 ns/op [Average]
  (min, avg, max) = (960.865, 966.826, 972.599), stdev = 3.686
  CI (99.9%): [961.252, 972.399] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 92.71% complete, ETA 00:04:16
# Fork: 1 of 2
# Warmup Iteration   1: 18100.766 ns/op
# Warmup Iteration   2: 1496.424 ns/op
# Warmup Iteration   3: 1164.469 ns/op
Iteration   1: 1064.887 ns/op
Iteration   2: 1063.591 ns/op
Iteration   3: 1059.922 ns/op
Iteration   4: 1065.833 ns/op
Iteration   5: 1065.415 ns/op

# Run progress: 92.74% complete, ETA 00:04:15
# Fork: 2 of 2
# Warmup Iteration   1: 31150.374 ns/op
# Warmup Iteration   2: 1550.372 ns/op
# Warmup Iteration   3: 1172.461 ns/op
Iteration   1: 1075.758 ns/op
Iteration   2: 1073.259 ns/op
Iteration   3: 1073.288 ns/op
Iteration   4: 1075.700 ns/op
Iteration   5: 1078.518 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1069.617 ±(99.9%) 9.632 ns/op [Average]
  (min, avg, max) = (1059.922, 1069.617, 1078.518), stdev = 6.371
  CI (99.9%): [1059.985, 1079.250] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 92.78% complete, ETA 00:04:14
# Fork: 1 of 2
# Warmup Iteration   1: 2107.299 ns/op
# Warmup Iteration   2: 1415.663 ns/op
# Warmup Iteration   3: 1067.200 ns/op
Iteration   1: 1073.302 ns/op
Iteration   2: 1070.980 ns/op
Iteration   3: 1069.808 ns/op
Iteration   4: 1076.138 ns/op
Iteration   5: 1072.073 ns/op

# Run progress: 92.81% complete, ETA 00:04:13
# Fork: 2 of 2
# Warmup Iteration   1: 1937.782 ns/op
# Warmup Iteration   2: 1386.263 ns/op
# Warmup Iteration   3: 1054.089 ns/op
Iteration   1: 1061.403 ns/op
Iteration   2: 1060.241 ns/op
Iteration   3: 1057.290 ns/op
Iteration   4: 1060.895 ns/op
Iteration   5: 1058.935 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1066.107 ±(99.9%) 10.551 ns/op [Average]
  (min, avg, max) = (1057.290, 1066.107, 1076.138), stdev = 6.979
  CI (99.9%): [1055.556, 1076.657] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 92.85% complete, ETA 00:04:11
# Fork: 1 of 2
# Warmup Iteration   1: 10390.133 ns/op
# Warmup Iteration   2: 5199.747 ns/op
# Warmup Iteration   3: 3648.012 ns/op
Iteration   1: 3651.080 ns/op
Iteration   2: 3649.300 ns/op
Iteration   3: 3656.133 ns/op
Iteration   4: 3626.889 ns/op
Iteration   5: 3627.831 ns/op

# Run progress: 92.88% complete, ETA 00:04:10
# Fork: 2 of 2
# Warmup Iteration   1: 10831.700 ns/op
# Warmup Iteration   2: 5764.466 ns/op
# Warmup Iteration   3: 3973.502 ns/op
Iteration   1: 3991.493 ns/op
Iteration   2: 4010.666 ns/op
Iteration   3: 3999.744 ns/op
Iteration   4: 3973.835 ns/op
Iteration   5: 3972.017 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3815.899 ±(99.9%) 277.596 ns/op [Average]
  (min, avg, max) = (3626.889, 3815.899, 4010.666), stdev = 183.613
  CI (99.9%): [3538.303, 4093.495] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 92.92% complete, ETA 00:04:09
# Fork: 1 of 2
# Warmup Iteration   1: 23.711 ns/op
# Warmup Iteration   2: 29.544 ns/op
# Warmup Iteration   3: 19.050 ns/op
Iteration   1: 19.009 ns/op
Iteration   2: 18.966 ns/op
Iteration   3: 18.964 ns/op
Iteration   4: 18.855 ns/op
Iteration   5: 18.839 ns/op

# Run progress: 92.95% complete, ETA 00:04:08
# Fork: 2 of 2
# Warmup Iteration   1: 25.155 ns/op
# Warmup Iteration   2: 29.223 ns/op
# Warmup Iteration   3: 19.038 ns/op
Iteration   1: 18.979 ns/op
Iteration   2: 18.950 ns/op
Iteration   3: 18.954 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.919 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (18.827, 18.919, 19.009), stdev = 0.069
  CI (99.9%): [18.814, 19.023] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 92.99% complete, ETA 00:04:07
# Fork: 1 of 2
# Warmup Iteration   1: 1046.745 ns/op
# Warmup Iteration   2: 563.133 ns/op
# Warmup Iteration   3: 423.588 ns/op
Iteration   1: 423.710 ns/op
Iteration   2: 424.343 ns/op
Iteration   3: 424.198 ns/op
Iteration   4: 427.458 ns/op
Iteration   5: 427.903 ns/op

# Run progress: 93.02% complete, ETA 00:04:05
# Fork: 2 of 2
# Warmup Iteration   1: 1488.925 ns/op
# Warmup Iteration   2: 572.425 ns/op
# Warmup Iteration   3: 419.379 ns/op
Iteration   1: 419.435 ns/op
Iteration   2: 419.656 ns/op
Iteration   3: 419.794 ns/op
Iteration   4: 419.640 ns/op
Iteration   5: 419.383 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  422.552 ±(99.9%) 5.144 ns/op [Average]
  (min, avg, max) = (419.383, 422.552, 427.903), stdev = 3.403
  CI (99.9%): [417.408, 427.696] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 93.06% complete, ETA 00:04:04
# Fork: 1 of 2
# Warmup Iteration   1: 7634.618 ns/op
# Warmup Iteration   2: 969.733 ns/op
# Warmup Iteration   3: 663.945 ns/op
Iteration   1: 663.931 ns/op
Iteration   2: 664.195 ns/op
Iteration   3: 664.126 ns/op
Iteration   4: 664.870 ns/op
Iteration   5: 664.517 ns/op

# Run progress: 93.09% complete, ETA 00:04:03
# Fork: 2 of 2
# Warmup Iteration   1: 21962.803 ns/op
# Warmup Iteration   2: 858.474 ns/op
# Warmup Iteration   3: 726.772 ns/op
Iteration   1: 663.780 ns/op
Iteration   2: 663.747 ns/op
Iteration   3: 663.439 ns/op
Iteration   4: 663.709 ns/op
Iteration   5: 663.553 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  663.987 ±(99.9%) 0.675 ns/op [Average]
  (min, avg, max) = (663.439, 663.987, 664.870), stdev = 0.446
  CI (99.9%): [663.312, 664.661] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 93.13% complete, ETA 00:04:02
# Fork: 1 of 2
# Warmup Iteration   1: 8455.425 ns/op
# Warmup Iteration   2: 945.185 ns/op
# Warmup Iteration   3: 657.503 ns/op
Iteration   1: 657.784 ns/op
Iteration   2: 657.475 ns/op
Iteration   3: 657.433 ns/op
Iteration   4: 658.370 ns/op
Iteration   5: 658.439 ns/op

# Run progress: 93.16% complete, ETA 00:04:00
# Fork: 2 of 2
# Warmup Iteration   1: 7750.014 ns/op
# Warmup Iteration   2: 985.560 ns/op
# Warmup Iteration   3: 654.521 ns/op
Iteration   1: 655.035 ns/op
Iteration   2: 655.370 ns/op
Iteration   3: 655.330 ns/op
Iteration   4: 655.752 ns/op
Iteration   5: 655.697 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  656.669 ±(99.9%) 2.043 ns/op [Average]
  (min, avg, max) = (655.035, 656.669, 658.439), stdev = 1.352
  CI (99.9%): [654.625, 658.712] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 93.19% complete, ETA 00:03:59
# Fork: 1 of 2
# Warmup Iteration   1: 800.666 ns/op
# Warmup Iteration   2: 689.350 ns/op
# Warmup Iteration   3: 515.520 ns/op
Iteration   1: 515.936 ns/op
Iteration   2: 515.792 ns/op
Iteration   3: 515.427 ns/op
Iteration   4: 515.900 ns/op
Iteration   5: 516.796 ns/op

# Run progress: 93.23% complete, ETA 00:03:58
# Fork: 2 of 2
# Warmup Iteration   1: 839.019 ns/op
# Warmup Iteration   2: 682.935 ns/op
# Warmup Iteration   3: 515.274 ns/op
Iteration   1: 515.432 ns/op
Iteration   2: 515.166 ns/op
Iteration   3: 515.594 ns/op
Iteration   4: 515.480 ns/op
Iteration   5: 515.635 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  515.716 ±(99.9%) 0.676 ns/op [Average]
  (min, avg, max) = (515.166, 515.716, 516.796), stdev = 0.447
  CI (99.9%): [515.040, 516.391] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 93.26% complete, ETA 00:03:57
# Fork: 1 of 2
# Warmup Iteration   1: 861.340 ns/op
# Warmup Iteration   2: 576.310 ns/op
# Warmup Iteration   3: 399.955 ns/op
Iteration   1: 399.952 ns/op
Iteration   2: 401.056 ns/op
Iteration   3: 399.725 ns/op
Iteration   4: 399.388 ns/op
Iteration   5: 399.834 ns/op

# Run progress: 93.30% complete, ETA 00:03:56
# Fork: 2 of 2
# Warmup Iteration   1: 800.175 ns/op
# Warmup Iteration   2: 562.610 ns/op
# Warmup Iteration   3: 388.659 ns/op
Iteration   1: 388.285 ns/op
Iteration   2: 388.940 ns/op
Iteration   3: 388.618 ns/op
Iteration   4: 388.463 ns/op
Iteration   5: 388.408 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  394.267 ±(99.9%) 9.148 ns/op [Average]
  (min, avg, max) = (388.285, 394.267, 401.056), stdev = 6.051
  CI (99.9%): [385.119, 403.415] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 93.33% complete, ETA 00:03:54
# Fork: 1 of 2
# Warmup Iteration   1: 24.179 ns/op
# Warmup Iteration   2: 28.623 ns/op
# Warmup Iteration   3: 19.554 ns/op
Iteration   1: 19.372 ns/op
Iteration   2: 19.457 ns/op
Iteration   3: 19.468 ns/op
Iteration   4: 19.614 ns/op
Iteration   5: 19.533 ns/op

# Run progress: 93.37% complete, ETA 00:03:53
# Fork: 2 of 2
# Warmup Iteration   1: 23.864 ns/op
# Warmup Iteration   2: 26.428 ns/op
# Warmup Iteration   3: 19.045 ns/op
Iteration   1: 19.003 ns/op
Iteration   2: 18.979 ns/op
Iteration   3: 18.965 ns/op
Iteration   4: 18.824 ns/op
Iteration   5: 18.858 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.207 ±(99.9%) 0.465 ns/op [Average]
  (min, avg, max) = (18.824, 19.207, 19.614), stdev = 0.307
  CI (99.9%): [18.743, 19.672] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 93.40% complete, ETA 00:03:52
# Fork: 1 of 2
# Warmup Iteration   1: 2335.584 ns/op
# Warmup Iteration   2: 727.251 ns/op
# Warmup Iteration   3: 520.789 ns/op
Iteration   1: 521.452 ns/op
Iteration   2: 519.949 ns/op
Iteration   3: 519.540 ns/op
Iteration   4: 524.792 ns/op
Iteration   5: 520.785 ns/op

# Run progress: 93.44% complete, ETA 00:03:51
# Fork: 2 of 2
# Warmup Iteration   1: 2161.262 ns/op
# Warmup Iteration   2: 684.880 ns/op
# Warmup Iteration   3: 516.588 ns/op
Iteration   1: 518.116 ns/op
Iteration   2: 516.800 ns/op
Iteration   3: 518.283 ns/op
Iteration   4: 519.202 ns/op
Iteration   5: 520.034 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  519.895 ±(99.9%) 3.311 ns/op [Average]
  (min, avg, max) = (516.800, 519.895, 524.792), stdev = 2.190
  CI (99.9%): [516.584, 523.206] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 93.47% complete, ETA 00:03:49
# Fork: 1 of 2
# Warmup Iteration   1: 9760.800 ns/op
# Warmup Iteration   2: 919.977 ns/op
# Warmup Iteration   3: 715.967 ns/op
Iteration   1: 721.164 ns/op
Iteration   2: 717.229 ns/op
Iteration   3: 717.408 ns/op
Iteration   4: 720.645 ns/op
Iteration   5: 719.776 ns/op

# Run progress: 93.51% complete, ETA 00:03:48
# Fork: 2 of 2
# Warmup Iteration   1: 16610.160 ns/op
# Warmup Iteration   2: 1201.063 ns/op
# Warmup Iteration   3: 826.928 ns/op
Iteration   1: 751.957 ns/op
Iteration   2: 750.091 ns/op
Iteration   3: 749.550 ns/op
Iteration   4: 752.375 ns/op
Iteration   5: 751.017 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  735.121 ±(99.9%) 25.398 ns/op [Average]
  (min, avg, max) = (717.229, 735.121, 752.375), stdev = 16.799
  CI (99.9%): [709.724, 760.519] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 93.54% complete, ETA 00:03:47
# Fork: 1 of 2
# Warmup Iteration   1: 14970.155 ns/op
# Warmup Iteration   2: 1020.223 ns/op
# Warmup Iteration   3: 816.210 ns/op
Iteration   1: 751.486 ns/op
Iteration   2: 751.936 ns/op
Iteration   3: 750.365 ns/op
Iteration   4: 750.113 ns/op
Iteration   5: 751.946 ns/op

# Run progress: 93.58% complete, ETA 00:03:46
# Fork: 2 of 2
# Warmup Iteration   1: 23427.107 ns/op
# Warmup Iteration   2: 1194.455 ns/op
# Warmup Iteration   3: 825.074 ns/op
Iteration   1: 741.889 ns/op
Iteration   2: 742.610 ns/op
Iteration   3: 742.240 ns/op
Iteration   4: 742.694 ns/op
Iteration   5: 742.764 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  746.804 ±(99.9%) 7.021 ns/op [Average]
  (min, avg, max) = (741.889, 746.804, 751.946), stdev = 4.644
  CI (99.9%): [739.783, 753.826] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 93.61% complete, ETA 00:03:45
# Fork: 1 of 2
# Warmup Iteration   1: 1056.419 ns/op
# Warmup Iteration   2: 774.866 ns/op
# Warmup Iteration   3: 550.692 ns/op
Iteration   1: 550.079 ns/op
Iteration   2: 551.136 ns/op
Iteration   3: 550.881 ns/op
Iteration   4: 553.129 ns/op
Iteration   5: 551.833 ns/op

# Run progress: 93.65% complete, ETA 00:03:43
# Fork: 2 of 2
# Warmup Iteration   1: 892.567 ns/op
# Warmup Iteration   2: 729.984 ns/op
# Warmup Iteration   3: 548.252 ns/op
Iteration   1: 549.004 ns/op
Iteration   2: 548.169 ns/op
Iteration   3: 551.655 ns/op
Iteration   4: 548.983 ns/op
Iteration   5: 551.292 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  550.616 ±(99.9%) 2.321 ns/op [Average]
  (min, avg, max) = (548.169, 550.616, 553.129), stdev = 1.535
  CI (99.9%): [548.295, 552.937] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 93.68% complete, ETA 00:03:42
# Fork: 1 of 2
# Warmup Iteration   1: 7371.736 ns/op
# Warmup Iteration   2: 1244.637 ns/op
# Warmup Iteration   3: 772.091 ns/op
Iteration   1: 770.626 ns/op
Iteration   2: 771.615 ns/op
Iteration   3: 771.958 ns/op
Iteration   4: 765.209 ns/op
Iteration   5: 765.300 ns/op

# Run progress: 93.72% complete, ETA 00:03:41
# Fork: 2 of 2
# Warmup Iteration   1: 2704.372 ns/op
# Warmup Iteration   2: 1102.881 ns/op
# Warmup Iteration   3: 753.847 ns/op
Iteration   1: 754.244 ns/op
Iteration   2: 755.038 ns/op
Iteration   3: 754.569 ns/op
Iteration   4: 752.340 ns/op
Iteration   5: 752.036 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  761.294 ±(99.9%) 12.736 ns/op [Average]
  (min, avg, max) = (752.036, 761.294, 771.958), stdev = 8.424
  CI (99.9%): [748.558, 774.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 93.75% complete, ETA 00:03:40
# Fork: 1 of 2
# Warmup Iteration   1: 23.922 ns/op
# Warmup Iteration   2: 30.849 ns/op
# Warmup Iteration   3: 19.033 ns/op
Iteration   1: 19.001 ns/op
Iteration   2: 18.974 ns/op
Iteration   3: 18.967 ns/op
Iteration   4: 18.830 ns/op
Iteration   5: 18.847 ns/op

# Run progress: 93.78% complete, ETA 00:03:38
# Fork: 2 of 2
# Warmup Iteration   1: 25.660 ns/op
# Warmup Iteration   2: 30.858 ns/op
# Warmup Iteration   3: 19.011 ns/op
Iteration   1: 18.987 ns/op
Iteration   2: 18.987 ns/op
Iteration   3: 18.961 ns/op
Iteration   4: 18.827 ns/op
Iteration   5: 18.846 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (18.827, 18.923, 19.001), stdev = 0.074
  CI (99.9%): [18.810, 19.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 93.82% complete, ETA 00:03:37
# Fork: 1 of 2
# Warmup Iteration   1: 5446.750 ns/op
# Warmup Iteration   2: 1280.669 ns/op
# Warmup Iteration   3: 889.277 ns/op
Iteration   1: 889.728 ns/op
Iteration   2: 889.839 ns/op
Iteration   3: 889.808 ns/op
Iteration   4: 890.978 ns/op
Iteration   5: 889.490 ns/op

# Run progress: 93.85% complete, ETA 00:03:36
# Fork: 2 of 2
# Warmup Iteration   1: 6580.674 ns/op
# Warmup Iteration   2: 1299.921 ns/op
# Warmup Iteration   3: 934.546 ns/op
Iteration   1: 969.304 ns/op
Iteration   2: 944.588 ns/op
Iteration   3: 964.230 ns/op
Iteration   4: 936.086 ns/op
Iteration   5: 969.210 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  923.326 ±(99.9%) 55.371 ns/op [Average]
  (min, avg, max) = (889.490, 923.326, 969.304), stdev = 36.625
  CI (99.9%): [867.955, 978.697] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 93.89% complete, ETA 00:03:35
# Fork: 1 of 2
# Warmup Iteration   1: 41411.591 ns/op
# Warmup Iteration   2: 1265.282 ns/op
# Warmup Iteration   3: 1029.929 ns/op
Iteration   1: 861.376 ns/op
Iteration   2: 861.285 ns/op
Iteration   3: 860.946 ns/op
Iteration   4: 860.699 ns/op
Iteration   5: 860.346 ns/op

# Run progress: 93.92% complete, ETA 00:03:34
# Fork: 2 of 2
# Warmup Iteration   1: 30425.972 ns/op
# Warmup Iteration   2: 1349.294 ns/op
# Warmup Iteration   3: 926.289 ns/op
Iteration   1: 843.842 ns/op
Iteration   2: 842.945 ns/op
Iteration   3: 844.009 ns/op
Iteration   4: 845.957 ns/op
Iteration   5: 845.985 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  852.739 ±(99.9%) 13.133 ns/op [Average]
  (min, avg, max) = (842.945, 852.739, 861.376), stdev = 8.687
  CI (99.9%): [839.606, 865.872] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 93.96% complete, ETA 00:03:32
# Fork: 1 of 2
# Warmup Iteration   1: 11280.798 ns/op
# Warmup Iteration   2: 1108.949 ns/op
# Warmup Iteration   3: 939.428 ns/op
Iteration   1: 860.910 ns/op
Iteration   2: 860.371 ns/op
Iteration   3: 860.858 ns/op
Iteration   4: 860.720 ns/op
Iteration   5: 860.191 ns/op

# Run progress: 93.99% complete, ETA 00:03:31
# Fork: 2 of 2
# Warmup Iteration   1: 7782.736 ns/op
# Warmup Iteration   2: 1331.506 ns/op
# Warmup Iteration   3: 842.126 ns/op
Iteration   1: 841.393 ns/op
Iteration   2: 842.391 ns/op
Iteration   3: 841.691 ns/op
Iteration   4: 841.844 ns/op
Iteration   5: 842.079 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  851.245 ±(99.9%) 14.933 ns/op [Average]
  (min, avg, max) = (841.393, 851.245, 860.910), stdev = 9.877
  CI (99.9%): [836.312, 866.178] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 94.03% complete, ETA 00:03:30
# Fork: 1 of 2
# Warmup Iteration   1: 1864.248 ns/op
# Warmup Iteration   2: 1407.959 ns/op
# Warmup Iteration   3: 1059.419 ns/op
Iteration   1: 1060.076 ns/op
Iteration   2: 1060.285 ns/op
Iteration   3: 1059.703 ns/op
Iteration   4: 1060.849 ns/op
Iteration   5: 1061.050 ns/op

# Run progress: 94.06% complete, ETA 00:03:29
# Fork: 2 of 2
# Warmup Iteration   1: 1678.831 ns/op
# Warmup Iteration   2: 1394.474 ns/op
# Warmup Iteration   3: 1060.741 ns/op
Iteration   1: 1060.765 ns/op
Iteration   2: 1060.881 ns/op
Iteration   3: 1060.507 ns/op
Iteration   4: 1061.759 ns/op
Iteration   5: 1061.910 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1060.779 ±(99.9%) 1.045 ns/op [Average]
  (min, avg, max) = (1059.703, 1060.779, 1061.910), stdev = 0.691
  CI (99.9%): [1059.734, 1061.823] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 94.10% complete, ETA 00:03:27
# Fork: 1 of 2
# Warmup Iteration   1: 8338.308 ns/op
# Warmup Iteration   2: 5149.968 ns/op
# Warmup Iteration   3: 3657.712 ns/op
Iteration   1: 3656.349 ns/op
Iteration   2: 3658.623 ns/op
Iteration   3: 3651.412 ns/op
Iteration   4: 3631.472 ns/op
Iteration   5: 3632.690 ns/op

# Run progress: 94.13% complete, ETA 00:03:26
# Fork: 2 of 2
# Warmup Iteration   1: 14521.568 ns/op
# Warmup Iteration   2: 5229.790 ns/op
# Warmup Iteration   3: 4186.628 ns/op
Iteration   1: 3797.906 ns/op
Iteration   2: 3802.555 ns/op
Iteration   3: 3802.469 ns/op
Iteration   4: 3780.493 ns/op
Iteration   5: 3781.082 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3719.505 ±(99.9%) 118.249 ns/op [Average]
  (min, avg, max) = (3631.472, 3719.505, 3802.555), stdev = 78.214
  CI (99.9%): [3601.257, 3837.754] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 94.17% complete, ETA 00:03:25
# Fork: 1 of 2
# Warmup Iteration   1: 25.182 ns/op
# Warmup Iteration   2: 25.651 ns/op
# Warmup Iteration   3: 19.059 ns/op
Iteration   1: 18.986 ns/op
Iteration   2: 19.012 ns/op
Iteration   3: 18.986 ns/op
Iteration   4: 18.824 ns/op
Iteration   5: 18.838 ns/op

# Run progress: 94.20% complete, ETA 00:03:24
# Fork: 2 of 2
# Warmup Iteration   1: 25.059 ns/op
# Warmup Iteration   2: 30.822 ns/op
# Warmup Iteration   3: 19.040 ns/op
Iteration   1: 18.992 ns/op
Iteration   2: 18.960 ns/op
Iteration   3: 18.963 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.924 ±(99.9%) 0.118 ns/op [Average]
  (min, avg, max) = (18.824, 18.924, 19.012), stdev = 0.078
  CI (99.9%): [18.806, 19.042] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 94.24% complete, ETA 00:03:23
# Fork: 1 of 2
# Warmup Iteration   1: 2605.939 ns/op
# Warmup Iteration   2: 1099.705 ns/op
# Warmup Iteration   3: 774.520 ns/op
Iteration   1: 775.403 ns/op
Iteration   2: 789.317 ns/op
Iteration   3: 774.524 ns/op
Iteration   4: 788.387 ns/op
Iteration   5: 788.307 ns/op

# Run progress: 94.27% complete, ETA 00:03:21
# Fork: 2 of 2
# Warmup Iteration   1: 3055.843 ns/op
# Warmup Iteration   2: 1128.433 ns/op
# Warmup Iteration   3: 782.337 ns/op
Iteration   1: 783.981 ns/op
Iteration   2: 785.951 ns/op
Iteration   3: 782.222 ns/op
Iteration   4: 782.123 ns/op
Iteration   5: 785.674 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  783.589 ±(99.9%) 7.829 ns/op [Average]
  (min, avg, max) = (774.524, 783.589, 789.317), stdev = 5.179
  CI (99.9%): [775.760, 791.418] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 94.31% complete, ETA 00:03:20
# Fork: 1 of 2
# Warmup Iteration   1: 19601.647 ns/op
# Warmup Iteration   2: 1218.664 ns/op
# Warmup Iteration   3: 806.846 ns/op
Iteration   1: 734.988 ns/op
Iteration   2: 734.934 ns/op
Iteration   3: 734.578 ns/op
Iteration   4: 734.242 ns/op
Iteration   5: 734.046 ns/op

# Run progress: 94.34% complete, ETA 00:03:19
# Fork: 2 of 2
# Warmup Iteration   1: 23441.014 ns/op
# Warmup Iteration   2: 1031.179 ns/op
# Warmup Iteration   3: 813.077 ns/op
Iteration   1: 733.842 ns/op
Iteration   2: 733.392 ns/op
Iteration   3: 733.864 ns/op
Iteration   4: 733.616 ns/op
Iteration   5: 733.010 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  734.051 ±(99.9%) 0.977 ns/op [Average]
  (min, avg, max) = (733.010, 734.051, 734.988), stdev = 0.646
  CI (99.9%): [733.074, 735.028] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 94.38% complete, ETA 00:03:18
# Fork: 1 of 2
# Warmup Iteration   1: 20693.160 ns/op
# Warmup Iteration   2: 939.222 ns/op
# Warmup Iteration   3: 788.099 ns/op
Iteration   1: 707.031 ns/op
Iteration   2: 706.662 ns/op
Iteration   3: 706.477 ns/op
Iteration   4: 706.755 ns/op
Iteration   5: 706.518 ns/op

# Run progress: 94.41% complete, ETA 00:03:16
# Fork: 2 of 2
# Warmup Iteration   1: 13654.194 ns/op
# Warmup Iteration   2: 1069.740 ns/op
# Warmup Iteration   3: 806.145 ns/op
Iteration   1: 739.014 ns/op
Iteration   2: 739.069 ns/op
Iteration   3: 739.411 ns/op
Iteration   4: 739.242 ns/op
Iteration   5: 739.255 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  722.944 ±(99.9%) 25.906 ns/op [Average]
  (min, avg, max) = (706.477, 722.944, 739.411), stdev = 17.135
  CI (99.9%): [697.038, 748.849] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 94.44% complete, ETA 00:03:15
# Fork: 1 of 2
# Warmup Iteration   1: 840.206 ns/op
# Warmup Iteration   2: 793.801 ns/op
# Warmup Iteration   3: 570.253 ns/op
Iteration   1: 570.735 ns/op
Iteration   2: 570.728 ns/op
Iteration   3: 570.680 ns/op
Iteration   4: 571.610 ns/op
Iteration   5: 564.603 ns/op

# Run progress: 94.48% complete, ETA 00:03:14
# Fork: 2 of 2
# Warmup Iteration   1: 813.584 ns/op
# Warmup Iteration   2: 876.549 ns/op
# Warmup Iteration   3: 569.940 ns/op
Iteration   1: 570.340 ns/op
Iteration   2: 569.934 ns/op
Iteration   3: 569.613 ns/op
Iteration   4: 569.201 ns/op
Iteration   5: 568.103 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  569.555 ±(99.9%) 3.014 ns/op [Average]
  (min, avg, max) = (564.603, 569.555, 571.610), stdev = 1.994
  CI (99.9%): [566.540, 572.569] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 94.51% complete, ETA 00:03:13
# Fork: 1 of 2
# Warmup Iteration   1: 1713.727 ns/op
# Warmup Iteration   2: 1160.962 ns/op
# Warmup Iteration   3: 764.331 ns/op
Iteration   1: 764.704 ns/op
Iteration   2: 764.875 ns/op
Iteration   3: 764.489 ns/op
Iteration   4: 765.129 ns/op
Iteration   5: 765.152 ns/op

# Run progress: 94.55% complete, ETA 00:03:12
# Fork: 2 of 2
# Warmup Iteration   1: 2054.508 ns/op
# Warmup Iteration   2: 1089.031 ns/op
# Warmup Iteration   3: 765.887 ns/op
Iteration   1: 766.258 ns/op
Iteration   2: 766.040 ns/op
Iteration   3: 766.020 ns/op
Iteration   4: 766.955 ns/op
Iteration   5: 766.286 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  765.591 ±(99.9%) 1.244 ns/op [Average]
  (min, avg, max) = (764.489, 765.591, 766.955), stdev = 0.823
  CI (99.9%): [764.347, 766.835] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 94.58% complete, ETA 00:03:10
# Fork: 1 of 2
# Warmup Iteration   1: 24.978 ns/op
# Warmup Iteration   2: 26.238 ns/op
# Warmup Iteration   3: 19.044 ns/op
Iteration   1: 19.022 ns/op
Iteration   2: 18.974 ns/op
Iteration   3: 18.976 ns/op
Iteration   4: 19.572 ns/op
Iteration   5: 19.553 ns/op

# Run progress: 94.62% complete, ETA 00:03:09
# Fork: 2 of 2
# Warmup Iteration   1: 24.202 ns/op
# Warmup Iteration   2: 26.840 ns/op
# Warmup Iteration   3: 19.019 ns/op
Iteration   1: 18.928 ns/op
Iteration   2: 18.956 ns/op
Iteration   3: 18.911 ns/op
Iteration   4: 18.824 ns/op
Iteration   5: 18.874 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.059 ±(99.9%) 0.410 ns/op [Average]
  (min, avg, max) = (18.824, 19.059, 19.572), stdev = 0.271
  CI (99.9%): [18.649, 19.469] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 94.65% complete, ETA 00:03:08
# Fork: 1 of 2
# Warmup Iteration   1: 49733.365 ns/op
# Warmup Iteration   2: 1370.509 ns/op
# Warmup Iteration   3: 1104.981 ns/op
Iteration   1: 947.069 ns/op
Iteration   2: 946.909 ns/op
Iteration   3: 943.878 ns/op
Iteration   4: 949.728 ns/op
Iteration   5: 946.647 ns/op

# Run progress: 94.69% complete, ETA 00:03:07
# Fork: 2 of 2
# Warmup Iteration   1: 52521.886 ns/op
# Warmup Iteration   2: 1541.801 ns/op
# Warmup Iteration   3: 1120.685 ns/op
Iteration   1: 960.861 ns/op
Iteration   2: 958.338 ns/op
Iteration   3: 959.511 ns/op
Iteration   4: 959.526 ns/op
Iteration   5: 954.662 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  952.713 ±(99.9%) 9.872 ns/op [Average]
  (min, avg, max) = (943.878, 952.713, 960.861), stdev = 6.530
  CI (99.9%): [942.841, 962.585] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 94.72% complete, ETA 00:03:05
# Fork: 1 of 2
# Warmup Iteration   1: 24960.805 ns/op
# Warmup Iteration   2: 1432.702 ns/op
# Warmup Iteration   3: 1100.177 ns/op
Iteration   1: 1006.606 ns/op
Iteration   2: 1003.972 ns/op
Iteration   3: 1010.861 ns/op
Iteration   4: 1006.490 ns/op
Iteration   5: 1001.819 ns/op

# Run progress: 94.76% complete, ETA 00:03:04
# Fork: 2 of 2
# Warmup Iteration   1: 37842.318 ns/op
# Warmup Iteration   2: 2998.929 ns/op
# Warmup Iteration   3: 1216.587 ns/op
Iteration   1: 1018.506 ns/op
Iteration   2: 1021.460 ns/op
Iteration   3: 1025.983 ns/op
Iteration   4: 1019.385 ns/op
Iteration   5: 1023.370 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1013.845 ±(99.9%) 13.390 ns/op [Average]
  (min, avg, max) = (1001.819, 1013.845, 1025.983), stdev = 8.857
  CI (99.9%): [1000.455, 1027.235] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 94.79% complete, ETA 00:03:03
# Fork: 1 of 2
# Warmup Iteration   1: 40551.363 ns/op
# Warmup Iteration   2: 2023.482 ns/op
# Warmup Iteration   3: 1229.774 ns/op
Iteration   1: 1042.239 ns/op
Iteration   2: 1040.075 ns/op
Iteration   3: 1038.811 ns/op
Iteration   4: 1037.516 ns/op
Iteration   5: 1037.766 ns/op

# Run progress: 94.83% complete, ETA 00:03:02
# Fork: 2 of 2
# Warmup Iteration   1: 36998.176 ns/op
# Warmup Iteration   2: 1993.888 ns/op
# Warmup Iteration   3: 1267.310 ns/op
Iteration   1: 1050.028 ns/op
Iteration   2: 1053.559 ns/op
Iteration   3: 1052.969 ns/op
Iteration   4: 1052.496 ns/op
Iteration   5: 1048.670 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1045.413 ±(99.9%) 10.186 ns/op [Average]
  (min, avg, max) = (1037.516, 1045.413, 1053.559), stdev = 6.737
  CI (99.9%): [1035.227, 1055.599] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 94.86% complete, ETA 00:03:01
# Fork: 1 of 2
# Warmup Iteration   1: 1988.023 ns/op
# Warmup Iteration   2: 1679.489 ns/op
# Warmup Iteration   3: 1053.604 ns/op
Iteration   1: 1062.402 ns/op
Iteration   2: 1051.085 ns/op
Iteration   3: 1054.897 ns/op
Iteration   4: 1048.981 ns/op
Iteration   5: 1049.373 ns/op

# Run progress: 94.90% complete, ETA 00:02:59
# Fork: 2 of 2
# Warmup Iteration   1: 2406.864 ns/op
# Warmup Iteration   2: 1457.596 ns/op
# Warmup Iteration   3: 1054.939 ns/op
Iteration   1: 1053.105 ns/op
Iteration   2: 1051.982 ns/op
Iteration   3: 1050.186 ns/op
Iteration   4: 1063.026 ns/op
Iteration   5: 1059.398 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1054.443 ±(99.9%) 8.041 ns/op [Average]
  (min, avg, max) = (1048.981, 1054.443, 1063.026), stdev = 5.318
  CI (99.9%): [1046.403, 1062.484] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 94.93% complete, ETA 00:02:58
# Fork: 1 of 2
# Warmup Iteration   1: 10826.419 ns/op
# Warmup Iteration   2: 5376.170 ns/op
# Warmup Iteration   3: 4322.913 ns/op
Iteration   1: 3897.519 ns/op
Iteration   2: 3891.280 ns/op
Iteration   3: 3907.708 ns/op
Iteration   4: 3887.217 ns/op
Iteration   5: 3892.420 ns/op

# Run progress: 94.97% complete, ETA 00:02:57
# Fork: 2 of 2
# Warmup Iteration   1: 12229.821 ns/op
# Warmup Iteration   2: 5034.295 ns/op
# Warmup Iteration   3: 3991.400 ns/op
Iteration   1: 3657.154 ns/op
Iteration   2: 3666.592 ns/op
Iteration   3: 3661.495 ns/op
Iteration   4: 3642.625 ns/op
Iteration   5: 3643.886 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3774.790 ±(99.9%) 192.402 ns/op [Average]
  (min, avg, max) = (3642.625, 3774.790, 3907.708), stdev = 127.262
  CI (99.9%): [3582.388, 3967.191] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 95.00% complete, ETA 00:02:56
# Fork: 1 of 2
# Warmup Iteration   1: 23.533 ns/op
# Warmup Iteration   2: 28.726 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 18.996 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.984 ns/op
Iteration   4: 18.844 ns/op
Iteration   5: 18.851 ns/op

# Run progress: 95.03% complete, ETA 00:02:54
# Fork: 2 of 2
# Warmup Iteration   1: 23.837 ns/op
# Warmup Iteration   2: 31.412 ns/op
# Warmup Iteration   3: 19.051 ns/op
Iteration   1: 18.978 ns/op
Iteration   2: 18.981 ns/op
Iteration   3: 18.972 ns/op
Iteration   4: 18.853 ns/op
Iteration   5: 18.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.926 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (18.837, 18.926, 18.996), stdev = 0.069
  CI (99.9%): [18.821, 19.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 95.07% complete, ETA 00:02:53
# Fork: 1 of 2
# Warmup Iteration   1: 1305.955 ns/op
# Warmup Iteration   2: 480.219 ns/op
# Warmup Iteration   3: 332.776 ns/op
Iteration   1: 332.850 ns/op
Iteration   2: 332.796 ns/op
Iteration   3: 333.107 ns/op
Iteration   4: 332.891 ns/op
Iteration   5: 332.785 ns/op

# Run progress: 95.10% complete, ETA 00:02:52
# Fork: 2 of 2
# Warmup Iteration   1: 1834.045 ns/op
# Warmup Iteration   2: 440.486 ns/op
# Warmup Iteration   3: 327.366 ns/op
Iteration   1: 327.774 ns/op
Iteration   2: 327.692 ns/op
Iteration   3: 327.887 ns/op
Iteration   4: 327.986 ns/op
Iteration   5: 327.744 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  330.351 ±(99.9%) 4.043 ns/op [Average]
  (min, avg, max) = (327.692, 330.351, 333.107), stdev = 2.674
  CI (99.9%): [326.308, 334.394] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 95.14% complete, ETA 00:02:51
# Fork: 1 of 2
# Warmup Iteration   1: 801.935 ns/op
# Warmup Iteration   2: 448.295 ns/op
# Warmup Iteration   3: 332.727 ns/op
Iteration   1: 332.829 ns/op
Iteration   2: 332.761 ns/op
Iteration   3: 333.238 ns/op
Iteration   4: 333.695 ns/op
Iteration   5: 333.818 ns/op

# Run progress: 95.17% complete, ETA 00:02:50
# Fork: 2 of 2
# Warmup Iteration   1: 869.718 ns/op
# Warmup Iteration   2: 430.902 ns/op
# Warmup Iteration   3: 319.128 ns/op
Iteration   1: 319.212 ns/op
Iteration   2: 319.114 ns/op
Iteration   3: 319.245 ns/op
Iteration   4: 319.608 ns/op
Iteration   5: 319.781 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  326.330 ±(99.9%) 11.071 ns/op [Average]
  (min, avg, max) = (319.114, 326.330, 333.818), stdev = 7.323
  CI (99.9%): [315.259, 337.402] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 95.21% complete, ETA 00:02:48
# Fork: 1 of 2
# Warmup Iteration   1: 1183.358 ns/op
# Warmup Iteration   2: 557.308 ns/op
# Warmup Iteration   3: 379.700 ns/op
Iteration   1: 379.418 ns/op
Iteration   2: 379.824 ns/op
Iteration   3: 379.618 ns/op
Iteration   4: 380.847 ns/op
Iteration   5: 381.623 ns/op

# Run progress: 95.24% complete, ETA 00:02:47
# Fork: 2 of 2
# Warmup Iteration   1: 1786.582 ns/op
# Warmup Iteration   2: 517.470 ns/op
# Warmup Iteration   3: 380.614 ns/op
Iteration   1: 380.476 ns/op
Iteration   2: 380.525 ns/op
Iteration   3: 379.262 ns/op
Iteration   4: 380.204 ns/op
Iteration   5: 380.403 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  380.220 ±(99.9%) 1.085 ns/op [Average]
  (min, avg, max) = (379.262, 380.220, 381.623), stdev = 0.717
  CI (99.9%): [379.135, 381.305] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 95.28% complete, ETA 00:02:46
# Fork: 1 of 2
# Warmup Iteration   1: 379.544 ns/op
# Warmup Iteration   2: 346.197 ns/op
# Warmup Iteration   3: 256.489 ns/op
Iteration   1: 256.369 ns/op
Iteration   2: 256.375 ns/op
Iteration   3: 256.570 ns/op
Iteration   4: 256.724 ns/op
Iteration   5: 256.644 ns/op

# Run progress: 95.31% complete, ETA 00:02:45
# Fork: 2 of 2
# Warmup Iteration   1: 372.195 ns/op
# Warmup Iteration   2: 348.356 ns/op
# Warmup Iteration   3: 256.331 ns/op
Iteration   1: 256.349 ns/op
Iteration   2: 256.154 ns/op
Iteration   3: 256.065 ns/op
Iteration   4: 256.773 ns/op
Iteration   5: 256.813 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  256.484 ±(99.9%) 0.394 ns/op [Average]
  (min, avg, max) = (256.065, 256.484, 256.813), stdev = 0.260
  CI (99.9%): [256.090, 256.877] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 95.35% complete, ETA 00:02:43
# Fork: 1 of 2
# Warmup Iteration   1: 759.409 ns/op
# Warmup Iteration   2: 499.107 ns/op
# Warmup Iteration   3: 360.214 ns/op
Iteration   1: 360.482 ns/op
Iteration   2: 361.102 ns/op
Iteration   3: 360.549 ns/op
Iteration   4: 360.181 ns/op
Iteration   5: 360.590 ns/op

# Run progress: 95.38% complete, ETA 00:02:42
# Fork: 2 of 2
# Warmup Iteration   1: 1365.401 ns/op
# Warmup Iteration   2: 509.619 ns/op
# Warmup Iteration   3: 371.144 ns/op
Iteration   1: 370.450 ns/op
Iteration   2: 371.204 ns/op
Iteration   3: 371.456 ns/op
Iteration   4: 370.912 ns/op
Iteration   5: 370.191 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  365.712 ±(99.9%) 8.201 ns/op [Average]
  (min, avg, max) = (360.181, 365.712, 371.456), stdev = 5.424
  CI (99.9%): [357.511, 373.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 95.42% complete, ETA 00:02:41
# Fork: 1 of 2
# Warmup Iteration   1: 25.010 ns/op
# Warmup Iteration   2: 28.538 ns/op
# Warmup Iteration   3: 19.006 ns/op
Iteration   1: 18.994 ns/op
Iteration   2: 18.945 ns/op
Iteration   3: 18.957 ns/op
Iteration   4: 18.830 ns/op
Iteration   5: 18.842 ns/op

# Run progress: 95.45% complete, ETA 00:02:40
# Fork: 2 of 2
# Warmup Iteration   1: 25.753 ns/op
# Warmup Iteration   2: 30.811 ns/op
# Warmup Iteration   3: 19.850 ns/op
Iteration   1: 19.693 ns/op
Iteration   2: 19.621 ns/op
Iteration   3: 19.662 ns/op
Iteration   4: 19.419 ns/op
Iteration   5: 19.387 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.235 ±(99.9%) 0.537 ns/op [Average]
  (min, avg, max) = (18.830, 19.235, 19.693), stdev = 0.355
  CI (99.9%): [18.698, 19.772] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 95.49% complete, ETA 00:02:39
# Fork: 1 of 2
# Warmup Iteration   1: 1474.546 ns/op
# Warmup Iteration   2: 533.868 ns/op
# Warmup Iteration   3: 406.447 ns/op
Iteration   1: 406.247 ns/op
Iteration   2: 407.120 ns/op
Iteration   3: 405.787 ns/op
Iteration   4: 408.250 ns/op
Iteration   5: 410.230 ns/op

# Run progress: 95.52% complete, ETA 00:02:37
# Fork: 2 of 2
# Warmup Iteration   1: 1637.947 ns/op
# Warmup Iteration   2: 589.590 ns/op
# Warmup Iteration   3: 409.843 ns/op
Iteration   1: 410.863 ns/op
Iteration   2: 409.816 ns/op
Iteration   3: 410.260 ns/op
Iteration   4: 411.250 ns/op
Iteration   5: 410.251 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  409.008 ±(99.9%) 3.018 ns/op [Average]
  (min, avg, max) = (405.787, 409.008, 411.250), stdev = 1.996
  CI (99.9%): [405.990, 412.025] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 95.56% complete, ETA 00:02:36
# Fork: 1 of 2
# Warmup Iteration   1: 25787.076 ns/op
# Warmup Iteration   2: 819.504 ns/op
# Warmup Iteration   3: 610.633 ns/op
Iteration   1: 551.900 ns/op
Iteration   2: 549.412 ns/op
Iteration   3: 548.479 ns/op
Iteration   4: 547.899 ns/op
Iteration   5: 546.531 ns/op

# Run progress: 95.59% complete, ETA 00:02:35
# Fork: 2 of 2
# Warmup Iteration   1: 19018.100 ns/op
# Warmup Iteration   2: 835.578 ns/op
# Warmup Iteration   3: 593.983 ns/op
Iteration   1: 539.160 ns/op
Iteration   2: 539.242 ns/op
Iteration   3: 536.824 ns/op
Iteration   4: 542.027 ns/op
Iteration   5: 538.874 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  544.035 ±(99.9%) 8.143 ns/op [Average]
  (min, avg, max) = (536.824, 544.035, 551.900), stdev = 5.386
  CI (99.9%): [535.892, 552.178] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 95.63% complete, ETA 00:02:34
# Fork: 1 of 2
# Warmup Iteration   1: 34838.501 ns/op
# Warmup Iteration   2: 1115.579 ns/op
# Warmup Iteration   3: 723.642 ns/op
Iteration   1: 653.671 ns/op
Iteration   2: 653.406 ns/op
Iteration   3: 650.431 ns/op
Iteration   4: 650.304 ns/op
Iteration   5: 653.631 ns/op

# Run progress: 95.66% complete, ETA 00:02:32
# Fork: 2 of 2
# Warmup Iteration   1: 31770.592 ns/op
# Warmup Iteration   2: 1380.308 ns/op
# Warmup Iteration   3: 716.993 ns/op
Iteration   1: 652.636 ns/op
Iteration   2: 654.400 ns/op
Iteration   3: 651.885 ns/op
Iteration   4: 650.107 ns/op
Iteration   5: 651.586 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  652.206 ±(99.9%) 2.379 ns/op [Average]
  (min, avg, max) = (650.107, 652.206, 654.400), stdev = 1.574
  CI (99.9%): [649.827, 654.585] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 95.69% complete, ETA 00:02:31
# Fork: 1 of 2
# Warmup Iteration   1: 1010.751 ns/op
# Warmup Iteration   2: 726.942 ns/op
# Warmup Iteration   3: 526.619 ns/op
Iteration   1: 523.798 ns/op
Iteration   2: 524.274 ns/op
Iteration   3: 523.478 ns/op
Iteration   4: 523.829 ns/op
Iteration   5: 525.302 ns/op

# Run progress: 95.73% complete, ETA 00:02:30
# Fork: 2 of 2
# Warmup Iteration   1: 966.533 ns/op
# Warmup Iteration   2: 700.157 ns/op
# Warmup Iteration   3: 522.770 ns/op
Iteration   1: 523.754 ns/op
Iteration   2: 524.110 ns/op
Iteration   3: 522.979 ns/op
Iteration   4: 524.010 ns/op
Iteration   5: 523.884 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  523.942 ±(99.9%) 0.902 ns/op [Average]
  (min, avg, max) = (522.979, 523.942, 525.302), stdev = 0.597
  CI (99.9%): [523.039, 524.844] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 95.76% complete, ETA 00:02:29
# Fork: 1 of 2
# Warmup Iteration   1: 2205.687 ns/op
# Warmup Iteration   2: 1071.610 ns/op
# Warmup Iteration   3: 789.503 ns/op
Iteration   1: 790.666 ns/op
Iteration   2: 790.225 ns/op
Iteration   3: 790.648 ns/op
Iteration   4: 792.644 ns/op
Iteration   5: 790.530 ns/op

# Run progress: 95.80% complete, ETA 00:02:28
# Fork: 2 of 2
# Warmup Iteration   1: 1882.108 ns/op
# Warmup Iteration   2: 1118.593 ns/op
# Warmup Iteration   3: 783.317 ns/op
Iteration   1: 784.387 ns/op
Iteration   2: 784.464 ns/op
Iteration   3: 784.835 ns/op
Iteration   4: 784.006 ns/op
Iteration   5: 785.452 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  787.786 ±(99.9%) 5.154 ns/op [Average]
  (min, avg, max) = (784.006, 787.786, 792.644), stdev = 3.409
  CI (99.9%): [782.632, 792.940] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 95.83% complete, ETA 00:02:26
# Fork: 1 of 2
# Warmup Iteration   1: 23.574 ns/op
# Warmup Iteration   2: 93.416 ns/op
# Warmup Iteration   3: 18.935 ns/op
Iteration   1: 18.921 ns/op
Iteration   2: 18.938 ns/op
Iteration   3: 18.941 ns/op
Iteration   4: 19.758 ns/op
Iteration   5: 19.739 ns/op

# Run progress: 95.87% complete, ETA 00:02:25
# Fork: 2 of 2
# Warmup Iteration   1: 25.580 ns/op
# Warmup Iteration   2: 144.945 ns/op
# Warmup Iteration   3: 18.935 ns/op
Iteration   1: 18.984 ns/op
Iteration   2: 18.976 ns/op
Iteration   3: 19.000 ns/op
Iteration   4: 18.832 ns/op
Iteration   5: 18.845 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.093 ±(99.9%) 0.529 ns/op [Average]
  (min, avg, max) = (18.832, 19.093, 19.758), stdev = 0.350
  CI (99.9%): [18.565, 19.622] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 95.90% complete, ETA 00:02:24
# Fork: 1 of 2
# Warmup Iteration   1: 271.815 ns/op
# Warmup Iteration   2: 483.147 ns/op
# Warmup Iteration   3: 141.819 ns/op
Iteration   1: 141.770 ns/op
Iteration   2: 141.787 ns/op
Iteration   3: 141.866 ns/op
Iteration   4: 142.733 ns/op
Iteration   5: 142.671 ns/op

# Run progress: 95.94% complete, ETA 00:02:23
# Fork: 2 of 2
# Warmup Iteration   1: 264.755 ns/op
# Warmup Iteration   2: 496.416 ns/op
# Warmup Iteration   3: 141.889 ns/op
Iteration   1: 141.845 ns/op
Iteration   2: 141.957 ns/op
Iteration   3: 142.149 ns/op
Iteration   4: 142.967 ns/op
Iteration   5: 142.641 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  142.239 ±(99.9%) 0.700 ns/op [Average]
  (min, avg, max) = (141.770, 142.239, 142.967), stdev = 0.463
  CI (99.9%): [141.539, 142.938] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 95.97% complete, ETA 00:02:21
# Fork: 1 of 2
# Warmup Iteration   1: 459.643 ns/op
# Warmup Iteration   2: 536.247 ns/op
# Warmup Iteration   3: 163.334 ns/op
Iteration   1: 163.430 ns/op
Iteration   2: 163.434 ns/op
Iteration   3: 163.489 ns/op
Iteration   4: 164.193 ns/op
Iteration   5: 164.258 ns/op

# Run progress: 96.01% complete, ETA 00:02:20
# Fork: 2 of 2
# Warmup Iteration   1: 490.281 ns/op
# Warmup Iteration   2: 490.584 ns/op
# Warmup Iteration   3: 164.085 ns/op
Iteration   1: 164.164 ns/op
Iteration   2: 164.179 ns/op
Iteration   3: 164.254 ns/op
Iteration   4: 164.729 ns/op
Iteration   5: 164.760 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  164.089 ±(99.9%) 0.741 ns/op [Average]
  (min, avg, max) = (163.430, 164.089, 164.760), stdev = 0.490
  CI (99.9%): [163.348, 164.831] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 96.04% complete, ETA 00:02:19
# Fork: 1 of 2
# Warmup Iteration   1: 601.192 ns/op
# Warmup Iteration   2: 686.588 ns/op
# Warmup Iteration   3: 210.863 ns/op
Iteration   1: 210.979 ns/op
Iteration   2: 210.967 ns/op
Iteration   3: 211.072 ns/op
Iteration   4: 211.586 ns/op
Iteration   5: 211.611 ns/op

# Run progress: 96.08% complete, ETA 00:02:18
# Fork: 2 of 2
# Warmup Iteration   1: 598.272 ns/op
# Warmup Iteration   2: 699.763 ns/op
# Warmup Iteration   3: 216.546 ns/op
Iteration   1: 216.659 ns/op
Iteration   2: 216.595 ns/op
Iteration   3: 216.613 ns/op
Iteration   4: 216.871 ns/op
Iteration   5: 216.858 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  213.981 ±(99.9%) 4.378 ns/op [Average]
  (min, avg, max) = (210.967, 213.981, 216.871), stdev = 2.896
  CI (99.9%): [209.603, 218.359] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 96.11% complete, ETA 00:02:17
# Fork: 1 of 2
# Warmup Iteration   1: 104.046 ns/op
# Warmup Iteration   2: 296.382 ns/op
# Warmup Iteration   3: 73.744 ns/op
Iteration   1: 73.741 ns/op
Iteration   2: 73.737 ns/op
Iteration   3: 73.765 ns/op
Iteration   4: 74.447 ns/op
Iteration   5: 74.539 ns/op

# Run progress: 96.15% complete, ETA 00:02:15
# Fork: 2 of 2
# Warmup Iteration   1: 104.759 ns/op
# Warmup Iteration   2: 290.658 ns/op
# Warmup Iteration   3: 74.189 ns/op
Iteration   1: 74.176 ns/op
Iteration   2: 74.213 ns/op
Iteration   3: 74.251 ns/op
Iteration   4: 74.863 ns/op
Iteration   5: 74.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.261 ±(99.9%) 0.648 ns/op [Average]
  (min, avg, max) = (73.737, 74.261, 74.878), stdev = 0.429
  CI (99.9%): [73.613, 74.909] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 96.18% complete, ETA 00:02:14
# Fork: 1 of 2
# Warmup Iteration   1: 243.731 ns/op
# Warmup Iteration   2: 518.070 ns/op
# Warmup Iteration   3: 138.981 ns/op
Iteration   1: 140.043 ns/op
Iteration   2: 139.530 ns/op
Iteration   3: 140.011 ns/op
Iteration   4: 139.789 ns/op
Iteration   5: 140.070 ns/op

# Run progress: 96.22% complete, ETA 00:02:13
# Fork: 2 of 2
# Warmup Iteration   1: 250.505 ns/op
# Warmup Iteration   2: 475.805 ns/op
# Warmup Iteration   3: 139.189 ns/op
Iteration   1: 139.583 ns/op
Iteration   2: 139.262 ns/op
Iteration   3: 139.035 ns/op
Iteration   4: 140.039 ns/op
Iteration   5: 139.639 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.700 ±(99.9%) 0.542 ns/op [Average]
  (min, avg, max) = (139.035, 139.700, 140.070), stdev = 0.358
  CI (99.9%): [139.158, 140.242] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 96.25% complete, ETA 00:02:12
# Fork: 1 of 2
# Warmup Iteration   1: 24.245 ns/op
# Warmup Iteration   2: 116.477 ns/op
# Warmup Iteration   3: 18.917 ns/op
Iteration   1: 18.939 ns/op
Iteration   2: 18.948 ns/op
Iteration   3: 18.931 ns/op
Iteration   4: 18.841 ns/op
Iteration   5: 18.810 ns/op

# Run progress: 96.28% complete, ETA 00:02:10
# Fork: 2 of 2
# Warmup Iteration   1: 25.380 ns/op
# Warmup Iteration   2: 128.479 ns/op
# Warmup Iteration   3: 18.939 ns/op
Iteration   1: 18.938 ns/op
Iteration   2: 18.946 ns/op
Iteration   3: 18.942 ns/op
Iteration   4: 18.842 ns/op
Iteration   5: 18.831 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.897 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (18.810, 18.897, 18.948), stdev = 0.058
  CI (99.9%): [18.810, 18.984] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 96.32% complete, ETA 00:02:09
# Fork: 1 of 2
# Warmup Iteration   1: 257.585 ns/op
# Warmup Iteration   2: 453.889 ns/op
# Warmup Iteration   3: 138.795 ns/op
Iteration   1: 138.767 ns/op
Iteration   2: 138.976 ns/op
Iteration   3: 138.907 ns/op
Iteration   4: 139.348 ns/op
Iteration   5: 139.274 ns/op

# Run progress: 96.35% complete, ETA 00:02:08
# Fork: 2 of 2
# Warmup Iteration   1: 253.037 ns/op
# Warmup Iteration   2: 438.142 ns/op
# Warmup Iteration   3: 138.948 ns/op
Iteration   1: 138.746 ns/op
Iteration   2: 138.897 ns/op
Iteration   3: 138.843 ns/op
Iteration   4: 139.346 ns/op
Iteration   5: 139.266 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.037 ±(99.9%) 0.369 ns/op [Average]
  (min, avg, max) = (138.746, 139.037, 139.348), stdev = 0.244
  CI (99.9%): [138.668, 139.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 96.39% complete, ETA 00:02:07
# Fork: 1 of 2
# Warmup Iteration   1: 487.718 ns/op
# Warmup Iteration   2: 472.921 ns/op
# Warmup Iteration   3: 162.908 ns/op
Iteration   1: 162.581 ns/op
Iteration   2: 162.649 ns/op
Iteration   3: 162.650 ns/op
Iteration   4: 163.250 ns/op
Iteration   5: 163.315 ns/op

# Run progress: 96.42% complete, ETA 00:02:05
# Fork: 2 of 2
# Warmup Iteration   1: 411.709 ns/op
# Warmup Iteration   2: 537.269 ns/op
# Warmup Iteration   3: 167.463 ns/op
Iteration   1: 167.617 ns/op
Iteration   2: 167.611 ns/op
Iteration   3: 167.488 ns/op
Iteration   4: 168.237 ns/op
Iteration   5: 168.174 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  165.357 ±(99.9%) 3.966 ns/op [Average]
  (min, avg, max) = (162.581, 165.357, 168.237), stdev = 2.623
  CI (99.9%): [161.391, 169.323] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 96.46% complete, ETA 00:02:04
# Fork: 1 of 2
# Warmup Iteration   1: 620.485 ns/op
# Warmup Iteration   2: 727.175 ns/op
# Warmup Iteration   3: 220.904 ns/op
Iteration   1: 221.037 ns/op
Iteration   2: 221.080 ns/op
Iteration   3: 220.931 ns/op
Iteration   4: 221.830 ns/op
Iteration   5: 221.861 ns/op

# Run progress: 96.49% complete, ETA 00:02:03
# Fork: 2 of 2
# Warmup Iteration   1: 2293.911 ns/op
# Warmup Iteration   2: 577.795 ns/op
# Warmup Iteration   3: 229.670 ns/op
Iteration   1: 220.992 ns/op
Iteration   2: 221.099 ns/op
Iteration   3: 220.953 ns/op
Iteration   4: 221.793 ns/op
Iteration   5: 221.634 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  221.321 ±(99.9%) 0.608 ns/op [Average]
  (min, avg, max) = (220.931, 221.321, 221.861), stdev = 0.402
  CI (99.9%): [220.713, 221.929] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 96.53% complete, ETA 00:02:02
# Fork: 1 of 2
# Warmup Iteration   1: 105.463 ns/op
# Warmup Iteration   2: 268.764 ns/op
# Warmup Iteration   3: 73.726 ns/op
Iteration   1: 73.714 ns/op
Iteration   2: 73.781 ns/op
Iteration   3: 73.744 ns/op
Iteration   4: 74.440 ns/op
Iteration   5: 74.497 ns/op

# Run progress: 96.56% complete, ETA 00:02:01
# Fork: 2 of 2
# Warmup Iteration   1: 103.881 ns/op
# Warmup Iteration   2: 277.664 ns/op
# Warmup Iteration   3: 73.717 ns/op
Iteration   1: 73.749 ns/op
Iteration   2: 73.755 ns/op
Iteration   3: 73.745 ns/op
Iteration   4: 74.562 ns/op
Iteration   5: 74.616 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.060 ±(99.9%) 0.614 ns/op [Average]
  (min, avg, max) = (73.714, 74.060, 74.616), stdev = 0.406
  CI (99.9%): [73.447, 74.674] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 96.60% complete, ETA 00:01:59
# Fork: 1 of 2
# Warmup Iteration   1: 232.538 ns/op
# Warmup Iteration   2: 459.779 ns/op
# Warmup Iteration   3: 142.295 ns/op
Iteration   1: 140.939 ns/op
Iteration   2: 141.742 ns/op
Iteration   3: 140.936 ns/op
Iteration   4: 141.518 ns/op
Iteration   5: 141.558 ns/op

# Run progress: 96.63% complete, ETA 00:01:58
# Fork: 2 of 2
# Warmup Iteration   1: 235.123 ns/op
# Warmup Iteration   2: 512.052 ns/op
# Warmup Iteration   3: 140.239 ns/op
Iteration   1: 140.724 ns/op
Iteration   2: 140.791 ns/op
Iteration   3: 140.851 ns/op
Iteration   4: 140.526 ns/op
Iteration   5: 140.606 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.019 ±(99.9%) 0.649 ns/op [Average]
  (min, avg, max) = (140.526, 141.019, 141.742), stdev = 0.429
  CI (99.9%): [140.371, 141.668] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 96.67% complete, ETA 00:01:57
# Fork: 1 of 2
# Warmup Iteration   1: 24.465 ns/op
# Warmup Iteration   2: 135.659 ns/op
# Warmup Iteration   3: 18.948 ns/op
Iteration   1: 18.943 ns/op
Iteration   2: 18.969 ns/op
Iteration   3: 18.946 ns/op
Iteration   4: 18.858 ns/op
Iteration   5: 18.864 ns/op

# Run progress: 96.70% complete, ETA 00:01:56
# Fork: 2 of 2
# Warmup Iteration   1: 25.389 ns/op
# Warmup Iteration   2: 142.420 ns/op
# Warmup Iteration   3: 18.926 ns/op
Iteration   1: 18.934 ns/op
Iteration   2: 18.966 ns/op
Iteration   3: 18.938 ns/op
Iteration   4: 18.822 ns/op
Iteration   5: 18.824 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.906 ±(99.9%) 0.088 ns/op [Average]
  (min, avg, max) = (18.822, 18.906, 18.969), stdev = 0.058
  CI (99.9%): [18.819, 18.994] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 96.74% complete, ETA 00:01:54
# Fork: 1 of 2
# Warmup Iteration   1: 287.898 ns/op
# Warmup Iteration   2: 496.905 ns/op
# Warmup Iteration   3: 149.317 ns/op
Iteration   1: 150.391 ns/op
Iteration   2: 149.918 ns/op
Iteration   3: 150.619 ns/op
Iteration   4: 147.176 ns/op
Iteration   5: 150.644 ns/op

# Run progress: 96.77% complete, ETA 00:01:53
# Fork: 2 of 2
# Warmup Iteration   1: 277.285 ns/op
# Warmup Iteration   2: 502.446 ns/op
# Warmup Iteration   3: 146.612 ns/op
Iteration   1: 146.694 ns/op
Iteration   2: 146.628 ns/op
Iteration   3: 146.669 ns/op
Iteration   4: 147.121 ns/op
Iteration   5: 147.155 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  148.301 ±(99.9%) 2.754 ns/op [Average]
  (min, avg, max) = (146.628, 148.301, 150.644), stdev = 1.822
  CI (99.9%): [145.547, 151.055] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 96.81% complete, ETA 00:01:52
# Fork: 1 of 2
# Warmup Iteration   1: 426.506 ns/op
# Warmup Iteration   2: 574.597 ns/op
# Warmup Iteration   3: 169.475 ns/op
Iteration   1: 168.780 ns/op
Iteration   2: 169.142 ns/op
Iteration   3: 169.041 ns/op
Iteration   4: 169.497 ns/op
Iteration   5: 169.586 ns/op

# Run progress: 96.84% complete, ETA 00:01:51
# Fork: 2 of 2
# Warmup Iteration   1: 494.423 ns/op
# Warmup Iteration   2: 518.871 ns/op
# Warmup Iteration   3: 168.800 ns/op
Iteration   1: 168.574 ns/op
Iteration   2: 168.796 ns/op
Iteration   3: 168.600 ns/op
Iteration   4: 169.284 ns/op
Iteration   5: 169.058 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  169.036 ±(99.9%) 0.532 ns/op [Average]
  (min, avg, max) = (168.574, 169.036, 169.586), stdev = 0.352
  CI (99.9%): [168.504, 169.567] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 96.88% complete, ETA 00:01:50
# Fork: 1 of 2
# Warmup Iteration   1: 662.108 ns/op
# Warmup Iteration   2: 763.982 ns/op
# Warmup Iteration   3: 234.753 ns/op
Iteration   1: 235.724 ns/op
Iteration   2: 234.942 ns/op
Iteration   3: 234.476 ns/op
Iteration   4: 234.395 ns/op
Iteration   5: 233.849 ns/op

# Run progress: 96.91% complete, ETA 00:01:48
# Fork: 2 of 2
# Warmup Iteration   1: 639.080 ns/op
# Warmup Iteration   2: 728.357 ns/op
# Warmup Iteration   3: 237.272 ns/op
Iteration   1: 236.622 ns/op
Iteration   2: 236.723 ns/op
Iteration   3: 237.195 ns/op
Iteration   4: 236.074 ns/op
Iteration   5: 237.766 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  235.777 ±(99.9%) 1.996 ns/op [Average]
  (min, avg, max) = (233.849, 235.777, 237.766), stdev = 1.320
  CI (99.9%): [233.781, 237.772] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 96.94% complete, ETA 00:01:47
# Fork: 1 of 2
# Warmup Iteration   1: 104.295 ns/op
# Warmup Iteration   2: 282.388 ns/op
# Warmup Iteration   3: 73.764 ns/op
Iteration   1: 73.783 ns/op
Iteration   2: 73.768 ns/op
Iteration   3: 73.750 ns/op
Iteration   4: 74.403 ns/op
Iteration   5: 74.483 ns/op

# Run progress: 96.98% complete, ETA 00:01:46
# Fork: 2 of 2
# Warmup Iteration   1: 104.067 ns/op
# Warmup Iteration   2: 294.158 ns/op
# Warmup Iteration   3: 73.715 ns/op
Iteration   1: 73.736 ns/op
Iteration   2: 73.757 ns/op
Iteration   3: 73.753 ns/op
Iteration   4: 74.513 ns/op
Iteration   5: 74.484 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.043 ±(99.9%) 0.558 ns/op [Average]
  (min, avg, max) = (73.736, 74.043, 74.513), stdev = 0.369
  CI (99.9%): [73.485, 74.601] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 97.01% complete, ETA 00:01:45
# Fork: 1 of 2
# Warmup Iteration   1: 219.159 ns/op
# Warmup Iteration   2: 405.914 ns/op
# Warmup Iteration   3: 119.041 ns/op
Iteration   1: 118.680 ns/op
Iteration   2: 119.783 ns/op
Iteration   3: 119.393 ns/op
Iteration   4: 119.689 ns/op
Iteration   5: 119.296 ns/op

# Run progress: 97.05% complete, ETA 00:01:43
# Fork: 2 of 2
# Warmup Iteration   1: 213.300 ns/op
# Warmup Iteration   2: 429.253 ns/op
# Warmup Iteration   3: 119.411 ns/op
Iteration   1: 119.519 ns/op
Iteration   2: 119.598 ns/op
Iteration   3: 118.442 ns/op
Iteration   4: 118.663 ns/op
Iteration   5: 118.314 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  119.138 ±(99.9%) 0.838 ns/op [Average]
  (min, avg, max) = (118.314, 119.138, 119.783), stdev = 0.554
  CI (99.9%): [118.300, 119.976] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 97.08% complete, ETA 00:01:42
# Fork: 1 of 2
# Warmup Iteration   1: 23.375 ns/op
# Warmup Iteration   2: 30.533 ns/op
# Warmup Iteration   3: 18.945 ns/op
Iteration   1: 18.995 ns/op
Iteration   2: 18.974 ns/op
Iteration   3: 19.813 ns/op
Iteration   4: 18.861 ns/op
Iteration   5: 18.835 ns/op

# Run progress: 97.12% complete, ETA 00:01:41
# Fork: 2 of 2
# Warmup Iteration   1: 26.129 ns/op
# Warmup Iteration   2: 29.866 ns/op
# Warmup Iteration   3: 18.919 ns/op
Iteration   1: 18.973 ns/op
Iteration   2: 18.951 ns/op
Iteration   3: 21.373 ns/op
Iteration   4: 18.854 ns/op
Iteration   5: 18.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.246 ±(99.9%) 1.212 ns/op [Average]
  (min, avg, max) = (18.834, 19.246, 21.373), stdev = 0.802
  CI (99.9%): [18.034, 20.458] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 97.15% complete, ETA 00:01:40
# Fork: 1 of 2
# Warmup Iteration   1: 245.440 ns/op
# Warmup Iteration   2: 199.792 ns/op
# Warmup Iteration   3: 137.746 ns/op
Iteration   1: 137.783 ns/op
Iteration   2: 137.705 ns/op
Iteration   3: 143.704 ns/op
Iteration   4: 138.481 ns/op
Iteration   5: 138.438 ns/op

# Run progress: 97.19% complete, ETA 00:01:39
# Fork: 2 of 2
# Warmup Iteration   1: 220.342 ns/op
# Warmup Iteration   2: 180.396 ns/op
# Warmup Iteration   3: 138.853 ns/op
Iteration   1: 138.916 ns/op
Iteration   2: 138.800 ns/op
Iteration   3: 144.847 ns/op
Iteration   4: 138.668 ns/op
Iteration   5: 138.885 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.623 ±(99.9%) 3.783 ns/op [Average]
  (min, avg, max) = (137.705, 139.623, 144.847), stdev = 2.502
  CI (99.9%): [135.840, 143.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 97.22% complete, ETA 00:01:37
# Fork: 1 of 2
# Warmup Iteration   1: 354.136 ns/op
# Warmup Iteration   2: 235.966 ns/op
# Warmup Iteration   3: 159.679 ns/op
Iteration   1: 159.681 ns/op
Iteration   2: 159.978 ns/op
Iteration   3: 175.735 ns/op
Iteration   4: 160.068 ns/op
Iteration   5: 160.029 ns/op

# Run progress: 97.26% complete, ETA 00:01:36
# Fork: 2 of 2
# Warmup Iteration   1: 382.720 ns/op
# Warmup Iteration   2: 224.972 ns/op
# Warmup Iteration   3: 159.598 ns/op
Iteration   1: 159.588 ns/op
Iteration   2: 159.659 ns/op
Iteration   3: 166.527 ns/op
Iteration   4: 160.006 ns/op
Iteration   5: 160.052 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.132 ±(99.9%) 7.890 ns/op [Average]
  (min, avg, max) = (159.588, 162.132, 175.735), stdev = 5.219
  CI (99.9%): [154.242, 170.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 97.29% complete, ETA 00:01:35
# Fork: 1 of 2
# Warmup Iteration   1: 534.550 ns/op
# Warmup Iteration   2: 302.391 ns/op
# Warmup Iteration   3: 204.850 ns/op
Iteration   1: 204.681 ns/op
Iteration   2: 204.673 ns/op
Iteration   3: 218.994 ns/op
Iteration   4: 205.642 ns/op
Iteration   5: 205.640 ns/op

# Run progress: 97.33% complete, ETA 00:01:34
# Fork: 2 of 2
# Warmup Iteration   1: 487.749 ns/op
# Warmup Iteration   2: 274.005 ns/op
# Warmup Iteration   3: 204.822 ns/op
Iteration   1: 205.042 ns/op
Iteration   2: 204.631 ns/op
Iteration   3: 214.227 ns/op
Iteration   4: 205.244 ns/op
Iteration   5: 205.174 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  207.395 ±(99.9%) 7.557 ns/op [Average]
  (min, avg, max) = (204.631, 207.395, 218.994), stdev = 4.999
  CI (99.9%): [199.837, 214.952] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 97.36% complete, ETA 00:01:32
# Fork: 1 of 2
# Warmup Iteration   1: 105.362 ns/op
# Warmup Iteration   2: 107.383 ns/op
# Warmup Iteration   3: 73.732 ns/op
Iteration   1: 73.816 ns/op
Iteration   2: 73.834 ns/op
Iteration   3: 77.556 ns/op
Iteration   4: 74.549 ns/op
Iteration   5: 74.446 ns/op

# Run progress: 97.40% complete, ETA 00:01:31
# Fork: 2 of 2
# Warmup Iteration   1: 102.288 ns/op
# Warmup Iteration   2: 116.584 ns/op
# Warmup Iteration   3: 73.734 ns/op
Iteration   1: 73.801 ns/op
Iteration   2: 73.710 ns/op
Iteration   3: 77.469 ns/op
Iteration   4: 74.483 ns/op
Iteration   5: 74.503 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.817 ±(99.9%) 2.207 ns/op [Average]
  (min, avg, max) = (73.710, 74.817, 77.556), stdev = 1.460
  CI (99.9%): [72.610, 77.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 97.43% complete, ETA 00:01:30
# Fork: 1 of 2
# Warmup Iteration   1: 217.781 ns/op
# Warmup Iteration   2: 219.222 ns/op
# Warmup Iteration   3: 131.068 ns/op
Iteration   1: 131.861 ns/op
Iteration   2: 131.727 ns/op
Iteration   3: 137.823 ns/op
Iteration   4: 131.946 ns/op
Iteration   5: 131.708 ns/op

# Run progress: 97.47% complete, ETA 00:01:29
# Fork: 2 of 2
# Warmup Iteration   1: 217.770 ns/op
# Warmup Iteration   2: 228.977 ns/op
# Warmup Iteration   3: 131.436 ns/op
Iteration   1: 131.880 ns/op
Iteration   2: 131.567 ns/op
Iteration   3: 137.427 ns/op
Iteration   4: 131.596 ns/op
Iteration   5: 131.613 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  132.915 ±(99.9%) 3.761 ns/op [Average]
  (min, avg, max) = (131.567, 132.915, 137.823), stdev = 2.488
  CI (99.9%): [129.154, 136.676] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 97.50% complete, ETA 00:01:28
# Fork: 1 of 2
# Warmup Iteration   1: 25.884 ns/op
# Warmup Iteration   2: 31.287 ns/op
# Warmup Iteration   3: 18.975 ns/op
Iteration   1: 33.455 ns/op
Iteration   2: 18.952 ns/op
Iteration   3: 18.992 ns/op
Iteration   4: 18.848 ns/op
Iteration   5: 18.830 ns/op

# Run progress: 97.53% complete, ETA 00:01:26
# Fork: 2 of 2
# Warmup Iteration   1: 25.488 ns/op
# Warmup Iteration   2: 30.180 ns/op
# Warmup Iteration   3: 18.937 ns/op
Iteration   1: 33.046 ns/op
Iteration   2: 18.963 ns/op
Iteration   3: 18.968 ns/op
Iteration   4: 18.812 ns/op
Iteration   5: 18.836 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  21.770 ±(99.9%) 9.149 ns/op [Average]
  (min, avg, max) = (18.812, 21.770, 33.455), stdev = 6.052
  CI (99.9%): [12.621, 30.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 97.57% complete, ETA 00:01:25
# Fork: 1 of 2
# Warmup Iteration   1: 221.762 ns/op
# Warmup Iteration   2: 184.061 ns/op
# Warmup Iteration   3: 137.308 ns/op
Iteration   1: 240.085 ns/op
Iteration   2: 137.500 ns/op
Iteration   3: 137.360 ns/op
Iteration   4: 138.139 ns/op
Iteration   5: 138.088 ns/op

# Run progress: 97.60% complete, ETA 00:01:24
# Fork: 2 of 2
# Warmup Iteration   1: 249.834 ns/op
# Warmup Iteration   2: 196.293 ns/op
# Warmup Iteration   3: 137.339 ns/op
Iteration   1: 238.813 ns/op
Iteration   2: 137.417 ns/op
Iteration   3: 137.321 ns/op
Iteration   4: 138.143 ns/op
Iteration   5: 138.332 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  158.120 ±(99.9%) 64.809 ns/op [Average]
  (min, avg, max) = (137.321, 158.120, 240.085), stdev = 42.867
  CI (99.9%): [93.311, 222.928] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 97.64% complete, ETA 00:01:23
# Fork: 1 of 2
# Warmup Iteration   1: 383.021 ns/op
# Warmup Iteration   2: 215.611 ns/op
# Warmup Iteration   3: 156.160 ns/op
Iteration   1: 266.469 ns/op
Iteration   2: 156.251 ns/op
Iteration   3: 156.452 ns/op
Iteration   4: 156.770 ns/op
Iteration   5: 156.728 ns/op

# Run progress: 97.67% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: 351.601 ns/op
# Warmup Iteration   2: 215.805 ns/op
# Warmup Iteration   3: 156.162 ns/op
Iteration   1: 271.887 ns/op
Iteration   2: 157.105 ns/op
Iteration   3: 156.197 ns/op
Iteration   4: 156.711 ns/op
Iteration   5: 156.726 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  179.130 ±(99.9%) 71.779 ns/op [Average]
  (min, avg, max) = (156.197, 179.130, 271.887), stdev = 47.478
  CI (99.9%): [107.350, 250.909] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 97.71% complete, ETA 00:01:20
# Fork: 1 of 2
# Warmup Iteration   1: 492.821 ns/op
# Warmup Iteration   2: 306.448 ns/op
# Warmup Iteration   3: 204.695 ns/op
Iteration   1: 369.791 ns/op
Iteration   2: 205.013 ns/op
Iteration   3: 204.987 ns/op
Iteration   4: 205.665 ns/op
Iteration   5: 205.415 ns/op

# Run progress: 97.74% complete, ETA 00:01:19
# Fork: 2 of 2
# Warmup Iteration   1: 461.936 ns/op
# Warmup Iteration   2: 277.643 ns/op
# Warmup Iteration   3: 204.903 ns/op
Iteration   1: 359.141 ns/op
Iteration   2: 205.089 ns/op
Iteration   3: 205.124 ns/op
Iteration   4: 205.495 ns/op
Iteration   5: 206.019 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.174 ±(99.9%) 101.501 ns/op [Average]
  (min, avg, max) = (204.987, 237.174, 369.791), stdev = 67.137
  CI (99.9%): [135.673, 338.675] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 97.78% complete, ETA 00:01:18
# Fork: 1 of 2
# Warmup Iteration   1: 104.430 ns/op
# Warmup Iteration   2: 107.612 ns/op
# Warmup Iteration   3: 73.690 ns/op
Iteration   1: 129.836 ns/op
Iteration   2: 73.820 ns/op
Iteration   3: 73.896 ns/op
Iteration   4: 74.484 ns/op
Iteration   5: 74.510 ns/op

# Run progress: 97.81% complete, ETA 00:01:17
# Fork: 2 of 2
# Warmup Iteration   1: 118.816 ns/op
# Warmup Iteration   2: 120.343 ns/op
# Warmup Iteration   3: 74.195 ns/op
Iteration   1: 128.976 ns/op
Iteration   2: 74.230 ns/op
Iteration   3: 74.236 ns/op
Iteration   4: 74.851 ns/op
Iteration   5: 74.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  85.372 ±(99.9%) 35.092 ns/op [Average]
  (min, avg, max) = (73.820, 85.372, 129.836), stdev = 23.211
  CI (99.9%): [50.279, 120.464] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 97.85% complete, ETA 00:01:15
# Fork: 1 of 2
# Warmup Iteration   1: 194.435 ns/op
# Warmup Iteration   2: 201.272 ns/op
# Warmup Iteration   3: 111.742 ns/op
Iteration   1: 193.431 ns/op
Iteration   2: 111.308 ns/op
Iteration   3: 111.397 ns/op
Iteration   4: 112.054 ns/op
Iteration   5: 112.358 ns/op

# Run progress: 97.88% complete, ETA 00:01:14
# Fork: 2 of 2
# Warmup Iteration   1: 191.575 ns/op
# Warmup Iteration   2: 198.953 ns/op
# Warmup Iteration   3: 111.907 ns/op
Iteration   1: 196.205 ns/op
Iteration   2: 111.542 ns/op
Iteration   3: 112.696 ns/op
Iteration   4: 112.109 ns/op
Iteration   5: 112.310 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  128.541 ±(99.9%) 52.824 ns/op [Average]
  (min, avg, max) = (111.308, 128.541, 196.205), stdev = 34.940
  CI (99.9%): [75.716, 181.365] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 97.92% complete, ETA 00:01:13
# Fork: 1 of 2
# Warmup Iteration   1: 24.276 ns/op
# Warmup Iteration   2: 26.687 ns/op
# Warmup Iteration   3: 19.107 ns/op
Iteration   1: 19.018 ns/op
Iteration   2: 18.985 ns/op
Iteration   3: 18.957 ns/op
Iteration   4: 19.599 ns/op
Iteration   5: 19.540 ns/op

# Run progress: 97.95% complete, ETA 00:01:12
# Fork: 2 of 2
# Warmup Iteration   1: 23.261 ns/op
# Warmup Iteration   2: 28.484 ns/op
# Warmup Iteration   3: 19.006 ns/op
Iteration   1: 19.029 ns/op
Iteration   2: 18.966 ns/op
Iteration   3: 18.966 ns/op
Iteration   4: 18.839 ns/op
Iteration   5: 18.851 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.075 ±(99.9%) 0.406 ns/op [Average]
  (min, avg, max) = (18.839, 19.075, 19.599), stdev = 0.268
  CI (99.9%): [18.669, 19.481] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 97.99% complete, ETA 00:01:10
# Fork: 1 of 2
# Warmup Iteration   1: 5479.892 ns/op
# Warmup Iteration   2: 1325.942 ns/op
# Warmup Iteration   3: 980.581 ns/op
Iteration   1: 979.592 ns/op
Iteration   2: 975.740 ns/op
Iteration   3: 974.142 ns/op
Iteration   4: 975.463 ns/op
Iteration   5: 975.156 ns/op

# Run progress: 98.02% complete, ETA 00:01:09
# Fork: 2 of 2
# Warmup Iteration   1: 3559.557 ns/op
# Warmup Iteration   2: 1256.683 ns/op
# Warmup Iteration   3: 976.768 ns/op
Iteration   1: 977.846 ns/op
Iteration   2: 976.724 ns/op
Iteration   3: 977.691 ns/op
Iteration   4: 977.745 ns/op
Iteration   5: 976.623 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  976.672 ±(99.9%) 2.424 ns/op [Average]
  (min, avg, max) = (974.142, 976.672, 979.592), stdev = 1.603
  CI (99.9%): [974.248, 979.096] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 98.06% complete, ETA 00:01:08
# Fork: 1 of 2
# Warmup Iteration   1: 14237.436 ns/op
# Warmup Iteration   2: 1498.574 ns/op
# Warmup Iteration   3: 1226.701 ns/op
Iteration   1: 1114.458 ns/op
Iteration   2: 1114.385 ns/op
Iteration   3: 1113.774 ns/op
Iteration   4: 1114.561 ns/op
Iteration   5: 1114.880 ns/op

# Run progress: 98.09% complete, ETA 00:01:07
# Fork: 2 of 2
# Warmup Iteration   1: 13453.740 ns/op
# Warmup Iteration   2: 1471.654 ns/op
# Warmup Iteration   3: 1202.678 ns/op
Iteration   1: 1094.722 ns/op
Iteration   2: 1094.188 ns/op
Iteration   3: 1093.825 ns/op
Iteration   4: 1094.476 ns/op
Iteration   5: 1094.648 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1104.392 ±(99.9%) 15.977 ns/op [Average]
  (min, avg, max) = (1093.825, 1104.392, 1114.880), stdev = 10.568
  CI (99.9%): [1088.414, 1120.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 98.13% complete, ETA 00:01:06
# Fork: 1 of 2
# Warmup Iteration   1: 7767.147 ns/op
# Warmup Iteration   2: 1686.674 ns/op
# Warmup Iteration   3: 1093.122 ns/op
Iteration   1: 1090.135 ns/op
Iteration   2: 1090.767 ns/op
Iteration   3: 1091.361 ns/op
Iteration   4: 1091.841 ns/op
Iteration   5: 1092.036 ns/op

# Run progress: 98.16% complete, ETA 00:01:04
# Fork: 2 of 2
# Warmup Iteration   1: 7801.067 ns/op
# Warmup Iteration   2: 1568.116 ns/op
# Warmup Iteration   3: 1090.077 ns/op
Iteration   1: 1081.440 ns/op
Iteration   2: 1081.486 ns/op
Iteration   3: 1080.803 ns/op
Iteration   4: 1081.165 ns/op
Iteration   5: 1090.301 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1087.133 ±(99.9%) 7.747 ns/op [Average]
  (min, avg, max) = (1080.803, 1087.133, 1092.036), stdev = 5.124
  CI (99.9%): [1079.386, 1094.881] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 98.19% complete, ETA 00:01:03
# Fork: 1 of 2
# Warmup Iteration   1: 2002.373 ns/op
# Warmup Iteration   2: 1339.389 ns/op
# Warmup Iteration   3: 1015.805 ns/op
Iteration   1: 1015.522 ns/op
Iteration   2: 1018.494 ns/op
Iteration   3: 1016.179 ns/op
Iteration   4: 1016.367 ns/op
Iteration   5: 1017.440 ns/op

# Run progress: 98.23% complete, ETA 00:01:02
# Fork: 2 of 2
# Warmup Iteration   1: 2015.355 ns/op
# Warmup Iteration   2: 1348.638 ns/op
# Warmup Iteration   3: 1014.647 ns/op
Iteration   1: 1017.101 ns/op
Iteration   2: 1015.101 ns/op
Iteration   3: 1026.565 ns/op
Iteration   4: 1014.245 ns/op
Iteration   5: 1024.259 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1018.127 ±(99.9%) 6.138 ns/op [Average]
  (min, avg, max) = (1014.245, 1018.127, 1026.565), stdev = 4.060
  CI (99.9%): [1011.989, 1024.266] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 98.26% complete, ETA 00:01:01
# Fork: 1 of 2
# Warmup Iteration   1: 8924.932 ns/op
# Warmup Iteration   2: 5178.112 ns/op
# Warmup Iteration   3: 3671.804 ns/op
Iteration   1: 3668.902 ns/op
Iteration   2: 3658.892 ns/op
Iteration   3: 3663.996 ns/op
Iteration   4: 3633.894 ns/op
Iteration   5: 3637.098 ns/op

# Run progress: 98.30% complete, ETA 00:00:59
# Fork: 2 of 2
# Warmup Iteration   1: 11727.226 ns/op
# Warmup Iteration   2: 5395.404 ns/op
# Warmup Iteration   3: 4330.800 ns/op
Iteration   1: 3913.985 ns/op
Iteration   2: 3905.915 ns/op
Iteration   3: 3913.205 ns/op
Iteration   4: 3898.415 ns/op
Iteration   5: 3897.890 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3779.219 ±(99.9%) 202.648 ns/op [Average]
  (min, avg, max) = (3633.894, 3779.219, 3913.985), stdev = 134.039
  CI (99.9%): [3576.571, 3981.867] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 98.33% complete, ETA 00:00:58
# Fork: 1 of 2
# Warmup Iteration   1: 25.582 ns/op
# Warmup Iteration   2: 30.745 ns/op
# Warmup Iteration   3: 19.005 ns/op
Iteration   1: 18.995 ns/op
Iteration   2: 18.942 ns/op
Iteration   3: 18.949 ns/op
Iteration   4: 18.837 ns/op
Iteration   5: 18.860 ns/op

# Run progress: 98.37% complete, ETA 00:00:57
# Fork: 2 of 2
# Warmup Iteration   1: 24.779 ns/op
# Warmup Iteration   2: 29.756 ns/op
# Warmup Iteration   3: 19.028 ns/op
Iteration   1: 18.996 ns/op
Iteration   2: 18.955 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.833 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.915 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (18.829, 18.915, 18.996), stdev = 0.068
  CI (99.9%): [18.813, 19.018] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 98.40% complete, ETA 00:00:56
# Fork: 1 of 2
# Warmup Iteration   1: 2426.658 ns/op
# Warmup Iteration   2: 1200.113 ns/op
# Warmup Iteration   3: 834.544 ns/op
Iteration   1: 834.809 ns/op
Iteration   2: 834.982 ns/op
Iteration   3: 834.983 ns/op
Iteration   4: 834.561 ns/op
Iteration   5: 834.511 ns/op

# Run progress: 98.44% complete, ETA 00:00:55
# Fork: 2 of 2
# Warmup Iteration   1: 2236.531 ns/op
# Warmup Iteration   2: 1211.468 ns/op
# Warmup Iteration   3: 834.646 ns/op
Iteration   1: 835.008 ns/op
Iteration   2: 835.036 ns/op
Iteration   3: 834.970 ns/op
Iteration   4: 835.190 ns/op
Iteration   5: 835.304 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  834.935 ±(99.9%) 0.377 ns/op [Average]
  (min, avg, max) = (834.511, 834.935, 835.304), stdev = 0.249
  CI (99.9%): [834.559, 835.312] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 98.47% complete, ETA 00:00:53
# Fork: 1 of 2
# Warmup Iteration   1: 11155.408 ns/op
# Warmup Iteration   2: 1072.425 ns/op
# Warmup Iteration   3: 805.330 ns/op
Iteration   1: 805.802 ns/op
Iteration   2: 806.633 ns/op
Iteration   3: 816.938 ns/op
Iteration   4: 806.553 ns/op
Iteration   5: 805.936 ns/op

# Run progress: 98.51% complete, ETA 00:00:52
# Fork: 2 of 2
# Warmup Iteration   1: 10907.802 ns/op
# Warmup Iteration   2: 1080.645 ns/op
# Warmup Iteration   3: 881.969 ns/op
Iteration   1: 797.309 ns/op
Iteration   2: 797.032 ns/op
Iteration   3: 796.635 ns/op
Iteration   4: 798.579 ns/op
Iteration   5: 798.111 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  802.953 ±(99.9%) 9.933 ns/op [Average]
  (min, avg, max) = (796.635, 802.953, 816.938), stdev = 6.570
  CI (99.9%): [793.020, 812.886] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 98.54% complete, ETA 00:00:51
# Fork: 1 of 2
# Warmup Iteration   1: 44127.419 ns/op
# Warmup Iteration   2: 1234.493 ns/op
# Warmup Iteration   3: 936.542 ns/op
Iteration   1: 784.371 ns/op
Iteration   2: 786.595 ns/op
Iteration   3: 784.771 ns/op
Iteration   4: 785.697 ns/op
Iteration   5: 786.711 ns/op

# Run progress: 98.58% complete, ETA 00:00:50
# Fork: 2 of 2
# Warmup Iteration   1: 23823.140 ns/op
# Warmup Iteration   2: 1121.567 ns/op
# Warmup Iteration   3: 846.729 ns/op
Iteration   1: 776.917 ns/op
Iteration   2: 777.435 ns/op
Iteration   3: 777.089 ns/op
Iteration   4: 777.355 ns/op
Iteration   5: 778.302 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  781.524 ±(99.9%) 6.649 ns/op [Average]
  (min, avg, max) = (776.917, 781.524, 786.711), stdev = 4.398
  CI (99.9%): [774.876, 788.173] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 98.61% complete, ETA 00:00:48
# Fork: 1 of 2
# Warmup Iteration   1: 1152.192 ns/op
# Warmup Iteration   2: 968.366 ns/op
# Warmup Iteration   3: 665.616 ns/op
Iteration   1: 666.434 ns/op
Iteration   2: 666.861 ns/op
Iteration   3: 666.876 ns/op
Iteration   4: 664.646 ns/op
Iteration   5: 665.166 ns/op

# Run progress: 98.65% complete, ETA 00:00:47
# Fork: 2 of 2
# Warmup Iteration   1: 1036.520 ns/op
# Warmup Iteration   2: 920.694 ns/op
# Warmup Iteration   3: 666.037 ns/op
Iteration   1: 666.738 ns/op
Iteration   2: 666.907 ns/op
Iteration   3: 666.565 ns/op
Iteration   4: 665.330 ns/op
Iteration   5: 665.983 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  666.150 ±(99.9%) 1.248 ns/op [Average]
  (min, avg, max) = (664.646, 666.150, 666.907), stdev = 0.826
  CI (99.9%): [664.902, 667.399] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 98.68% complete, ETA 00:00:46
# Fork: 1 of 2
# Warmup Iteration   1: 17943.446 ns/op
# Warmup Iteration   2: 5298.376 ns/op
# Warmup Iteration   3: 4182.614 ns/op
Iteration   1: 3793.310 ns/op
Iteration   2: 3793.208 ns/op
Iteration   3: 3794.709 ns/op
Iteration   4: 3779.027 ns/op
Iteration   5: 3781.135 ns/op

# Run progress: 98.72% complete, ETA 00:00:45
# Fork: 2 of 2
# Warmup Iteration   1: 12181.886 ns/op
# Warmup Iteration   2: 4960.667 ns/op
# Warmup Iteration   3: 3896.448 ns/op
Iteration   1: 3580.620 ns/op
Iteration   2: 3578.462 ns/op
Iteration   3: 3579.218 ns/op
Iteration   4: 3557.589 ns/op
Iteration   5: 3559.612 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3679.689 ±(99.9%) 173.603 ns/op [Average]
  (min, avg, max) = (3557.589, 3679.689, 3794.709), stdev = 114.828
  CI (99.9%): [3506.086, 3853.292] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 98.75% complete, ETA 00:00:44
# Fork: 1 of 2
# Warmup Iteration   1: 23.282 ns/op
# Warmup Iteration   2: 29.190 ns/op
# Warmup Iteration   3: 19.018 ns/op
Iteration   1: 19.020 ns/op
Iteration   2: 18.964 ns/op
Iteration   3: 18.960 ns/op
Iteration   4: 18.843 ns/op
Iteration   5: 18.856 ns/op

# Run progress: 98.78% complete, ETA 00:00:42
# Fork: 2 of 2
# Warmup Iteration   1: 24.211 ns/op
# Warmup Iteration   2: 31.418 ns/op
# Warmup Iteration   3: 19.035 ns/op
Iteration   1: 18.998 ns/op
Iteration   2: 18.952 ns/op
Iteration   3: 18.959 ns/op
Iteration   4: 18.852 ns/op
Iteration   5: 18.855 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.926 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (18.843, 18.926, 19.020), stdev = 0.067
  CI (99.9%): [18.824, 19.028] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 98.82% complete, ETA 00:00:41
# Fork: 1 of 2
# Warmup Iteration   1: 11250.979 ns/op
# Warmup Iteration   2: 1338.571 ns/op
# Warmup Iteration   3: 990.576 ns/op
Iteration   1: 987.862 ns/op
Iteration   2: 989.207 ns/op
Iteration   3: 995.186 ns/op
Iteration   4: 993.852 ns/op
Iteration   5: 988.947 ns/op

# Run progress: 98.85% complete, ETA 00:00:40
# Fork: 2 of 2
# Warmup Iteration   1: 17963.568 ns/op
# Warmup Iteration   2: 1280.109 ns/op
# Warmup Iteration   3: 1086.679 ns/op
Iteration   1: 995.343 ns/op
Iteration   2: 993.690 ns/op
Iteration   3: 992.047 ns/op
Iteration   4: 984.849 ns/op
Iteration   5: 987.017 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  990.800 ±(99.9%) 5.598 ns/op [Average]
  (min, avg, max) = (984.849, 990.800, 995.343), stdev = 3.703
  CI (99.9%): [985.201, 996.398] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 98.89% complete, ETA 00:00:39
# Fork: 1 of 2
# Warmup Iteration   1: 28306.713 ns/op
# Warmup Iteration   2: 1637.276 ns/op
# Warmup Iteration   3: 1105.197 ns/op
Iteration   1: 1004.808 ns/op
Iteration   2: 1003.776 ns/op
Iteration   3: 1003.632 ns/op
Iteration   4: 1004.507 ns/op
Iteration   5: 1005.572 ns/op

# Run progress: 98.92% complete, ETA 00:00:37
# Fork: 2 of 2
# Warmup Iteration   1: 51560.035 ns/op
# Warmup Iteration   2: 1864.908 ns/op
# Warmup Iteration   3: 1202.396 ns/op
Iteration   1: 1013.151 ns/op
Iteration   2: 1010.414 ns/op
Iteration   3: 1006.983 ns/op
Iteration   4: 1007.986 ns/op
Iteration   5: 1008.967 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1006.980 ±(99.9%) 4.758 ns/op [Average]
  (min, avg, max) = (1003.632, 1006.980, 1013.151), stdev = 3.147
  CI (99.9%): [1002.222, 1011.737] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 98.96% complete, ETA 00:00:36
# Fork: 1 of 2
# Warmup Iteration   1: 42749.411 ns/op
# Warmup Iteration   2: 1985.853 ns/op
# Warmup Iteration   3: 1201.369 ns/op
Iteration   1: 991.245 ns/op
Iteration   2: 993.597 ns/op
Iteration   3: 990.366 ns/op
Iteration   4: 991.571 ns/op
Iteration   5: 990.949 ns/op

# Run progress: 98.99% complete, ETA 00:00:35
# Fork: 2 of 2
# Warmup Iteration   1: 43145.292 ns/op
# Warmup Iteration   2: 2124.664 ns/op
# Warmup Iteration   3: 1192.749 ns/op
Iteration   1: 992.671 ns/op
Iteration   2: 991.037 ns/op
Iteration   3: 994.093 ns/op
Iteration   4: 999.668 ns/op
Iteration   5: 996.775 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  993.197 ±(99.9%) 4.510 ns/op [Average]
  (min, avg, max) = (990.366, 993.197, 999.668), stdev = 2.983
  CI (99.9%): [988.687, 997.708] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 99.03% complete, ETA 00:00:34
# Fork: 1 of 2
# Warmup Iteration   1: 1848.169 ns/op
# Warmup Iteration   2: 1374.158 ns/op
# Warmup Iteration   3: 1043.554 ns/op
Iteration   1: 1043.800 ns/op
Iteration   2: 1045.250 ns/op
Iteration   3: 1044.870 ns/op
Iteration   4: 1042.088 ns/op
Iteration   5: 1045.495 ns/op

# Run progress: 99.06% complete, ETA 00:00:33
# Fork: 2 of 2
# Warmup Iteration   1: 1719.281 ns/op
# Warmup Iteration   2: 1376.362 ns/op
# Warmup Iteration   3: 1058.379 ns/op
Iteration   1: 1059.835 ns/op
Iteration   2: 1061.543 ns/op
Iteration   3: 1062.041 ns/op
Iteration   4: 1058.227 ns/op
Iteration   5: 1058.176 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1052.133 ±(99.9%) 12.692 ns/op [Average]
  (min, avg, max) = (1042.088, 1052.133, 1062.041), stdev = 8.395
  CI (99.9%): [1039.441, 1064.824] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 99.10% complete, ETA 00:00:31
# Fork: 1 of 2
# Warmup Iteration   1: 11033.475 ns/op
# Warmup Iteration   2: 5536.714 ns/op
# Warmup Iteration   3: 3885.040 ns/op
Iteration   1: 3880.814 ns/op
Iteration   2: 3881.531 ns/op
Iteration   3: 3871.124 ns/op
Iteration   4: 3858.315 ns/op
Iteration   5: 3854.308 ns/op

# Run progress: 99.13% complete, ETA 00:00:30
# Fork: 2 of 2
# Warmup Iteration   1: 8775.395 ns/op
# Warmup Iteration   2: 4616.627 ns/op
# Warmup Iteration   3: 3644.378 ns/op
Iteration   1: 3642.222 ns/op
Iteration   2: 3645.902 ns/op
Iteration   3: 3645.155 ns/op
Iteration   4: 3623.431 ns/op
Iteration   5: 3618.535 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3752.134 ±(99.9%) 187.480 ns/op [Average]
  (min, avg, max) = (3618.535, 3752.134, 3881.531), stdev = 124.006
  CI (99.9%): [3564.654, 3939.613] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 99.17% complete, ETA 00:00:29
# Fork: 1 of 2
# Warmup Iteration   1: 23.541 ns/op
# Warmup Iteration   2: 26.416 ns/op
# Warmup Iteration   3: 19.028 ns/op
Iteration   1: 19.015 ns/op
Iteration   2: 18.985 ns/op
Iteration   3: 18.944 ns/op
Iteration   4: 18.828 ns/op
Iteration   5: 18.839 ns/op

# Run progress: 99.20% complete, ETA 00:00:28
# Fork: 2 of 2
# Warmup Iteration   1: 24.626 ns/op
# Warmup Iteration   2: 30.676 ns/op
# Warmup Iteration   3: 19.011 ns/op
Iteration   1: 18.966 ns/op
Iteration   2: 18.975 ns/op
Iteration   3: 18.981 ns/op
Iteration   4: 18.840 ns/op
Iteration   5: 18.856 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (18.828, 18.923, 19.015), stdev = 0.073
  CI (99.9%): [18.812, 19.034] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 99.24% complete, ETA 00:00:26
# Fork: 1 of 2
# Warmup Iteration   1: 2492.417 ns/op
# Warmup Iteration   2: 834.737 ns/op
# Warmup Iteration   3: 622.772 ns/op
Iteration   1: 623.090 ns/op
Iteration   2: 624.293 ns/op
Iteration   3: 623.200 ns/op
Iteration   4: 622.005 ns/op
Iteration   5: 623.075 ns/op

# Run progress: 99.27% complete, ETA 00:00:25
# Fork: 2 of 2
# Warmup Iteration   1: 2621.631 ns/op
# Warmup Iteration   2: 911.718 ns/op
# Warmup Iteration   3: 640.568 ns/op
Iteration   1: 642.175 ns/op
Iteration   2: 639.891 ns/op
Iteration   3: 638.955 ns/op
Iteration   4: 641.542 ns/op
Iteration   5: 641.429 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  631.965 ±(99.9%) 14.164 ns/op [Average]
  (min, avg, max) = (622.005, 631.965, 642.175), stdev = 9.368
  CI (99.9%): [617.802, 646.129] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 99.31% complete, ETA 00:00:24
# Fork: 1 of 2
# Warmup Iteration   1: 10219.134 ns/op
# Warmup Iteration   2: 860.745 ns/op
# Warmup Iteration   3: 542.606 ns/op
Iteration   1: 542.736 ns/op
Iteration   2: 543.114 ns/op
Iteration   3: 541.916 ns/op
Iteration   4: 542.987 ns/op
Iteration   5: 543.402 ns/op

# Run progress: 99.34% complete, ETA 00:00:23
# Fork: 2 of 2
# Warmup Iteration   1: 28191.685 ns/op
# Warmup Iteration   2: 926.416 ns/op
# Warmup Iteration   3: 606.097 ns/op
Iteration   1: 553.214 ns/op
Iteration   2: 554.083 ns/op
Iteration   3: 554.272 ns/op
Iteration   4: 555.812 ns/op
Iteration   5: 555.786 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  548.732 ±(99.9%) 9.491 ns/op [Average]
  (min, avg, max) = (541.916, 548.732, 555.812), stdev = 6.278
  CI (99.9%): [539.241, 558.223] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 99.38% complete, ETA 00:00:22
# Fork: 1 of 2
# Warmup Iteration   1: 12636.903 ns/op
# Warmup Iteration   2: 846.454 ns/op
# Warmup Iteration   3: 617.470 ns/op
Iteration   1: 559.828 ns/op
Iteration   2: 559.124 ns/op
Iteration   3: 559.449 ns/op
Iteration   4: 558.432 ns/op
Iteration   5: 558.304 ns/op

# Run progress: 99.41% complete, ETA 00:00:20
# Fork: 2 of 2
# Warmup Iteration   1: 11167.663 ns/op
# Warmup Iteration   2: 814.210 ns/op
# Warmup Iteration   3: 565.865 ns/op
Iteration   1: 566.102 ns/op
Iteration   2: 566.305 ns/op
Iteration   3: 566.254 ns/op
Iteration   4: 565.277 ns/op
Iteration   5: 565.370 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  562.445 ±(99.9%) 5.508 ns/op [Average]
  (min, avg, max) = (558.304, 562.445, 566.305), stdev = 3.643
  CI (99.9%): [556.937, 567.953] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 99.44% complete, ETA 00:00:19
# Fork: 1 of 2
# Warmup Iteration   1: 587.864 ns/op
# Warmup Iteration   2: 463.177 ns/op
# Warmup Iteration   3: 329.359 ns/op
Iteration   1: 329.467 ns/op
Iteration   2: 329.491 ns/op
Iteration   3: 329.420 ns/op
Iteration   4: 330.002 ns/op
Iteration   5: 329.931 ns/op

# Run progress: 99.48% complete, ETA 00:00:18
# Fork: 2 of 2
# Warmup Iteration   1: 505.963 ns/op
# Warmup Iteration   2: 438.488 ns/op
# Warmup Iteration   3: 327.726 ns/op
Iteration   1: 327.825 ns/op
Iteration   2: 327.905 ns/op
Iteration   3: 327.846 ns/op
Iteration   4: 328.409 ns/op
Iteration   5: 328.339 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  328.864 ±(99.9%) 1.335 ns/op [Average]
  (min, avg, max) = (327.825, 328.864, 330.002), stdev = 0.883
  CI (99.9%): [327.529, 330.199] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 99.51% complete, ETA 00:00:17
# Fork: 1 of 2
# Warmup Iteration   1: 9755.681 ns/op
# Warmup Iteration   2: 5039.254 ns/op
# Warmup Iteration   3: 3561.475 ns/op
Iteration   1: 3564.076 ns/op
Iteration   2: 3563.010 ns/op
Iteration   3: 3562.845 ns/op
Iteration   4: 3537.977 ns/op
Iteration   5: 3538.083 ns/op

# Run progress: 99.55% complete, ETA 00:00:15
# Fork: 2 of 2
# Warmup Iteration   1: 12316.131 ns/op
# Warmup Iteration   2: 5169.151 ns/op
# Warmup Iteration   3: 4181.358 ns/op
Iteration   1: 3788.912 ns/op
Iteration   2: 3786.616 ns/op
Iteration   3: 3788.613 ns/op
Iteration   4: 3781.200 ns/op
Iteration   5: 3781.862 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3669.319 ±(99.9%) 185.618 ns/op [Average]
  (min, avg, max) = (3537.977, 3669.319, 3788.912), stdev = 122.775
  CI (99.9%): [3483.701, 3854.938] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 99.58% complete, ETA 00:00:14
# Fork: 1 of 2
# Warmup Iteration   1: 23.537 ns/op
# Warmup Iteration   2: 30.706 ns/op
# Warmup Iteration   3: 19.026 ns/op
Iteration   1: 19.002 ns/op
Iteration   2: 18.962 ns/op
Iteration   3: 18.985 ns/op
Iteration   4: 18.829 ns/op
Iteration   5: 18.849 ns/op

# Run progress: 99.62% complete, ETA 00:00:13
# Fork: 2 of 2
# Warmup Iteration   1: 24.997 ns/op
# Warmup Iteration   2: 30.246 ns/op
# Warmup Iteration   3: 19.020 ns/op
Iteration   1: 18.998 ns/op
Iteration   2: 18.970 ns/op
Iteration   3: 18.943 ns/op
Iteration   4: 18.845 ns/op
Iteration   5: 18.850 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  18.923 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (18.829, 18.923, 19.002), stdev = 0.071
  CI (99.9%): [18.816, 19.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 99.65% complete, ETA 00:00:12
# Fork: 1 of 2
# Warmup Iteration   1: 1155.243 ns/op
# Warmup Iteration   2: 560.804 ns/op
# Warmup Iteration   3: 439.272 ns/op
Iteration   1: 436.303 ns/op
Iteration   2: 436.251 ns/op
Iteration   3: 438.058 ns/op
Iteration   4: 436.929 ns/op
Iteration   5: 438.459 ns/op

# Run progress: 99.69% complete, ETA 00:00:11
# Fork: 2 of 2
# Warmup Iteration   1: 1506.064 ns/op
# Warmup Iteration   2: 577.141 ns/op
# Warmup Iteration   3: 440.794 ns/op
Iteration   1: 441.322 ns/op
Iteration   2: 439.009 ns/op
Iteration   3: 440.157 ns/op
Iteration   4: 442.149 ns/op
Iteration   5: 441.811 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  439.045 ±(99.9%) 3.374 ns/op [Average]
  (min, avg, max) = (436.251, 439.045, 442.149), stdev = 2.232
  CI (99.9%): [435.671, 442.419] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 99.72% complete, ETA 00:00:09
# Fork: 1 of 2
# Warmup Iteration   1: 18138.190 ns/op
# Warmup Iteration   2: 683.889 ns/op
# Warmup Iteration   3: 458.536 ns/op
Iteration   1: 417.594 ns/op
Iteration   2: 418.740 ns/op
Iteration   3: 417.695 ns/op
Iteration   4: 418.454 ns/op
Iteration   5: 419.024 ns/op

# Run progress: 99.76% complete, ETA 00:00:08
# Fork: 2 of 2
# Warmup Iteration   1: 17131.306 ns/op
# Warmup Iteration   2: 669.419 ns/op
# Warmup Iteration   3: 463.071 ns/op
Iteration   1: 417.333 ns/op
Iteration   2: 418.936 ns/op
Iteration   3: 417.293 ns/op
Iteration   4: 421.242 ns/op
Iteration   5: 421.479 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  418.779 ±(99.9%) 2.277 ns/op [Average]
  (min, avg, max) = (417.293, 418.779, 421.479), stdev = 1.506
  CI (99.9%): [416.501, 421.056] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 99.79% complete, ETA 00:00:07
# Fork: 1 of 2
# Warmup Iteration   1: 28244.081 ns/op
# Warmup Iteration   2: 767.145 ns/op
# Warmup Iteration   3: 510.416 ns/op
Iteration   1: 460.533 ns/op
Iteration   2: 460.649 ns/op
Iteration   3: 459.863 ns/op
Iteration   4: 461.335 ns/op
Iteration   5: 461.131 ns/op

# Run progress: 99.83% complete, ETA 00:00:06
# Fork: 2 of 2
# Warmup Iteration   1: 26945.853 ns/op
# Warmup Iteration   2: 799.226 ns/op
# Warmup Iteration   3: 503.356 ns/op
Iteration   1: 459.897 ns/op
Iteration   2: 459.156 ns/op
Iteration   3: 460.590 ns/op
Iteration   4: 460.356 ns/op
Iteration   5: 459.279 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  460.279 ±(99.9%) 1.096 ns/op [Average]
  (min, avg, max) = (459.156, 460.279, 461.335), stdev = 0.725
  CI (99.9%): [459.183, 461.374] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 99.86% complete, ETA 00:00:04
# Fork: 1 of 2
# Warmup Iteration   1: 437.922 ns/op
# Warmup Iteration   2: 332.770 ns/op
# Warmup Iteration   3: 246.664 ns/op
Iteration   1: 246.536 ns/op
Iteration   2: 248.300 ns/op
Iteration   3: 246.917 ns/op
Iteration   4: 248.859 ns/op
Iteration   5: 248.355 ns/op

# Run progress: 99.90% complete, ETA 00:00:03
# Fork: 2 of 2
# Warmup Iteration   1: 460.455 ns/op
# Warmup Iteration   2: 333.487 ns/op
# Warmup Iteration   3: 246.498 ns/op
Iteration   1: 246.110 ns/op
Iteration   2: 245.816 ns/op
Iteration   3: 246.031 ns/op
Iteration   4: 247.506 ns/op
Iteration   5: 246.617 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  247.105 ±(99.9%) 1.643 ns/op [Average]
  (min, avg, max) = (245.816, 247.105, 248.859), stdev = 1.087
  CI (99.9%): [245.461, 248.748] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 5 iterations, 50 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 99.93% complete, ETA 00:00:02
# Fork: 1 of 2
# Warmup Iteration   1: 12516.288 ns/op
# Warmup Iteration   2: 5803.622 ns/op
# Warmup Iteration   3: 4623.224 ns/op
Iteration   1: 4215.609 ns/op
Iteration   2: 4218.039 ns/op
Iteration   3: 4216.555 ns/op
Iteration   4: 4192.479 ns/op
Iteration   5: 4197.773 ns/op

# Run progress: 99.97% complete, ETA 00:00:01
# Fork: 2 of 2
# Warmup Iteration   1: 15760.517 ns/op
# Warmup Iteration   2: 5747.267 ns/op
# Warmup Iteration   3: 4772.542 ns/op
Iteration   1: 4348.937 ns/op
Iteration   2: 4345.077 ns/op
Iteration   3: 4352.732 ns/op
Iteration   4: 4342.757 ns/op
Iteration   5: 4338.957 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4276.891 ±(99.9%) 110.441 ns/op [Average]
  (min, avg, max) = (4192.479, 4276.891, 4352.732), stdev = 73.050
  CI (99.9%): [4166.450, 4387.333] (assumes normal distribution)


# Run complete. Total time: 00:58:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                (arraySize)  (arraySubSize)  (dataTweaker)  (distBuilder)     (tSorter)  Mode  Cnt     Score     Error  Units
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER      BASELINE  avgt   10    13.899 ±   0.242  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER        DPQ_11  avgt   10   286.369 ±   0.175  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10   254.135 ±   0.669  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER    DPQ_18_11I  avgt   10   308.814 ±  23.532  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER    DPQ_18_11P  avgt   10   189.810 ±   0.152  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER         RADIX  avgt   10   223.123 ±   5.099  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH      BASELINE  avgt   10    13.905 ±   0.234  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH        DPQ_11  avgt   10    52.459 ±   0.264  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10    45.456 ±   0.375  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10    48.487 ±   0.253  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10    47.559 ±   0.069  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH         RADIX  avgt   10    96.493 ±   4.831  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM      BASELINE  avgt   10    13.791 ±   0.141  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM        DPQ_11  avgt   10    52.461 ±   0.255  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10    45.281 ±   0.071  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10    48.326 ±   0.022  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10    47.569 ±   0.088  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM         RADIX  avgt   10    96.477 ±   4.811  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU      BASELINE  avgt   10    13.932 ±   0.555  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU        DPQ_11  avgt   10    55.852 ±   0.213  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10    45.276 ±   0.065  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10    66.756 ±   0.128  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    47.558 ±   0.033  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU         RADIX  avgt   10    95.767 ±   9.573  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE      BASELINE  avgt   10    13.783 ±   0.130  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE        DPQ_11  avgt   10    91.457 ±   7.235  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10    45.257 ±   0.061  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   106.070 ±   0.777  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10    47.555 ±   0.044  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE         RADIX  avgt   10   101.211 ±   5.138  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER      BASELINE  avgt   10    13.779 ±   0.129  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER        DPQ_11  avgt   10   324.866 ± 107.811  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10   529.382 ±   0.256  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER    DPQ_18_11I  avgt   10   495.261 ±  11.184  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER    DPQ_18_11P  avgt   10   335.058 ±   0.141  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER         RADIX  avgt   10   261.457 ±   3.015  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH      BASELINE  avgt   10    13.785 ±   0.123  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH        DPQ_11  avgt   10    52.306 ±   0.146  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10    45.267 ±   0.042  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10    48.335 ±   0.012  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10    47.560 ±   0.068  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH         RADIX  avgt   10    96.480 ±   4.856  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM      BASELINE  avgt   10    13.906 ±   0.235  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM        DPQ_11  avgt   10    52.621 ±   0.114  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10    45.274 ±   0.071  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10    48.332 ±   0.019  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10    47.575 ±   0.081  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM         RADIX  avgt   10    96.472 ±   4.854  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU      BASELINE  avgt   10    13.784 ±   0.129  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU        DPQ_11  avgt   10    56.034 ±   0.216  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   114.163 ±   7.920  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10    66.425 ±   0.109  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10    78.537 ±   0.193  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU         RADIX  avgt   10   101.924 ±   2.852  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE      BASELINE  avgt   10    13.898 ±   0.236  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE        DPQ_11  avgt   10   203.723 ±   0.405  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   604.478 ±   0.352  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   162.572 ±   6.354  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10   434.103 ±   0.233  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE         RADIX  avgt   10   141.659 ±   4.982  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER      BASELINE  avgt   10    13.782 ±   0.132  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER        DPQ_11  avgt   10   281.667 ±   2.901  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10   408.574 ±   1.779  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10   360.458 ±   1.237  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10   297.387 ±   1.856  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER         RADIX  avgt   10   246.516 ±   0.765  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    13.783 ±   0.135  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10    52.311 ±   0.160  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10    45.259 ±   0.069  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10    48.511 ±   0.259  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10    47.542 ±   0.075  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH         RADIX  avgt   10    96.505 ±   4.938  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM      BASELINE  avgt   10    13.899 ±   0.242  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM        DPQ_11  avgt   10    52.308 ±   0.157  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10    45.266 ±   0.074  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10    48.484 ±   0.256  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10    47.533 ±   0.043  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM         RADIX  avgt   10    96.516 ±   4.890  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU      BASELINE  avgt   10    13.784 ±   0.128  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU        DPQ_11  avgt   10    57.801 ±   0.216  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   103.111 ±   0.276  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10    69.966 ±   4.611  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10    61.094 ±   0.027  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU         RADIX  avgt   10   100.400 ±   1.076  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    13.781 ±   0.132  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   178.916 ±   0.100  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   233.611 ±   0.087  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   281.728 ±   1.905  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   174.897 ±   0.271  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE         RADIX  avgt   10   227.624 ±   2.508  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER      BASELINE  avgt   10    13.788 ±   0.123  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER        DPQ_11  avgt   10   300.925 ±   0.656  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   379.526 ±   9.868  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   321.811 ±   6.473  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10   220.463 ±   0.081  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER         RADIX  avgt   10   231.090 ±   1.973  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    13.785 ±   0.141  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10    52.438 ±   0.271  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10    45.245 ±   0.058  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10    48.512 ±   0.299  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10    47.559 ±   0.067  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH         RADIX  avgt   10    96.472 ±   4.795  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM      BASELINE  avgt   10    13.780 ±   0.133  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM        DPQ_11  avgt   10    52.296 ±   0.163  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10    45.245 ±   0.039  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10    48.327 ±   0.015  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10    47.554 ±   0.051  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM         RADIX  avgt   10    96.496 ±   4.825  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU      BASELINE  avgt   10    13.787 ±   0.136  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU        DPQ_11  avgt   10    55.839 ±   0.202  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10    45.259 ±   0.055  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10    66.653 ±   0.105  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10    47.536 ±   0.060  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU         RADIX  avgt   10   101.126 ±   5.227  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    14.234 ±   1.498  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   138.729 ±   0.237  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   251.697 ±   1.380  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   197.048 ±   2.040  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   162.534 ±   0.196  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE         RADIX  avgt   10   238.001 ±   4.128  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER      BASELINE  avgt   10    16.191 ±   6.599  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER        DPQ_11  avgt   10   102.892 ±  43.840  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER  DPQ_18_11_21  avgt   10    51.232 ±  19.641  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER    DPQ_18_11I  avgt   10   126.699 ±  57.284  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER    DPQ_18_11P  avgt   10    54.052 ±  20.985  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER         RADIX  avgt   10   147.407 ±  55.401  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH      BASELINE  avgt   10    14.056 ±   0.949  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH        DPQ_11  avgt   10    52.329 ±   0.134  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10    45.118 ±   0.079  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH    DPQ_18_11I  avgt   10    48.237 ±   0.131  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    47.472 ±   0.116  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH         RADIX  avgt   10   120.002 ±   0.073  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM      BASELINE  avgt   10    14.063 ±   0.953  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM        DPQ_11  avgt   10    52.304 ±   0.149  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM  DPQ_18_11_21  avgt   10    45.112 ±   0.068  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM    DPQ_18_11I  avgt   10    48.410 ±   0.336  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM    DPQ_18_11P  avgt   10    47.474 ±   0.122  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM         RADIX  avgt   10   120.006 ±   0.158  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU      BASELINE  avgt   10    13.909 ±   0.242  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU        DPQ_11  avgt   10    55.850 ±   0.195  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU  DPQ_18_11_21  avgt   10    45.194 ±   0.194  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU    DPQ_18_11I  avgt   10    66.272 ±   0.486  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU    DPQ_18_11P  avgt   10    47.491 ±   0.107  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU         RADIX  avgt   10   126.564 ±   4.136  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE      BASELINE  avgt   10    13.791 ±   0.141  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE        DPQ_11  avgt   10    90.138 ±   0.397  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10    45.112 ±   0.055  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   106.239 ±   2.275  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    47.487 ±   0.140  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE         RADIX  avgt   10   126.831 ±   3.602  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER      BASELINE  avgt   10    13.929 ±   0.560  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER        DPQ_11  avgt   10   312.504 ±   0.492  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER  DPQ_18_11_21  avgt   10   260.793 ±   0.208  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER    DPQ_18_11I  avgt   10   315.209 ±   4.522  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER    DPQ_18_11P  avgt   10   208.487 ±   0.197  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER         RADIX  avgt   10   723.892 ±   7.662  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH      BASELINE  avgt   10    13.931 ±   0.557  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH        DPQ_11  avgt   10   237.495 ±   0.338  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10   340.857 ±   7.273  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10   248.434 ±   0.846  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   284.296 ±   2.217  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH         RADIX  avgt   10   702.095 ±   6.380  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM      BASELINE  avgt   10    13.784 ±   0.130  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM        DPQ_11  avgt   10   239.039 ±   2.722  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10   336.635 ±   5.846  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   248.559 ±   1.105  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM    DPQ_18_11P  avgt   10   284.657 ±   1.711  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM         RADIX  avgt   10   705.465 ±   2.854  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU      BASELINE  avgt   10    13.929 ±   0.552  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU        DPQ_11  avgt   10   239.205 ±   1.295  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   340.277 ±   0.129  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   274.302 ±   5.111  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   284.352 ±   2.411  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU         RADIX  avgt   10   675.845 ±   3.285  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE      BASELINE  avgt   10    13.781 ±   0.130  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE        DPQ_11  avgt   10   137.462 ±   0.158  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10    96.251 ±   0.317  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   125.064 ±   2.220  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10    76.118 ±   0.025  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE         RADIX  avgt   10   640.803 ±   3.290  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER      BASELINE  avgt   10    13.927 ±   0.556  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER        DPQ_11  avgt   10   304.386 ±   0.483  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10   336.864 ±   3.610  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER    DPQ_18_11I  avgt   10   310.180 ±   6.545  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER    DPQ_18_11P  avgt   10   261.049 ±   1.127  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER         RADIX  avgt   10   431.893 ±   1.899  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH      BASELINE  avgt   10    13.781 ±   0.124  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH        DPQ_11  avgt   10   300.295 ±   8.739  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10   340.224 ±   2.633  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10   195.985 ±   1.338  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10   282.102 ±   4.162  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH         RADIX  avgt   10   751.008 ±   3.976  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM      BASELINE  avgt   10    13.790 ±   0.132  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM        DPQ_11  avgt   10   299.726 ±   8.819  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10   366.011 ±   2.288  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10   232.091 ±   4.014  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10   281.683 ±   1.467  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM         RADIX  avgt   10  1564.854 ±  14.308  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU      BASELINE  avgt   10    14.054 ±   0.955  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU        DPQ_11  avgt   10    57.816 ±   0.195  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10    45.247 ±   0.062  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10    70.393 ±   2.461  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    47.555 ±   0.045  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU         RADIX  avgt   10   101.138 ±   5.261  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE      BASELINE  avgt   10    13.781 ±   0.126  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE        DPQ_11  avgt   10   301.091 ±  11.562  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10   224.511 ±   2.807  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   324.132 ±   1.256  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10   182.882 ±   2.849  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE         RADIX  avgt   10   652.408 ±  10.329  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER      BASELINE  avgt   10    13.783 ±   0.129  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER        DPQ_11  avgt   10   307.085 ±   3.266  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10   457.975 ±  11.656  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER    DPQ_18_11I  avgt   10   331.580 ±   1.423  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER    DPQ_18_11P  avgt   10   326.797 ±   0.645  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER         RADIX  avgt   10   463.933 ±   2.319  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH      BASELINE  avgt   10    14.204 ±   1.000  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH        DPQ_11  avgt   10   298.398 ±   1.596  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10   364.879 ±   2.777  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10   204.027 ±   0.580  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10   288.733 ±   3.395  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH         RADIX  avgt   10   779.581 ±   2.462  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM      BASELINE  avgt   10    13.782 ±   0.125  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM        DPQ_11  avgt   10   243.983 ±   1.921  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10   359.489 ±   3.435  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10   205.696 ±   0.409  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10   289.809 ±   3.354  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM         RADIX  avgt   10  1533.442 ±   8.009  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU      BASELINE  avgt   10    13.785 ±   0.132  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU        DPQ_11  avgt   10    66.056 ±   0.215  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   166.984 ±   0.740  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10    74.739 ±   0.146  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10   104.938 ±   0.079  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU         RADIX  avgt   10   102.683 ±   1.225  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE      BASELINE  avgt   10    13.930 ±   0.555  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE        DPQ_11  avgt   10   364.397 ±   6.055  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   586.348 ±   5.076  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   357.863 ±   3.345  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10   404.461 ±   3.477  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE         RADIX  avgt   10   647.926 ±   9.027  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER      BASELINE  avgt   10    13.783 ±   0.129  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER        DPQ_11  avgt   10   297.369 ±   0.226  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10   385.072 ±   1.194  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10   341.133 ±   1.003  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10   299.565 ±   0.837  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER         RADIX  avgt   10   461.643 ±  10.237  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    13.783 ±   0.128  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10   257.057 ±   0.677  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10   348.310 ±   2.167  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10   246.467 ±   2.588  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10   289.132 ±   1.685  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH         RADIX  avgt   10   817.649 ±   8.848  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM      BASELINE  avgt   10    13.780 ±   0.133  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM        DPQ_11  avgt   10   233.710 ±  11.535  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10   361.814 ±   5.109  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10   244.257 ±   6.683  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10   279.233 ±   2.030  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM         RADIX  avgt   10  1538.229 ±  12.857  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU      BASELINE  avgt   10    13.783 ±   0.130  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU        DPQ_11  avgt   10    66.930 ±   0.179  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   132.941 ±   5.600  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10   117.456 ±   0.207  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10    91.346 ±   0.041  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU         RADIX  avgt   10   102.061 ±   0.713  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    13.782 ±   0.130  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   291.140 ±   3.448  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   326.224 ±   2.603  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   334.272 ±   1.315  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   269.427 ±   1.375  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE         RADIX  avgt   10   722.101 ±   4.492  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER      BASELINE  avgt   10    13.785 ±   0.128  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER        DPQ_11  avgt   10   282.427 ±   2.694  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   360.320 ±   0.252  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   323.528 ±   0.603  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10   279.415 ±   5.293  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER         RADIX  avgt   10   471.490 ±   3.984  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    13.785 ±   0.128  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10   176.403 ±   2.061  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10   338.447 ±   1.747  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10   193.038 ±   5.767  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10   300.022 ±   2.882  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH         RADIX  avgt   10   792.582 ±   2.317  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM      BASELINE  avgt   10    13.780 ±   0.131  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM        DPQ_11  avgt   10   226.483 ±   1.134  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10   367.917 ±   5.907  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10   226.473 ±   2.394  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10   282.638 ±   1.705  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM         RADIX  avgt   10  1562.113 ±   5.169  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU      BASELINE  avgt   10    13.783 ±   0.120  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU        DPQ_11  avgt   10    57.759 ±   0.165  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10    45.271 ±   0.069  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10    68.892 ±   0.102  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10    47.548 ±   0.072  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU         RADIX  avgt   10   101.048 ±   5.385  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    13.782 ±   0.124  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   314.966 ±   3.219  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   338.259 ±   2.875  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   377.201 ±   2.450  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   255.408 ±   1.452  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE         RADIX  avgt   10   729.859 ±   9.330  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER      BASELINE  avgt   10    14.787 ±   3.172  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER        DPQ_11  avgt   10   101.838 ±  21.850  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER  DPQ_18_11_21  avgt   10    50.281 ±  16.452  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER    DPQ_18_11I  avgt   10   120.170 ±  29.312  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER    DPQ_18_11P  avgt   10    52.160 ±  15.194  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER         RADIX  avgt   10   138.700 ±  26.053  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH      BASELINE  avgt   10    13.933 ±   0.557  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH        DPQ_11  avgt   10   127.258 ±   0.507  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10    45.254 ±   0.235  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH    DPQ_18_11I  avgt   10   111.364 ±   0.774  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    47.589 ±   0.338  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH         RADIX  avgt   10   129.754 ±   3.629  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM      BASELINE  avgt   10    15.814 ±   6.380  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM        DPQ_11  avgt   10   141.308 ±  61.276  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM  DPQ_18_11_21  avgt   10    51.864 ±  21.588  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM    DPQ_18_11I  avgt   10   120.498 ±  53.033  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM    DPQ_18_11P  avgt   10    54.927 ±  23.725  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM         RADIX  avgt   10   156.182 ±  67.976  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU      BASELINE  avgt   10    14.056 ±   0.951  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU        DPQ_11  avgt   10    57.801 ±   0.168  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU  DPQ_18_11_21  avgt   10    45.107 ±   0.065  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU    DPQ_18_11I  avgt   10    70.055 ±   1.685  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU    DPQ_18_11P  avgt   10    47.476 ±   0.113  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU         RADIX  avgt   10   126.886 ±   3.675  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE      BASELINE  avgt   10    16.151 ±   6.463  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE        DPQ_11  avgt   10   104.191 ±  45.409  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10    52.486 ±  23.523  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   122.898 ±  55.559  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    55.483 ±  25.112  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE         RADIX  avgt   10   143.510 ±  51.835  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER      BASELINE  avgt   10    14.054 ±   0.943  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER        DPQ_11  avgt   10   303.851 ±   0.352  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER  DPQ_18_11_21  avgt   10   338.297 ±   2.060  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER    DPQ_18_11I  avgt   10   310.809 ±   3.738  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER    DPQ_18_11P  avgt   10   259.995 ±   0.260  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER         RADIX  avgt   10   427.197 ±   9.662  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH      BASELINE  avgt   10    13.783 ±   0.133  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH        DPQ_11  avgt   10   303.333 ±   0.491  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10   373.943 ±   0.136  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10   278.716 ±   3.387  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   307.036 ±   0.258  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH         RADIX  avgt   10  1507.439 ±   4.071  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM      BASELINE  avgt   10    13.785 ±   0.130  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM        DPQ_11  avgt   10   306.248 ±   9.503  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10   383.311 ±   2.729  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   303.834 ±  71.691  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM    DPQ_18_11P  avgt   10   315.922 ±   2.258  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM         RADIX  avgt   10  1548.211 ±  24.631  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU      BASELINE  avgt   10    13.781 ±   0.132  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU        DPQ_11  avgt   10   238.687 ±   3.451  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   323.251 ±   0.110  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   268.475 ±  14.787  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   276.898 ±   1.755  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU         RADIX  avgt   10   690.583 ±  23.754  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE      BASELINE  avgt   10    13.781 ±   0.132  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE        DPQ_11  avgt   10   295.631 ±   1.293  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10   240.393 ±   2.689  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   342.718 ±   3.060  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10   204.368 ±   1.873  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE         RADIX  avgt   10  1172.339 ±  46.937  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER      BASELINE  avgt   10    14.229 ±   1.498  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER        DPQ_11  avgt   10   321.178 ±   2.120  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10   316.138 ±   0.321  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER    DPQ_18_11I  avgt   10   371.938 ±   1.682  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER    DPQ_18_11P  avgt   10   276.849 ±   0.798  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER         RADIX  avgt   10  1417.387 ±  17.525  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH      BASELINE  avgt   10    13.781 ±   0.127  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH        DPQ_11  avgt   10   318.451 ±  17.310  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10   336.686 ±   8.388  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10   334.530 ±   2.062  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10   237.458 ±   1.103  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH         RADIX  avgt   10   381.318 ±   4.293  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM      BASELINE  avgt   10    14.059 ±   0.954  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM        DPQ_11  avgt   10   370.012 ±   2.066  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10   426.971 ±   2.715  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10   431.492 ±   1.246  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10   337.527 ±   1.279  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM         RADIX  avgt   10  1634.002 ±   9.763  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU      BASELINE  avgt   10    13.781 ±   0.128  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU        DPQ_11  avgt   10    70.147 ±   2.385  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10    45.354 ±   0.249  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10    75.982 ±   0.605  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    47.556 ±   0.047  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU         RADIX  avgt   10   101.112 ±   5.256  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE      BASELINE  avgt   10    13.781 ±   0.130  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE        DPQ_11  avgt   10   192.889 ±   8.888  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10   135.451 ±   1.237  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   180.643 ±   3.744  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10    99.898 ±   0.498  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE         RADIX  avgt   10   322.550 ±   6.699  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER      BASELINE  avgt   10    13.781 ±   0.130  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER        DPQ_11  avgt   10   313.579 ±   1.788  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10   503.829 ±  11.680  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER    DPQ_18_11I  avgt   10   339.177 ±   7.834  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER    DPQ_18_11P  avgt   10   414.047 ±   2.874  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER         RADIX  avgt   10  1767.242 ±  16.871  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH      BASELINE  avgt   10    13.781 ±   0.132  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH        DPQ_11  avgt   10   265.356 ±   2.298  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10   489.024 ±   4.019  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10   307.990 ±   6.521  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10   337.459 ±   1.997  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH         RADIX  avgt   10   397.686 ±   1.504  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM      BASELINE  avgt   10    13.784 ±   0.130  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM        DPQ_11  avgt   10   408.408 ± 110.997  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10   422.396 ±   2.712  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10   407.538 ±   2.083  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10   339.373 ±   2.718  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM         RADIX  avgt   10  1629.511 ±  27.151  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU      BASELINE  avgt   10    13.929 ±   0.561  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU        DPQ_11  avgt   10   219.680 ±   5.798  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   353.627 ±   0.385  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10   108.551 ±   0.122  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10   236.184 ±   0.054  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU         RADIX  avgt   10   126.106 ±   2.466  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE      BASELINE  avgt   10    13.930 ±   0.556  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE        DPQ_11  avgt   10   263.149 ±  10.929  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   674.186 ±   4.231  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   288.638 ±  16.565  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10   390.155 ±   2.871  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE         RADIX  avgt   10   349.028 ±   2.929  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER      BASELINE  avgt   10    13.899 ±   0.241  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER        DPQ_11  avgt   10   342.127 ±  10.547  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10   376.977 ±   7.978  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10   389.294 ±   0.701  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10   343.042 ±   1.584  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER         RADIX  avgt   10  1545.571 ±   7.161  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    13.780 ±   0.125  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10   345.734 ±   0.358  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10   398.171 ±   0.376  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10   329.472 ±   2.215  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10   302.630 ±   0.570  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH         RADIX  avgt   10   442.585 ±   2.154  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM      BASELINE  avgt   10    14.060 ±   0.949  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM        DPQ_11  avgt   10   363.899 ±   3.461  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10   427.006 ±   3.766  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10   375.540 ±   2.096  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10   327.063 ±   1.372  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM         RADIX  avgt   10  1620.362 ±   6.557  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU      BASELINE  avgt   10    13.786 ±   0.133  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU        DPQ_11  avgt   10   154.149 ±   5.467  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   208.050 ±   0.136  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10   223.981 ±   0.247  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10   160.883 ±   0.095  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU         RADIX  avgt   10   115.160 ±   0.329  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    13.896 ±   0.240  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   233.110 ±   4.870  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   285.376 ±   1.376  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   291.809 ±   9.565  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   225.732 ±   0.845  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE         RADIX  avgt   10   408.288 ±   2.648  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER      BASELINE  avgt   10    13.931 ±   0.558  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER        DPQ_11  avgt   10   304.235 ±   1.005  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   359.991 ±   4.419  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   308.562 ±   0.198  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10   299.023 ±   7.176  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER         RADIX  avgt   10  1517.864 ±  24.260  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    13.780 ±   0.122  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10   295.634 ±   0.780  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10   346.422 ±   0.166  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10   335.660 ±   0.439  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10   240.206 ±   0.974  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH         RADIX  avgt   10   460.734 ±   2.882  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM      BASELINE  avgt   10    13.781 ±   0.130  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM        DPQ_11  avgt   10   336.109 ±   2.694  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10   433.355 ±   4.490  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10   422.881 ±   1.458  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10   340.834 ±   2.054  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM         RADIX  avgt   10  1643.423 ±  17.771  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU      BASELINE  avgt   10    13.928 ±   0.555  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU        DPQ_11  avgt   10    69.946 ±   1.691  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10    45.265 ±   0.061  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10    76.003 ±   0.584  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10    47.657 ±   0.383  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU         RADIX  avgt   10   101.220 ±   5.158  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    13.782 ±   0.125  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   247.243 ±   8.451  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   282.802 ±   2.438  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   284.945 ±   0.929  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   194.219 ±   0.316  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE         RADIX  avgt   10   414.876 ±   3.200  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER      BASELINE  avgt   10    15.263 ±   4.630  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER        DPQ_11  avgt   10   104.253 ±  45.642  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER  DPQ_18_11_21  avgt   10    52.061 ±  21.667  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER    DPQ_18_11I  avgt   10   124.120 ±  58.459  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER    DPQ_18_11P  avgt   10    55.109 ±  24.444  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER         RADIX  avgt   10   140.950 ±  43.865  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH      BASELINE  avgt   10    15.384 ±   4.077  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH        DPQ_11  avgt   10   103.318 ±  41.369  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10    50.862 ±  18.523  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH    DPQ_18_11I  avgt   10   125.141 ±  50.253  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    54.267 ±  21.657  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH         RADIX  avgt   10   151.464 ±  65.259  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM      BASELINE  avgt   10    15.914 ±   6.288  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM        DPQ_11  avgt   10   127.694 ±  59.614  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM  DPQ_18_11_21  avgt   10    51.737 ±  20.903  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM    DPQ_18_11I  avgt   10   126.786 ±  55.198  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM    DPQ_18_11P  avgt   10    54.685 ±  23.597  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM         RADIX  avgt   10   141.238 ±  65.649  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU      BASELINE  avgt   10    13.791 ±   0.137  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU        DPQ_11  avgt   10    69.891 ±   1.660  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU  DPQ_18_11_21  avgt   10    45.111 ±   0.068  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU    DPQ_18_11I  avgt   10    75.514 ±   0.132  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU    DPQ_18_11P  avgt   10    47.462 ±   0.131  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU         RADIX  avgt   10   126.547 ±   4.056  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE      BASELINE  avgt   10    13.985 ±   0.728  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE        DPQ_11  avgt   10    90.226 ±   0.844  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10    45.197 ±   0.279  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   106.800 ±   3.083  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    47.560 ±   0.327  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE         RADIX  avgt   10   127.402 ±   5.261  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER      BASELINE  avgt   10    14.050 ±   0.943  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER        DPQ_11  avgt   10   316.035 ±   0.723  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER  DPQ_18_11_21  avgt   10   338.226 ±   3.013  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER    DPQ_18_11I  avgt   10   363.633 ±  20.962  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER    DPQ_18_11P  avgt   10   293.846 ±   1.569  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER         RADIX  avgt   10  1439.408 ±  31.070  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH      BASELINE  avgt   10    13.898 ±   0.242  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH        DPQ_11  avgt   10   336.987 ±   2.016  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10   350.425 ±   4.141  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10   341.175 ±   0.239  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   269.290 ±   0.565  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH         RADIX  avgt   10   711.147 ±   6.119  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM      BASELINE  avgt   10    13.781 ±   0.127  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM        DPQ_11  avgt   10   362.347 ±   2.867  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10   420.548 ±   2.557  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   386.952 ±  10.818  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM    DPQ_18_11P  avgt   10   329.628 ±   4.271  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM         RADIX  avgt   10  1630.769 ±  10.577  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU      BASELINE  avgt   10    13.789 ±   0.126  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU        DPQ_11  avgt   10   233.896 ±   0.516  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   231.463 ±   0.126  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   254.315 ±   9.496  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   207.982 ±   1.662  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU         RADIX  avgt   10   694.999 ±   2.973  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE      BASELINE  avgt   10    13.784 ±   0.122  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE        DPQ_11  avgt   10   208.775 ±   3.604  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10   155.200 ±   0.821  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   194.733 ±   5.955  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10   132.482 ±   0.122  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE         RADIX  avgt   10   729.736 ±   4.444  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER      BASELINE  avgt   10    13.783 ±   0.134  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER        DPQ_11  avgt   10   296.236 ±   1.015  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10   390.017 ±   5.264  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER    DPQ_18_11I  avgt   10   322.075 ±   4.020  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER    DPQ_18_11P  avgt   10   313.368 ±   1.044  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER         RADIX  avgt   10  1561.493 ±   4.563  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH      BASELINE  avgt   10    13.788 ±   0.136  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH        DPQ_11  avgt   10    89.998 ±   0.249  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10    45.273 ±   0.056  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10   106.841 ±   0.171  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10    47.664 ±   0.382  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH         RADIX  avgt   10   101.065 ±   5.302  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM      BASELINE  avgt   10    13.784 ±   0.127  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM        DPQ_11  avgt   10   350.502 ±   4.182  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10   443.643 ±   4.692  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10   420.059 ±   1.402  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10   345.880 ±   1.934  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM         RADIX  avgt   10  1678.697 ±  10.497  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU      BASELINE  avgt   10    13.783 ±   0.132  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU        DPQ_11  avgt   10    90.172 ±   0.693  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10    45.255 ±   0.083  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10   106.221 ±   0.974  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    47.556 ±   0.067  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU         RADIX  avgt   10   101.214 ±   5.135  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE      BASELINE  avgt   10    14.227 ±   1.503  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE        DPQ_11  avgt   10   157.835 ±   1.494  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10   116.270 ±   1.387  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   147.193 ±   0.810  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10    79.265 ±   0.049  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE         RADIX  avgt   10   218.110 ±   7.300  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER      BASELINE  avgt   10    13.788 ±   0.133  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER        DPQ_11  avgt   10   311.011 ±   0.595  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10   426.840 ±   2.037  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER    DPQ_18_11I  avgt   10   415.731 ±  16.241  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER    DPQ_18_11P  avgt   10   320.687 ±   4.044  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER         RADIX  avgt   10  1631.933 ±   3.576  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH      BASELINE  avgt   10    14.052 ±   0.959  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH        DPQ_11  avgt   10   204.769 ±   1.149  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10   605.540 ±   2.833  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10   169.515 ±   1.761  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10   434.146 ±   0.196  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH         RADIX  avgt   10   142.062 ±   4.857  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM      BASELINE  avgt   10    13.785 ±   0.132  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM        DPQ_11  avgt   10   408.621 ±  20.991  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10   435.279 ±   3.516  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10   415.611 ±   3.953  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10   349.239 ±   2.825  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM         RADIX  avgt   10  1644.573 ±   4.233  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU      BASELINE  avgt   10    13.784 ±   0.131  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU        DPQ_11  avgt   10   206.181 ±   2.115  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   604.474 ±   0.277  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10   158.596 ±   0.124  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10   434.601 ±   1.483  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU         RADIX  avgt   10   141.730 ±   4.959  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE      BASELINE  avgt   10    13.783 ±   0.124  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE        DPQ_11  avgt   10   230.346 ±   0.288  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   678.020 ±   1.459  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   237.753 ±   0.701  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10   388.136 ±   1.409  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE         RADIX  avgt   10   253.888 ±   3.055  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER      BASELINE  avgt   10    13.783 ±   0.129  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER        DPQ_11  avgt   10   279.297 ±   1.301  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10   412.722 ±   1.823  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10   430.755 ±   7.417  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10   338.621 ±   0.781  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER         RADIX  avgt   10  1553.510 ±  10.492  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    13.785 ±   0.125  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10   178.964 ±   0.203  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10   233.756 ±   0.070  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10   280.688 ±   0.312  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10   174.877 ±   0.092  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH         RADIX  avgt   10   227.885 ±   4.915  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM      BASELINE  avgt   10    13.782 ±   0.130  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM        DPQ_11  avgt   10   344.497 ±   2.965  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10   437.620 ±   5.857  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10   407.648 ±   5.232  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10   332.561 ±   4.162  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM         RADIX  avgt   10  1649.392 ±   5.712  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU      BASELINE  avgt   10    14.052 ±   0.947  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU        DPQ_11  avgt   10   181.341 ±   4.336  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   233.623 ±   0.062  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10   280.572 ±   1.915  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10   174.913 ±   0.071  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU         RADIX  avgt   10   226.180 ±   0.760  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    14.203 ±   0.991  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   217.988 ±   1.977  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   274.940 ±   0.775  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   303.412 ±   1.177  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   208.071 ±   0.438  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE         RADIX  avgt   10   331.635 ±   2.771  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER      BASELINE  avgt   10    13.783 ±   0.129  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER        DPQ_11  avgt   10   268.421 ±   0.687  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   392.896 ±   0.181  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   338.112 ±   1.112  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10   317.961 ±   6.240  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER         RADIX  avgt   10  1550.392 ±  13.409  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    14.052 ±   0.941  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10   138.843 ±   0.492  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10   248.398 ±   1.983  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10   196.000 ±   0.644  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10   162.591 ±   0.205  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH         RADIX  avgt   10   235.895 ±   1.934  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM      BASELINE  avgt   10    13.783 ±   0.136  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM        DPQ_11  avgt   10   348.077 ±   2.511  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10   447.620 ±   3.580  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10   422.177 ±   6.778  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10   348.847 ±   2.733  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM         RADIX  avgt   10  1668.233 ±  11.007  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU      BASELINE  avgt   10    13.929 ±   0.558  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU        DPQ_11  avgt   10   140.558 ±   5.137  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10   251.383 ±   0.522  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10   197.115 ±   2.124  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10   159.341 ±   5.193  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU         RADIX  avgt   10   240.111 ±   9.936  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    13.785 ±   0.130  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   214.770 ±   0.779  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   275.081 ±   0.836  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   266.084 ±   2.624  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   196.691 ±   0.591  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE         RADIX  avgt   10   343.442 ±   2.968  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER      BASELINE  avgt   10    14.920 ±   3.619  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER        DPQ_11  avgt   10   102.534 ±  24.097  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER  DPQ_18_11_21  avgt   10    49.375 ±  13.606  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER    DPQ_18_11I  avgt   10   123.477 ±  40.160  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER    DPQ_18_11P  avgt   10    53.476 ±  19.176  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER         RADIX  avgt   10   146.692 ±  52.087  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH      BASELINE  avgt   10    13.792 ±   0.136  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH        DPQ_11  avgt   10    89.987 ±   0.155  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10    45.101 ±   0.076  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH    DPQ_18_11I  avgt   10   105.768 ±   0.494  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    47.467 ±   0.104  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH         RADIX  avgt   10   121.784 ±   8.555  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM      BASELINE  avgt   10    15.234 ±   4.548  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM        DPQ_11  avgt   10   113.621 ±  42.865  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM  DPQ_18_11_21  avgt   10    50.205 ±  16.274  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM    DPQ_18_11I  avgt   10   136.430 ±  61.174  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM    DPQ_18_11P  avgt   10    53.571 ±  19.331  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM         RADIX  avgt   10   147.841 ±  50.670  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU      BASELINE  avgt   10    13.934 ±   0.554  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU        DPQ_11  avgt   10    90.029 ±   0.172  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU  DPQ_18_11_21  avgt   10    45.117 ±   0.074  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU    DPQ_18_11I  avgt   10   106.722 ±   0.352  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU    DPQ_18_11P  avgt   10    47.488 ±   0.093  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU         RADIX  avgt   10   126.471 ±   4.060  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE      BASELINE  avgt   10    13.788 ±   0.141  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE        DPQ_11  avgt   10    90.141 ±   0.365  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10    45.124 ±   0.063  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   105.686 ±   1.768  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    47.477 ±   0.103  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE         RADIX  avgt   10   121.560 ±   8.819  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER      BASELINE  avgt   10    13.783 ±   0.123  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER        DPQ_11  avgt   10   298.783 ±   1.218  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER  DPQ_18_11_21  avgt   10   389.310 ±   4.409  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER    DPQ_18_11I  avgt   10   316.657 ±   1.169  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER    DPQ_18_11P  avgt   10   313.325 ±   0.811  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER         RADIX  avgt   10  1531.663 ±   5.427  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH      BASELINE  avgt   10    13.784 ±   0.128  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH        DPQ_11  avgt   10   200.440 ±   0.349  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10   118.151 ±   0.029  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10   199.734 ±   0.199  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   115.863 ±   0.292  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH         RADIX  avgt   10   649.271 ±   3.446  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM      BASELINE  avgt   10    13.782 ±   0.132  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM        DPQ_11  avgt   10   376.072 ±   3.900  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10   437.811 ±   4.560  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   419.454 ±  15.257  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM    DPQ_18_11P  avgt   10   343.586 ±   4.406  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM         RADIX  avgt   10  1656.209 ±   8.289  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU      BASELINE  avgt   10    13.782 ±   0.130  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU        DPQ_11  avgt   10   200.459 ±   0.340  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   122.274 ±   6.604  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   199.273 ±   0.820  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   116.151 ±   0.753  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU         RADIX  avgt   10   645.337 ±   4.326  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE      BASELINE  avgt   10    13.787 ±   0.123  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE        DPQ_11  avgt   10   189.023 ±   1.415  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10   127.570 ±   0.316  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   159.818 ±   1.434  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10   116.320 ±   0.072  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE         RADIX  avgt   10   639.719 ±   3.255  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER      BASELINE  avgt   10    18.924 ±   0.108  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER        DPQ_11  avgt   10   780.643 ±   8.440  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10   688.482 ±  51.012  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER    DPQ_18_11I  avgt   10   675.347 ±  71.001  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER    DPQ_18_11P  avgt   10   489.360 ±   1.368  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER         RADIX  avgt   10   382.478 ±   3.162  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH      BASELINE  avgt   10    18.923 ±   0.113  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH        DPQ_11  avgt   10    73.798 ±   0.440  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10    72.445 ±   0.361  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10    71.927 ±   0.337  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10    73.862 ±   0.564  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH         RADIX  avgt   10   146.172 ±   0.635  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM      BASELINE  avgt   10    19.064 ±   0.402  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM        DPQ_11  avgt   10    73.920 ±   0.416  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10    71.036 ±   0.473  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10    72.002 ±   0.329  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10    73.871 ±   0.561  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM         RADIX  avgt   10   146.020 ±   0.502  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU      BASELINE  avgt   10    19.064 ±   0.397  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU        DPQ_11  avgt   10    80.318 ±   0.407  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10   108.501 ±   0.519  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10   108.855 ±   0.279  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    74.131 ±   0.700  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU         RADIX  avgt   10   156.788 ±   0.411  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE      BASELINE  avgt   10    18.919 ±   0.110  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE        DPQ_11  avgt   10   138.084 ±   0.796  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10   156.380 ±   0.637  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   209.923 ±   0.465  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10    73.862 ±   0.554  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE         RADIX  avgt   10   156.980 ±   0.205  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER      BASELINE  avgt   10    19.063 ±   0.400  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER        DPQ_11  avgt   10   709.598 ±  16.653  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10  1110.065 ±   2.537  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER    DPQ_18_11I  avgt   10  1114.677 ±   6.517  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER    DPQ_18_11P  avgt   10  1299.161 ±  30.938  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER         RADIX  avgt   10   465.434 ±   2.152  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH      BASELINE  avgt   10    18.911 ±   0.108  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH        DPQ_11  avgt   10    73.871 ±   0.427  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10    71.735 ±   1.177  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10    71.933 ±   0.337  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10    73.851 ±   0.542  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH         RADIX  avgt   10   145.829 ±   0.463  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM      BASELINE  avgt   10    18.915 ±   0.101  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM        DPQ_11  avgt   10    73.869 ±   0.486  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10    71.026 ±   0.499  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10    71.937 ±   0.352  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10    73.873 ±   0.520  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM         RADIX  avgt   10   145.958 ±   0.446  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU      BASELINE  avgt   10    18.919 ±   0.103  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU        DPQ_11  avgt   10    80.526 ±   0.658  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   116.113 ±   0.386  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10   116.238 ±   0.250  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10   140.938 ±   1.455  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU         RADIX  avgt   10   155.419 ±   0.559  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE      BASELINE  avgt   10    19.062 ±   0.406  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE        DPQ_11  avgt   10   419.786 ±   0.465  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   335.068 ±   1.459  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   420.584 ±  16.886  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10  1565.428 ±   3.679  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE         RADIX  avgt   10   235.692 ±   0.732  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER      BASELINE  avgt   10    18.897 ±   0.097  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER        DPQ_11  avgt   10   814.280 ±  21.822  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10   918.348 ±  48.230  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10   909.409 ±  61.785  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10   870.581 ±   1.609  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER         RADIX  avgt   10   440.331 ±   5.378  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    18.928 ±   0.104  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10    74.155 ±   0.714  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10    71.024 ±   0.498  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10    71.940 ±   0.323  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10    73.846 ±   0.553  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH         RADIX  avgt   10   145.702 ±   0.303  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM      BASELINE  avgt   10    19.055 ±   0.407  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM        DPQ_11  avgt   10    74.330 ±   0.834  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10    71.739 ±   1.171  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10    71.936 ±   0.371  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10    73.847 ±   0.563  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM         RADIX  avgt   10   145.735 ±   0.447  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU      BASELINE  avgt   10    18.926 ±   0.117  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU        DPQ_11  avgt   10    81.847 ±   0.376  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   109.397 ±   0.297  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10   119.898 ±   4.568  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10   111.246 ±   0.531  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU         RADIX  avgt   10   141.504 ±   0.273  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    19.198 ±   0.477  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   424.036 ±   1.094  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   663.131 ±   6.763  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   661.103 ±   9.408  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   516.673 ±   1.605  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE         RADIX  avgt   10   396.329 ±   3.193  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER      BASELINE  avgt   10    19.062 ±   0.402  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER        DPQ_11  avgt   10   682.516 ±   3.470  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   785.393 ±   4.609  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   785.990 ±   6.845  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10   706.870 ±  69.795  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER         RADIX  avgt   10   424.708 ±   5.464  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    18.919 ±   0.109  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10    73.862 ±   0.403  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10    71.738 ±   1.159  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10    71.946 ±   0.347  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10    73.868 ±   0.557  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH         RADIX  avgt   10   146.001 ±   0.471  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM      BASELINE  avgt   10    18.924 ±   0.101  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM        DPQ_11  avgt   10    73.936 ±   0.422  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10    71.042 ±   0.536  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10    71.965 ±   0.306  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10    73.852 ±   0.573  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM         RADIX  avgt   10   145.797 ±   0.449  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU      BASELINE  avgt   10    19.059 ±   0.404  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU        DPQ_11  avgt   10    86.768 ±  10.429  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10   108.532 ±   0.297  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10   108.887 ±   0.345  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10    73.840 ±   0.554  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU         RADIX  avgt   10   156.648 ±   0.753  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    18.915 ±   0.122  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   236.830 ±   2.163  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   408.754 ±   9.786  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   484.868 ±  30.143  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   461.022 ±   0.498  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE         RADIX  avgt   10   416.695 ±   1.188  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER      BASELINE  avgt   10    18.906 ±   0.103  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER        DPQ_11  avgt   10   139.011 ±   0.290  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER  DPQ_18_11_21  avgt   10   165.206 ±   1.939  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER    DPQ_18_11I  avgt   10   217.472 ±   6.103  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER    DPQ_18_11P  avgt   10    74.030 ±   0.579  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER         RADIX  avgt   10   141.423 ±   0.493  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH      BASELINE  avgt   10    18.917 ±   0.091  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH        DPQ_11  avgt   10    74.129 ±   0.680  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10    71.241 ±   0.569  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH    DPQ_18_11I  avgt   10    71.964 ±   0.504  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    74.029 ±   0.564  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH         RADIX  avgt   10   121.416 ±   0.895  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM      BASELINE  avgt   10    19.047 ±   0.383  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM        DPQ_11  avgt   10    73.870 ±   0.464  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM  DPQ_18_11_21  avgt   10    71.870 ±   1.081  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM    DPQ_18_11I  avgt   10    71.952 ±   0.483  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM    DPQ_18_11P  avgt   10    74.018 ±   0.575  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM         RADIX  avgt   10   121.091 ±   0.470  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU      BASELINE  avgt   10    19.056 ±   0.375  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU        DPQ_11  avgt   10    80.264 ±   0.518  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU  DPQ_18_11_21  avgt   10   108.535 ±   0.274  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU    DPQ_18_11I  avgt   10   108.816 ±   0.240  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU    DPQ_18_11P  avgt   10    74.058 ±   0.599  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU         RADIX  avgt   10   121.835 ±  15.261  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE      BASELINE  avgt   10    19.281 ±   0.769  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE        DPQ_11  avgt   10   140.110 ±   8.106  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10   162.069 ±   8.144  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   212.215 ±  18.925  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    74.918 ±   2.681  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE         RADIX  avgt   10   124.335 ±  17.364  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER      BASELINE  avgt   10    18.926 ±   0.115  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER        DPQ_11  avgt   10   765.887 ±   4.423  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER  DPQ_18_11_21  avgt   10   702.295 ±  19.500  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER    DPQ_18_11I  avgt   10   723.473 ±   5.742  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER    DPQ_18_11P  avgt   10   538.240 ±  10.451  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER         RADIX  avgt   10  3693.620 ± 206.482  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH      BASELINE  avgt   10    19.198 ±   0.471  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH        DPQ_11  avgt   10   342.648 ±  14.434  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10   430.136 ±   4.968  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10   423.408 ±  20.622  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   872.457 ±  12.529  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH         RADIX  avgt   10  3731.619 ±  10.840  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM      BASELINE  avgt   10    18.920 ±   0.107  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM        DPQ_11  avgt   10   338.668 ±  20.317  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10   426.348 ±   1.415  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   428.151 ±   6.336  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM    DPQ_18_11P  avgt   10   867.726 ±   2.534  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM         RADIX  avgt   10  3753.253 ±  32.041  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU      BASELINE  avgt   10    18.923 ±   0.115  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU        DPQ_11  avgt   10   344.411 ±   1.810  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   460.313 ±   0.531  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   453.377 ±   9.087  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   874.287 ±   7.227  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU         RADIX  avgt   10  3571.363 ± 221.032  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE      BASELINE  avgt   10    18.911 ±   0.106  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE        DPQ_11  avgt   10   232.974 ±   0.369  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10   408.389 ±   5.509  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   361.937 ±   6.971  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10   137.508 ±   2.099  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE         RADIX  avgt   10  4092.964 ±  51.039  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER      BASELINE  avgt   10    19.062 ±   0.405  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER        DPQ_11  avgt   10   731.955 ±  12.894  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10   864.194 ±   9.102  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER    DPQ_18_11I  avgt   10   870.543 ±  19.654  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER    DPQ_18_11P  avgt   10   768.219 ±   0.426  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER         RADIX  avgt   10   766.290 ±   0.966  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH      BASELINE  avgt   10    18.922 ±   0.117  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH        DPQ_11  avgt   10   310.164 ±  21.268  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10   456.779 ±   2.403  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10   467.051 ±   7.190  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10   872.261 ±   6.717  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH         RADIX  avgt   10  3564.068 ± 243.408  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM      BASELINE  avgt   10    19.064 ±   0.401  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM        DPQ_11  avgt   10   506.252 ±  35.844  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10   535.694 ±  12.921  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10   372.417 ± 100.985  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10   870.175 ±   3.620  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM         RADIX  avgt   10  3877.944 ±  11.297  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU      BASELINE  avgt   10    18.924 ±   0.113  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU        DPQ_11  avgt   10    81.137 ±   0.389  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10   114.158 ±   3.245  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10   112.585 ±   0.343  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    73.855 ±   0.569  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU         RADIX  avgt   10   156.989 ±   0.597  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE      BASELINE  avgt   10    18.922 ±   0.104  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE        DPQ_11  avgt   10   736.134 ±   6.693  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10   727.392 ±  10.964  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   682.855 ±   4.782  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10   541.983 ±   2.562  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE         RADIX  avgt   10  3988.771 ± 179.565  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER      BASELINE  avgt   10    18.932 ±   0.126  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER        DPQ_11  avgt   10   671.768 ±  63.112  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10  1105.658 ±   5.723  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER    DPQ_18_11I  avgt   10  1113.894 ±  17.764  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER    DPQ_18_11P  avgt   10  1052.271 ±   1.339  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER         RADIX  avgt   10   821.478 ±  22.478  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH      BASELINE  avgt   10    18.920 ±   0.104  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH        DPQ_11  avgt   10   284.766 ±   0.728  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10   538.425 ±   7.600  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10   289.326 ±  15.304  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10   913.733 ±   7.289  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH         RADIX  avgt   10  3623.712 ± 175.192  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM      BASELINE  avgt   10    18.919 ±   0.110  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM        DPQ_11  avgt   10   426.310 ±   3.324  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10   571.158 ±   7.715  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10   462.929 ±   6.698  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10   864.571 ±   7.161  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM         RADIX  avgt   10  3824.620 ±  70.830  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU      BASELINE  avgt   10    18.918 ±   0.111  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU        DPQ_11  avgt   10    91.189 ±   1.953  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   120.500 ±   0.506  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10   118.459 ±   0.232  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10   195.231 ±   1.102  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU         RADIX  avgt   10   151.627 ±   0.323  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE      BASELINE  avgt   10    18.923 ±   0.109  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE        DPQ_11  avgt   10   909.545 ± 283.821  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   751.761 ±   6.239  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   782.116 ±   4.618  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10  1228.503 ±   8.566  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE         RADIX  avgt   10  4137.010 ± 354.748  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER      BASELINE  avgt   10    18.919 ±   0.101  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER        DPQ_11  avgt   10   751.108 ±   7.054  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10   830.310 ±   5.072  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10   910.808 ±   4.463  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10   868.691 ±   2.196  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER         RADIX  avgt   10   815.014 ±  24.754  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    19.201 ±   0.473  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10   288.509 ±   1.282  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10   434.494 ±  14.150  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10   440.105 ±   0.457  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10   871.329 ±  17.532  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH         RADIX  avgt   10  3538.217 ±  20.652  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM      BASELINE  avgt   10    18.922 ±   0.103  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM        DPQ_11  avgt   10   409.917 ±   7.611  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10   561.757 ±  13.882  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10   384.964 ±   5.836  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10   884.106 ±   5.410  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM         RADIX  avgt   10  3527.310 ±  25.987  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU      BASELINE  avgt   10    18.915 ±   0.100  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU        DPQ_11  avgt   10    92.308 ±   0.682  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   117.427 ±   0.314  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10   114.659 ±   0.116  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10   137.975 ±   3.941  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU         RADIX  avgt   10   146.543 ±   0.154  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    18.928 ±   0.110  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   801.973 ±   6.776  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   836.854 ±  12.341  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   844.778 ±   6.528  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   796.236 ±   7.006  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE         RADIX  avgt   10  4308.315 ± 426.578  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER      BASELINE  avgt   10    18.923 ±   0.116  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER        DPQ_11  avgt   10   752.167 ±   5.470  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   806.448 ±   3.410  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   781.970 ±   2.122  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10   719.745 ±   1.491  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER         RADIX  avgt   10   806.517 ±   7.813  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    18.914 ±   0.114  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10   318.819 ±   1.744  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10   398.879 ±   0.420  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10   434.862 ±   3.259  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10   741.551 ±   6.468  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH         RADIX  avgt   10  3691.662 ±  76.406  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM      BASELINE  avgt   10    18.917 ±   0.120  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM        DPQ_11  avgt   10   431.702 ±   6.772  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10   511.301 ±  13.810  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10   339.970 ±   2.797  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10   856.581 ±   5.298  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM         RADIX  avgt   10  3673.098 ± 236.072  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU      BASELINE  avgt   10    19.505 ±   0.224  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU        DPQ_11  avgt   10    81.352 ±   0.264  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10   114.387 ±   3.717  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10   112.710 ±   0.257  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10    73.857 ±   0.553  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU         RADIX  avgt   10   146.738 ±  15.462  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    18.923 ±   0.100  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   785.483 ±  24.118  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   870.116 ±   3.950  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   934.839 ± 230.664  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   735.287 ±   5.398  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE         RADIX  avgt   10  4610.919 ±  67.283  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER      BASELINE  avgt   10    18.907 ±   0.098  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER        DPQ_11  avgt   10   142.244 ±   0.567  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER  DPQ_18_11_21  avgt   10   164.328 ±   0.660  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER    DPQ_18_11I  avgt   10   212.619 ±   2.294  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER    DPQ_18_11P  avgt   10    74.041 ±   0.593  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER         RADIX  avgt   10   135.946 ±   5.291  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH      BASELINE  avgt   10    18.897 ±   0.093  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH        DPQ_11  avgt   10   231.409 ±   0.781  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10   184.874 ±   1.591  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH    DPQ_18_11I  avgt   10   194.398 ±   3.851  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    74.052 ±   0.563  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH         RADIX  avgt   10   138.023 ±   0.501  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM      BASELINE  avgt   10    22.347 ±  10.351  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM        DPQ_11  avgt   10   272.072 ± 128.226  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM  DPQ_18_11_21  avgt   10   192.852 ±  92.322  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM    DPQ_18_11I  avgt   10   255.286 ± 129.123  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM    DPQ_18_11P  avgt   10    86.971 ±  41.006  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM         RADIX  avgt   10   173.327 ±  91.387  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU      BASELINE  avgt   10    18.915 ±   0.106  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU        DPQ_11  avgt   10    81.459 ±   0.339  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU  DPQ_18_11_21  avgt   10   115.221 ±   0.259  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU    DPQ_18_11I  avgt   10   112.770 ±   0.296  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU    DPQ_18_11P  avgt   10    74.062 ±   0.637  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU         RADIX  avgt   10   133.543 ±   3.258  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE      BASELINE  avgt   10    18.916 ±   0.119  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE        DPQ_11  avgt   10   137.743 ±   0.770  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10   156.609 ±   0.503  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   205.085 ±   0.485  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    74.273 ±   0.672  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE         RADIX  avgt   10   131.220 ±   0.840  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER      BASELINE  avgt   10    18.910 ±   0.104  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER        DPQ_11  avgt   10   721.709 ±   5.973  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER  DPQ_18_11_21  avgt   10   857.025 ±   1.563  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER    DPQ_18_11I  avgt   10   871.150 ±  19.416  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER    DPQ_18_11P  avgt   10   768.081 ±   0.407  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER         RADIX  avgt   10   766.468 ±   0.745  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH      BASELINE  avgt   10    18.922 ±   0.109  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH        DPQ_11  avgt   10   505.110 ±   9.323  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10  1115.017 ±   1.852  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10  1116.490 ±   2.459  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   956.323 ±  11.962  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH         RADIX  avgt   10  3618.925 ± 174.720  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM      BASELINE  avgt   10    18.914 ±   0.111  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM        DPQ_11  avgt   10   513.839 ±  12.276  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10   662.540 ±   2.530  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   595.641 ±  11.717  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM    DPQ_18_11P  avgt   10   971.478 ±   6.976  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM         RADIX  avgt   10  3822.633 ±  39.305  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU      BASELINE  avgt   10    18.924 ±   0.111  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU        DPQ_11  avgt   10   314.626 ±   8.468  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   476.409 ±   5.627  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   463.830 ±  15.772  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   847.086 ±   0.977  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU         RADIX  avgt   10  3457.221 ±  16.345  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE      BASELINE  avgt   10    18.916 ±   0.110  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE        DPQ_11  avgt   10   817.574 ±   4.355  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10   747.591 ±  12.817  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   746.046 ±   8.504  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10   590.510 ±   3.082  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE         RADIX  avgt   10  4477.628 ±  26.691  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER      BASELINE  avgt   10    18.915 ±   0.103  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER        DPQ_11  avgt   10   860.433 ±  11.863  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10   831.347 ±   5.400  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER    DPQ_18_11I  avgt   10   872.327 ±   1.747  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER    DPQ_18_11P  avgt   10   952.632 ±  19.734  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER         RADIX  avgt   10  3972.869 ±  22.906  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH      BASELINE  avgt   10    18.911 ±   0.107  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH        DPQ_11  avgt   10   765.509 ±  20.502  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10   885.338 ±   8.461  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10   859.173 ±  11.177  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10   843.358 ±   3.610  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH         RADIX  avgt   10   826.125 ±   6.533  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM      BASELINE  avgt   10    18.920 ±   0.116  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM        DPQ_11  avgt   10   839.010 ±   4.023  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10   949.054 ±   5.137  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10   918.212 ±  10.167  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10  1029.312 ±   4.866  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM         RADIX  avgt   10  3855.976 ±  71.670  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU      BASELINE  avgt   10    18.927 ±   0.106  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU        DPQ_11  avgt   10    95.621 ±   0.180  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10   114.650 ±   0.648  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10   115.933 ±   0.315  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    73.886 ±   0.616  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU         RADIX  avgt   10   156.985 ±   0.193  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE      BASELINE  avgt   10    18.919 ±   0.121  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE        DPQ_11  avgt   10   543.147 ±  15.311  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10   449.176 ±   4.473  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   504.694 ±   2.674  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10   277.319 ±   0.578  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE         RADIX  avgt   10  1060.687 ±   3.678  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER      BASELINE  avgt   10    18.919 ±   0.108  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER        DPQ_11  avgt   10   949.391 ±   5.759  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10   879.927 ±   4.236  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER    DPQ_18_11I  avgt   10   915.195 ±  11.448  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER    DPQ_18_11P  avgt   10  1000.286 ±  18.701  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER         RADIX  avgt   10  3887.442 ± 239.811  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH      BASELINE  avgt   10    18.927 ±   0.108  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH        DPQ_11  avgt   10   652.217 ±  14.293  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10   792.003 ±  20.404  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10   679.421 ±   9.650  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10   969.931 ±   0.574  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH         RADIX  avgt   10   851.825 ±   1.074  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM      BASELINE  avgt   10    18.919 ±   0.115  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM        DPQ_11  avgt   10   845.945 ±   9.091  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10  1019.702 ±   5.978  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10   953.283 ±  12.267  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10  1018.161 ±   7.078  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM         RADIX  avgt   10  3772.512 ±   9.451  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU      BASELINE  avgt   10    19.072 ±   0.397  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU        DPQ_11  avgt   10   228.028 ±   0.370  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   154.371 ±   2.752  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10   145.332 ±   0.451  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10   495.404 ±   4.412  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU         RADIX  avgt   10   180.242 ±   1.134  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE      BASELINE  avgt   10    18.915 ±   0.109  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE        DPQ_11  avgt   10   672.310 ±   3.028  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   632.351 ±   5.353  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   723.929 ±   5.715  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10  1256.412 ±   5.409  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE         RADIX  avgt   10   934.500 ±   4.022  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER      BASELINE  avgt   10    18.919 ±   0.112  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER        DPQ_11  avgt   10   667.923 ±  17.403  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10  1029.577 ±   2.558  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10  1028.434 ±  14.228  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10  1034.955 ±   1.966  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER         RADIX  avgt   10  3831.896 ± 207.153  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    19.069 ±   0.400  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10   724.236 ±   6.880  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10   851.775 ±  15.888  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10   869.794 ±  26.548  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10   942.572 ±  15.942  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH         RADIX  avgt   10   878.189 ±   5.095  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM      BASELINE  avgt   10    19.067 ±   0.399  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM        DPQ_11  avgt   10   843.214 ±   4.415  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10  1012.566 ±   6.730  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10   990.082 ±   4.256  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10  1034.499 ±  13.596  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM         RADIX  avgt   10  3864.705 ±  32.543  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU      BASELINE  avgt   10    18.915 ±   0.113  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU        DPQ_11  avgt   10   231.370 ±   0.325  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   301.475 ±   0.421  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10   304.474 ±   1.521  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10   268.947 ±   0.471  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU         RADIX  avgt   10   162.410 ±   0.225  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    18.918 ±   0.102  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   564.310 ±   6.081  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   756.720 ±   8.393  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   748.959 ±   3.410  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   613.736 ±   4.594  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE         RADIX  avgt   10  1083.249 ±   7.574  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER      BASELINE  avgt   10    18.918 ±   0.110  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER        DPQ_11  avgt   10   795.745 ±   6.718  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   866.116 ±  32.652  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   855.883 ±  20.830  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10  1002.239 ±   6.303  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER         RADIX  avgt   10  3711.697 ±  15.246  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    18.925 ±   0.111  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10   681.122 ±  19.079  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10  1236.925 ± 118.036  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10  1154.940 ± 153.554  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10   756.040 ±   1.576  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH         RADIX  avgt   10   869.814 ±   0.842  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM      BASELINE  avgt   10    18.925 ±   0.127  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM        DPQ_11  avgt   10   715.629 ±  10.481  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10  1047.992 ±   5.595  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10  1017.370 ±   4.253  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10  1032.254 ±   5.430  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM         RADIX  avgt   10  3807.517 ±  45.600  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU      BASELINE  avgt   10    18.923 ±   0.116  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU        DPQ_11  avgt   10    95.691 ±   0.138  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10   113.581 ±   0.524  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10   116.498 ±   0.369  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10    73.848 ±   0.571  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU         RADIX  avgt   10   156.527 ±   0.731  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    18.915 ±   0.100  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   676.302 ±   3.631  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   685.435 ±   1.723  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   770.953 ±  27.969  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   568.212 ±   2.355  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE         RADIX  avgt   10  1070.403 ±   5.094  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER      BASELINE  avgt   10    18.924 ±   0.107  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER        DPQ_11  avgt   10   137.773 ±   0.754  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER  DPQ_18_11_21  avgt   10   158.139 ±   2.754  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER    DPQ_18_11I  avgt   10   205.520 ±   0.939  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER    DPQ_18_11P  avgt   10    74.030 ±   0.572  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER         RADIX  avgt   10   131.732 ±   0.334  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH      BASELINE  avgt   10    19.104 ±   0.580  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH        DPQ_11  avgt   10   139.008 ±   0.353  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10   164.495 ±   0.561  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH    DPQ_18_11I  avgt   10   210.604 ±   0.577  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    74.059 ±   0.597  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH         RADIX  avgt   10   135.850 ±   4.950  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM      BASELINE  avgt   10    18.914 ±   0.109  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM        DPQ_11  avgt   10   144.390 ±   0.408  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM  DPQ_18_11_21  avgt   10   177.868 ±   3.368  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM    DPQ_18_11I  avgt   10   231.236 ±   1.478  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM    DPQ_18_11P  avgt   10    74.282 ±   0.678  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM         RADIX  avgt   10   143.941 ±   5.572  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU      BASELINE  avgt   10    18.930 ±   0.124  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU        DPQ_11  avgt   10    95.879 ±   0.213  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU  DPQ_18_11_21  avgt   10   114.694 ±   0.628  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU    DPQ_18_11I  avgt   10   116.066 ±   0.775  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU    DPQ_18_11P  avgt   10    74.045 ±   0.540  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU         RADIX  avgt   10   131.387 ±   0.622  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE      BASELINE  avgt   10    18.909 ±   0.094  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE        DPQ_11  avgt   10   137.704 ±   0.641  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10   160.317 ±   5.782  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   205.043 ±   0.423  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    74.048 ±   0.604  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE         RADIX  avgt   10   111.999 ±   0.520  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER      BASELINE  avgt   10    18.914 ±   0.110  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER        DPQ_11  avgt   10   865.697 ±  10.431  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER  DPQ_18_11_21  avgt   10   873.063 ±   7.328  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER    DPQ_18_11I  avgt   10   895.070 ±  13.161  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER    DPQ_18_11P  avgt   10   949.812 ±   0.596  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER         RADIX  avgt   10  3852.041 ±  42.225  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH      BASELINE  avgt   10    18.909 ±   0.107  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH        DPQ_11  avgt   10   703.080 ±   0.760  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10   943.345 ±   8.921  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10   988.569 ±   2.547  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   875.861 ±  11.823  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH         RADIX  avgt   10  3641.583 ± 210.640  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM      BASELINE  avgt   10    18.923 ±   0.105  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM        DPQ_11  avgt   10   781.760 ±   9.251  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10   966.422 ±  17.907  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   924.998 ±  14.379  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM    DPQ_18_11P  avgt   10  1021.587 ±   6.260  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM         RADIX  avgt   10  3820.430 ±  33.380  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU      BASELINE  avgt   10    18.923 ±   0.110  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU        DPQ_11  avgt   10   354.227 ±  31.838  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   730.604 ±   4.934  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   720.190 ±  12.621  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   697.987 ±   0.583  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU         RADIX  avgt   10  3627.698 ± 314.939  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE      BASELINE  avgt   10    18.923 ±   0.113  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE        DPQ_11  avgt   10   549.738 ±   4.582  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10   542.358 ±  10.752  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   614.443 ±   4.906  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10   336.838 ±   2.306  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE         RADIX  avgt   10  4340.894 ± 196.110  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER      BASELINE  avgt   10    18.919 ±   0.113  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER        DPQ_11  avgt   10   981.789 ±  19.110  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER  DPQ_18_11_21  avgt   10  1106.040 ±  12.211  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER    DPQ_18_11I  avgt   10  1094.849 ±  18.556  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER    DPQ_18_11P  avgt   10  1019.802 ±   5.194  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER         RADIX  avgt   10  3628.933 ±  20.868  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH      BASELINE  avgt   10    19.201 ±   0.471  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH        DPQ_11  avgt   10   790.435 ±   5.305  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt   10   876.276 ±  34.879  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH    DPQ_18_11I  avgt   10   842.171 ±   9.253  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH    DPQ_18_11P  avgt   10   573.925 ±   8.273  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH         RADIX  avgt   10   342.435 ±   1.907  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM      BASELINE  avgt   10    18.917 ±   0.103  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM        DPQ_11  avgt   10   958.630 ±   4.009  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM  DPQ_18_11_21  avgt   10  1025.770 ±   4.422  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM    DPQ_18_11I  avgt   10  1037.018 ±  27.937  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM    DPQ_18_11P  avgt   10  1043.780 ±   6.730  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM         RADIX  avgt   10  3786.336 ± 307.163  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU      BASELINE  avgt   10    18.916 ±   0.111  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU        DPQ_11  avgt   10   138.130 ±   0.667  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU  DPQ_18_11_21  avgt   10   159.773 ±   5.749  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU    DPQ_18_11I  avgt   10   204.769 ±   0.802  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU    DPQ_18_11P  avgt   10    73.884 ±   0.624  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU         RADIX  avgt   10   156.836 ±   0.390  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE      BASELINE  avgt   10    18.923 ±   0.105  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE        DPQ_11  avgt   10   351.004 ±   1.980  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt   10   316.703 ±   6.182  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE    DPQ_18_11I  avgt   10   373.056 ±   2.402  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE    DPQ_18_11P  avgt   10   185.906 ±   1.394  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE         RADIX  avgt   10   584.211 ±   9.761  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER      BASELINE  avgt   10    19.198 ±   0.478  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER        DPQ_11  avgt   10   949.548 ±  95.155  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER  DPQ_18_11_21  avgt   10   939.175 ±  40.182  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER    DPQ_18_11I  avgt   10   912.647 ±   0.736  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER    DPQ_18_11P  avgt   10  1051.848 ±  12.323  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER         RADIX  avgt   10  3528.813 ±  27.024  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH      BASELINE  avgt   10    18.920 ±   0.102  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH        DPQ_11  avgt   10   653.738 ±   1.746  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt   10   828.531 ±  21.114  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH    DPQ_18_11I  avgt   10   821.715 ±   4.493  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH    DPQ_18_11P  avgt   10  1169.886 ±   7.727  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH         RADIX  avgt   10   435.261 ±   0.470  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM      BASELINE  avgt   10    19.128 ±   0.604  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM        DPQ_11  avgt   10   980.499 ± 411.238  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM  DPQ_18_11_21  avgt   10   953.803 ±  18.137  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM    DPQ_18_11I  avgt   10  1033.586 ±   6.789  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM    DPQ_18_11P  avgt   10  1045.995 ±   6.270  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM         RADIX  avgt   10  3906.766 ±  16.211  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU      BASELINE  avgt   10    18.923 ±   0.118  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU        DPQ_11  avgt   10   348.306 ±   0.261  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU  DPQ_18_11_21  avgt   10   335.660 ±   1.698  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU    DPQ_18_11I  avgt   10   414.622 ±  10.093  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU    DPQ_18_11P  avgt   10  1293.551 ±   6.950  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU         RADIX  avgt   10   237.497 ±   0.319  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE      BASELINE  avgt   10    18.927 ±   0.115  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE        DPQ_11  avgt   10   532.346 ±   4.023  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt   10   524.862 ±   4.008  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE    DPQ_18_11I  avgt   10   656.473 ±   2.371  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE    DPQ_18_11P  avgt   10  1266.361 ±   4.126  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE         RADIX  avgt   10   627.864 ±   2.060  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER      BASELINE  avgt   10    18.919 ±   0.117  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER        DPQ_11  avgt   10   680.538 ±   8.118  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt   10  1090.389 ±   9.114  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER    DPQ_18_11I  avgt   10  1091.756 ±  15.136  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER    DPQ_18_11P  avgt   10  1044.779 ±   3.764  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER         RADIX  avgt   10  3711.947 ± 217.305  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH      BASELINE  avgt   10    18.930 ±   0.122  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH        DPQ_11  avgt   10   856.610 ±  11.752  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt   10  1190.526 ±   7.133  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt   10  1200.752 ±  59.559  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt   10   958.398 ±   0.617  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH         RADIX  avgt   10   712.076 ±  21.214  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM      BASELINE  avgt   10    18.916 ±   0.122  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM        DPQ_11  avgt   10   814.363 ±   5.337  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt   10   966.826 ±   5.573  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt   10  1069.617 ±   9.632  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt   10  1066.107 ±  10.551  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM         RADIX  avgt   10  3815.899 ± 277.596  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU      BASELINE  avgt   10    18.919 ±   0.104  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU        DPQ_11  avgt   10   422.552 ±   5.144  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt   10   663.987 ±   0.675  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt   10   656.669 ±   2.043  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt   10   515.716 ±   0.676  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU         RADIX  avgt   10   394.267 ±   9.148  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE      BASELINE  avgt   10    19.207 ±   0.465  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE        DPQ_11  avgt   10   519.895 ±   3.311  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt   10   735.121 ±  25.398  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt   10   746.804 ±   7.021  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt   10   550.616 ±   2.321  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE         RADIX  avgt   10   761.294 ±  12.736  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER      BASELINE  avgt   10    18.923 ±   0.112  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER        DPQ_11  avgt   10   923.326 ±  55.371  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt   10   852.739 ±  13.133  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER    DPQ_18_11I  avgt   10   851.245 ±  14.933  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER    DPQ_18_11P  avgt   10  1060.779 ±   1.045  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER         RADIX  avgt   10  3719.505 ± 118.249  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH      BASELINE  avgt   10    18.924 ±   0.118  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH        DPQ_11  avgt   10   783.589 ±   7.829  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt   10   734.051 ±   0.977  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt   10   722.944 ±  25.906  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt   10   569.555 ±   3.014  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH         RADIX  avgt   10   765.591 ±   1.244  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM      BASELINE  avgt   10    19.059 ±   0.410  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM        DPQ_11  avgt   10   952.713 ±   9.872  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt   10  1013.845 ±  13.390  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt   10  1045.413 ±  10.186  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt   10  1054.443 ±   8.041  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM         RADIX  avgt   10  3774.790 ± 192.402  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU      BASELINE  avgt   10    18.926 ±   0.105  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU        DPQ_11  avgt   10   330.351 ±   4.043  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt   10   326.330 ±  11.071  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt   10   380.220 ±   1.085  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt   10   256.484 ±   0.394  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU         RADIX  avgt   10   365.712 ±   8.201  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE      BASELINE  avgt   10    19.235 ±   0.537  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE        DPQ_11  avgt   10   409.008 ±   3.018  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt   10   544.035 ±   8.143  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt   10   652.206 ±   2.379  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt   10   523.942 ±   0.902  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE         RADIX  avgt   10   787.786 ±   5.154  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER      BASELINE  avgt   10    19.093 ±   0.529  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER        DPQ_11  avgt   10   142.239 ±   0.700  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER  DPQ_18_11_21  avgt   10   164.089 ±   0.741  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER    DPQ_18_11I  avgt   10   213.981 ±   4.378  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER    DPQ_18_11P  avgt   10    74.261 ±   0.648  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER         RADIX  avgt   10   139.700 ±   0.542  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH      BASELINE  avgt   10    18.897 ±   0.087  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH        DPQ_11  avgt   10   139.037 ±   0.369  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH  DPQ_18_11_21  avgt   10   165.357 ±   3.966  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH    DPQ_18_11I  avgt   10   221.321 ±   0.608  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH    DPQ_18_11P  avgt   10    74.060 ±   0.614  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH         RADIX  avgt   10   141.019 ±   0.649  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM      BASELINE  avgt   10    18.906 ±   0.088  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM        DPQ_11  avgt   10   148.301 ±   2.754  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM  DPQ_18_11_21  avgt   10   169.036 ±   0.532  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM    DPQ_18_11I  avgt   10   235.777 ±   1.996  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM    DPQ_18_11P  avgt   10    74.043 ±   0.558  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM         RADIX  avgt   10   119.138 ±   0.838  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU      BASELINE  avgt   10    19.246 ±   1.212  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU        DPQ_11  avgt   10   139.623 ±   3.783  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU  DPQ_18_11_21  avgt   10   162.132 ±   7.890  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU    DPQ_18_11I  avgt   10   207.395 ±   7.557  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU    DPQ_18_11P  avgt   10    74.817 ±   2.207  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU         RADIX  avgt   10   132.915 ±   3.761  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE      BASELINE  avgt   10    21.770 ±   9.149  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE        DPQ_11  avgt   10   158.120 ±  64.809  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE  DPQ_18_11_21  avgt   10   179.130 ±  71.779  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE    DPQ_18_11I  avgt   10   237.174 ± 101.501  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE    DPQ_18_11P  avgt   10    85.372 ±  35.092  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE         RADIX  avgt   10   128.541 ±  52.824  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER      BASELINE  avgt   10    19.075 ±   0.406  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER        DPQ_11  avgt   10   976.672 ±   2.424  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER  DPQ_18_11_21  avgt   10  1104.392 ±  15.977  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER    DPQ_18_11I  avgt   10  1087.133 ±   7.747  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER    DPQ_18_11P  avgt   10  1018.127 ±   6.138  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER         RADIX  avgt   10  3779.219 ± 202.648  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH      BASELINE  avgt   10    18.915 ±   0.103  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH        DPQ_11  avgt   10   834.935 ±   0.377  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH  DPQ_18_11_21  avgt   10   802.953 ±   9.933  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH    DPQ_18_11I  avgt   10   781.524 ±   6.649  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH    DPQ_18_11P  avgt   10   666.150 ±   1.248  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH         RADIX  avgt   10  3679.689 ± 173.603  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM      BASELINE  avgt   10    18.926 ±   0.102  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM        DPQ_11  avgt   10   990.800 ±   5.598  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM  DPQ_18_11_21  avgt   10  1006.980 ±   4.758  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM    DPQ_18_11I  avgt   10   993.197 ±   4.510  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM    DPQ_18_11P  avgt   10  1052.133 ±  12.692  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM         RADIX  avgt   10  3752.134 ± 187.480  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU      BASELINE  avgt   10    18.923 ±   0.111  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU        DPQ_11  avgt   10   631.965 ±  14.164  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU  DPQ_18_11_21  avgt   10   548.732 ±   9.491  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU    DPQ_18_11I  avgt   10   562.445 ±   5.508  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU    DPQ_18_11P  avgt   10   328.864 ±   1.335  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU         RADIX  avgt   10  3669.319 ± 185.618  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE      BASELINE  avgt   10    18.923 ±   0.108  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE        DPQ_11  avgt   10   439.045 ±   3.374  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE  DPQ_18_11_21  avgt   10   418.779 ±   2.277  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE    DPQ_18_11I  avgt   10   460.279 ±   1.096  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE    DPQ_18_11P  avgt   10   247.105 ±   1.643  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE         RADIX  avgt   10  4276.891 ± 110.441  ns/op

Benchmark result is saved to sort-50,100.out
