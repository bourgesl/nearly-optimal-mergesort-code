# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 0.00% complete, ETA 00:14:24
# Fork: 1 of 1
# Warmup Iteration   1: 18.652 ns/op
# Warmup Iteration   2: 23.616 ns/op
# Warmup Iteration   3: 13.380 ns/op
Iteration   1: 13.349 ns/op
Iteration   2: 13.365 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.153 ns/op [Average]
  (min, avg, max) = (13.349, 13.356, 13.365), stdev = 0.008
  CI (99.9%): [13.203, 13.510] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 0.07% complete, ETA 00:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 916.635 ns/op
# Warmup Iteration   2: 385.539 ns/op
# Warmup Iteration   3: 285.244 ns/op
Iteration   1: 285.134 ns/op
Iteration   2: 285.421 ns/op
Iteration   3: 285.105 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  285.220 ±(99.9%) 3.191 ns/op [Average]
  (min, avg, max) = (285.105, 285.220, 285.421), stdev = 0.175
  CI (99.9%): [282.029, 288.411] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 0.14% complete, ETA 00:32:03
# Fork: 1 of 1
# Warmup Iteration   1: 399.974 ns/op
# Warmup Iteration   2: 360.618 ns/op
# Warmup Iteration   3: 252.348 ns/op
Iteration   1: 252.132 ns/op
Iteration   2: 253.195 ns/op
Iteration   3: 252.624 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  252.650 ±(99.9%) 9.708 ns/op [Average]
  (min, avg, max) = (252.132, 252.650, 253.195), stdev = 0.532
  CI (99.9%): [242.943, 262.358] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 0.21% complete, ETA 00:31:09
# Fork: 1 of 1
# Warmup Iteration   1: 1232.629 ns/op
# Warmup Iteration   2: 442.107 ns/op
# Warmup Iteration   3: 297.590 ns/op
Iteration   1: 297.701 ns/op
Iteration   2: 297.557 ns/op
Iteration   3: 297.741 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  297.666 ±(99.9%) 1.766 ns/op [Average]
  (min, avg, max) = (297.557, 297.666, 297.741), stdev = 0.097
  CI (99.9%): [295.900, 299.433] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 0.28% complete, ETA 00:30:36
# Fork: 1 of 1
# Warmup Iteration   1: 342.468 ns/op
# Warmup Iteration   2: 285.004 ns/op
# Warmup Iteration   3: 188.859 ns/op
Iteration   1: 188.800 ns/op
Iteration   2: 188.998 ns/op
Iteration   3: 188.964 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  188.921 ±(99.9%) 1.935 ns/op [Average]
  (min, avg, max) = (188.800, 188.921, 188.998), stdev = 0.106
  CI (99.9%): [186.986, 190.855] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 0.35% complete, ETA 00:30:20
# Fork: 1 of 1
# Warmup Iteration   1: 384.269 ns/op
# Warmup Iteration   2: 335.600 ns/op
# Warmup Iteration   3: 217.506 ns/op
Iteration   1: 217.763 ns/op
Iteration   2: 217.460 ns/op
Iteration   3: 217.552 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  217.592 ±(99.9%) 2.837 ns/op [Average]
  (min, avg, max) = (217.460, 217.592, 217.763), stdev = 0.156
  CI (99.9%): [214.754, 220.429] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 0.42% complete, ETA 00:30:07
# Fork: 1 of 1
# Warmup Iteration   1: 19.119 ns/op
# Warmup Iteration   2: 23.781 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.349 ns/op
Iteration   2: 13.371 ns/op
Iteration   3: 13.373 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.364 ±(99.9%) 0.248 ns/op [Average]
  (min, avg, max) = (13.349, 13.364, 13.373), stdev = 0.014
  CI (99.9%): [13.116, 13.613] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 0.49% complete, ETA 00:29:57
# Fork: 1 of 1
# Warmup Iteration   1: 73.615 ns/op
# Warmup Iteration   2: 82.299 ns/op
# Warmup Iteration   3: 51.795 ns/op
Iteration   1: 51.779 ns/op
Iteration   2: 51.795 ns/op
Iteration   3: 51.774 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.782 ±(99.9%) 0.199 ns/op [Average]
  (min, avg, max) = (51.774, 51.782, 51.795), stdev = 0.011
  CI (99.9%): [51.584, 51.981] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 0.56% complete, ETA 00:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 64.087 ns/op
# Warmup Iteration   2: 71.067 ns/op
# Warmup Iteration   3: 44.062 ns/op
Iteration   1: 44.061 ns/op
Iteration   2: 44.058 ns/op
Iteration   3: 44.034 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.051 ±(99.9%) 0.264 ns/op [Average]
  (min, avg, max) = (44.034, 44.051, 44.061), stdev = 0.014
  CI (99.9%): [43.787, 44.315] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 0.63% complete, ETA 00:29:50
# Fork: 1 of 1
# Warmup Iteration   1: 162.666 ns/op
# Warmup Iteration   2: 77.251 ns/op
# Warmup Iteration   3: 47.208 ns/op
Iteration   1: 47.195 ns/op
Iteration   2: 47.267 ns/op
Iteration   3: 47.215 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.226 ±(99.9%) 0.675 ns/op [Average]
  (min, avg, max) = (47.195, 47.226, 47.267), stdev = 0.037
  CI (99.9%): [46.551, 47.900] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 0.69% complete, ETA 00:29:44
# Fork: 1 of 1
# Warmup Iteration   1: 66.352 ns/op
# Warmup Iteration   2: 78.854 ns/op
# Warmup Iteration   3: 46.415 ns/op
Iteration   1: 46.417 ns/op
Iteration   2: 46.558 ns/op
Iteration   3: 46.406 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.461 ±(99.9%) 1.544 ns/op [Average]
  (min, avg, max) = (46.406, 46.461, 46.558), stdev = 0.085
  CI (99.9%): [44.917, 48.005] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 0.76% complete, ETA 00:29:39
# Fork: 1 of 1
# Warmup Iteration   1: 169.042 ns/op
# Warmup Iteration   2: 177.794 ns/op
# Warmup Iteration   3: 93.110 ns/op
Iteration   1: 93.128 ns/op
Iteration   2: 93.023 ns/op
Iteration   3: 93.062 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.071 ±(99.9%) 0.969 ns/op [Average]
  (min, avg, max) = (93.023, 93.071, 93.128), stdev = 0.053
  CI (99.9%): [92.102, 94.040] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 0.83% complete, ETA 00:29:34
# Fork: 1 of 1
# Warmup Iteration   1: 19.653 ns/op
# Warmup Iteration   2: 21.507 ns/op
# Warmup Iteration   3: 13.372 ns/op
Iteration   1: 13.387 ns/op
Iteration   2: 13.369 ns/op
Iteration   3: 13.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.372 ±(99.9%) 0.251 ns/op [Average]
  (min, avg, max) = (13.359, 13.372, 13.387), stdev = 0.014
  CI (99.9%): [13.121, 13.623] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 0.90% complete, ETA 00:29:32
# Fork: 1 of 1
# Warmup Iteration   1: 72.994 ns/op
# Warmup Iteration   2: 78.374 ns/op
# Warmup Iteration   3: 51.453 ns/op
Iteration   1: 51.466 ns/op
Iteration   2: 51.437 ns/op
Iteration   3: 51.429 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.444 ±(99.9%) 0.358 ns/op [Average]
  (min, avg, max) = (51.429, 51.444, 51.466), stdev = 0.020
  CI (99.9%): [51.086, 51.802] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 0.97% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 64.293 ns/op
# Warmup Iteration   2: 68.316 ns/op
# Warmup Iteration   3: 44.069 ns/op
Iteration   1: 44.078 ns/op
Iteration   2: 44.056 ns/op
Iteration   3: 44.043 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.059 ±(99.9%) 0.324 ns/op [Average]
  (min, avg, max) = (44.043, 44.059, 44.078), stdev = 0.018
  CI (99.9%): [43.735, 44.383] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 1.04% complete, ETA 00:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 235.039 ns/op
# Warmup Iteration   2: 74.443 ns/op
# Warmup Iteration   3: 52.112 ns/op
Iteration   1: 52.096 ns/op
Iteration   2: 52.252 ns/op
Iteration   3: 52.080 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.143 ±(99.9%) 1.732 ns/op [Average]
  (min, avg, max) = (52.080, 52.143, 52.252), stdev = 0.095
  CI (99.9%): [50.411, 53.874] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 1.11% complete, ETA 00:29:22
# Fork: 1 of 1
# Warmup Iteration   1: 66.880 ns/op
# Warmup Iteration   2: 77.445 ns/op
# Warmup Iteration   3: 46.454 ns/op
Iteration   1: 46.452 ns/op
Iteration   2: 46.588 ns/op
Iteration   3: 46.433 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.491 ±(99.9%) 1.547 ns/op [Average]
  (min, avg, max) = (46.433, 46.491, 46.588), stdev = 0.085
  CI (99.9%): [44.944, 48.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 1.18% complete, ETA 00:29:19
# Fork: 1 of 1
# Warmup Iteration   1: 163.609 ns/op
# Warmup Iteration   2: 184.889 ns/op
# Warmup Iteration   3: 93.050 ns/op
Iteration   1: 93.099 ns/op
Iteration   2: 93.024 ns/op
Iteration   3: 93.037 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.053 ±(99.9%) 0.727 ns/op [Average]
  (min, avg, max) = (93.024, 93.053, 93.099), stdev = 0.040
  CI (99.9%): [92.326, 93.780] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 1.25% complete, ETA 00:29:17
# Fork: 1 of 1
# Warmup Iteration   1: 18.723 ns/op
# Warmup Iteration   2: 21.959 ns/op
# Warmup Iteration   3: 13.364 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.368 ns/op
Iteration   3: 13.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.166 ns/op [Average]
  (min, avg, max) = (13.350, 13.358, 13.368), stdev = 0.009
  CI (99.9%): [13.192, 13.524] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 1.32% complete, ETA 00:29:15
# Fork: 1 of 1
# Warmup Iteration   1: 77.005 ns/op
# Warmup Iteration   2: 86.624 ns/op
# Warmup Iteration   3: 55.002 ns/op
Iteration   1: 55.033 ns/op
Iteration   2: 54.958 ns/op
Iteration   3: 55.008 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  55.000 ±(99.9%) 0.695 ns/op [Average]
  (min, avg, max) = (54.958, 55.000, 55.033), stdev = 0.038
  CI (99.9%): [54.304, 55.695] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 1.39% complete, ETA 00:29:10
# Fork: 1 of 1
# Warmup Iteration   1: 65.230 ns/op
# Warmup Iteration   2: 73.674 ns/op
# Warmup Iteration   3: 44.048 ns/op
Iteration   1: 44.050 ns/op
Iteration   2: 44.050 ns/op
Iteration   3: 44.066 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.055 ±(99.9%) 0.167 ns/op [Average]
  (min, avg, max) = (44.050, 44.055, 44.066), stdev = 0.009
  CI (99.9%): [43.889, 44.222] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 1.46% complete, ETA 00:29:08
# Fork: 1 of 1
# Warmup Iteration   1: 390.038 ns/op
# Warmup Iteration   2: 103.934 ns/op
# Warmup Iteration   3: 65.278 ns/op
Iteration   1: 65.263 ns/op
Iteration   2: 65.224 ns/op
Iteration   3: 65.289 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  65.259 ±(99.9%) 0.593 ns/op [Average]
  (min, avg, max) = (65.224, 65.259, 65.289), stdev = 0.032
  CI (99.9%): [64.666, 65.852] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 1.53% complete, ETA 00:29:07
# Fork: 1 of 1
# Warmup Iteration   1: 67.194 ns/op
# Warmup Iteration   2: 78.463 ns/op
# Warmup Iteration   3: 46.427 ns/op
Iteration   1: 46.430 ns/op
Iteration   2: 46.583 ns/op
Iteration   3: 46.456 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.490 ±(99.9%) 1.493 ns/op [Average]
  (min, avg, max) = (46.430, 46.490, 46.583), stdev = 0.082
  CI (99.9%): [44.997, 47.982] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 1.60% complete, ETA 00:29:05
# Fork: 1 of 1
# Warmup Iteration   1: 171.959 ns/op
# Warmup Iteration   2: 195.139 ns/op
# Warmup Iteration   3: 97.798 ns/op
Iteration   1: 97.760 ns/op
Iteration   2: 97.753 ns/op
Iteration   3: 97.756 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.756 ±(99.9%) 0.066 ns/op [Average]
  (min, avg, max) = (97.753, 97.756, 97.760), stdev = 0.004
  CI (99.9%): [97.690, 97.823] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 1.67% complete, ETA 00:29:02
# Fork: 1 of 1
# Warmup Iteration   1: 17.648 ns/op
# Warmup Iteration   2: 22.857 ns/op
# Warmup Iteration   3: 13.368 ns/op
Iteration   1: 13.366 ns/op
Iteration   2: 13.377 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.366 ±(99.9%) 0.187 ns/op [Average]
  (min, avg, max) = (13.356, 13.366, 13.377), stdev = 0.010
  CI (99.9%): [13.179, 13.553] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 1.74% complete, ETA 00:29:00
# Fork: 1 of 1
# Warmup Iteration   1: 166.681 ns/op
# Warmup Iteration   2: 141.273 ns/op
# Warmup Iteration   3: 89.632 ns/op
Iteration   1: 89.536 ns/op
Iteration   2: 89.620 ns/op
Iteration   3: 89.632 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.596 ±(99.9%) 0.953 ns/op [Average]
  (min, avg, max) = (89.536, 89.596, 89.632), stdev = 0.052
  CI (99.9%): [88.643, 90.549] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 1.81% complete, ETA 00:28:57
# Fork: 1 of 1
# Warmup Iteration   1: 68.674 ns/op
# Warmup Iteration   2: 72.135 ns/op
# Warmup Iteration   3: 44.053 ns/op
Iteration   1: 44.083 ns/op
Iteration   2: 44.082 ns/op
Iteration   3: 44.063 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.076 ±(99.9%) 0.207 ns/op [Average]
  (min, avg, max) = (44.063, 44.076, 44.083), stdev = 0.011
  CI (99.9%): [43.870, 44.283] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 1.88% complete, ETA 00:28:56
# Fork: 1 of 1
# Warmup Iteration   1: 280.794 ns/op
# Warmup Iteration   2: 179.998 ns/op
# Warmup Iteration   3: 104.681 ns/op
Iteration   1: 104.669 ns/op
Iteration   2: 104.596 ns/op
Iteration   3: 104.540 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  104.601 ±(99.9%) 1.180 ns/op [Average]
  (min, avg, max) = (104.540, 104.601, 104.669), stdev = 0.065
  CI (99.9%): [103.421, 105.782] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 1.94% complete, ETA 00:28:56
# Fork: 1 of 1
# Warmup Iteration   1: 69.118 ns/op
# Warmup Iteration   2: 78.475 ns/op
# Warmup Iteration   3: 47.410 ns/op
Iteration   1: 47.405 ns/op
Iteration   2: 47.514 ns/op
Iteration   3: 47.402 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.440 ±(99.9%) 1.162 ns/op [Average]
  (min, avg, max) = (47.402, 47.440, 47.514), stdev = 0.064
  CI (99.9%): [46.278, 48.602] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 2.01% complete, ETA 00:28:54
# Fork: 1 of 1
# Warmup Iteration   1: 172.287 ns/op
# Warmup Iteration   2: 177.027 ns/op
# Warmup Iteration   3: 97.758 ns/op
Iteration   1: 97.746 ns/op
Iteration   2: 97.737 ns/op
Iteration   3: 97.733 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.739 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (97.733, 97.739, 97.746), stdev = 0.007
  CI (99.9%): [97.616, 97.861] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 2.08% complete, ETA 00:28:53
# Fork: 1 of 1
# Warmup Iteration   1: 18.563 ns/op
# Warmup Iteration   2: 24.594 ns/op
# Warmup Iteration   3: 13.361 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.374 ns/op
Iteration   3: 13.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.363 ±(99.9%) 0.176 ns/op [Average]
  (min, avg, max) = (13.356, 13.363, 13.374), stdev = 0.010
  CI (99.9%): [13.188, 13.539] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 2.15% complete, ETA 00:28:50
# Fork: 1 of 1
# Warmup Iteration   1: 734.237 ns/op
# Warmup Iteration   2: 433.217 ns/op
# Warmup Iteration   3: 296.532 ns/op
Iteration   1: 296.499 ns/op
Iteration   2: 296.588 ns/op
Iteration   3: 296.544 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  296.544 ±(99.9%) 0.806 ns/op [Average]
  (min, avg, max) = (296.499, 296.544, 296.588), stdev = 0.044
  CI (99.9%): [295.738, 297.349] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 2.22% complete, ETA 00:28:48
# Fork: 1 of 1
# Warmup Iteration   1: 731.730 ns/op
# Warmup Iteration   2: 720.901 ns/op
# Warmup Iteration   3: 528.285 ns/op
Iteration   1: 528.073 ns/op
Iteration   2: 528.182 ns/op
Iteration   3: 528.018 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  528.091 ±(99.9%) 1.524 ns/op [Average]
  (min, avg, max) = (528.018, 528.091, 528.182), stdev = 0.084
  CI (99.9%): [526.566, 529.615] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 2.29% complete, ETA 00:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 11152.479 ns/op
# Warmup Iteration   2: 750.798 ns/op
# Warmup Iteration   3: 499.400 ns/op
Iteration   1: 499.919 ns/op
Iteration   2: 500.288 ns/op
Iteration   3: 500.039 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  500.082 ±(99.9%) 3.431 ns/op [Average]
  (min, avg, max) = (499.919, 500.082, 500.288), stdev = 0.188
  CI (99.9%): [496.651, 503.513] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 2.36% complete, ETA 00:28:45
# Fork: 1 of 1
# Warmup Iteration   1: 508.637 ns/op
# Warmup Iteration   2: 454.946 ns/op
# Warmup Iteration   3: 333.569 ns/op
Iteration   1: 333.474 ns/op
Iteration   2: 333.978 ns/op
Iteration   3: 333.642 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  333.698 ±(99.9%) 4.679 ns/op [Average]
  (min, avg, max) = (333.474, 333.698, 333.978), stdev = 0.256
  CI (99.9%): [329.019, 338.377] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 2.43% complete, ETA 00:28:44
# Fork: 1 of 1
# Warmup Iteration   1: 568.931 ns/op
# Warmup Iteration   2: 412.590 ns/op
# Warmup Iteration   3: 258.221 ns/op
Iteration   1: 258.233 ns/op
Iteration   2: 258.210 ns/op
Iteration   3: 258.163 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  258.202 ±(99.9%) 0.656 ns/op [Average]
  (min, avg, max) = (258.163, 258.202, 258.233), stdev = 0.036
  CI (99.9%): [257.545, 258.858] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 2.50% complete, ETA 00:28:42
# Fork: 1 of 1
# Warmup Iteration   1: 18.811 ns/op
# Warmup Iteration   2: 21.105 ns/op
# Warmup Iteration   3: 13.361 ns/op
Iteration   1: 13.355 ns/op
Iteration   2: 13.363 ns/op
Iteration   3: 13.353 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.357 ±(99.9%) 0.089 ns/op [Average]
  (min, avg, max) = (13.353, 13.357, 13.363), stdev = 0.005
  CI (99.9%): [13.268, 13.446] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 2.57% complete, ETA 00:28:40
# Fork: 1 of 1
# Warmup Iteration   1: 72.612 ns/op
# Warmup Iteration   2: 80.350 ns/op
# Warmup Iteration   3: 51.434 ns/op
Iteration   1: 51.436 ns/op
Iteration   2: 51.413 ns/op
Iteration   3: 51.433 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.427 ±(99.9%) 0.223 ns/op [Average]
  (min, avg, max) = (51.413, 51.427, 51.436), stdev = 0.012
  CI (99.9%): [51.205, 51.650] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 2.64% complete, ETA 00:28:39
# Fork: 1 of 1
# Warmup Iteration   1: 62.991 ns/op
# Warmup Iteration   2: 67.002 ns/op
# Warmup Iteration   3: 44.056 ns/op
Iteration   1: 44.056 ns/op
Iteration   2: 44.039 ns/op
Iteration   3: 44.036 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.044 ±(99.9%) 0.194 ns/op [Average]
  (min, avg, max) = (44.036, 44.044, 44.056), stdev = 0.011
  CI (99.9%): [43.849, 44.238] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 2.71% complete, ETA 00:28:37
# Fork: 1 of 1
# Warmup Iteration   1: 144.592 ns/op
# Warmup Iteration   2: 74.131 ns/op
# Warmup Iteration   3: 47.509 ns/op
Iteration   1: 47.515 ns/op
Iteration   2: 47.575 ns/op
Iteration   3: 47.513 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.534 ±(99.9%) 0.650 ns/op [Average]
  (min, avg, max) = (47.513, 47.534, 47.575), stdev = 0.036
  CI (99.9%): [46.884, 48.184] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 2.78% complete, ETA 00:28:36
# Fork: 1 of 1
# Warmup Iteration   1: 67.742 ns/op
# Warmup Iteration   2: 75.817 ns/op
# Warmup Iteration   3: 46.461 ns/op
Iteration   1: 46.417 ns/op
Iteration   2: 46.568 ns/op
Iteration   3: 46.381 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.455 ±(99.9%) 1.814 ns/op [Average]
  (min, avg, max) = (46.381, 46.455, 46.568), stdev = 0.099
  CI (99.9%): [44.641, 48.269] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 2.85% complete, ETA 00:28:34
# Fork: 1 of 1
# Warmup Iteration   1: 164.262 ns/op
# Warmup Iteration   2: 167.307 ns/op
# Warmup Iteration   3: 93.077 ns/op
Iteration   1: 93.100 ns/op
Iteration   2: 93.049 ns/op
Iteration   3: 93.025 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.058 ±(99.9%) 0.697 ns/op [Average]
  (min, avg, max) = (93.025, 93.058, 93.100), stdev = 0.038
  CI (99.9%): [92.361, 93.756] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 2.92% complete, ETA 00:28:33
# Fork: 1 of 1
# Warmup Iteration   1: 19.266 ns/op
# Warmup Iteration   2: 22.716 ns/op
# Warmup Iteration   3: 13.373 ns/op
Iteration   1: 13.351 ns/op
Iteration   2: 13.367 ns/op
Iteration   3: 13.360 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.144 ns/op [Average]
  (min, avg, max) = (13.351, 13.359, 13.367), stdev = 0.008
  CI (99.9%): [13.215, 13.503] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 2.99% complete, ETA 00:28:31
# Fork: 1 of 1
# Warmup Iteration   1: 71.085 ns/op
# Warmup Iteration   2: 79.462 ns/op
# Warmup Iteration   3: 51.767 ns/op
Iteration   1: 51.766 ns/op
Iteration   2: 51.781 ns/op
Iteration   3: 51.764 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.770 ±(99.9%) 0.169 ns/op [Average]
  (min, avg, max) = (51.764, 51.770, 51.781), stdev = 0.009
  CI (99.9%): [51.601, 51.939] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 3.06% complete, ETA 00:28:29
# Fork: 1 of 1
# Warmup Iteration   1: 63.351 ns/op
# Warmup Iteration   2: 74.165 ns/op
# Warmup Iteration   3: 44.045 ns/op
Iteration   1: 44.059 ns/op
Iteration   2: 44.029 ns/op
Iteration   3: 44.040 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.043 ±(99.9%) 0.276 ns/op [Average]
  (min, avg, max) = (44.029, 44.043, 44.059), stdev = 0.015
  CI (99.9%): [43.767, 44.318] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 3.13% complete, ETA 00:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 137.909 ns/op
# Warmup Iteration   2: 79.684 ns/op
# Warmup Iteration   3: 51.364 ns/op
Iteration   1: 51.359 ns/op
Iteration   2: 51.554 ns/op
Iteration   3: 51.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.421 ±(99.9%) 2.098 ns/op [Average]
  (min, avg, max) = (51.351, 51.421, 51.554), stdev = 0.115
  CI (99.9%): [49.323, 53.519] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 3.19% complete, ETA 00:28:27
# Fork: 1 of 1
# Warmup Iteration   1: 69.288 ns/op
# Warmup Iteration   2: 79.002 ns/op
# Warmup Iteration   3: 47.414 ns/op
Iteration   1: 47.407 ns/op
Iteration   2: 47.519 ns/op
Iteration   3: 47.405 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.443 ±(99.9%) 1.189 ns/op [Average]
  (min, avg, max) = (47.405, 47.443, 47.519), stdev = 0.065
  CI (99.9%): [46.255, 48.632] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 3.26% complete, ETA 00:28:25
# Fork: 1 of 1
# Warmup Iteration   1: 167.433 ns/op
# Warmup Iteration   2: 181.131 ns/op
# Warmup Iteration   3: 93.071 ns/op
Iteration   1: 93.090 ns/op
Iteration   2: 93.021 ns/op
Iteration   3: 93.031 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.047 ±(99.9%) 0.674 ns/op [Average]
  (min, avg, max) = (93.021, 93.047, 93.090), stdev = 0.037
  CI (99.9%): [92.373, 93.722] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 3.33% complete, ETA 00:28:24
# Fork: 1 of 1
# Warmup Iteration   1: 18.027 ns/op
# Warmup Iteration   2: 24.328 ns/op
# Warmup Iteration   3: 13.362 ns/op
Iteration   1: 13.371 ns/op
Iteration   2: 13.384 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.370 ±(99.9%) 0.268 ns/op [Average]
  (min, avg, max) = (13.354, 13.370, 13.384), stdev = 0.015
  CI (99.9%): [13.102, 13.638] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 3.40% complete, ETA 00:28:22
# Fork: 1 of 1
# Warmup Iteration   1: 78.338 ns/op
# Warmup Iteration   2: 90.418 ns/op
# Warmup Iteration   3: 55.169 ns/op
Iteration   1: 55.152 ns/op
Iteration   2: 55.175 ns/op
Iteration   3: 55.163 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  55.163 ±(99.9%) 0.207 ns/op [Average]
  (min, avg, max) = (55.152, 55.163, 55.175), stdev = 0.011
  CI (99.9%): [54.957, 55.370] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 3.47% complete, ETA 00:28:21
# Fork: 1 of 1
# Warmup Iteration   1: 162.794 ns/op
# Warmup Iteration   2: 160.068 ns/op
# Warmup Iteration   3: 108.089 ns/op
Iteration   1: 108.070 ns/op
Iteration   2: 108.073 ns/op
Iteration   3: 108.070 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.071 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (108.070, 108.071, 108.073), stdev = 0.002
  CI (99.9%): [108.038, 108.104] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 3.54% complete, ETA 00:28:19
# Fork: 1 of 1
# Warmup Iteration   1: 596.242 ns/op
# Warmup Iteration   2: 100.785 ns/op
# Warmup Iteration   3: 62.247 ns/op
Iteration   1: 62.258 ns/op
Iteration   2: 62.273 ns/op
Iteration   3: 62.227 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  62.252 ±(99.9%) 0.431 ns/op [Average]
  (min, avg, max) = (62.227, 62.252, 62.273), stdev = 0.024
  CI (99.9%): [61.821, 62.683] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 3.61% complete, ETA 00:28:18
# Fork: 1 of 1
# Warmup Iteration   1: 114.411 ns/op
# Warmup Iteration   2: 125.746 ns/op
# Warmup Iteration   3: 77.354 ns/op
Iteration   1: 77.414 ns/op
Iteration   2: 77.340 ns/op
Iteration   3: 77.465 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  77.407 ±(99.9%) 1.144 ns/op [Average]
  (min, avg, max) = (77.340, 77.407, 77.465), stdev = 0.063
  CI (99.9%): [76.262, 78.551] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 3.68% complete, ETA 00:28:16
# Fork: 1 of 1
# Warmup Iteration   1: 207.747 ns/op
# Warmup Iteration   2: 185.714 ns/op
# Warmup Iteration   3: 99.806 ns/op
Iteration   1: 99.804 ns/op
Iteration   2: 99.817 ns/op
Iteration   3: 99.790 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  99.804 ±(99.9%) 0.244 ns/op [Average]
  (min, avg, max) = (99.790, 99.804, 99.817), stdev = 0.013
  CI (99.9%): [99.560, 100.048] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 3.75% complete, ETA 00:28:15
# Fork: 1 of 1
# Warmup Iteration   1: 19.093 ns/op
# Warmup Iteration   2: 23.602 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.353 ns/op
Iteration   2: 13.366 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (13.353, 13.358, 13.366), stdev = 0.007
  CI (99.9%): [13.221, 13.495] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 3.82% complete, ETA 00:28:14
# Fork: 1 of 1
# Warmup Iteration   1: 581.818 ns/op
# Warmup Iteration   2: 300.909 ns/op
# Warmup Iteration   3: 203.429 ns/op
Iteration   1: 203.267 ns/op
Iteration   2: 203.498 ns/op
Iteration   3: 203.496 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  203.420 ±(99.9%) 2.427 ns/op [Average]
  (min, avg, max) = (203.267, 203.420, 203.498), stdev = 0.133
  CI (99.9%): [200.993, 205.847] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 3.89% complete, ETA 00:28:12
# Fork: 1 of 1
# Warmup Iteration   1: 850.719 ns/op
# Warmup Iteration   2: 918.612 ns/op
# Warmup Iteration   3: 604.001 ns/op
Iteration   1: 611.477 ns/op
Iteration   2: 603.931 ns/op
Iteration   3: 603.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  606.434 ±(99.9%) 79.674 ns/op [Average]
  (min, avg, max) = (603.894, 606.434, 611.477), stdev = 4.367
  CI (99.9%): [526.760, 686.108] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 3.96% complete, ETA 00:28:11
# Fork: 1 of 1
# Warmup Iteration   1: 531.223 ns/op
# Warmup Iteration   2: 196.163 ns/op
# Warmup Iteration   3: 157.438 ns/op
Iteration   1: 157.369 ns/op
Iteration   2: 157.162 ns/op
Iteration   3: 157.259 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  157.264 ±(99.9%) 1.892 ns/op [Average]
  (min, avg, max) = (157.162, 157.264, 157.369), stdev = 0.104
  CI (99.9%): [155.372, 159.155] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 4.03% complete, ETA 00:28:10
# Fork: 1 of 1
# Warmup Iteration   1: 661.164 ns/op
# Warmup Iteration   2: 636.329 ns/op
# Warmup Iteration   3: 432.932 ns/op
Iteration   1: 432.816 ns/op
Iteration   2: 432.945 ns/op
Iteration   3: 432.895 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  432.885 ±(99.9%) 1.193 ns/op [Average]
  (min, avg, max) = (432.816, 432.885, 432.945), stdev = 0.065
  CI (99.9%): [431.692, 434.078] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 4.10% complete, ETA 00:28:09
# Fork: 1 of 1
# Warmup Iteration   1: 255.803 ns/op
# Warmup Iteration   2: 233.764 ns/op
# Warmup Iteration   3: 139.360 ns/op
Iteration   1: 139.395 ns/op
Iteration   2: 139.352 ns/op
Iteration   3: 139.454 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.400 ±(99.9%) 0.937 ns/op [Average]
  (min, avg, max) = (139.352, 139.400, 139.454), stdev = 0.051
  CI (99.9%): [138.463, 140.337] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 4.17% complete, ETA 00:28:08
# Fork: 1 of 1
# Warmup Iteration   1: 18.571 ns/op
# Warmup Iteration   2: 21.535 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.365 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.361 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (13.354, 13.361, 13.365), stdev = 0.006
  CI (99.9%): [13.255, 13.467] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 4.24% complete, ETA 00:28:07
# Fork: 1 of 1
# Warmup Iteration   1: 657.840 ns/op
# Warmup Iteration   2: 412.336 ns/op
# Warmup Iteration   3: 285.549 ns/op
Iteration   1: 285.743 ns/op
Iteration   2: 285.701 ns/op
Iteration   3: 285.478 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  285.641 ±(99.9%) 2.593 ns/op [Average]
  (min, avg, max) = (285.478, 285.641, 285.743), stdev = 0.142
  CI (99.9%): [283.048, 288.234] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 4.31% complete, ETA 00:28:06
# Fork: 1 of 1
# Warmup Iteration   1: 575.375 ns/op
# Warmup Iteration   2: 601.709 ns/op
# Warmup Iteration   3: 408.879 ns/op
Iteration   1: 408.798 ns/op
Iteration   2: 408.811 ns/op
Iteration   3: 409.045 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.885 ±(99.9%) 2.532 ns/op [Average]
  (min, avg, max) = (408.798, 408.885, 409.045), stdev = 0.139
  CI (99.9%): [406.353, 411.416] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 4.38% complete, ETA 00:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 4152.351 ns/op
# Warmup Iteration   2: 553.498 ns/op
# Warmup Iteration   3: 361.386 ns/op
Iteration   1: 359.020 ns/op
Iteration   2: 396.190 ns/op
Iteration   3: 359.013 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  371.408 ±(99.9%) 391.546 ns/op [Average]
  (min, avg, max) = (359.013, 371.408, 396.190), stdev = 21.462
  CI (99.9%): [≈ 0, 762.953] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 4.44% complete, ETA 00:28:03
# Fork: 1 of 1
# Warmup Iteration   1: 460.759 ns/op
# Warmup Iteration   2: 409.655 ns/op
# Warmup Iteration   3: 295.251 ns/op
Iteration   1: 295.215 ns/op
Iteration   2: 295.575 ns/op
Iteration   3: 295.112 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  295.301 ±(99.9%) 4.437 ns/op [Average]
  (min, avg, max) = (295.112, 295.301, 295.575), stdev = 0.243
  CI (99.9%): [290.864, 299.738] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 4.51% complete, ETA 00:28:02
# Fork: 1 of 1
# Warmup Iteration   1: 549.324 ns/op
# Warmup Iteration   2: 358.824 ns/op
# Warmup Iteration   3: 245.605 ns/op
Iteration   1: 245.368 ns/op
Iteration   2: 245.456 ns/op
Iteration   3: 245.409 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  245.411 ±(99.9%) 0.803 ns/op [Average]
  (min, avg, max) = (245.368, 245.411, 245.456), stdev = 0.044
  CI (99.9%): [244.608, 246.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 4.58% complete, ETA 00:28:00
# Fork: 1 of 1
# Warmup Iteration   1: 18.873 ns/op
# Warmup Iteration   2: 22.756 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.354 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.361 ±(99.9%) 0.194 ns/op [Average]
  (min, avg, max) = (13.354, 13.361, 13.373), stdev = 0.011
  CI (99.9%): [13.167, 13.555] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 4.65% complete, ETA 00:27:59
# Fork: 1 of 1
# Warmup Iteration   1: 71.944 ns/op
# Warmup Iteration   2: 81.546 ns/op
# Warmup Iteration   3: 51.434 ns/op
Iteration   1: 51.423 ns/op
Iteration   2: 51.432 ns/op
Iteration   3: 95.988 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.281 ±(99.9%) 469.355 ns/op [Average]
  (min, avg, max) = (51.423, 66.281, 95.988), stdev = 25.727
  CI (99.9%): [≈ 0, 535.637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 4.72% complete, ETA 00:27:58
# Fork: 1 of 1
# Warmup Iteration   1: 69.387 ns/op
# Warmup Iteration   2: 73.064 ns/op
# Warmup Iteration   3: 44.061 ns/op
Iteration   1: 44.072 ns/op
Iteration   2: 44.048 ns/op
Iteration   3: 44.079 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.066 ±(99.9%) 0.304 ns/op [Average]
  (min, avg, max) = (44.048, 44.066, 44.079), stdev = 0.017
  CI (99.9%): [43.762, 44.370] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 4.79% complete, ETA 00:27:57
# Fork: 1 of 1
# Warmup Iteration   1: 159.236 ns/op
# Warmup Iteration   2: 77.812 ns/op
# Warmup Iteration   3: 51.354 ns/op
Iteration   1: 51.353 ns/op
Iteration   2: 51.558 ns/op
Iteration   3: 51.332 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.414 ±(99.9%) 2.280 ns/op [Average]
  (min, avg, max) = (51.332, 51.414, 51.558), stdev = 0.125
  CI (99.9%): [49.134, 53.694] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 4.86% complete, ETA 00:27:55
# Fork: 1 of 1
# Warmup Iteration   1: 67.702 ns/op
# Warmup Iteration   2: 75.743 ns/op
# Warmup Iteration   3: 46.412 ns/op
Iteration   1: 46.424 ns/op
Iteration   2: 46.565 ns/op
Iteration   3: 46.406 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.465 ±(99.9%) 1.594 ns/op [Average]
  (min, avg, max) = (46.406, 46.465, 46.565), stdev = 0.087
  CI (99.9%): [44.871, 48.059] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 4.93% complete, ETA 00:27:54
# Fork: 1 of 1
# Warmup Iteration   1: 162.573 ns/op
# Warmup Iteration   2: 168.363 ns/op
# Warmup Iteration   3: 93.035 ns/op
Iteration   1: 93.108 ns/op
Iteration   2: 93.030 ns/op
Iteration   3: 93.041 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.059 ±(99.9%) 0.772 ns/op [Average]
  (min, avg, max) = (93.030, 93.059, 93.108), stdev = 0.042
  CI (99.9%): [92.287, 93.831] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 5.00% complete, ETA 00:27:53
# Fork: 1 of 1
# Warmup Iteration   1: 19.411 ns/op
# Warmup Iteration   2: 22.228 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.352 ns/op
Iteration   2: 13.364 ns/op
Iteration   3: 13.353 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (13.352, 13.356, 13.364), stdev = 0.007
  CI (99.9%): [13.229, 13.484] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 5.07% complete, ETA 00:27:52
# Fork: 1 of 1
# Warmup Iteration   1: 72.174 ns/op
# Warmup Iteration   2: 81.061 ns/op
# Warmup Iteration   3: 51.771 ns/op
Iteration   1: 51.760 ns/op
Iteration   2: 51.763 ns/op
Iteration   3: 51.750 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.758 ±(99.9%) 0.118 ns/op [Average]
  (min, avg, max) = (51.750, 51.758, 51.763), stdev = 0.006
  CI (99.9%): [51.640, 51.875] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 5.14% complete, ETA 00:27:51
# Fork: 1 of 1
# Warmup Iteration   1: 66.221 ns/op
# Warmup Iteration   2: 67.811 ns/op
# Warmup Iteration   3: 44.066 ns/op
Iteration   1: 44.043 ns/op
Iteration   2: 44.047 ns/op
Iteration   3: 44.052 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.047 ±(99.9%) 0.078 ns/op [Average]
  (min, avg, max) = (44.043, 44.047, 44.052), stdev = 0.004
  CI (99.9%): [43.969, 44.126] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 5.21% complete, ETA 00:27:50
# Fork: 1 of 1
# Warmup Iteration   1: 160.291 ns/op
# Warmup Iteration   2: 74.378 ns/op
# Warmup Iteration   3: 47.948 ns/op
Iteration   1: 47.927 ns/op
Iteration   2: 47.972 ns/op
Iteration   3: 47.927 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.942 ±(99.9%) 0.475 ns/op [Average]
  (min, avg, max) = (47.927, 47.942, 47.972), stdev = 0.026
  CI (99.9%): [47.467, 48.417] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 5.28% complete, ETA 00:27:48
# Fork: 1 of 1
# Warmup Iteration   1: 66.769 ns/op
# Warmup Iteration   2: 73.313 ns/op
# Warmup Iteration   3: 46.419 ns/op
Iteration   1: 46.416 ns/op
Iteration   2: 46.575 ns/op
Iteration   3: 46.437 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.476 ±(99.9%) 1.579 ns/op [Average]
  (min, avg, max) = (46.416, 46.476, 46.575), stdev = 0.087
  CI (99.9%): [44.897, 48.055] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 5.35% complete, ETA 00:27:47
# Fork: 1 of 1
# Warmup Iteration   1: 168.422 ns/op
# Warmup Iteration   2: 178.263 ns/op
# Warmup Iteration   3: 93.050 ns/op
Iteration   1: 93.130 ns/op
Iteration   2: 93.011 ns/op
Iteration   3: 93.036 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.059 ±(99.9%) 1.148 ns/op [Average]
  (min, avg, max) = (93.011, 93.059, 93.130), stdev = 0.063
  CI (99.9%): [91.912, 94.207] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 5.42% complete, ETA 00:27:46
# Fork: 1 of 1
# Warmup Iteration   1: 18.360 ns/op
# Warmup Iteration   2: 24.853 ns/op
# Warmup Iteration   3: 13.363 ns/op
Iteration   1: 13.359 ns/op
Iteration   2: 13.366 ns/op
Iteration   3: 13.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.155 ns/op [Average]
  (min, avg, max) = (13.349, 13.358, 13.366), stdev = 0.008
  CI (99.9%): [13.203, 13.513] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 5.49% complete, ETA 00:27:44
# Fork: 1 of 1
# Warmup Iteration   1: 82.453 ns/op
# Warmup Iteration   2: 83.401 ns/op
# Warmup Iteration   3: 57.298 ns/op
Iteration   1: 57.295 ns/op
Iteration   2: 57.292 ns/op
Iteration   3: 57.318 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  57.302 ±(99.9%) 0.259 ns/op [Average]
  (min, avg, max) = (57.292, 57.302, 57.318), stdev = 0.014
  CI (99.9%): [57.043, 57.561] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 5.56% complete, ETA 00:27:42
# Fork: 1 of 1
# Warmup Iteration   1: 153.898 ns/op
# Warmup Iteration   2: 160.697 ns/op
# Warmup Iteration   3: 102.366 ns/op
Iteration   1: 102.392 ns/op
Iteration   2: 102.225 ns/op
Iteration   3: 102.292 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  102.303 ±(99.9%) 1.532 ns/op [Average]
  (min, avg, max) = (102.225, 102.303, 102.392), stdev = 0.084
  CI (99.9%): [100.771, 103.835] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 5.63% complete, ETA 00:27:41
# Fork: 1 of 1
# Warmup Iteration   1: 322.298 ns/op
# Warmup Iteration   2: 106.879 ns/op
# Warmup Iteration   3: 66.449 ns/op
Iteration   1: 66.521 ns/op
Iteration   2: 66.523 ns/op
Iteration   3: 66.481 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.508 ±(99.9%) 0.426 ns/op [Average]
  (min, avg, max) = (66.481, 66.508, 66.523), stdev = 0.023
  CI (99.9%): [66.082, 66.935] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 5.69% complete, ETA 00:27:40
# Fork: 1 of 1
# Warmup Iteration   1: 99.746 ns/op
# Warmup Iteration   2: 95.427 ns/op
# Warmup Iteration   3: 59.935 ns/op
Iteration   1: 59.906 ns/op
Iteration   2: 60.089 ns/op
Iteration   3: 59.925 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  59.973 ±(99.9%) 1.836 ns/op [Average]
  (min, avg, max) = (59.906, 59.973, 60.089), stdev = 0.101
  CI (99.9%): [58.137, 61.810] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 5.76% complete, ETA 00:27:39
# Fork: 1 of 1
# Warmup Iteration   1: 199.275 ns/op
# Warmup Iteration   2: 185.819 ns/op
# Warmup Iteration   3: 98.648 ns/op
Iteration   1: 98.698 ns/op
Iteration   2: 98.865 ns/op
Iteration   3: 98.669 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  98.744 ±(99.9%) 1.931 ns/op [Average]
  (min, avg, max) = (98.669, 98.744, 98.865), stdev = 0.106
  CI (99.9%): [96.814, 100.675] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 5.83% complete, ETA 00:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 18.081 ns/op
# Warmup Iteration   2: 23.924 ns/op
# Warmup Iteration   3: 13.361 ns/op
Iteration   1: 13.351 ns/op
Iteration   2: 13.405 ns/op
Iteration   3: 13.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.372 ±(99.9%) 0.526 ns/op [Average]
  (min, avg, max) = (13.351, 13.372, 13.405), stdev = 0.029
  CI (99.9%): [12.845, 13.898] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 5.90% complete, ETA 00:27:36
# Fork: 1 of 1
# Warmup Iteration   1: 383.387 ns/op
# Warmup Iteration   2: 265.904 ns/op
# Warmup Iteration   3: 178.237 ns/op
Iteration   1: 178.251 ns/op
Iteration   2: 178.427 ns/op
Iteration   3: 178.273 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  178.317 ±(99.9%) 1.748 ns/op [Average]
  (min, avg, max) = (178.251, 178.317, 178.427), stdev = 0.096
  CI (99.9%): [176.569, 180.065] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 5.97% complete, ETA 00:27:35
# Fork: 1 of 1
# Warmup Iteration   1: 334.574 ns/op
# Warmup Iteration   2: 351.635 ns/op
# Warmup Iteration   3: 232.822 ns/op
Iteration   1: 232.806 ns/op
Iteration   2: 232.764 ns/op
Iteration   3: 232.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  232.803 ±(99.9%) 0.695 ns/op [Average]
  (min, avg, max) = (232.764, 232.803, 232.840), stdev = 0.038
  CI (99.9%): [232.108, 233.498] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 6.04% complete, ETA 00:27:33
# Fork: 1 of 1
# Warmup Iteration   1: 1137.469 ns/op
# Warmup Iteration   2: 412.900 ns/op
# Warmup Iteration   3: 290.066 ns/op
Iteration   1: 289.901 ns/op
Iteration   2: 290.110 ns/op
Iteration   3: 289.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  289.968 ±(99.9%) 2.256 ns/op [Average]
  (min, avg, max) = (289.892, 289.968, 290.110), stdev = 0.124
  CI (99.9%): [287.712, 292.224] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 6.11% complete, ETA 00:27:32
# Fork: 1 of 1
# Warmup Iteration   1: 286.380 ns/op
# Warmup Iteration   2: 251.378 ns/op
# Warmup Iteration   3: 173.742 ns/op
Iteration   1: 173.554 ns/op
Iteration   2: 174.129 ns/op
Iteration   3: 173.550 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  173.744 ±(99.9%) 6.078 ns/op [Average]
  (min, avg, max) = (173.550, 173.744, 174.129), stdev = 0.333
  CI (99.9%): [167.667, 179.822] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 6.18% complete, ETA 00:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 527.276 ns/op
# Warmup Iteration   2: 349.955 ns/op
# Warmup Iteration   3: 225.321 ns/op
Iteration   1: 225.236 ns/op
Iteration   2: 225.305 ns/op
Iteration   3: 225.600 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  225.381 ±(99.9%) 3.530 ns/op [Average]
  (min, avg, max) = (225.236, 225.381, 225.600), stdev = 0.194
  CI (99.9%): [221.850, 228.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 6.25% complete, ETA 00:27:29
# Fork: 1 of 1
# Warmup Iteration   1: 19.400 ns/op
# Warmup Iteration   2: 22.588 ns/op
# Warmup Iteration   3: 13.363 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 13.365 ns/op
Iteration   3: 13.381 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.365 ±(99.9%) 0.282 ns/op [Average]
  (min, avg, max) = (13.350, 13.365, 13.381), stdev = 0.015
  CI (99.9%): [13.083, 13.647] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 6.32% complete, ETA 00:27:28
# Fork: 1 of 1
# Warmup Iteration   1: 816.102 ns/op
# Warmup Iteration   2: 433.773 ns/op
# Warmup Iteration   3: 299.813 ns/op
Iteration   1: 299.851 ns/op
Iteration   2: 300.080 ns/op
Iteration   3: 300.376 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  300.102 ±(99.9%) 4.804 ns/op [Average]
  (min, avg, max) = (299.851, 300.102, 300.376), stdev = 0.263
  CI (99.9%): [295.298, 304.907] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 6.39% complete, ETA 00:27:26
# Fork: 1 of 1
# Warmup Iteration   1: 609.851 ns/op
# Warmup Iteration   2: 521.251 ns/op
# Warmup Iteration   3: 377.584 ns/op
Iteration   1: 378.316 ns/op
Iteration   2: 378.275 ns/op
Iteration   3: 377.682 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  378.091 ±(99.9%) 6.474 ns/op [Average]
  (min, avg, max) = (377.682, 378.091, 378.316), stdev = 0.355
  CI (99.9%): [371.617, 384.565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 6.46% complete, ETA 00:27:25
# Fork: 1 of 1
# Warmup Iteration   1: 11508.371 ns/op
# Warmup Iteration   2: 455.764 ns/op
# Warmup Iteration   3: 350.978 ns/op
Iteration   1: 322.376 ns/op
Iteration   2: 323.026 ns/op
Iteration   3: 323.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  322.825 ±(99.9%) 7.108 ns/op [Average]
  (min, avg, max) = (322.376, 322.825, 323.073), stdev = 0.390
  CI (99.9%): [315.717, 329.933] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 6.53% complete, ETA 00:27:24
# Fork: 1 of 1
# Warmup Iteration   1: 328.427 ns/op
# Warmup Iteration   2: 311.685 ns/op
# Warmup Iteration   3: 219.289 ns/op
Iteration   1: 219.536 ns/op
Iteration   2: 220.448 ns/op
Iteration   3: 221.035 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  220.340 ±(99.9%) 13.788 ns/op [Average]
  (min, avg, max) = (219.536, 220.340, 221.035), stdev = 0.756
  CI (99.9%): [206.552, 234.127] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 6.60% complete, ETA 00:27:23
# Fork: 1 of 1
# Warmup Iteration   1: 651.401 ns/op
# Warmup Iteration   2: 338.581 ns/op
# Warmup Iteration   3: 229.310 ns/op
Iteration   1: 228.949 ns/op
Iteration   2: 229.331 ns/op
Iteration   3: 228.920 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  229.067 ±(99.9%) 4.180 ns/op [Average]
  (min, avg, max) = (228.920, 229.067, 229.331), stdev = 0.229
  CI (99.9%): [224.887, 233.247] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 6.67% complete, ETA 00:27:22
# Fork: 1 of 1
# Warmup Iteration   1: 18.961 ns/op
# Warmup Iteration   2: 21.150 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.381 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.364 ±(99.9%) 0.260 ns/op [Average]
  (min, avg, max) = (13.356, 13.364, 13.381), stdev = 0.014
  CI (99.9%): [13.104, 13.625] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 6.74% complete, ETA 00:27:20
# Fork: 1 of 1
# Warmup Iteration   1: 72.920 ns/op
# Warmup Iteration   2: 72.130 ns/op
# Warmup Iteration   3: 51.452 ns/op
Iteration   1: 51.439 ns/op
Iteration   2: 51.432 ns/op
Iteration   3: 51.423 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.431 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (51.423, 51.431, 51.439), stdev = 0.008
  CI (99.9%): [51.291, 51.572] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 6.81% complete, ETA 00:27:19
# Fork: 1 of 1
# Warmup Iteration   1: 64.357 ns/op
# Warmup Iteration   2: 70.343 ns/op
# Warmup Iteration   3: 44.051 ns/op
Iteration   1: 44.042 ns/op
Iteration   2: 44.039 ns/op
Iteration   3: 44.044 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.042 ±(99.9%) 0.042 ns/op [Average]
  (min, avg, max) = (44.039, 44.042, 44.044), stdev = 0.002
  CI (99.9%): [44.000, 44.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 6.88% complete, ETA 00:27:18
# Fork: 1 of 1
# Warmup Iteration   1: 169.753 ns/op
# Warmup Iteration   2: 75.054 ns/op
# Warmup Iteration   3: 47.536 ns/op
Iteration   1: 47.557 ns/op
Iteration   2: 47.591 ns/op
Iteration   3: 47.550 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.566 ±(99.9%) 0.399 ns/op [Average]
  (min, avg, max) = (47.550, 47.566, 47.591), stdev = 0.022
  CI (99.9%): [47.167, 47.965] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 6.94% complete, ETA 00:27:17
# Fork: 1 of 1
# Warmup Iteration   1: 68.006 ns/op
# Warmup Iteration   2: 75.332 ns/op
# Warmup Iteration   3: 46.433 ns/op
Iteration   1: 46.435 ns/op
Iteration   2: 46.554 ns/op
Iteration   3: 46.444 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.477 ±(99.9%) 1.208 ns/op [Average]
  (min, avg, max) = (46.435, 46.477, 46.554), stdev = 0.066
  CI (99.9%): [45.269, 47.686] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 7.01% complete, ETA 00:27:15
# Fork: 1 of 1
# Warmup Iteration   1: 161.442 ns/op
# Warmup Iteration   2: 179.429 ns/op
# Warmup Iteration   3: 94.029 ns/op
Iteration   1: 94.134 ns/op
Iteration   2: 93.999 ns/op
Iteration   3: 93.986 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  94.040 ±(99.9%) 1.494 ns/op [Average]
  (min, avg, max) = (93.986, 94.040, 94.134), stdev = 0.082
  CI (99.9%): [92.546, 95.534] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 7.08% complete, ETA 00:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 19.495 ns/op
# Warmup Iteration   2: 22.014 ns/op
# Warmup Iteration   3: 14.331 ns/op
Iteration   1: 14.305 ns/op
Iteration   2: 14.358 ns/op
Iteration   3: 14.297 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.320 ±(99.9%) 0.604 ns/op [Average]
  (min, avg, max) = (14.297, 14.320, 14.358), stdev = 0.033
  CI (99.9%): [13.717, 14.924] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 7.15% complete, ETA 00:27:13
# Fork: 1 of 1
# Warmup Iteration   1: 72.639 ns/op
# Warmup Iteration   2: 72.250 ns/op
# Warmup Iteration   3: 51.423 ns/op
Iteration   1: 51.436 ns/op
Iteration   2: 51.436 ns/op
Iteration   3: 51.438 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.437 ±(99.9%) 0.027 ns/op [Average]
  (min, avg, max) = (51.436, 51.437, 51.438), stdev = 0.001
  CI (99.9%): [51.410, 51.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 7.22% complete, ETA 00:27:12
# Fork: 1 of 1
# Warmup Iteration   1: 64.941 ns/op
# Warmup Iteration   2: 73.837 ns/op
# Warmup Iteration   3: 44.543 ns/op
Iteration   1: 44.527 ns/op
Iteration   2: 44.551 ns/op
Iteration   3: 44.523 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.534 ±(99.9%) 0.278 ns/op [Average]
  (min, avg, max) = (44.523, 44.534, 44.551), stdev = 0.015
  CI (99.9%): [44.255, 44.812] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 7.29% complete, ETA 00:27:10
# Fork: 1 of 1
# Warmup Iteration   1: 188.434 ns/op
# Warmup Iteration   2: 73.857 ns/op
# Warmup Iteration   3: 47.531 ns/op
Iteration   1: 47.502 ns/op
Iteration   2: 47.577 ns/op
Iteration   3: 47.495 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.525 ±(99.9%) 0.833 ns/op [Average]
  (min, avg, max) = (47.495, 47.525, 47.577), stdev = 0.046
  CI (99.9%): [46.692, 48.358] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 7.36% complete, ETA 00:27:09
# Fork: 1 of 1
# Warmup Iteration   1: 66.368 ns/op
# Warmup Iteration   2: 69.961 ns/op
# Warmup Iteration   3: 46.439 ns/op
Iteration   1: 46.439 ns/op
Iteration   2: 46.554 ns/op
Iteration   3: 46.400 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.465 ±(99.9%) 1.457 ns/op [Average]
  (min, avg, max) = (46.400, 46.465, 46.554), stdev = 0.080
  CI (99.9%): [45.007, 47.922] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 7.43% complete, ETA 00:27:08
# Fork: 1 of 1
# Warmup Iteration   1: 166.619 ns/op
# Warmup Iteration   2: 168.784 ns/op
# Warmup Iteration   3: 93.050 ns/op
Iteration   1: 93.089 ns/op
Iteration   2: 93.013 ns/op
Iteration   3: 93.048 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.050 ±(99.9%) 0.698 ns/op [Average]
  (min, avg, max) = (93.013, 93.050, 93.089), stdev = 0.038
  CI (99.9%): [92.352, 93.748] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 7.50% complete, ETA 00:27:07
# Fork: 1 of 1
# Warmup Iteration   1: 19.238 ns/op
# Warmup Iteration   2: 23.209 ns/op
# Warmup Iteration   3: 13.359 ns/op
Iteration   1: 13.351 ns/op
Iteration   2: 13.363 ns/op
Iteration   3: 13.361 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (13.351, 13.358, 13.363), stdev = 0.007
  CI (99.9%): [13.236, 13.481] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 7.57% complete, ETA 00:27:05
# Fork: 1 of 1
# Warmup Iteration   1: 85.541 ns/op
# Warmup Iteration   2: 83.193 ns/op
# Warmup Iteration   3: 54.982 ns/op
Iteration   1: 54.966 ns/op
Iteration   2: 54.990 ns/op
Iteration   3: 54.979 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  54.978 ±(99.9%) 0.215 ns/op [Average]
  (min, avg, max) = (54.966, 54.978, 54.990), stdev = 0.012
  CI (99.9%): [54.763, 55.194] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 7.64% complete, ETA 00:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 69.670 ns/op
# Warmup Iteration   2: 75.862 ns/op
# Warmup Iteration   3: 44.082 ns/op
Iteration   1: 44.047 ns/op
Iteration   2: 44.067 ns/op
Iteration   3: 44.038 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.051 ±(99.9%) 0.265 ns/op [Average]
  (min, avg, max) = (44.038, 44.051, 44.067), stdev = 0.015
  CI (99.9%): [43.786, 44.315] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 7.71% complete, ETA 00:27:02
# Fork: 1 of 1
# Warmup Iteration   1: 491.068 ns/op
# Warmup Iteration   2: 98.089 ns/op
# Warmup Iteration   3: 65.275 ns/op
Iteration   1: 65.192 ns/op
Iteration   2: 65.332 ns/op
Iteration   3: 65.247 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  65.257 ±(99.9%) 1.279 ns/op [Average]
  (min, avg, max) = (65.192, 65.257, 65.332), stdev = 0.070
  CI (99.9%): [63.978, 66.536] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 7.78% complete, ETA 00:27:01
# Fork: 1 of 1
# Warmup Iteration   1: 66.347 ns/op
# Warmup Iteration   2: 75.137 ns/op
# Warmup Iteration   3: 46.708 ns/op
Iteration   1: 46.678 ns/op
Iteration   2: 46.836 ns/op
Iteration   3: 46.670 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.728 ±(99.9%) 1.711 ns/op [Average]
  (min, avg, max) = (46.670, 46.728, 46.836), stdev = 0.094
  CI (99.9%): [45.018, 48.439] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 7.85% complete, ETA 00:27:00
# Fork: 1 of 1
# Warmup Iteration   1: 179.704 ns/op
# Warmup Iteration   2: 176.634 ns/op
# Warmup Iteration   3: 97.726 ns/op
Iteration   1: 97.724 ns/op
Iteration   2: 97.718 ns/op
Iteration   3: 97.824 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.755 ±(99.9%) 1.088 ns/op [Average]
  (min, avg, max) = (97.718, 97.755, 97.824), stdev = 0.060
  CI (99.9%): [96.667, 98.843] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 7.92% complete, ETA 00:26:58
# Fork: 1 of 1
# Warmup Iteration   1: 19.136 ns/op
# Warmup Iteration   2: 23.267 ns/op
# Warmup Iteration   3: 13.366 ns/op
Iteration   1: 13.361 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.365 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (13.359, 13.365, 13.373), stdev = 0.008
  CI (99.9%): [13.224, 13.505] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 7.99% complete, ETA 00:26:57
# Fork: 1 of 1
# Warmup Iteration   1: 421.722 ns/op
# Warmup Iteration   2: 203.210 ns/op
# Warmup Iteration   3: 137.978 ns/op
Iteration   1: 137.927 ns/op
Iteration   2: 137.914 ns/op
Iteration   3: 137.923 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.921 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (137.914, 137.921, 137.927), stdev = 0.006
  CI (99.9%): [137.805, 138.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 8.06% complete, ETA 00:26:56
# Fork: 1 of 1
# Warmup Iteration   1: 377.178 ns/op
# Warmup Iteration   2: 378.574 ns/op
# Warmup Iteration   3: 257.255 ns/op
Iteration   1: 256.507 ns/op
Iteration   2: 256.444 ns/op
Iteration   3: 257.102 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  256.684 ±(99.9%) 6.620 ns/op [Average]
  (min, avg, max) = (256.444, 256.684, 257.102), stdev = 0.363
  CI (99.9%): [250.064, 263.305] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 8.13% complete, ETA 00:26:54
# Fork: 1 of 1
# Warmup Iteration   1: 654.773 ns/op
# Warmup Iteration   2: 287.917 ns/op
# Warmup Iteration   3: 197.469 ns/op
Iteration   1: 197.360 ns/op
Iteration   2: 197.509 ns/op
Iteration   3: 197.395 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  197.421 ±(99.9%) 1.412 ns/op [Average]
  (min, avg, max) = (197.360, 197.421, 197.509), stdev = 0.077
  CI (99.9%): [196.010, 198.833] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 8.19% complete, ETA 00:26:53
# Fork: 1 of 1
# Warmup Iteration   1: 251.416 ns/op
# Warmup Iteration   2: 215.404 ns/op
# Warmup Iteration   3: 162.312 ns/op
Iteration   1: 162.295 ns/op
Iteration   2: 162.176 ns/op
Iteration   3: 162.252 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.241 ±(99.9%) 1.097 ns/op [Average]
  (min, avg, max) = (162.176, 162.241, 162.295), stdev = 0.060
  CI (99.9%): [161.144, 163.338] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 8.26% complete, ETA 00:26:52
# Fork: 1 of 1
# Warmup Iteration   1: 550.338 ns/op
# Warmup Iteration   2: 379.732 ns/op
# Warmup Iteration   3: 234.339 ns/op
Iteration   1: 234.203 ns/op
Iteration   2: 234.315 ns/op
Iteration   3: 234.309 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  234.276 ±(99.9%) 1.148 ns/op [Average]
  (min, avg, max) = (234.203, 234.276, 234.315), stdev = 0.063
  CI (99.9%): [233.127, 235.424] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 8.33% complete, ETA 00:26:51
# Fork: 1 of 1
# Warmup Iteration   1: 18.993 ns/op
# Warmup Iteration   2: 24.519 ns/op
# Warmup Iteration   3: 13.351 ns/op
Iteration   1: 13.354 ns/op
Iteration   2: 13.347 ns/op
Iteration   3: 17.100 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.600 ±(99.9%) 39.498 ns/op [Average]
  (min, avg, max) = (13.347, 14.600, 17.100), stdev = 2.165
  CI (99.9%): [≈ 0, 54.099] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 8.40% complete, ETA 00:26:49
# Fork: 1 of 1
# Warmup Iteration   1: 165.533 ns/op
# Warmup Iteration   2: 122.477 ns/op
# Warmup Iteration   3: 88.119 ns/op
Iteration   1: 88.111 ns/op
Iteration   2: 88.077 ns/op
Iteration   3: 109.057 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.082 ±(99.9%) 220.809 ns/op [Average]
  (min, avg, max) = (88.077, 95.082, 109.057), stdev = 12.103
  CI (99.9%): [≈ 0, 315.890] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 8.47% complete, ETA 00:26:49
# Fork: 1 of 1
# Warmup Iteration   1: 65.333 ns/op
# Warmup Iteration   2: 70.455 ns/op
# Warmup Iteration   3: 44.076 ns/op
Iteration   1: 44.088 ns/op
Iteration   2: 44.102 ns/op
Iteration   3: 59.824 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  49.338 ±(99.9%) 165.673 ns/op [Average]
  (min, avg, max) = (44.088, 49.338, 59.824), stdev = 9.081
  CI (99.9%): [≈ 0, 215.011] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 8.54% complete, ETA 00:26:48
# Fork: 1 of 1
# Warmup Iteration   1: 270.505 ns/op
# Warmup Iteration   2: 165.023 ns/op
# Warmup Iteration   3: 108.331 ns/op
Iteration   1: 108.282 ns/op
Iteration   2: 108.195 ns/op
Iteration   3: 149.462 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.979 ±(99.9%) 434.211 ns/op [Average]
  (min, avg, max) = (108.195, 121.979, 149.462), stdev = 23.801
  CI (99.9%): [≈ 0, 556.191] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 8.61% complete, ETA 00:26:46
# Fork: 1 of 1
# Warmup Iteration   1: 68.377 ns/op
# Warmup Iteration   2: 76.587 ns/op
# Warmup Iteration   3: 46.418 ns/op
Iteration   1: 46.390 ns/op
Iteration   2: 46.373 ns/op
Iteration   3: 62.987 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.916 ±(99.9%) 174.903 ns/op [Average]
  (min, avg, max) = (46.373, 51.916, 62.987), stdev = 9.587
  CI (99.9%): [≈ 0, 226.819] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 8.68% complete, ETA 00:26:45
# Fork: 1 of 1
# Warmup Iteration   1: 176.179 ns/op
# Warmup Iteration   2: 195.548 ns/op
# Warmup Iteration   3: 129.745 ns/op
Iteration   1: 129.680 ns/op
Iteration   2: 129.689 ns/op
Iteration   3: 176.129 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.166 ±(99.9%) 489.200 ns/op [Average]
  (min, avg, max) = (129.680, 145.166, 176.129), stdev = 26.815
  CI (99.9%): [≈ 0, 634.365] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 8.75% complete, ETA 00:26:44
# Fork: 1 of 1
# Warmup Iteration   1: 19.210 ns/op
# Warmup Iteration   2: 21.056 ns/op
# Warmup Iteration   3: 13.349 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.357 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.013 ns/op [Average]
  (min, avg, max) = (13.356, 13.356, 13.357), stdev = 0.001
  CI (99.9%): [13.343, 13.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 8.82% complete, ETA 00:26:43
# Fork: 1 of 1
# Warmup Iteration   1: 74.142 ns/op
# Warmup Iteration   2: 80.107 ns/op
# Warmup Iteration   3: 51.418 ns/op
Iteration   1: 51.418 ns/op
Iteration   2: 51.408 ns/op
Iteration   3: 51.399 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.408 ±(99.9%) 0.175 ns/op [Average]
  (min, avg, max) = (51.399, 51.408, 51.418), stdev = 0.010
  CI (99.9%): [51.233, 51.584] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 8.89% complete, ETA 00:26:42
# Fork: 1 of 1
# Warmup Iteration   1: 65.468 ns/op
# Warmup Iteration   2: 75.205 ns/op
# Warmup Iteration   3: 44.099 ns/op
Iteration   1: 44.081 ns/op
Iteration   2: 44.070 ns/op
Iteration   3: 44.062 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.071 ±(99.9%) 0.175 ns/op [Average]
  (min, avg, max) = (44.062, 44.071, 44.081), stdev = 0.010
  CI (99.9%): [43.896, 44.246] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 8.96% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 165.590 ns/op
# Warmup Iteration   2: 75.065 ns/op
# Warmup Iteration   3: 47.595 ns/op
Iteration   1: 47.610 ns/op
Iteration   2: 47.638 ns/op
Iteration   3: 47.584 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.611 ±(99.9%) 0.486 ns/op [Average]
  (min, avg, max) = (47.584, 47.611, 47.638), stdev = 0.027
  CI (99.9%): [47.125, 48.096] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 9.03% complete, ETA 00:26:39
# Fork: 1 of 1
# Warmup Iteration   1: 67.922 ns/op
# Warmup Iteration   2: 78.674 ns/op
# Warmup Iteration   3: 46.396 ns/op
Iteration   1: 46.437 ns/op
Iteration   2: 46.452 ns/op
Iteration   3: 46.479 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.456 ±(99.9%) 0.385 ns/op [Average]
  (min, avg, max) = (46.437, 46.456, 46.479), stdev = 0.021
  CI (99.9%): [46.071, 46.841] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 9.10% complete, ETA 00:26:37
# Fork: 1 of 1
# Warmup Iteration   1: 162.959 ns/op
# Warmup Iteration   2: 177.458 ns/op
# Warmup Iteration   3: 119.652 ns/op
Iteration   1: 119.427 ns/op
Iteration   2: 119.569 ns/op
Iteration   3: 119.708 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  119.568 ±(99.9%) 2.563 ns/op [Average]
  (min, avg, max) = (119.427, 119.568, 119.708), stdev = 0.140
  CI (99.9%): [117.005, 122.131] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 9.17% complete, ETA 00:26:36
# Fork: 1 of 1
# Warmup Iteration   1: 19.404 ns/op
# Warmup Iteration   2: 21.786 ns/op
# Warmup Iteration   3: 13.363 ns/op
Iteration   1: 13.358 ns/op
Iteration   2: 13.361 ns/op
Iteration   3: 13.366 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.362 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (13.358, 13.362, 13.366), stdev = 0.004
  CI (99.9%): [13.287, 13.437] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 9.24% complete, ETA 00:26:35
# Fork: 1 of 1
# Warmup Iteration   1: 70.892 ns/op
# Warmup Iteration   2: 81.667 ns/op
# Warmup Iteration   3: 51.469 ns/op
Iteration   1: 51.456 ns/op
Iteration   2: 51.488 ns/op
Iteration   3: 51.488 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.477 ±(99.9%) 0.337 ns/op [Average]
  (min, avg, max) = (51.456, 51.477, 51.488), stdev = 0.018
  CI (99.9%): [51.140, 51.814] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 9.31% complete, ETA 00:26:33
# Fork: 1 of 1
# Warmup Iteration   1: 68.867 ns/op
# Warmup Iteration   2: 71.617 ns/op
# Warmup Iteration   3: 44.093 ns/op
Iteration   1: 44.061 ns/op
Iteration   2: 44.092 ns/op
Iteration   3: 44.116 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.090 ±(99.9%) 0.504 ns/op [Average]
  (min, avg, max) = (44.061, 44.090, 44.116), stdev = 0.028
  CI (99.9%): [43.586, 44.593] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 9.38% complete, ETA 00:26:32
# Fork: 1 of 1
# Warmup Iteration   1: 240.148 ns/op
# Warmup Iteration   2: 71.757 ns/op
# Warmup Iteration   3: 47.486 ns/op
Iteration   1: 47.493 ns/op
Iteration   2: 47.489 ns/op
Iteration   3: 47.484 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.489 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (47.484, 47.489, 47.493), stdev = 0.004
  CI (99.9%): [47.412, 47.565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 9.44% complete, ETA 00:26:31
# Fork: 1 of 1
# Warmup Iteration   1: 67.329 ns/op
# Warmup Iteration   2: 74.512 ns/op
# Warmup Iteration   3: 46.463 ns/op
Iteration   1: 46.393 ns/op
Iteration   2: 46.401 ns/op
Iteration   3: 46.392 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.395 ±(99.9%) 0.094 ns/op [Average]
  (min, avg, max) = (46.392, 46.395, 46.401), stdev = 0.005
  CI (99.9%): [46.301, 46.489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 9.51% complete, ETA 00:26:30
# Fork: 1 of 1
# Warmup Iteration   1: 166.986 ns/op
# Warmup Iteration   2: 160.583 ns/op
# Warmup Iteration   3: 121.277 ns/op
Iteration   1: 121.228 ns/op
Iteration   2: 121.300 ns/op
Iteration   3: 121.314 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.281 ±(99.9%) 0.843 ns/op [Average]
  (min, avg, max) = (121.228, 121.281, 121.314), stdev = 0.046
  CI (99.9%): [120.438, 122.124] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 9.58% complete, ETA 00:26:28
# Fork: 1 of 1
# Warmup Iteration   1: 19.126 ns/op
# Warmup Iteration   2: 23.393 ns/op
# Warmup Iteration   3: 13.351 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 13.350 ns/op
Iteration   3: 13.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.350 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (13.349, 13.350, 13.350), stdev = 0.001
  CI (99.9%): [13.332, 13.367] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 9.65% complete, ETA 00:26:27
# Fork: 1 of 1
# Warmup Iteration   1: 78.592 ns/op
# Warmup Iteration   2: 84.871 ns/op
# Warmup Iteration   3: 55.001 ns/op
Iteration   1: 54.969 ns/op
Iteration   2: 54.926 ns/op
Iteration   3: 54.948 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  54.948 ±(99.9%) 0.388 ns/op [Average]
  (min, avg, max) = (54.926, 54.948, 54.969), stdev = 0.021
  CI (99.9%): [54.560, 55.336] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 9.72% complete, ETA 00:26:26
# Fork: 1 of 1
# Warmup Iteration   1: 65.571 ns/op
# Warmup Iteration   2: 72.008 ns/op
# Warmup Iteration   3: 44.078 ns/op
Iteration   1: 44.058 ns/op
Iteration   2: 44.068 ns/op
Iteration   3: 44.080 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.069 ±(99.9%) 0.205 ns/op [Average]
  (min, avg, max) = (44.058, 44.069, 44.080), stdev = 0.011
  CI (99.9%): [43.864, 44.274] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 9.79% complete, ETA 00:26:25
# Fork: 1 of 1
# Warmup Iteration   1: 334.959 ns/op
# Warmup Iteration   2: 104.892 ns/op
# Warmup Iteration   3: 65.737 ns/op
Iteration   1: 65.815 ns/op
Iteration   2: 65.784 ns/op
Iteration   3: 65.772 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  65.790 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (65.772, 65.790, 65.815), stdev = 0.022
  CI (99.9%): [65.390, 66.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 9.86% complete, ETA 00:26:23
# Fork: 1 of 1
# Warmup Iteration   1: 66.770 ns/op
# Warmup Iteration   2: 67.201 ns/op
# Warmup Iteration   3: 46.422 ns/op
Iteration   1: 46.351 ns/op
Iteration   2: 46.366 ns/op
Iteration   3: 46.416 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.378 ±(99.9%) 0.619 ns/op [Average]
  (min, avg, max) = (46.351, 46.378, 46.416), stdev = 0.034
  CI (99.9%): [45.759, 46.996] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 9.93% complete, ETA 00:26:22
# Fork: 1 of 1
# Warmup Iteration   1: 172.694 ns/op
# Warmup Iteration   2: 191.519 ns/op
# Warmup Iteration   3: 125.473 ns/op
Iteration   1: 125.490 ns/op
Iteration   2: 125.483 ns/op
Iteration   3: 125.489 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  125.487 ±(99.9%) 0.070 ns/op [Average]
  (min, avg, max) = (125.483, 125.487, 125.490), stdev = 0.004
  CI (99.9%): [125.417, 125.557] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 10.00% complete, ETA 00:26:21
# Fork: 1 of 1
# Warmup Iteration   1: 18.747 ns/op
# Warmup Iteration   2: 22.650 ns/op
# Warmup Iteration   3: 13.363 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.348 ns/op
Iteration   3: 13.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.350 ±(99.9%) 0.086 ns/op [Average]
  (min, avg, max) = (13.348, 13.350, 13.356), stdev = 0.005
  CI (99.9%): [13.264, 13.436] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 10.07% complete, ETA 00:26:19
# Fork: 1 of 1
# Warmup Iteration   1: 168.077 ns/op
# Warmup Iteration   2: 126.816 ns/op
# Warmup Iteration   3: 88.980 ns/op
Iteration   1: 89.013 ns/op
Iteration   2: 89.022 ns/op
Iteration   3: 88.989 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.008 ±(99.9%) 0.309 ns/op [Average]
  (min, avg, max) = (88.989, 89.008, 89.022), stdev = 0.017
  CI (99.9%): [88.699, 89.318] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 10.14% complete, ETA 00:26:18
# Fork: 1 of 1
# Warmup Iteration   1: 70.450 ns/op
# Warmup Iteration   2: 71.384 ns/op
# Warmup Iteration   3: 44.072 ns/op
Iteration   1: 44.081 ns/op
Iteration   2: 44.076 ns/op
Iteration   3: 44.056 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.071 ±(99.9%) 0.238 ns/op [Average]
  (min, avg, max) = (44.056, 44.071, 44.081), stdev = 0.013
  CI (99.9%): [43.833, 44.309] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 10.21% complete, ETA 00:26:17
# Fork: 1 of 1
# Warmup Iteration   1: 271.236 ns/op
# Warmup Iteration   2: 157.117 ns/op
# Warmup Iteration   3: 105.704 ns/op
Iteration   1: 105.860 ns/op
Iteration   2: 105.883 ns/op
Iteration   3: 105.698 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  105.814 ±(99.9%) 1.844 ns/op [Average]
  (min, avg, max) = (105.698, 105.814, 105.883), stdev = 0.101
  CI (99.9%): [103.969, 107.658] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 10.28% complete, ETA 00:26:16
# Fork: 1 of 1
# Warmup Iteration   1: 67.095 ns/op
# Warmup Iteration   2: 75.882 ns/op
# Warmup Iteration   3: 46.481 ns/op
Iteration   1: 46.378 ns/op
Iteration   2: 46.398 ns/op
Iteration   3: 46.383 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.386 ±(99.9%) 0.194 ns/op [Average]
  (min, avg, max) = (46.378, 46.386, 46.398), stdev = 0.011
  CI (99.9%): [46.192, 46.581] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 10.35% complete, ETA 00:26:15
# Fork: 1 of 1
# Warmup Iteration   1: 173.111 ns/op
# Warmup Iteration   2: 178.199 ns/op
# Warmup Iteration   3: 124.222 ns/op
Iteration   1: 124.117 ns/op
Iteration   2: 124.117 ns/op
Iteration   3: 124.114 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  124.116 ±(99.9%) 0.039 ns/op [Average]
  (min, avg, max) = (124.114, 124.116, 124.117), stdev = 0.002
  CI (99.9%): [124.077, 124.155] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 10.42% complete, ETA 00:26:13
# Fork: 1 of 1
# Warmup Iteration   1: 18.996 ns/op
# Warmup Iteration   2: 21.216 ns/op
# Warmup Iteration   3: 13.658 ns/op
Iteration   1: 13.613 ns/op
Iteration   2: 13.630 ns/op
Iteration   3: 13.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.619 ±(99.9%) 0.171 ns/op [Average]
  (min, avg, max) = (13.613, 13.619, 13.630), stdev = 0.009
  CI (99.9%): [13.449, 13.790] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 10.49% complete, ETA 00:26:12
# Fork: 1 of 1
# Warmup Iteration   1: 1475.702 ns/op
# Warmup Iteration   2: 465.166 ns/op
# Warmup Iteration   3: 313.417 ns/op
Iteration   1: 313.171 ns/op
Iteration   2: 313.138 ns/op
Iteration   3: 313.200 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.170 ±(99.9%) 0.567 ns/op [Average]
  (min, avg, max) = (313.138, 313.170, 313.200), stdev = 0.031
  CI (99.9%): [312.603, 313.737] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 10.56% complete, ETA 00:26:11
# Fork: 1 of 1
# Warmup Iteration   1: 387.369 ns/op
# Warmup Iteration   2: 386.441 ns/op
# Warmup Iteration   3: 260.195 ns/op
Iteration   1: 260.157 ns/op
Iteration   2: 260.194 ns/op
Iteration   3: 260.111 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  260.154 ±(99.9%) 0.762 ns/op [Average]
  (min, avg, max) = (260.111, 260.154, 260.194), stdev = 0.042
  CI (99.9%): [259.392, 260.916] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 10.63% complete, ETA 00:26:09
# Fork: 1 of 1
# Warmup Iteration   1: 11251.856 ns/op
# Warmup Iteration   2: 454.453 ns/op
# Warmup Iteration   3: 315.056 ns/op
Iteration   1: 314.262 ns/op
Iteration   2: 314.664 ns/op
Iteration   3: 314.253 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  314.393 ±(99.9%) 4.284 ns/op [Average]
  (min, avg, max) = (314.253, 314.393, 314.664), stdev = 0.235
  CI (99.9%): [310.109, 318.678] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 10.69% complete, ETA 00:26:08
# Fork: 1 of 1
# Warmup Iteration   1: 355.572 ns/op
# Warmup Iteration   2: 296.273 ns/op
# Warmup Iteration   3: 207.346 ns/op
Iteration   1: 207.345 ns/op
Iteration   2: 207.348 ns/op
Iteration   3: 207.342 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  207.345 ±(99.9%) 0.056 ns/op [Average]
  (min, avg, max) = (207.342, 207.345, 207.348), stdev = 0.003
  CI (99.9%): [207.289, 207.401] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 10.76% complete, ETA 00:26:07
# Fork: 1 of 1
# Warmup Iteration   1: 1197.729 ns/op
# Warmup Iteration   2: 1115.437 ns/op
# Warmup Iteration   3: 728.497 ns/op
Iteration   1: 728.162 ns/op
Iteration   2: 728.034 ns/op
Iteration   3: 727.972 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  728.056 ±(99.9%) 1.768 ns/op [Average]
  (min, avg, max) = (727.972, 728.056, 728.162), stdev = 0.097
  CI (99.9%): [726.288, 729.824] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 10.83% complete, ETA 00:26:06
# Fork: 1 of 1
# Warmup Iteration   1: 17.674 ns/op
# Warmup Iteration   2: 22.412 ns/op
# Warmup Iteration   3: 13.368 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.365 ns/op
Iteration   3: 13.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.357 ±(99.9%) 0.135 ns/op [Average]
  (min, avg, max) = (13.351, 13.357, 13.365), stdev = 0.007
  CI (99.9%): [13.222, 13.493] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 10.90% complete, ETA 00:26:04
# Fork: 1 of 1
# Warmup Iteration   1: 794.445 ns/op
# Warmup Iteration   2: 320.354 ns/op
# Warmup Iteration   3: 237.280 ns/op
Iteration   1: 237.298 ns/op
Iteration   2: 237.276 ns/op
Iteration   3: 237.229 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.268 ±(99.9%) 0.641 ns/op [Average]
  (min, avg, max) = (237.229, 237.268, 237.298), stdev = 0.035
  CI (99.9%): [236.627, 237.909] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 10.97% complete, ETA 00:26:03
# Fork: 1 of 1
# Warmup Iteration   1: 492.608 ns/op
# Warmup Iteration   2: 456.107 ns/op
# Warmup Iteration   3: 339.241 ns/op
Iteration   1: 339.164 ns/op
Iteration   2: 339.333 ns/op
Iteration   3: 339.286 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  339.261 ±(99.9%) 1.593 ns/op [Average]
  (min, avg, max) = (339.164, 339.261, 339.333), stdev = 0.087
  CI (99.9%): [337.667, 340.854] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 11.04% complete, ETA 00:26:02
# Fork: 1 of 1
# Warmup Iteration   1: 880.553 ns/op
# Warmup Iteration   2: 354.171 ns/op
# Warmup Iteration   3: 247.196 ns/op
Iteration   1: 247.202 ns/op
Iteration   2: 247.404 ns/op
Iteration   3: 247.291 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  247.299 ±(99.9%) 1.848 ns/op [Average]
  (min, avg, max) = (247.202, 247.299, 247.404), stdev = 0.101
  CI (99.9%): [245.451, 249.146] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 11.11% complete, ETA 00:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 511.728 ns/op
# Warmup Iteration   2: 421.092 ns/op
# Warmup Iteration   3: 284.413 ns/op
Iteration   1: 284.422 ns/op
Iteration   2: 284.431 ns/op
Iteration   3: 284.455 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.436 ±(99.9%) 0.313 ns/op [Average]
  (min, avg, max) = (284.422, 284.436, 284.455), stdev = 0.017
  CI (99.9%): [284.123, 284.749] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 11.18% complete, ETA 00:25:59
# Fork: 1 of 1
# Warmup Iteration   1: 1141.496 ns/op
# Warmup Iteration   2: 944.626 ns/op
# Warmup Iteration   3: 673.803 ns/op
Iteration   1: 673.434 ns/op
Iteration   2: 673.385 ns/op
Iteration   3: 673.305 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  673.375 ±(99.9%) 1.188 ns/op [Average]
  (min, avg, max) = (673.305, 673.375, 673.434), stdev = 0.065
  CI (99.9%): [672.187, 674.563] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 11.25% complete, ETA 00:25:58
# Fork: 1 of 1
# Warmup Iteration   1: 18.044 ns/op
# Warmup Iteration   2: 21.834 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.355 ns/op
Iteration   2: 13.433 ns/op
Iteration   3: 13.366 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.384 ±(99.9%) 0.775 ns/op [Average]
  (min, avg, max) = (13.355, 13.384, 13.433), stdev = 0.042
  CI (99.9%): [12.610, 14.159] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 11.32% complete, ETA 00:25:57
# Fork: 1 of 1
# Warmup Iteration   1: 741.185 ns/op
# Warmup Iteration   2: 301.859 ns/op
# Warmup Iteration   3: 238.439 ns/op
Iteration   1: 238.590 ns/op
Iteration   2: 238.580 ns/op
Iteration   3: 238.843 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  238.671 ±(99.9%) 2.718 ns/op [Average]
  (min, avg, max) = (238.580, 238.671, 238.843), stdev = 0.149
  CI (99.9%): [235.953, 241.389] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 11.39% complete, ETA 00:25:56
# Fork: 1 of 1
# Warmup Iteration   1: 495.237 ns/op
# Warmup Iteration   2: 465.656 ns/op
# Warmup Iteration   3: 339.956 ns/op
Iteration   1: 339.908 ns/op
Iteration   2: 339.899 ns/op
Iteration   3: 340.194 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  340.000 ±(99.9%) 3.058 ns/op [Average]
  (min, avg, max) = (339.899, 340.000, 340.194), stdev = 0.168
  CI (99.9%): [336.942, 343.059] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 11.46% complete, ETA 00:25:54
# Fork: 1 of 1
# Warmup Iteration   1: 716.913 ns/op
# Warmup Iteration   2: 367.347 ns/op
# Warmup Iteration   3: 248.434 ns/op
Iteration   1: 248.880 ns/op
Iteration   2: 248.451 ns/op
Iteration   3: 276.828 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  258.053 ±(99.9%) 296.667 ns/op [Average]
  (min, avg, max) = (248.451, 258.053, 276.828), stdev = 16.261
  CI (99.9%): [≈ 0, 554.720] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 11.53% complete, ETA 00:25:53
# Fork: 1 of 1
# Warmup Iteration   1: 452.975 ns/op
# Warmup Iteration   2: 413.496 ns/op
# Warmup Iteration   3: 284.991 ns/op
Iteration   1: 284.447 ns/op
Iteration   2: 284.589 ns/op
Iteration   3: 284.378 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.471 ±(99.9%) 1.959 ns/op [Average]
  (min, avg, max) = (284.378, 284.471, 284.589), stdev = 0.107
  CI (99.9%): [282.512, 286.430] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 11.60% complete, ETA 00:25:52
# Fork: 1 of 1
# Warmup Iteration   1: 1156.320 ns/op
# Warmup Iteration   2: 1006.942 ns/op
# Warmup Iteration   3: 703.034 ns/op
Iteration   1: 702.659 ns/op
Iteration   2: 702.742 ns/op
Iteration   3: 702.632 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  702.678 ±(99.9%) 1.047 ns/op [Average]
  (min, avg, max) = (702.632, 702.678, 702.742), stdev = 0.057
  CI (99.9%): [701.630, 703.725] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 11.67% complete, ETA 00:25:50
# Fork: 1 of 1
# Warmup Iteration   1: 18.251 ns/op
# Warmup Iteration   2: 24.212 ns/op
# Warmup Iteration   3: 13.378 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.429 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.375 ±(99.9%) 0.860 ns/op [Average]
  (min, avg, max) = (13.347, 13.375, 13.429), stdev = 0.047
  CI (99.9%): [12.515, 14.235] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 11.74% complete, ETA 00:25:49
# Fork: 1 of 1
# Warmup Iteration   1: 740.231 ns/op
# Warmup Iteration   2: 342.309 ns/op
# Warmup Iteration   3: 237.486 ns/op
Iteration   1: 237.488 ns/op
Iteration   2: 237.388 ns/op
Iteration   3: 237.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.410 ±(99.9%) 1.270 ns/op [Average]
  (min, avg, max) = (237.354, 237.410, 237.488), stdev = 0.070
  CI (99.9%): [236.140, 238.680] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 11.81% complete, ETA 00:25:48
# Fork: 1 of 1
# Warmup Iteration   1: 520.229 ns/op
# Warmup Iteration   2: 494.471 ns/op
# Warmup Iteration   3: 339.295 ns/op
Iteration   1: 339.248 ns/op
Iteration   2: 339.134 ns/op
Iteration   3: 339.329 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  339.237 ±(99.9%) 1.791 ns/op [Average]
  (min, avg, max) = (339.134, 339.237, 339.329), stdev = 0.098
  CI (99.9%): [337.446, 341.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 11.88% complete, ETA 00:25:46
# Fork: 1 of 1
# Warmup Iteration   1: 909.929 ns/op
# Warmup Iteration   2: 373.929 ns/op
# Warmup Iteration   3: 277.901 ns/op
Iteration   1: 271.882 ns/op
Iteration   2: 272.623 ns/op
Iteration   3: 275.104 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  273.203 ±(99.9%) 30.787 ns/op [Average]
  (min, avg, max) = (271.882, 273.203, 275.104), stdev = 1.688
  CI (99.9%): [242.416, 303.990] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 11.94% complete, ETA 00:25:45
# Fork: 1 of 1
# Warmup Iteration   1: 465.629 ns/op
# Warmup Iteration   2: 396.539 ns/op
# Warmup Iteration   3: 285.510 ns/op
Iteration   1: 285.148 ns/op
Iteration   2: 284.935 ns/op
Iteration   3: 284.727 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.937 ±(99.9%) 3.842 ns/op [Average]
  (min, avg, max) = (284.727, 284.937, 285.148), stdev = 0.211
  CI (99.9%): [281.095, 288.778] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 12.01% complete, ETA 00:25:44
# Fork: 1 of 1
# Warmup Iteration   1: 1109.306 ns/op
# Warmup Iteration   2: 998.222 ns/op
# Warmup Iteration   3: 673.355 ns/op
Iteration   1: 673.218 ns/op
Iteration   2: 673.271 ns/op
Iteration   3: 673.243 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  673.244 ±(99.9%) 0.487 ns/op [Average]
  (min, avg, max) = (673.218, 673.244, 673.271), stdev = 0.027
  CI (99.9%): [672.757, 673.731] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 12.08% complete, ETA 00:25:43
# Fork: 1 of 1
# Warmup Iteration   1: 18.713 ns/op
# Warmup Iteration   2: 21.859 ns/op
# Warmup Iteration   3: 13.355 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.375 ns/op
Iteration   3: 13.366 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.363 ±(99.9%) 0.262 ns/op [Average]
  (min, avg, max) = (13.347, 13.363, 13.375), stdev = 0.014
  CI (99.9%): [13.100, 13.625] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 12.15% complete, ETA 00:25:41
# Fork: 1 of 1
# Warmup Iteration   1: 297.166 ns/op
# Warmup Iteration   2: 200.650 ns/op
# Warmup Iteration   3: 136.595 ns/op
Iteration   1: 136.561 ns/op
Iteration   2: 136.512 ns/op
Iteration   3: 136.538 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  136.537 ±(99.9%) 0.446 ns/op [Average]
  (min, avg, max) = (136.512, 136.537, 136.561), stdev = 0.024
  CI (99.9%): [136.091, 136.983] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 12.22% complete, ETA 00:25:40
# Fork: 1 of 1
# Warmup Iteration   1: 145.393 ns/op
# Warmup Iteration   2: 147.732 ns/op
# Warmup Iteration   3: 95.047 ns/op
Iteration   1: 95.088 ns/op
Iteration   2: 95.093 ns/op
Iteration   3: 95.058 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.080 ±(99.9%) 0.340 ns/op [Average]
  (min, avg, max) = (95.058, 95.080, 95.093), stdev = 0.019
  CI (99.9%): [94.739, 95.420] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 12.29% complete, ETA 00:25:39
# Fork: 1 of 1
# Warmup Iteration   1: 537.123 ns/op
# Warmup Iteration   2: 187.211 ns/op
# Warmup Iteration   3: 124.145 ns/op
Iteration   1: 124.076 ns/op
Iteration   2: 123.918 ns/op
Iteration   3: 124.023 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  124.006 ±(99.9%) 1.461 ns/op [Average]
  (min, avg, max) = (123.918, 124.006, 124.076), stdev = 0.080
  CI (99.9%): [122.544, 125.467] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 12.36% complete, ETA 00:25:38
# Fork: 1 of 1
# Warmup Iteration   1: 110.529 ns/op
# Warmup Iteration   2: 116.806 ns/op
# Warmup Iteration   3: 75.132 ns/op
Iteration   1: 75.138 ns/op
Iteration   2: 75.167 ns/op
Iteration   3: 75.125 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  75.143 ±(99.9%) 0.393 ns/op [Average]
  (min, avg, max) = (75.125, 75.143, 75.167), stdev = 0.022
  CI (99.9%): [74.750, 75.537] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 12.43% complete, ETA 00:25:36
# Fork: 1 of 1
# Warmup Iteration   1: 1051.043 ns/op
# Warmup Iteration   2: 984.831 ns/op
# Warmup Iteration   3: 634.007 ns/op
Iteration   1: 634.026 ns/op
Iteration   2: 633.801 ns/op
Iteration   3: 633.723 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  633.850 ±(99.9%) 2.873 ns/op [Average]
  (min, avg, max) = (633.723, 633.850, 634.026), stdev = 0.157
  CI (99.9%): [630.977, 636.723] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 12.50% complete, ETA 00:25:35
# Fork: 1 of 1
# Warmup Iteration   1: 18.731 ns/op
# Warmup Iteration   2: 23.924 ns/op
# Warmup Iteration   3: 13.358 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.365 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.353 ±(99.9%) 0.187 ns/op [Average]
  (min, avg, max) = (13.347, 13.353, 13.365), stdev = 0.010
  CI (99.9%): [13.167, 13.540] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 12.57% complete, ETA 00:25:34
# Fork: 1 of 1
# Warmup Iteration   1: 1587.829 ns/op
# Warmup Iteration   2: 438.495 ns/op
# Warmup Iteration   3: 303.280 ns/op
Iteration   1: 303.294 ns/op
Iteration   2: 303.077 ns/op
Iteration   3: 302.836 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.069 ±(99.9%) 4.183 ns/op [Average]
  (min, avg, max) = (302.836, 303.069, 303.294), stdev = 0.229
  CI (99.9%): [298.886, 307.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 12.64% complete, ETA 00:25:32
# Fork: 1 of 1
# Warmup Iteration   1: 498.798 ns/op
# Warmup Iteration   2: 489.483 ns/op
# Warmup Iteration   3: 338.171 ns/op
Iteration   1: 338.211 ns/op
Iteration   2: 338.320 ns/op
Iteration   3: 338.036 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.189 ±(99.9%) 2.614 ns/op [Average]
  (min, avg, max) = (338.036, 338.189, 338.320), stdev = 0.143
  CI (99.9%): [335.575, 340.804] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 12.71% complete, ETA 00:25:31
# Fork: 1 of 1
# Warmup Iteration   1: 5354.514 ns/op
# Warmup Iteration   2: 423.921 ns/op
# Warmup Iteration   3: 313.534 ns/op
Iteration   1: 313.350 ns/op
Iteration   2: 313.459 ns/op
Iteration   3: 313.555 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.454 ±(99.9%) 1.875 ns/op [Average]
  (min, avg, max) = (313.350, 313.454, 313.555), stdev = 0.103
  CI (99.9%): [311.580, 315.329] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 12.78% complete, ETA 00:25:30
# Fork: 1 of 1
# Warmup Iteration   1: 432.465 ns/op
# Warmup Iteration   2: 380.669 ns/op
# Warmup Iteration   3: 261.011 ns/op
Iteration   1: 260.992 ns/op
Iteration   2: 260.826 ns/op
Iteration   3: 260.969 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  260.929 ±(99.9%) 1.648 ns/op [Average]
  (min, avg, max) = (260.826, 260.929, 260.992), stdev = 0.090
  CI (99.9%): [259.281, 262.577] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 12.85% complete, ETA 00:25:29
# Fork: 1 of 1
# Warmup Iteration   1: 1410.006 ns/op
# Warmup Iteration   2: 640.102 ns/op
# Warmup Iteration   3: 419.742 ns/op
Iteration   1: 419.667 ns/op
Iteration   2: 419.834 ns/op
Iteration   3: 419.571 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  419.691 ±(99.9%) 2.422 ns/op [Average]
  (min, avg, max) = (419.571, 419.691, 419.834), stdev = 0.133
  CI (99.9%): [417.269, 422.112] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 12.92% complete, ETA 00:25:28
# Fork: 1 of 1
# Warmup Iteration   1: 19.454 ns/op
# Warmup Iteration   2: 21.776 ns/op
# Warmup Iteration   3: 13.362 ns/op
Iteration   1: 13.353 ns/op
Iteration   2: 13.370 ns/op
Iteration   3: 13.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.187 ns/op [Average]
  (min, avg, max) = (13.351, 13.358, 13.370), stdev = 0.010
  CI (99.9%): [13.171, 13.545] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 12.99% complete, ETA 00:25:26
# Fork: 1 of 1
# Warmup Iteration   1: 585.735 ns/op
# Warmup Iteration   2: 442.226 ns/op
# Warmup Iteration   3: 296.138 ns/op
Iteration   1: 292.938 ns/op
Iteration   2: 292.899 ns/op
Iteration   3: 292.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  292.729 ±(99.9%) 5.994 ns/op [Average]
  (min, avg, max) = (292.350, 292.729, 292.938), stdev = 0.329
  CI (99.9%): [286.735, 298.723] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 13.06% complete, ETA 00:25:25
# Fork: 1 of 1
# Warmup Iteration   1: 533.991 ns/op
# Warmup Iteration   2: 476.352 ns/op
# Warmup Iteration   3: 337.246 ns/op
Iteration   1: 337.070 ns/op
Iteration   2: 337.142 ns/op
Iteration   3: 337.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  337.095 ±(99.9%) 0.744 ns/op [Average]
  (min, avg, max) = (337.070, 337.095, 337.142), stdev = 0.041
  CI (99.9%): [336.351, 337.839] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 13.13% complete, ETA 00:25:24
# Fork: 1 of 1
# Warmup Iteration   1: 661.417 ns/op
# Warmup Iteration   2: 285.908 ns/op
# Warmup Iteration   3: 196.416 ns/op
Iteration   1: 196.349 ns/op
Iteration   2: 196.386 ns/op
Iteration   3: 196.627 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  196.454 ±(99.9%) 2.753 ns/op [Average]
  (min, avg, max) = (196.349, 196.454, 196.627), stdev = 0.151
  CI (99.9%): [193.702, 199.207] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 13.19% complete, ETA 00:25:22
# Fork: 1 of 1
# Warmup Iteration   1: 416.758 ns/op
# Warmup Iteration   2: 408.130 ns/op
# Warmup Iteration   3: 284.069 ns/op
Iteration   1: 284.103 ns/op
Iteration   2: 283.999 ns/op
Iteration   3: 283.982 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.028 ±(99.9%) 1.193 ns/op [Average]
  (min, avg, max) = (283.982, 284.028, 284.103), stdev = 0.065
  CI (99.9%): [282.835, 285.221] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 13.26% complete, ETA 00:25:21
# Fork: 1 of 1
# Warmup Iteration   1: 1202.965 ns/op
# Warmup Iteration   2: 1115.327 ns/op
# Warmup Iteration   3: 748.759 ns/op
Iteration   1: 748.338 ns/op
Iteration   2: 748.335 ns/op
Iteration   3: 748.169 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  748.281 ±(99.9%) 1.765 ns/op [Average]
  (min, avg, max) = (748.169, 748.281, 748.338), stdev = 0.097
  CI (99.9%): [746.515, 750.046] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 13.33% complete, ETA 00:25:20
# Fork: 1 of 1
# Warmup Iteration   1: 18.991 ns/op
# Warmup Iteration   2: 20.693 ns/op
# Warmup Iteration   3: 13.381 ns/op
Iteration   1: 13.367 ns/op
Iteration   2: 13.387 ns/op
Iteration   3: 13.365 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.373 ±(99.9%) 0.220 ns/op [Average]
  (min, avg, max) = (13.365, 13.373, 13.387), stdev = 0.012
  CI (99.9%): [13.153, 13.593] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 13.40% complete, ETA 00:25:19
# Fork: 1 of 1
# Warmup Iteration   1: 676.702 ns/op
# Warmup Iteration   2: 415.476 ns/op
# Warmup Iteration   3: 292.025 ns/op
Iteration   1: 291.163 ns/op
Iteration   2: 291.496 ns/op
Iteration   3: 291.972 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  291.543 ±(99.9%) 7.417 ns/op [Average]
  (min, avg, max) = (291.163, 291.543, 291.972), stdev = 0.407
  CI (99.9%): [284.126, 298.961] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 13.47% complete, ETA 00:25:18
# Fork: 1 of 1
# Warmup Iteration   1: 617.457 ns/op
# Warmup Iteration   2: 522.250 ns/op
# Warmup Iteration   3: 359.037 ns/op
Iteration   1: 358.586 ns/op
Iteration   2: 361.732 ns/op
Iteration   3: 359.242 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  359.853 ±(99.9%) 30.285 ns/op [Average]
  (min, avg, max) = (358.586, 359.853, 361.732), stdev = 1.660
  CI (99.9%): [329.568, 390.138] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 13.54% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 2426.827 ns/op
# Warmup Iteration   2: 296.608 ns/op
# Warmup Iteration   3: 235.183 ns/op
Iteration   1: 234.771 ns/op
Iteration   2: 235.833 ns/op
Iteration   3: 234.654 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  235.086 ±(99.9%) 11.855 ns/op [Average]
  (min, avg, max) = (234.654, 235.086, 235.833), stdev = 0.650
  CI (99.9%): [223.231, 246.941] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 13.61% complete, ETA 00:25:15
# Fork: 1 of 1
# Warmup Iteration   1: 497.777 ns/op
# Warmup Iteration   2: 402.565 ns/op
# Warmup Iteration   3: 279.928 ns/op
Iteration   1: 279.883 ns/op
Iteration   2: 279.892 ns/op
Iteration   3: 279.840 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  279.872 ±(99.9%) 0.510 ns/op [Average]
  (min, avg, max) = (279.840, 279.872, 279.892), stdev = 0.028
  CI (99.9%): [279.361, 280.382] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 13.68% complete, ETA 00:25:14
# Fork: 1 of 1
# Warmup Iteration   1: 2963.509 ns/op
# Warmup Iteration   2: 2331.335 ns/op
# Warmup Iteration   3: 1541.572 ns/op
Iteration   1: 1540.920 ns/op
Iteration   2: 1537.176 ns/op
Iteration   3: 1543.795 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1540.631 ±(99.9%) 60.554 ns/op [Average]
  (min, avg, max) = (1537.176, 1540.631, 1543.795), stdev = 3.319
  CI (99.9%): [1480.076, 1601.185] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 13.75% complete, ETA 00:25:12
# Fork: 1 of 1
# Warmup Iteration   1: 19.341 ns/op
# Warmup Iteration   2: 21.801 ns/op
# Warmup Iteration   3: 13.428 ns/op
Iteration   1: 13.429 ns/op
Iteration   2: 13.471 ns/op
Iteration   3: 13.379 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.426 ±(99.9%) 0.839 ns/op [Average]
  (min, avg, max) = (13.379, 13.426, 13.471), stdev = 0.046
  CI (99.9%): [12.587, 14.266] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 13.82% complete, ETA 00:25:11
# Fork: 1 of 1
# Warmup Iteration   1: 83.544 ns/op
# Warmup Iteration   2: 86.476 ns/op
# Warmup Iteration   3: 57.058 ns/op
Iteration   1: 56.933 ns/op
Iteration   2: 56.982 ns/op
Iteration   3: 57.002 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  56.972 ±(99.9%) 0.649 ns/op [Average]
  (min, avg, max) = (56.933, 56.972, 57.002), stdev = 0.036
  CI (99.9%): [56.324, 57.621] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 13.89% complete, ETA 00:25:10
# Fork: 1 of 1
# Warmup Iteration   1: 65.640 ns/op
# Warmup Iteration   2: 69.326 ns/op
# Warmup Iteration   3: 44.049 ns/op
Iteration   1: 44.029 ns/op
Iteration   2: 44.036 ns/op
Iteration   3: 44.034 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.033 ±(99.9%) 0.072 ns/op [Average]
  (min, avg, max) = (44.029, 44.033, 44.036), stdev = 0.004
  CI (99.9%): [43.961, 44.105] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 13.96% complete, ETA 00:25:09
# Fork: 1 of 1
# Warmup Iteration   1: 513.951 ns/op
# Warmup Iteration   2: 110.545 ns/op
# Warmup Iteration   3: 70.800 ns/op
Iteration   1: 70.742 ns/op
Iteration   2: 70.768 ns/op
Iteration   3: 70.743 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  70.751 ±(99.9%) 0.272 ns/op [Average]
  (min, avg, max) = (70.742, 70.751, 70.768), stdev = 0.015
  CI (99.9%): [70.479, 71.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 14.03% complete, ETA 00:25:07
# Fork: 1 of 1
# Warmup Iteration   1: 68.128 ns/op
# Warmup Iteration   2: 75.264 ns/op
# Warmup Iteration   3: 46.454 ns/op
Iteration   1: 46.404 ns/op
Iteration   2: 46.566 ns/op
Iteration   3: 46.442 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.471 ±(99.9%) 1.545 ns/op [Average]
  (min, avg, max) = (46.404, 46.471, 46.566), stdev = 0.085
  CI (99.9%): [44.926, 48.016] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 14.10% complete, ETA 00:25:06
# Fork: 1 of 1
# Warmup Iteration   1: 193.055 ns/op
# Warmup Iteration   2: 194.694 ns/op
# Warmup Iteration   3: 98.328 ns/op
Iteration   1: 98.328 ns/op
Iteration   2: 98.385 ns/op
Iteration   3: 98.309 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  98.340 ±(99.9%) 0.717 ns/op [Average]
  (min, avg, max) = (98.309, 98.340, 98.385), stdev = 0.039
  CI (99.9%): [97.623, 99.058] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 14.17% complete, ETA 00:25:05
# Fork: 1 of 1
# Warmup Iteration   1: 19.007 ns/op
# Warmup Iteration   2: 20.348 ns/op
# Warmup Iteration   3: 13.398 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.382 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.362 ±(99.9%) 0.336 ns/op [Average]
  (min, avg, max) = (13.347, 13.362, 13.382), stdev = 0.018
  CI (99.9%): [13.026, 13.697] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 14.24% complete, ETA 00:25:04
# Fork: 1 of 1
# Warmup Iteration   1: 18890.155 ns/op
# Warmup Iteration   2: 473.710 ns/op
# Warmup Iteration   3: 350.146 ns/op
Iteration   1: 323.975 ns/op
Iteration   2: 323.923 ns/op
Iteration   3: 323.960 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.953 ±(99.9%) 0.491 ns/op [Average]
  (min, avg, max) = (323.923, 323.953, 323.975), stdev = 0.027
  CI (99.9%): [323.462, 324.444] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 14.31% complete, ETA 00:25:02
# Fork: 1 of 1
# Warmup Iteration   1: 311.359 ns/op
# Warmup Iteration   2: 327.935 ns/op
# Warmup Iteration   3: 223.645 ns/op
Iteration   1: 223.329 ns/op
Iteration   2: 221.959 ns/op
Iteration   3: 224.552 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  223.280 ±(99.9%) 23.662 ns/op [Average]
  (min, avg, max) = (221.959, 223.280, 224.552), stdev = 1.297
  CI (99.9%): [199.618, 246.942] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 14.37% complete, ETA 00:25:01
# Fork: 1 of 1
# Warmup Iteration   1: 10920.968 ns/op
# Warmup Iteration   2: 482.255 ns/op
# Warmup Iteration   3: 322.858 ns/op
Iteration   1: 323.778 ns/op
Iteration   2: 323.066 ns/op
Iteration   3: 323.389 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.411 ±(99.9%) 6.506 ns/op [Average]
  (min, avg, max) = (323.066, 323.411, 323.778), stdev = 0.357
  CI (99.9%): [316.905, 329.916] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 14.44% complete, ETA 00:25:00
# Fork: 1 of 1
# Warmup Iteration   1: 325.454 ns/op
# Warmup Iteration   2: 281.472 ns/op
# Warmup Iteration   3: 181.894 ns/op
Iteration   1: 181.780 ns/op
Iteration   2: 181.871 ns/op
Iteration   3: 181.754 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  181.801 ±(99.9%) 1.119 ns/op [Average]
  (min, avg, max) = (181.754, 181.801, 181.871), stdev = 0.061
  CI (99.9%): [180.683, 182.920] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 14.51% complete, ETA 00:24:59
# Fork: 1 of 1
# Warmup Iteration   1: 1948.980 ns/op
# Warmup Iteration   2: 909.165 ns/op
# Warmup Iteration   3: 640.774 ns/op
Iteration   1: 643.477 ns/op
Iteration   2: 637.871 ns/op
Iteration   3: 637.887 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  639.745 ±(99.9%) 58.965 ns/op [Average]
  (min, avg, max) = (637.871, 639.745, 643.477), stdev = 3.232
  CI (99.9%): [580.780, 698.710] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 14.58% complete, ETA 00:24:58
# Fork: 1 of 1
# Warmup Iteration   1: 18.981 ns/op
# Warmup Iteration   2: 21.544 ns/op
# Warmup Iteration   3: 13.358 ns/op
Iteration   1: 13.351 ns/op
Iteration   2: 13.379 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.362 ±(99.9%) 0.273 ns/op [Average]
  (min, avg, max) = (13.351, 13.362, 13.379), stdev = 0.015
  CI (99.9%): [13.089, 13.635] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 14.65% complete, ETA 00:24:56
# Fork: 1 of 1
# Warmup Iteration   1: 1110.262 ns/op
# Warmup Iteration   2: 452.163 ns/op
# Warmup Iteration   3: 302.155 ns/op
Iteration   1: 301.598 ns/op
Iteration   2: 301.975 ns/op
Iteration   3: 302.078 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  301.884 ±(99.9%) 4.612 ns/op [Average]
  (min, avg, max) = (301.598, 301.884, 302.078), stdev = 0.253
  CI (99.9%): [297.272, 306.495] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 14.72% complete, ETA 00:24:55
# Fork: 1 of 1
# Warmup Iteration   1: 665.717 ns/op
# Warmup Iteration   2: 602.094 ns/op
# Warmup Iteration   3: 454.007 ns/op
Iteration   1: 454.022 ns/op
Iteration   2: 454.536 ns/op
Iteration   3: 454.125 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  454.228 ±(99.9%) 4.956 ns/op [Average]
  (min, avg, max) = (454.022, 454.228, 454.536), stdev = 0.272
  CI (99.9%): [449.272, 459.184] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 14.79% complete, ETA 00:24:54
# Fork: 1 of 1
# Warmup Iteration   1: 17671.854 ns/op
# Warmup Iteration   2: 480.624 ns/op
# Warmup Iteration   3: 358.380 ns/op
Iteration   1: 322.010 ns/op
Iteration   2: 322.004 ns/op
Iteration   3: 322.462 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  322.159 ±(99.9%) 4.790 ns/op [Average]
  (min, avg, max) = (322.004, 322.159, 322.462), stdev = 0.263
  CI (99.9%): [317.368, 326.949] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 14.86% complete, ETA 00:24:52
# Fork: 1 of 1
# Warmup Iteration   1: 489.105 ns/op
# Warmup Iteration   2: 478.774 ns/op
# Warmup Iteration   3: 325.924 ns/op
Iteration   1: 325.843 ns/op
Iteration   2: 325.764 ns/op
Iteration   3: 325.802 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  325.803 ±(99.9%) 0.725 ns/op [Average]
  (min, avg, max) = (325.764, 325.803, 325.843), stdev = 0.040
  CI (99.9%): [325.078, 326.528] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 14.93% complete, ETA 00:24:51
# Fork: 1 of 1
# Warmup Iteration   1: 1088.756 ns/op
# Warmup Iteration   2: 769.100 ns/op
# Warmup Iteration   3: 462.952 ns/op
Iteration   1: 463.286 ns/op
Iteration   2: 462.752 ns/op
Iteration   3: 462.570 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  462.869 ±(99.9%) 6.794 ns/op [Average]
  (min, avg, max) = (462.570, 462.869, 463.286), stdev = 0.372
  CI (99.9%): [456.076, 469.663] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 15.00% complete, ETA 00:24:50
# Fork: 1 of 1
# Warmup Iteration   1: 18.602 ns/op
# Warmup Iteration   2: 21.055 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.376 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.270 ns/op [Average]
  (min, avg, max) = (13.348, 13.359, 13.376), stdev = 0.015
  CI (99.9%): [13.089, 13.629] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 15.07% complete, ETA 00:24:49
# Fork: 1 of 1
# Warmup Iteration   1: 534.606 ns/op
# Warmup Iteration   2: 439.749 ns/op
# Warmup Iteration   3: 297.163 ns/op
Iteration   1: 297.107 ns/op
Iteration   2: 297.285 ns/op
Iteration   3: 297.638 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  297.343 ±(99.9%) 4.928 ns/op [Average]
  (min, avg, max) = (297.107, 297.343, 297.638), stdev = 0.270
  CI (99.9%): [292.415, 302.271] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 15.14% complete, ETA 00:24:47
# Fork: 1 of 1
# Warmup Iteration   1: 541.494 ns/op
# Warmup Iteration   2: 500.236 ns/op
# Warmup Iteration   3: 363.210 ns/op
Iteration   1: 362.081 ns/op
Iteration   2: 364.080 ns/op
Iteration   3: 363.333 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  363.165 ±(99.9%) 18.427 ns/op [Average]
  (min, avg, max) = (362.081, 363.165, 364.080), stdev = 1.010
  CI (99.9%): [344.738, 381.591] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 15.21% complete, ETA 00:24:46
# Fork: 1 of 1
# Warmup Iteration   1: 760.206 ns/op
# Warmup Iteration   2: 284.755 ns/op
# Warmup Iteration   3: 203.779 ns/op
Iteration   1: 203.734 ns/op
Iteration   2: 203.979 ns/op
Iteration   3: 203.702 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  203.805 ±(99.9%) 2.767 ns/op [Average]
  (min, avg, max) = (203.702, 203.805, 203.979), stdev = 0.152
  CI (99.9%): [201.038, 206.572] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 15.28% complete, ETA 00:24:45
# Fork: 1 of 1
# Warmup Iteration   1: 429.456 ns/op
# Warmup Iteration   2: 441.076 ns/op
# Warmup Iteration   3: 291.889 ns/op
Iteration   1: 291.236 ns/op
Iteration   2: 290.318 ns/op
Iteration   3: 290.471 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  290.675 ±(99.9%) 8.972 ns/op [Average]
  (min, avg, max) = (290.318, 290.675, 291.236), stdev = 0.492
  CI (99.9%): [281.703, 299.648] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 15.35% complete, ETA 00:24:44
# Fork: 1 of 1
# Warmup Iteration   1: 1855.659 ns/op
# Warmup Iteration   2: 1147.869 ns/op
# Warmup Iteration   3: 777.407 ns/op
Iteration   1: 776.947 ns/op
Iteration   2: 777.165 ns/op
Iteration   3: 776.758 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  776.957 ±(99.9%) 3.719 ns/op [Average]
  (min, avg, max) = (776.758, 776.957, 777.165), stdev = 0.204
  CI (99.9%): [773.238, 780.676] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 15.42% complete, ETA 00:24:42
# Fork: 1 of 1
# Warmup Iteration   1: 19.561 ns/op
# Warmup Iteration   2: 22.681 ns/op
# Warmup Iteration   3: 13.365 ns/op
Iteration   1: 13.351 ns/op
Iteration   2: 13.369 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.163 ns/op [Average]
  (min, avg, max) = (13.351, 13.359, 13.369), stdev = 0.009
  CI (99.9%): [13.196, 13.522] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 15.49% complete, ETA 00:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 564.444 ns/op
# Warmup Iteration   2: 332.281 ns/op
# Warmup Iteration   3: 243.043 ns/op
Iteration   1: 240.921 ns/op
Iteration   2: 241.115 ns/op
Iteration   3: 240.910 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  240.982 ±(99.9%) 2.101 ns/op [Average]
  (min, avg, max) = (240.910, 240.982, 241.115), stdev = 0.115
  CI (99.9%): [238.881, 243.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 15.56% complete, ETA 00:24:40
# Fork: 1 of 1
# Warmup Iteration   1: 517.653 ns/op
# Warmup Iteration   2: 553.757 ns/op
# Warmup Iteration   3: 358.414 ns/op
Iteration   1: 357.839 ns/op
Iteration   2: 359.365 ns/op
Iteration   3: 361.463 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  359.556 ±(99.9%) 33.191 ns/op [Average]
  (min, avg, max) = (357.839, 359.556, 361.463), stdev = 1.819
  CI (99.9%): [326.365, 392.747] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 15.63% complete, ETA 00:24:39
# Fork: 1 of 1
# Warmup Iteration   1: 1438.545 ns/op
# Warmup Iteration   2: 306.464 ns/op
# Warmup Iteration   3: 206.521 ns/op
Iteration   1: 206.446 ns/op
Iteration   2: 206.483 ns/op
Iteration   3: 206.458 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  206.463 ±(99.9%) 0.343 ns/op [Average]
  (min, avg, max) = (206.446, 206.463, 206.483), stdev = 0.019
  CI (99.9%): [206.119, 206.806] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 15.69% complete, ETA 00:24:37
# Fork: 1 of 1
# Warmup Iteration   1: 579.379 ns/op
# Warmup Iteration   2: 425.169 ns/op
# Warmup Iteration   3: 286.361 ns/op
Iteration   1: 287.175 ns/op
Iteration   2: 286.532 ns/op
Iteration   3: 287.654 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  287.120 ±(99.9%) 10.275 ns/op [Average]
  (min, avg, max) = (286.532, 287.120, 287.654), stdev = 0.563
  CI (99.9%): [276.846, 297.395] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 15.76% complete, ETA 00:24:36
# Fork: 1 of 1
# Warmup Iteration   1: 2974.648 ns/op
# Warmup Iteration   2: 2196.307 ns/op
# Warmup Iteration   3: 1528.230 ns/op
Iteration   1: 1519.706 ns/op
Iteration   2: 1522.492 ns/op
Iteration   3: 1521.317 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1521.172 ±(99.9%) 25.513 ns/op [Average]
  (min, avg, max) = (1519.706, 1521.172, 1522.492), stdev = 1.398
  CI (99.9%): [1495.659, 1546.685] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 15.83% complete, ETA 00:24:35
# Fork: 1 of 1
# Warmup Iteration   1: 18.003 ns/op
# Warmup Iteration   2: 23.949 ns/op
# Warmup Iteration   3: 13.361 ns/op
Iteration   1: 13.365 ns/op
Iteration   2: 13.372 ns/op
Iteration   3: 13.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.362 ±(99.9%) 0.203 ns/op [Average]
  (min, avg, max) = (13.350, 13.362, 13.372), stdev = 0.011
  CI (99.9%): [13.159, 13.566] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 15.90% complete, ETA 00:24:33
# Fork: 1 of 1
# Warmup Iteration   1: 115.319 ns/op
# Warmup Iteration   2: 98.933 ns/op
# Warmup Iteration   3: 65.599 ns/op
Iteration   1: 65.551 ns/op
Iteration   2: 65.529 ns/op
Iteration   3: 65.557 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  65.546 ±(99.9%) 0.277 ns/op [Average]
  (min, avg, max) = (65.529, 65.546, 65.557), stdev = 0.015
  CI (99.9%): [65.269, 65.823] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 15.97% complete, ETA 00:24:32
# Fork: 1 of 1
# Warmup Iteration   1: 258.173 ns/op
# Warmup Iteration   2: 247.379 ns/op
# Warmup Iteration   3: 166.721 ns/op
Iteration   1: 166.215 ns/op
Iteration   2: 166.259 ns/op
Iteration   3: 166.610 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  166.361 ±(99.9%) 3.947 ns/op [Average]
  (min, avg, max) = (166.215, 166.361, 166.610), stdev = 0.216
  CI (99.9%): [162.415, 170.308] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 16.04% complete, ETA 00:24:31
# Fork: 1 of 1
# Warmup Iteration   1: 491.033 ns/op
# Warmup Iteration   2: 120.535 ns/op
# Warmup Iteration   3: 74.051 ns/op
Iteration   1: 74.020 ns/op
Iteration   2: 74.121 ns/op
Iteration   3: 74.013 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.051 ±(99.9%) 1.098 ns/op [Average]
  (min, avg, max) = (74.013, 74.051, 74.121), stdev = 0.060
  CI (99.9%): [72.953, 75.149] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 16.11% complete, ETA 00:24:30
# Fork: 1 of 1
# Warmup Iteration   1: 154.726 ns/op
# Warmup Iteration   2: 160.475 ns/op
# Warmup Iteration   3: 103.997 ns/op
Iteration   1: 103.963 ns/op
Iteration   2: 104.000 ns/op
Iteration   3: 103.977 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  103.980 ±(99.9%) 0.341 ns/op [Average]
  (min, avg, max) = (103.963, 103.980, 104.000), stdev = 0.019
  CI (99.9%): [103.639, 104.321] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 16.18% complete, ETA 00:24:29
# Fork: 1 of 1
# Warmup Iteration   1: 218.447 ns/op
# Warmup Iteration   2: 179.265 ns/op
# Warmup Iteration   3: 101.054 ns/op
Iteration   1: 101.079 ns/op
Iteration   2: 101.056 ns/op
Iteration   3: 101.032 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.055 ±(99.9%) 0.426 ns/op [Average]
  (min, avg, max) = (101.032, 101.055, 101.079), stdev = 0.023
  CI (99.9%): [100.629, 101.481] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 16.25% complete, ETA 00:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 18.156 ns/op
# Warmup Iteration   2: 21.831 ns/op
# Warmup Iteration   3: 13.365 ns/op
Iteration   1: 13.353 ns/op
Iteration   2: 13.377 ns/op
Iteration   3: 13.352 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.361 ±(99.9%) 0.259 ns/op [Average]
  (min, avg, max) = (13.352, 13.361, 13.377), stdev = 0.014
  CI (99.9%): [13.102, 13.620] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 16.32% complete, ETA 00:24:26
# Fork: 1 of 1
# Warmup Iteration   1: 973.792 ns/op
# Warmup Iteration   2: 464.883 ns/op
# Warmup Iteration   3: 357.379 ns/op
Iteration   1: 360.992 ns/op
Iteration   2: 361.047 ns/op
Iteration   3: 358.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  360.130 ±(99.9%) 28.110 ns/op [Average]
  (min, avg, max) = (358.351, 360.130, 361.047), stdev = 1.541
  CI (99.9%): [332.020, 388.240] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 16.39% complete, ETA 00:24:25
# Fork: 1 of 1
# Warmup Iteration   1: 903.466 ns/op
# Warmup Iteration   2: 827.825 ns/op
# Warmup Iteration   3: 582.104 ns/op
Iteration   1: 580.237 ns/op
Iteration   2: 580.630 ns/op
Iteration   3: 579.121 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  579.996 ±(99.9%) 14.281 ns/op [Average]
  (min, avg, max) = (579.121, 579.996, 580.630), stdev = 0.783
  CI (99.9%): [565.715, 594.276] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 16.46% complete, ETA 00:24:24
# Fork: 1 of 1
# Warmup Iteration   1: 7723.023 ns/op
# Warmup Iteration   2: 528.295 ns/op
# Warmup Iteration   3: 357.540 ns/op
Iteration   1: 356.664 ns/op
Iteration   2: 356.432 ns/op
Iteration   3: 357.471 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  356.856 ±(99.9%) 9.948 ns/op [Average]
  (min, avg, max) = (356.432, 356.856, 357.471), stdev = 0.545
  CI (99.9%): [346.908, 366.803] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 16.53% complete, ETA 00:24:23
# Fork: 1 of 1
# Warmup Iteration   1: 654.796 ns/op
# Warmup Iteration   2: 612.548 ns/op
# Warmup Iteration   3: 403.902 ns/op
Iteration   1: 401.380 ns/op
Iteration   2: 399.897 ns/op
Iteration   3: 405.621 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  402.299 ±(99.9%) 54.196 ns/op [Average]
  (min, avg, max) = (399.897, 402.299, 405.621), stdev = 2.971
  CI (99.9%): [348.104, 456.495] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 16.60% complete, ETA 00:24:21
# Fork: 1 of 1
# Warmup Iteration   1: 1701.995 ns/op
# Warmup Iteration   2: 982.859 ns/op
# Warmup Iteration   3: 670.137 ns/op
Iteration   1: 664.893 ns/op
Iteration   2: 663.456 ns/op
Iteration   3: 669.234 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  665.861 ±(99.9%) 54.881 ns/op [Average]
  (min, avg, max) = (663.456, 665.861, 669.234), stdev = 3.008
  CI (99.9%): [610.980, 720.742] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 16.67% complete, ETA 00:24:20
# Fork: 1 of 1
# Warmup Iteration   1: 19.091 ns/op
# Warmup Iteration   2: 21.310 ns/op
# Warmup Iteration   3: 13.625 ns/op
Iteration   1: 13.615 ns/op
Iteration   2: 13.674 ns/op
Iteration   3: 13.620 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.636 ±(99.9%) 0.597 ns/op [Average]
  (min, avg, max) = (13.615, 13.636, 13.674), stdev = 0.033
  CI (99.9%): [13.039, 14.234] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 16.74% complete, ETA 00:24:19
# Fork: 1 of 1
# Warmup Iteration   1: 992.421 ns/op
# Warmup Iteration   2: 388.734 ns/op
# Warmup Iteration   3: 297.549 ns/op
Iteration   1: 297.479 ns/op
Iteration   2: 297.538 ns/op
Iteration   3: 297.478 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  297.498 ±(99.9%) 0.631 ns/op [Average]
  (min, avg, max) = (297.478, 297.498, 297.538), stdev = 0.035
  CI (99.9%): [296.868, 298.129] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 16.81% complete, ETA 00:24:18
# Fork: 1 of 1
# Warmup Iteration   1: 614.167 ns/op
# Warmup Iteration   2: 525.637 ns/op
# Warmup Iteration   3: 385.342 ns/op
Iteration   1: 384.870 ns/op
Iteration   2: 385.011 ns/op
Iteration   3: 385.300 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  385.061 ±(99.9%) 3.996 ns/op [Average]
  (min, avg, max) = (384.870, 385.061, 385.300), stdev = 0.219
  CI (99.9%): [381.065, 389.056] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 16.88% complete, ETA 00:24:16
# Fork: 1 of 1
# Warmup Iteration   1: 10735.536 ns/op
# Warmup Iteration   2: 510.358 ns/op
# Warmup Iteration   3: 374.826 ns/op
Iteration   1: 339.531 ns/op
Iteration   2: 339.558 ns/op
Iteration   3: 339.456 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  339.515 ±(99.9%) 0.962 ns/op [Average]
  (min, avg, max) = (339.456, 339.515, 339.558), stdev = 0.053
  CI (99.9%): [338.553, 340.477] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 16.94% complete, ETA 00:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 488.763 ns/op
# Warmup Iteration   2: 410.987 ns/op
# Warmup Iteration   3: 296.884 ns/op
Iteration   1: 296.930 ns/op
Iteration   2: 297.481 ns/op
Iteration   3: 296.872 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  297.095 ±(99.9%) 6.135 ns/op [Average]
  (min, avg, max) = (296.872, 297.095, 297.481), stdev = 0.336
  CI (99.9%): [290.960, 303.229] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 17.01% complete, ETA 00:24:14
# Fork: 1 of 1
# Warmup Iteration   1: 1072.695 ns/op
# Warmup Iteration   2: 706.650 ns/op
# Warmup Iteration   3: 450.622 ns/op
Iteration   1: 450.844 ns/op
Iteration   2: 450.572 ns/op
Iteration   3: 450.577 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  450.664 ±(99.9%) 2.840 ns/op [Average]
  (min, avg, max) = (450.572, 450.664, 450.844), stdev = 0.156
  CI (99.9%): [447.824, 453.505] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 17.08% complete, ETA 00:24:13
# Fork: 1 of 1
# Warmup Iteration   1: 19.592 ns/op
# Warmup Iteration   2: 24.133 ns/op
# Warmup Iteration   3: 13.387 ns/op
Iteration   1: 13.364 ns/op
Iteration   2: 13.428 ns/op
Iteration   3: 13.361 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.384 ±(99.9%) 0.682 ns/op [Average]
  (min, avg, max) = (13.361, 13.384, 13.428), stdev = 0.037
  CI (99.9%): [12.702, 14.067] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 17.15% complete, ETA 00:24:11
# Fork: 1 of 1
# Warmup Iteration   1: 442.107 ns/op
# Warmup Iteration   2: 381.194 ns/op
# Warmup Iteration   3: 256.697 ns/op
Iteration   1: 256.479 ns/op
Iteration   2: 256.740 ns/op
Iteration   3: 256.370 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  256.530 ±(99.9%) 3.465 ns/op [Average]
  (min, avg, max) = (256.370, 256.530, 256.740), stdev = 0.190
  CI (99.9%): [253.064, 259.995] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 17.22% complete, ETA 00:24:10
# Fork: 1 of 1
# Warmup Iteration   1: 510.610 ns/op
# Warmup Iteration   2: 533.735 ns/op
# Warmup Iteration   3: 352.023 ns/op
Iteration   1: 351.368 ns/op
Iteration   2: 351.985 ns/op
Iteration   3: 351.341 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  351.565 ±(99.9%) 6.645 ns/op [Average]
  (min, avg, max) = (351.341, 351.565, 351.985), stdev = 0.364
  CI (99.9%): [344.920, 358.209] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 17.29% complete, ETA 00:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 484.099 ns/op
# Warmup Iteration   2: 343.335 ns/op
# Warmup Iteration   3: 245.685 ns/op
Iteration   1: 245.818 ns/op
Iteration   2: 245.691 ns/op
Iteration   3: 245.699 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  245.736 ±(99.9%) 1.299 ns/op [Average]
  (min, avg, max) = (245.691, 245.736, 245.818), stdev = 0.071
  CI (99.9%): [244.437, 247.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 17.36% complete, ETA 00:24:08
# Fork: 1 of 1
# Warmup Iteration   1: 454.308 ns/op
# Warmup Iteration   2: 423.507 ns/op
# Warmup Iteration   3: 289.413 ns/op
Iteration   1: 289.070 ns/op
Iteration   2: 288.731 ns/op
Iteration   3: 288.546 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  288.782 ±(99.9%) 4.852 ns/op [Average]
  (min, avg, max) = (288.546, 288.782, 289.070), stdev = 0.266
  CI (99.9%): [283.930, 293.635] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 17.43% complete, ETA 00:24:06
# Fork: 1 of 1
# Warmup Iteration   1: 1706.457 ns/op
# Warmup Iteration   2: 1204.658 ns/op
# Warmup Iteration   3: 813.227 ns/op
Iteration   1: 813.737 ns/op
Iteration   2: 819.646 ns/op
Iteration   3: 813.097 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  815.494 ±(99.9%) 65.869 ns/op [Average]
  (min, avg, max) = (813.097, 815.494, 819.646), stdev = 3.610
  CI (99.9%): [749.625, 881.362] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 17.50% complete, ETA 00:24:05
# Fork: 1 of 1
# Warmup Iteration   1: 17.943 ns/op
# Warmup Iteration   2: 24.120 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.359 ns/op
Iteration   2: 13.361 ns/op
Iteration   3: 13.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.360 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (13.359, 13.360, 13.361), stdev = 0.001
  CI (99.9%): [13.334, 13.385] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 17.57% complete, ETA 00:24:04
# Fork: 1 of 1
# Warmup Iteration   1: 528.564 ns/op
# Warmup Iteration   2: 341.742 ns/op
# Warmup Iteration   3: 228.353 ns/op
Iteration   1: 229.693 ns/op
Iteration   2: 228.687 ns/op
Iteration   3: 228.565 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  228.981 ±(99.9%) 11.292 ns/op [Average]
  (min, avg, max) = (228.565, 228.981, 229.693), stdev = 0.619
  CI (99.9%): [217.690, 240.273] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 17.64% complete, ETA 00:24:03
# Fork: 1 of 1
# Warmup Iteration   1: 562.876 ns/op
# Warmup Iteration   2: 480.841 ns/op
# Warmup Iteration   3: 361.584 ns/op
Iteration   1: 360.819 ns/op
Iteration   2: 362.334 ns/op
Iteration   3: 359.207 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  360.787 ±(99.9%) 28.523 ns/op [Average]
  (min, avg, max) = (359.207, 360.787, 362.334), stdev = 1.563
  CI (99.9%): [332.264, 389.310] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 17.71% complete, ETA 00:24:01
# Fork: 1 of 1
# Warmup Iteration   1: 4491.172 ns/op
# Warmup Iteration   2: 329.732 ns/op
# Warmup Iteration   3: 241.781 ns/op
Iteration   1: 241.920 ns/op
Iteration   2: 241.704 ns/op
Iteration   3: 242.761 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  242.128 ±(99.9%) 10.195 ns/op [Average]
  (min, avg, max) = (241.704, 242.128, 242.761), stdev = 0.559
  CI (99.9%): [231.934, 252.323] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 17.78% complete, ETA 00:24:00
# Fork: 1 of 1
# Warmup Iteration   1: 507.141 ns/op
# Warmup Iteration   2: 385.152 ns/op
# Warmup Iteration   3: 275.693 ns/op
Iteration   1: 275.498 ns/op
Iteration   2: 276.345 ns/op
Iteration   3: 275.491 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  275.778 ±(99.9%) 8.960 ns/op [Average]
  (min, avg, max) = (275.491, 275.778, 276.345), stdev = 0.491
  CI (99.9%): [266.818, 284.738] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 17.85% complete, ETA 00:23:59
# Fork: 1 of 1
# Warmup Iteration   1: 3001.590 ns/op
# Warmup Iteration   2: 2143.358 ns/op
# Warmup Iteration   3: 1533.549 ns/op
Iteration   1: 1529.678 ns/op
Iteration   2: 1532.710 ns/op
Iteration   3: 1531.918 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1531.436 ±(99.9%) 28.690 ns/op [Average]
  (min, avg, max) = (1529.678, 1531.436, 1532.710), stdev = 1.573
  CI (99.9%): [1502.746, 1560.125] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 17.92% complete, ETA 00:23:58
# Fork: 1 of 1
# Warmup Iteration   1: 20.960 ns/op
# Warmup Iteration   2: 27.524 ns/op
# Warmup Iteration   3: 13.376 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.375 ns/op
Iteration   3: 13.357 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.360 ±(99.9%) 0.262 ns/op [Average]
  (min, avg, max) = (13.347, 13.360, 13.375), stdev = 0.014
  CI (99.9%): [13.098, 13.622] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 17.99% complete, ETA 00:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 99.540 ns/op
# Warmup Iteration   2: 101.014 ns/op
# Warmup Iteration   3: 65.997 ns/op
Iteration   1: 66.073 ns/op
Iteration   2: 66.021 ns/op
Iteration   3: 66.000 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  66.031 ±(99.9%) 0.688 ns/op [Average]
  (min, avg, max) = (66.000, 66.031, 66.073), stdev = 0.038
  CI (99.9%): [65.344, 66.719] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 18.06% complete, ETA 00:23:55
# Fork: 1 of 1
# Warmup Iteration   1: 190.484 ns/op
# Warmup Iteration   2: 193.017 ns/op
# Warmup Iteration   3: 130.907 ns/op
Iteration   1: 130.954 ns/op
Iteration   2: 129.704 ns/op
Iteration   3: 130.760 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  130.473 ±(99.9%) 12.277 ns/op [Average]
  (min, avg, max) = (129.704, 130.473, 130.954), stdev = 0.673
  CI (99.9%): [118.196, 142.750] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 18.13% complete, ETA 00:23:54
# Fork: 1 of 1
# Warmup Iteration   1: 242.430 ns/op
# Warmup Iteration   2: 168.606 ns/op
# Warmup Iteration   3: 116.217 ns/op
Iteration   1: 116.200 ns/op
Iteration   2: 116.275 ns/op
Iteration   3: 116.195 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.223 ±(99.9%) 0.820 ns/op [Average]
  (min, avg, max) = (116.195, 116.223, 116.275), stdev = 0.045
  CI (99.9%): [115.404, 117.043] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 18.19% complete, ETA 00:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 149.451 ns/op
# Warmup Iteration   2: 125.166 ns/op
# Warmup Iteration   3: 90.246 ns/op
Iteration   1: 90.237 ns/op
Iteration   2: 90.329 ns/op
Iteration   3: 90.256 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  90.274 ±(99.9%) 0.882 ns/op [Average]
  (min, avg, max) = (90.237, 90.274, 90.329), stdev = 0.048
  CI (99.9%): [89.392, 91.156] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 18.26% complete, ETA 00:23:51
# Fork: 1 of 1
# Warmup Iteration   1: 190.388 ns/op
# Warmup Iteration   2: 185.200 ns/op
# Warmup Iteration   3: 100.668 ns/op
Iteration   1: 100.494 ns/op
Iteration   2: 100.571 ns/op
Iteration   3: 100.578 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  100.548 ±(99.9%) 0.852 ns/op [Average]
  (min, avg, max) = (100.494, 100.548, 100.578), stdev = 0.047
  CI (99.9%): [99.696, 101.399] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 18.33% complete, ETA 00:23:50
# Fork: 1 of 1
# Warmup Iteration   1: 19.056 ns/op
# Warmup Iteration   2: 23.401 ns/op
# Warmup Iteration   3: 13.537 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.358 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (13.348, 13.356, 13.362), stdev = 0.007
  CI (99.9%): [13.222, 13.490] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 18.40% complete, ETA 00:23:49
# Fork: 1 of 1
# Warmup Iteration   1: 956.283 ns/op
# Warmup Iteration   2: 400.806 ns/op
# Warmup Iteration   3: 288.574 ns/op
Iteration   1: 288.252 ns/op
Iteration   2: 290.535 ns/op
Iteration   3: 290.109 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  289.632 ±(99.9%) 22.142 ns/op [Average]
  (min, avg, max) = (288.252, 289.632, 290.535), stdev = 1.214
  CI (99.9%): [267.490, 311.774] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 18.47% complete, ETA 00:23:48
# Fork: 1 of 1
# Warmup Iteration   1: 460.472 ns/op
# Warmup Iteration   2: 447.421 ns/op
# Warmup Iteration   3: 326.417 ns/op
Iteration   1: 323.827 ns/op
Iteration   2: 326.961 ns/op
Iteration   3: 325.267 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  325.352 ±(99.9%) 28.619 ns/op [Average]
  (min, avg, max) = (323.827, 325.352, 326.961), stdev = 1.569
  CI (99.9%): [296.733, 353.971] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 18.54% complete, ETA 00:23:47
# Fork: 1 of 1
# Warmup Iteration   1: 7898.910 ns/op
# Warmup Iteration   2: 481.310 ns/op
# Warmup Iteration   3: 338.314 ns/op
Iteration   1: 335.876 ns/op
Iteration   2: 338.184 ns/op
Iteration   3: 336.384 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.815 ±(99.9%) 22.126 ns/op [Average]
  (min, avg, max) = (335.876, 336.815, 338.184), stdev = 1.213
  CI (99.9%): [314.689, 358.941] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 18.61% complete, ETA 00:23:45
# Fork: 1 of 1
# Warmup Iteration   1: 513.127 ns/op
# Warmup Iteration   2: 383.734 ns/op
# Warmup Iteration   3: 266.812 ns/op
Iteration   1: 266.729 ns/op
Iteration   2: 266.827 ns/op
Iteration   3: 266.802 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  266.786 ±(99.9%) 0.934 ns/op [Average]
  (min, avg, max) = (266.729, 266.786, 266.827), stdev = 0.051
  CI (99.9%): [265.852, 267.720] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 18.68% complete, ETA 00:23:44
# Fork: 1 of 1
# Warmup Iteration   1: 1966.361 ns/op
# Warmup Iteration   2: 1063.870 ns/op
# Warmup Iteration   3: 719.811 ns/op
Iteration   1: 723.444 ns/op
Iteration   2: 720.986 ns/op
Iteration   3: 719.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  721.441 ±(99.9%) 33.170 ns/op [Average]
  (min, avg, max) = (719.894, 721.441, 723.444), stdev = 1.818
  CI (99.9%): [688.271, 754.611] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 18.75% complete, ETA 00:23:43
# Fork: 1 of 1
# Warmup Iteration   1: 18.402 ns/op
# Warmup Iteration   2: 20.946 ns/op
# Warmup Iteration   3: 13.363 ns/op
Iteration   1: 13.367 ns/op
Iteration   2: 13.372 ns/op
Iteration   3: 13.360 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.366 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (13.360, 13.366, 13.372), stdev = 0.006
  CI (99.9%): [13.265, 13.468] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 18.82% complete, ETA 00:23:42
# Fork: 1 of 1
# Warmup Iteration   1: 914.305 ns/op
# Warmup Iteration   2: 393.012 ns/op
# Warmup Iteration   3: 284.610 ns/op
Iteration   1: 284.549 ns/op
Iteration   2: 284.509 ns/op
Iteration   3: 284.286 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.448 ±(99.9%) 2.587 ns/op [Average]
  (min, avg, max) = (284.286, 284.448, 284.549), stdev = 0.142
  CI (99.9%): [281.861, 287.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 18.89% complete, ETA 00:23:40
# Fork: 1 of 1
# Warmup Iteration   1: 522.289 ns/op
# Warmup Iteration   2: 529.971 ns/op
# Warmup Iteration   3: 359.339 ns/op
Iteration   1: 359.180 ns/op
Iteration   2: 359.120 ns/op
Iteration   3: 359.038 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  359.113 ±(99.9%) 1.300 ns/op [Average]
  (min, avg, max) = (359.038, 359.113, 359.180), stdev = 0.071
  CI (99.9%): [357.813, 360.413] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 18.96% complete, ETA 00:23:39
# Fork: 1 of 1
# Warmup Iteration   1: 7832.990 ns/op
# Warmup Iteration   2: 453.603 ns/op
# Warmup Iteration   3: 323.363 ns/op
Iteration   1: 323.319 ns/op
Iteration   2: 323.419 ns/op
Iteration   3: 323.427 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.389 ±(99.9%) 1.098 ns/op [Average]
  (min, avg, max) = (323.319, 323.389, 323.427), stdev = 0.060
  CI (99.9%): [322.291, 324.486] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 19.03% complete, ETA 00:23:38
# Fork: 1 of 1
# Warmup Iteration   1: 442.512 ns/op
# Warmup Iteration   2: 404.739 ns/op
# Warmup Iteration   3: 275.187 ns/op
Iteration   1: 275.273 ns/op
Iteration   2: 275.359 ns/op
Iteration   3: 275.388 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  275.340 ±(99.9%) 1.094 ns/op [Average]
  (min, avg, max) = (275.273, 275.340, 275.388), stdev = 0.060
  CI (99.9%): [274.246, 276.434] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 19.10% complete, ETA 00:23:37
# Fork: 1 of 1
# Warmup Iteration   1: 1138.915 ns/op
# Warmup Iteration   2: 661.367 ns/op
# Warmup Iteration   3: 470.808 ns/op
Iteration   1: 485.821 ns/op
Iteration   2: 469.270 ns/op
Iteration   3: 469.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  474.813 ±(99.9%) 173.914 ns/op [Average]
  (min, avg, max) = (469.270, 474.813, 485.821), stdev = 9.533
  CI (99.9%): [300.899, 648.727] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 19.17% complete, ETA 00:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 18.102 ns/op
# Warmup Iteration   2: 23.049 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.361 ns/op
Iteration   3: 13.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.353 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (13.347, 13.353, 13.361), stdev = 0.007
  CI (99.9%): [13.219, 13.487] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 19.24% complete, ETA 00:23:34
# Fork: 1 of 1
# Warmup Iteration   1: 371.525 ns/op
# Warmup Iteration   2: 257.147 ns/op
# Warmup Iteration   3: 175.694 ns/op
Iteration   1: 175.734 ns/op
Iteration   2: 175.612 ns/op
Iteration   3: 175.458 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  175.601 ±(99.9%) 2.526 ns/op [Average]
  (min, avg, max) = (175.458, 175.601, 175.734), stdev = 0.138
  CI (99.9%): [173.075, 178.128] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 19.31% complete, ETA 00:23:33
# Fork: 1 of 1
# Warmup Iteration   1: 502.420 ns/op
# Warmup Iteration   2: 497.266 ns/op
# Warmup Iteration   3: 338.266 ns/op
Iteration   1: 338.258 ns/op
Iteration   2: 338.172 ns/op
Iteration   3: 338.341 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.257 ±(99.9%) 1.535 ns/op [Average]
  (min, avg, max) = (338.172, 338.257, 338.341), stdev = 0.084
  CI (99.9%): [336.722, 339.792] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 19.38% complete, ETA 00:23:32
# Fork: 1 of 1
# Warmup Iteration   1: 2289.065 ns/op
# Warmup Iteration   2: 283.626 ns/op
# Warmup Iteration   3: 186.217 ns/op
Iteration   1: 186.244 ns/op
Iteration   2: 186.456 ns/op
Iteration   3: 186.248 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  186.316 ±(99.9%) 2.212 ns/op [Average]
  (min, avg, max) = (186.244, 186.316, 186.456), stdev = 0.121
  CI (99.9%): [184.104, 188.528] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 19.44% complete, ETA 00:23:30
# Fork: 1 of 1
# Warmup Iteration   1: 616.071 ns/op
# Warmup Iteration   2: 450.738 ns/op
# Warmup Iteration   3: 308.933 ns/op
Iteration   1: 308.529 ns/op
Iteration   2: 309.284 ns/op
Iteration   3: 308.476 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  308.763 ±(99.9%) 8.250 ns/op [Average]
  (min, avg, max) = (308.476, 308.763, 309.284), stdev = 0.452
  CI (99.9%): [300.512, 317.013] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 19.51% complete, ETA 00:23:29
# Fork: 1 of 1
# Warmup Iteration   1: 1679.762 ns/op
# Warmup Iteration   2: 1219.776 ns/op
# Warmup Iteration   3: 789.958 ns/op
Iteration   1: 789.716 ns/op
Iteration   2: 796.677 ns/op
Iteration   3: 796.809 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  794.401 ±(99.9%) 74.028 ns/op [Average]
  (min, avg, max) = (789.716, 794.401, 796.809), stdev = 4.058
  CI (99.9%): [720.372, 868.429] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 19.58% complete, ETA 00:23:28
# Fork: 1 of 1
# Warmup Iteration   1: 18.465 ns/op
# Warmup Iteration   2: 21.187 ns/op
# Warmup Iteration   3: 13.361 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.143 ns/op [Average]
  (min, avg, max) = (13.347, 13.356, 13.362), stdev = 0.008
  CI (99.9%): [13.213, 13.499] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 19.65% complete, ETA 00:23:27
# Fork: 1 of 1
# Warmup Iteration   1: 559.829 ns/op
# Warmup Iteration   2: 330.424 ns/op
# Warmup Iteration   3: 225.675 ns/op
Iteration   1: 228.037 ns/op
Iteration   2: 226.104 ns/op
Iteration   3: 229.907 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  228.016 ±(99.9%) 34.694 ns/op [Average]
  (min, avg, max) = (226.104, 228.016, 229.907), stdev = 1.902
  CI (99.9%): [193.322, 262.710] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 19.72% complete, ETA 00:23:26
# Fork: 1 of 1
# Warmup Iteration   1: 560.776 ns/op
# Warmup Iteration   2: 528.662 ns/op
# Warmup Iteration   3: 362.836 ns/op
Iteration   1: 359.986 ns/op
Iteration   2: 363.729 ns/op
Iteration   3: 364.198 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  362.638 ±(99.9%) 42.107 ns/op [Average]
  (min, avg, max) = (359.986, 362.638, 364.198), stdev = 2.308
  CI (99.9%): [320.531, 404.744] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 19.79% complete, ETA 00:23:24
# Fork: 1 of 1
# Warmup Iteration   1: 1830.330 ns/op
# Warmup Iteration   2: 338.893 ns/op
# Warmup Iteration   3: 227.186 ns/op
Iteration   1: 225.161 ns/op
Iteration   2: 227.623 ns/op
Iteration   3: 225.175 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  225.987 ±(99.9%) 25.854 ns/op [Average]
  (min, avg, max) = (225.161, 225.987, 227.623), stdev = 1.417
  CI (99.9%): [200.132, 251.841] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 19.86% complete, ETA 00:23:23
# Fork: 1 of 1
# Warmup Iteration   1: 565.123 ns/op
# Warmup Iteration   2: 417.874 ns/op
# Warmup Iteration   3: 284.234 ns/op
Iteration   1: 284.361 ns/op
Iteration   2: 284.570 ns/op
Iteration   3: 282.871 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  283.934 ±(99.9%) 16.905 ns/op [Average]
  (min, avg, max) = (282.871, 283.934, 284.570), stdev = 0.927
  CI (99.9%): [267.029, 300.839] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 19.93% complete, ETA 00:23:22
# Fork: 1 of 1
# Warmup Iteration   1: 3171.688 ns/op
# Warmup Iteration   2: 2273.338 ns/op
# Warmup Iteration   3: 1566.817 ns/op
Iteration   1: 1569.685 ns/op
Iteration   2: 1566.788 ns/op
Iteration   3: 1566.893 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1567.789 ±(99.9%) 29.977 ns/op [Average]
  (min, avg, max) = (1566.788, 1567.789, 1569.685), stdev = 1.643
  CI (99.9%): [1537.811, 1597.766] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 20.00% complete, ETA 00:23:21
# Fork: 1 of 1
# Warmup Iteration   1: 17.918 ns/op
# Warmup Iteration   2: 22.789 ns/op
# Warmup Iteration   3: 13.362 ns/op
Iteration   1: 13.352 ns/op
Iteration   2: 13.363 ns/op
Iteration   3: 13.366 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.360 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (13.352, 13.360, 13.366), stdev = 0.007
  CI (99.9%): [13.230, 13.491] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 20.07% complete, ETA 00:23:19
# Fork: 1 of 1
# Warmup Iteration   1: 82.818 ns/op
# Warmup Iteration   2: 80.802 ns/op
# Warmup Iteration   3: 56.970 ns/op
Iteration   1: 56.967 ns/op
Iteration   2: 57.035 ns/op
Iteration   3: 56.938 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  56.980 ±(99.9%) 0.909 ns/op [Average]
  (min, avg, max) = (56.938, 56.980, 57.035), stdev = 0.050
  CI (99.9%): [56.071, 57.889] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 20.14% complete, ETA 00:23:18
# Fork: 1 of 1
# Warmup Iteration   1: 64.546 ns/op
# Warmup Iteration   2: 70.006 ns/op
# Warmup Iteration   3: 44.068 ns/op
Iteration   1: 44.044 ns/op
Iteration   2: 44.050 ns/op
Iteration   3: 44.058 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.051 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (44.044, 44.051, 44.058), stdev = 0.007
  CI (99.9%): [43.924, 44.177] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 20.21% complete, ETA 00:23:17
# Fork: 1 of 1
# Warmup Iteration   1: 247.368 ns/op
# Warmup Iteration   2: 105.697 ns/op
# Warmup Iteration   3: 68.368 ns/op
Iteration   1: 68.380 ns/op
Iteration   2: 68.408 ns/op
Iteration   3: 68.396 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  68.395 ±(99.9%) 0.260 ns/op [Average]
  (min, avg, max) = (68.380, 68.395, 68.408), stdev = 0.014
  CI (99.9%): [68.134, 68.655] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 20.28% complete, ETA 00:23:16
# Fork: 1 of 1
# Warmup Iteration   1: 66.206 ns/op
# Warmup Iteration   2: 67.335 ns/op
# Warmup Iteration   3: 46.429 ns/op
Iteration   1: 46.435 ns/op
Iteration   2: 46.582 ns/op
Iteration   3: 46.414 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.477 ±(99.9%) 1.664 ns/op [Average]
  (min, avg, max) = (46.414, 46.477, 46.582), stdev = 0.091
  CI (99.9%): [44.814, 48.141] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 20.35% complete, ETA 00:23:14
# Fork: 1 of 1
# Warmup Iteration   1: 181.879 ns/op
# Warmup Iteration   2: 174.062 ns/op
# Warmup Iteration   3: 97.765 ns/op
Iteration   1: 97.750 ns/op
Iteration   2: 97.731 ns/op
Iteration   3: 97.729 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.737 ±(99.9%) 0.210 ns/op [Average]
  (min, avg, max) = (97.729, 97.737, 97.750), stdev = 0.012
  CI (99.9%): [97.527, 97.947] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 20.42% complete, ETA 00:23:13
# Fork: 1 of 1
# Warmup Iteration   1: 21.038 ns/op
# Warmup Iteration   2: 27.205 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.366 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.362 ±(99.9%) 0.243 ns/op [Average]
  (min, avg, max) = (13.347, 13.362, 13.373), stdev = 0.013
  CI (99.9%): [13.119, 13.605] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 20.49% complete, ETA 00:23:12
# Fork: 1 of 1
# Warmup Iteration   1: 1054.956 ns/op
# Warmup Iteration   2: 455.266 ns/op
# Warmup Iteration   3: 312.196 ns/op
Iteration   1: 312.787 ns/op
Iteration   2: 312.135 ns/op
Iteration   3: 312.177 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  312.367 ±(99.9%) 6.655 ns/op [Average]
  (min, avg, max) = (312.135, 312.367, 312.787), stdev = 0.365
  CI (99.9%): [305.712, 319.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 20.56% complete, ETA 00:23:11
# Fork: 1 of 1
# Warmup Iteration   1: 497.100 ns/op
# Warmup Iteration   2: 487.754 ns/op
# Warmup Iteration   3: 339.316 ns/op
Iteration   1: 341.065 ns/op
Iteration   2: 342.133 ns/op
Iteration   3: 340.760 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  341.319 ±(99.9%) 13.155 ns/op [Average]
  (min, avg, max) = (340.760, 341.319, 342.133), stdev = 0.721
  CI (99.9%): [328.165, 354.474] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 20.63% complete, ETA 00:23:09
# Fork: 1 of 1
# Warmup Iteration   1: 17020.074 ns/op
# Warmup Iteration   2: 529.965 ns/op
# Warmup Iteration   3: 413.852 ns/op
Iteration   1: 383.096 ns/op
Iteration   2: 382.136 ns/op
Iteration   3: 382.600 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  382.611 ±(99.9%) 8.762 ns/op [Average]
  (min, avg, max) = (382.136, 382.611, 383.096), stdev = 0.480
  CI (99.9%): [373.848, 391.373] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 20.69% complete, ETA 00:23:08
# Fork: 1 of 1
# Warmup Iteration   1: 508.661 ns/op
# Warmup Iteration   2: 374.008 ns/op
# Warmup Iteration   3: 253.357 ns/op
Iteration   1: 253.192 ns/op
Iteration   2: 253.011 ns/op
Iteration   3: 253.123 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  253.108 ±(99.9%) 1.662 ns/op [Average]
  (min, avg, max) = (253.011, 253.108, 253.192), stdev = 0.091
  CI (99.9%): [251.447, 254.770] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 20.76% complete, ETA 00:23:07
# Fork: 1 of 1
# Warmup Iteration   1: 1658.213 ns/op
# Warmup Iteration   2: 1009.012 ns/op
# Warmup Iteration   3: 723.241 ns/op
Iteration   1: 721.563 ns/op
Iteration   2: 723.753 ns/op
Iteration   3: 733.754 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  726.357 ±(99.9%) 118.568 ns/op [Average]
  (min, avg, max) = (721.563, 726.357, 733.754), stdev = 6.499
  CI (99.9%): [607.788, 844.925] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 20.83% complete, ETA 00:23:06
# Fork: 1 of 1
# Warmup Iteration   1: 21.231 ns/op
# Warmup Iteration   2: 24.010 ns/op
# Warmup Iteration   3: 13.362 ns/op
Iteration   1: 13.366 ns/op
Iteration   2: 15.460 ns/op
Iteration   3: 13.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.058 ±(99.9%) 22.154 ns/op [Average]
  (min, avg, max) = (13.348, 14.058, 15.460), stdev = 1.214
  CI (99.9%): [≈ 0, 36.212] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 20.90% complete, ETA 00:23:05
# Fork: 1 of 1
# Warmup Iteration   1: 190.836 ns/op
# Warmup Iteration   2: 143.908 ns/op
# Warmup Iteration   3: 94.398 ns/op
Iteration   1: 94.406 ns/op
Iteration   2: 114.990 ns/op
Iteration   3: 94.434 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.277 ±(99.9%) 216.666 ns/op [Average]
  (min, avg, max) = (94.406, 101.277, 114.990), stdev = 11.876
  CI (99.9%): [≈ 0, 317.943] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 20.97% complete, ETA 00:23:03
# Fork: 1 of 1
# Warmup Iteration   1: 69.699 ns/op
# Warmup Iteration   2: 67.817 ns/op
# Warmup Iteration   3: 44.070 ns/op
Iteration   1: 44.063 ns/op
Iteration   2: 53.283 ns/op
Iteration   3: 44.102 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.149 ±(99.9%) 96.907 ns/op [Average]
  (min, avg, max) = (44.063, 47.149, 53.283), stdev = 5.312
  CI (99.9%): [≈ 0, 144.057] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 21.04% complete, ETA 00:23:02
# Fork: 1 of 1
# Warmup Iteration   1: 238.363 ns/op
# Warmup Iteration   2: 162.315 ns/op
# Warmup Iteration   3: 111.374 ns/op
Iteration   1: 111.373 ns/op
Iteration   2: 135.557 ns/op
Iteration   3: 111.373 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  119.434 ±(99.9%) 254.732 ns/op [Average]
  (min, avg, max) = (111.373, 119.434, 135.557), stdev = 13.963
  CI (99.9%): [≈ 0, 374.167] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 21.11% complete, ETA 00:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 68.408 ns/op
# Warmup Iteration   2: 74.569 ns/op
# Warmup Iteration   3: 46.400 ns/op
Iteration   1: 46.400 ns/op
Iteration   2: 53.088 ns/op
Iteration   3: 46.385 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.624 ±(99.9%) 70.525 ns/op [Average]
  (min, avg, max) = (46.385, 48.624, 53.088), stdev = 3.866
  CI (99.9%): [≈ 0, 119.149] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 21.18% complete, ETA 00:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 194.835 ns/op
# Warmup Iteration   2: 194.903 ns/op
# Warmup Iteration   3: 128.079 ns/op
Iteration   1: 128.008 ns/op
Iteration   2: 143.958 ns/op
Iteration   3: 128.044 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  133.337 ±(99.9%) 167.811 ns/op [Average]
  (min, avg, max) = (128.008, 133.337, 143.958), stdev = 9.198
  CI (99.9%): [≈ 0, 301.147] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 21.25% complete, ETA 00:22:59
# Fork: 1 of 1
# Warmup Iteration   1: 18.019 ns/op
# Warmup Iteration   2: 24.183 ns/op
# Warmup Iteration   3: 13.351 ns/op
Iteration   1: 13.361 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.357 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.360 ±(99.9%) 0.045 ns/op [Average]
  (min, avg, max) = (13.357, 13.360, 13.362), stdev = 0.002
  CI (99.9%): [13.315, 13.406] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 21.32% complete, ETA 00:22:57
# Fork: 1 of 1
# Warmup Iteration   1: 201.185 ns/op
# Warmup Iteration   2: 193.296 ns/op
# Warmup Iteration   3: 126.478 ns/op
Iteration   1: 126.437 ns/op
Iteration   2: 126.474 ns/op
Iteration   3: 126.757 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  126.556 ±(99.9%) 3.197 ns/op [Average]
  (min, avg, max) = (126.437, 126.556, 126.757), stdev = 0.175
  CI (99.9%): [123.359, 129.753] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 21.39% complete, ETA 00:22:56
# Fork: 1 of 1
# Warmup Iteration   1: 63.821 ns/op
# Warmup Iteration   2: 74.008 ns/op
# Warmup Iteration   3: 44.075 ns/op
Iteration   1: 44.064 ns/op
Iteration   2: 44.078 ns/op
Iteration   3: 44.060 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.067 ±(99.9%) 0.178 ns/op [Average]
  (min, avg, max) = (44.060, 44.067, 44.078), stdev = 0.010
  CI (99.9%): [43.889, 44.245] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 21.46% complete, ETA 00:22:55
# Fork: 1 of 1
# Warmup Iteration   1: 235.989 ns/op
# Warmup Iteration   2: 168.322 ns/op
# Warmup Iteration   3: 110.643 ns/op
Iteration   1: 110.578 ns/op
Iteration   2: 110.579 ns/op
Iteration   3: 110.591 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  110.583 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (110.578, 110.583, 110.591), stdev = 0.007
  CI (99.9%): [110.451, 110.714] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 21.53% complete, ETA 00:22:54
# Fork: 1 of 1
# Warmup Iteration   1: 67.260 ns/op
# Warmup Iteration   2: 74.351 ns/op
# Warmup Iteration   3: 46.394 ns/op
Iteration   1: 46.405 ns/op
Iteration   2: 46.372 ns/op
Iteration   3: 46.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.376 ±(99.9%) 0.503 ns/op [Average]
  (min, avg, max) = (46.351, 46.376, 46.405), stdev = 0.028
  CI (99.9%): [45.873, 46.879] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 21.60% complete, ETA 00:22:52
# Fork: 1 of 1
# Warmup Iteration   1: 195.095 ns/op
# Warmup Iteration   2: 189.252 ns/op
# Warmup Iteration   3: 127.374 ns/op
Iteration   1: 127.346 ns/op
Iteration   2: 127.369 ns/op
Iteration   3: 127.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  127.357 ±(99.9%) 0.213 ns/op [Average]
  (min, avg, max) = (127.346, 127.357, 127.369), stdev = 0.012
  CI (99.9%): [127.144, 127.570] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 21.67% complete, ETA 00:22:51
# Fork: 1 of 1
# Warmup Iteration   1: 21.331 ns/op
# Warmup Iteration   2: 23.095 ns/op
# Warmup Iteration   3: 13.358 ns/op
Iteration   1: 13.371 ns/op
Iteration   2: 13.358 ns/op
Iteration   3: 17.697 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.808 ±(99.9%) 45.641 ns/op [Average]
  (min, avg, max) = (13.358, 14.808, 17.697), stdev = 2.502
  CI (99.9%): [≈ 0, 60.449] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 21.74% complete, ETA 00:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 202.150 ns/op
# Warmup Iteration   2: 184.037 ns/op
# Warmup Iteration   3: 125.864 ns/op
Iteration   1: 125.980 ns/op
Iteration   2: 125.422 ns/op
Iteration   3: 169.863 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.422 ±(99.9%) 465.191 ns/op [Average]
  (min, avg, max) = (125.422, 140.422, 169.863), stdev = 25.499
  CI (99.9%): [≈ 0, 605.612] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 21.81% complete, ETA 00:22:49
# Fork: 1 of 1
# Warmup Iteration   1: 64.517 ns/op
# Warmup Iteration   2: 71.019 ns/op
# Warmup Iteration   3: 44.123 ns/op
Iteration   1: 44.070 ns/op
Iteration   2: 44.101 ns/op
Iteration   3: 57.588 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.586 ±(99.9%) 142.225 ns/op [Average]
  (min, avg, max) = (44.070, 48.586, 57.588), stdev = 7.796
  CI (99.9%): [≈ 0, 190.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 21.88% complete, ETA 00:22:48
# Fork: 1 of 1
# Warmup Iteration   1: 228.250 ns/op
# Warmup Iteration   2: 166.452 ns/op
# Warmup Iteration   3: 107.873 ns/op
Iteration   1: 107.759 ns/op
Iteration   2: 107.801 ns/op
Iteration   3: 133.016 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.192 ±(99.9%) 265.813 ns/op [Average]
  (min, avg, max) = (107.759, 116.192, 133.016), stdev = 14.570
  CI (99.9%): [≈ 0, 382.005] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 21.94% complete, ETA 00:22:46
# Fork: 1 of 1
# Warmup Iteration   1: 67.478 ns/op
# Warmup Iteration   2: 72.605 ns/op
# Warmup Iteration   3: 46.667 ns/op
Iteration   1: 46.698 ns/op
Iteration   2: 46.673 ns/op
Iteration   3: 61.459 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.610 ±(99.9%) 155.608 ns/op [Average]
  (min, avg, max) = (46.673, 51.610, 61.459), stdev = 8.529
  CI (99.9%): [≈ 0, 207.217] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 22.01% complete, ETA 00:22:45
# Fork: 1 of 1
# Warmup Iteration   1: 210.616 ns/op
# Warmup Iteration   2: 177.780 ns/op
# Warmup Iteration   3: 129.860 ns/op
Iteration   1: 129.857 ns/op
Iteration   2: 129.920 ns/op
Iteration   3: 160.482 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.086 ±(99.9%) 322.238 ns/op [Average]
  (min, avg, max) = (129.857, 140.086, 160.482), stdev = 17.663
  CI (99.9%): [≈ 0, 462.324] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 22.08% complete, ETA 00:22:44
# Fork: 1 of 1
# Warmup Iteration   1: 19.315 ns/op
# Warmup Iteration   2: 23.045 ns/op
# Warmup Iteration   3: 13.355 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.356 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.351 ±(99.9%) 0.094 ns/op [Average]
  (min, avg, max) = (13.347, 13.351, 13.356), stdev = 0.005
  CI (99.9%): [13.257, 13.444] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 22.15% complete, ETA 00:22:43
# Fork: 1 of 1
# Warmup Iteration   1: 83.600 ns/op
# Warmup Iteration   2: 86.228 ns/op
# Warmup Iteration   3: 56.978 ns/op
Iteration   1: 56.995 ns/op
Iteration   2: 56.986 ns/op
Iteration   3: 56.923 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  56.968 ±(99.9%) 0.719 ns/op [Average]
  (min, avg, max) = (56.923, 56.968, 56.995), stdev = 0.039
  CI (99.9%): [56.249, 57.687] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 22.22% complete, ETA 00:22:42
# Fork: 1 of 1
# Warmup Iteration   1: 70.855 ns/op
# Warmup Iteration   2: 73.526 ns/op
# Warmup Iteration   3: 44.750 ns/op
Iteration   1: 44.705 ns/op
Iteration   2: 44.707 ns/op
Iteration   3: 44.704 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.705 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (44.704, 44.705, 44.707), stdev = 0.002
  CI (99.9%): [44.676, 44.734] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 22.29% complete, ETA 00:22:40
# Fork: 1 of 1
# Warmup Iteration   1: 241.936 ns/op
# Warmup Iteration   2: 106.731 ns/op
# Warmup Iteration   3: 68.152 ns/op
Iteration   1: 68.120 ns/op
Iteration   2: 68.134 ns/op
Iteration   3: 68.143 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  68.132 ±(99.9%) 0.213 ns/op [Average]
  (min, avg, max) = (68.120, 68.132, 68.143), stdev = 0.012
  CI (99.9%): [67.919, 68.346] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 22.36% complete, ETA 00:22:39
# Fork: 1 of 1
# Warmup Iteration   1: 67.403 ns/op
# Warmup Iteration   2: 71.221 ns/op
# Warmup Iteration   3: 46.451 ns/op
Iteration   1: 46.404 ns/op
Iteration   2: 46.373 ns/op
Iteration   3: 46.388 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.389 ±(99.9%) 0.283 ns/op [Average]
  (min, avg, max) = (46.373, 46.389, 46.404), stdev = 0.015
  CI (99.9%): [46.106, 46.671] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 22.43% complete, ETA 00:22:38
# Fork: 1 of 1
# Warmup Iteration   1: 180.573 ns/op
# Warmup Iteration   2: 190.043 ns/op
# Warmup Iteration   3: 125.116 ns/op
Iteration   1: 125.022 ns/op
Iteration   2: 125.046 ns/op
Iteration   3: 125.148 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  125.072 ±(99.9%) 1.221 ns/op [Average]
  (min, avg, max) = (125.022, 125.072, 125.148), stdev = 0.067
  CI (99.9%): [123.851, 126.293] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 22.50% complete, ETA 00:22:37
# Fork: 1 of 1
# Warmup Iteration   1: 20.178 ns/op
# Warmup Iteration   2: 23.254 ns/op
# Warmup Iteration   3: 13.374 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 18.079 ns/op
Iteration   3: 13.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.926 ±(99.9%) 49.816 ns/op [Average]
  (min, avg, max) = (13.349, 14.926, 18.079), stdev = 2.731
  CI (99.9%): [≈ 0, 64.742] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 22.57% complete, ETA 00:22:35
# Fork: 1 of 1
# Warmup Iteration   1: 164.583 ns/op
# Warmup Iteration   2: 137.141 ns/op
# Warmup Iteration   3: 89.157 ns/op
Iteration   1: 89.011 ns/op
Iteration   2: 116.638 ns/op
Iteration   3: 88.965 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  98.205 ±(99.9%) 291.234 ns/op [Average]
  (min, avg, max) = (88.965, 98.205, 116.638), stdev = 15.964
  CI (99.9%): [≈ 0, 389.439] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 22.64% complete, ETA 00:22:34
# Fork: 1 of 1
# Warmup Iteration   1: 65.654 ns/op
# Warmup Iteration   2: 72.462 ns/op
# Warmup Iteration   3: 44.721 ns/op
Iteration   1: 44.706 ns/op
Iteration   2: 59.756 ns/op
Iteration   3: 44.712 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  49.725 ±(99.9%) 158.490 ns/op [Average]
  (min, avg, max) = (44.706, 49.725, 59.756), stdev = 8.687
  CI (99.9%): [≈ 0, 208.215] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 22.71% complete, ETA 00:22:33
# Fork: 1 of 1
# Warmup Iteration   1: 267.304 ns/op
# Warmup Iteration   2: 154.654 ns/op
# Warmup Iteration   3: 105.330 ns/op
Iteration   1: 105.337 ns/op
Iteration   2: 141.844 ns/op
Iteration   3: 105.271 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.484 ±(99.9%) 384.882 ns/op [Average]
  (min, avg, max) = (105.271, 117.484, 141.844), stdev = 21.097
  CI (99.9%): [≈ 0, 502.366] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 22.78% complete, ETA 00:22:32
# Fork: 1 of 1
# Warmup Iteration   1: 70.755 ns/op
# Warmup Iteration   2: 74.942 ns/op
# Warmup Iteration   3: 46.409 ns/op
Iteration   1: 46.376 ns/op
Iteration   2: 61.941 ns/op
Iteration   3: 46.378 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.565 ±(99.9%) 163.943 ns/op [Average]
  (min, avg, max) = (46.376, 51.565, 61.941), stdev = 8.986
  CI (99.9%): [≈ 0, 215.508] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 22.85% complete, ETA 00:22:31
# Fork: 1 of 1
# Warmup Iteration   1: 173.047 ns/op
# Warmup Iteration   2: 181.696 ns/op
# Warmup Iteration   3: 124.142 ns/op
Iteration   1: 124.188 ns/op
Iteration   2: 167.335 ns/op
Iteration   3: 124.177 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.567 ±(99.9%) 454.528 ns/op [Average]
  (min, avg, max) = (124.177, 138.567, 167.335), stdev = 24.914
  CI (99.9%): [≈ 0, 593.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 22.92% complete, ETA 00:22:30
# Fork: 1 of 1
# Warmup Iteration   1: 17.995 ns/op
# Warmup Iteration   2: 23.968 ns/op
# Warmup Iteration   3: 13.362 ns/op
Iteration   1: 13.360 ns/op
Iteration   2: 13.428 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.381 ±(99.9%) 0.746 ns/op [Average]
  (min, avg, max) = (13.354, 13.381, 13.428), stdev = 0.041
  CI (99.9%): [12.635, 14.127] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 22.99% complete, ETA 00:22:28
# Fork: 1 of 1
# Warmup Iteration   1: 850.224 ns/op
# Warmup Iteration   2: 436.724 ns/op
# Warmup Iteration   3: 303.595 ns/op
Iteration   1: 303.612 ns/op
Iteration   2: 303.668 ns/op
Iteration   3: 303.699 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.660 ±(99.9%) 0.806 ns/op [Average]
  (min, avg, max) = (303.612, 303.660, 303.699), stdev = 0.044
  CI (99.9%): [302.853, 304.466] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 23.06% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 511.569 ns/op
# Warmup Iteration   2: 464.392 ns/op
# Warmup Iteration   3: 341.474 ns/op
Iteration   1: 341.229 ns/op
Iteration   2: 341.400 ns/op
Iteration   3: 341.428 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  341.352 ±(99.9%) 1.963 ns/op [Average]
  (min, avg, max) = (341.229, 341.352, 341.428), stdev = 0.108
  CI (99.9%): [339.389, 343.316] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 23.13% complete, ETA 00:22:26
# Fork: 1 of 1
# Warmup Iteration   1: 4782.629 ns/op
# Warmup Iteration   2: 439.361 ns/op
# Warmup Iteration   3: 313.478 ns/op
Iteration   1: 313.281 ns/op
Iteration   2: 313.294 ns/op
Iteration   3: 313.283 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.286 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (313.281, 313.286, 313.294), stdev = 0.007
  CI (99.9%): [313.165, 313.407] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 23.19% complete, ETA 00:22:25
# Fork: 1 of 1
# Warmup Iteration   1: 391.765 ns/op
# Warmup Iteration   2: 356.588 ns/op
# Warmup Iteration   3: 258.896 ns/op
Iteration   1: 258.887 ns/op
Iteration   2: 259.083 ns/op
Iteration   3: 258.949 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  258.973 ±(99.9%) 1.831 ns/op [Average]
  (min, avg, max) = (258.887, 258.973, 259.083), stdev = 0.100
  CI (99.9%): [257.141, 260.804] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 23.26% complete, ETA 00:22:23
# Fork: 1 of 1
# Warmup Iteration   1: 1302.399 ns/op
# Warmup Iteration   2: 642.521 ns/op
# Warmup Iteration   3: 419.736 ns/op
Iteration   1: 419.931 ns/op
Iteration   2: 419.784 ns/op
Iteration   3: 420.263 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  419.993 ±(99.9%) 4.472 ns/op [Average]
  (min, avg, max) = (419.784, 419.993, 420.263), stdev = 0.245
  CI (99.9%): [415.521, 424.464] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 23.33% complete, ETA 00:22:22
# Fork: 1 of 1
# Warmup Iteration   1: 19.019 ns/op
# Warmup Iteration   2: 23.210 ns/op
# Warmup Iteration   3: 13.355 ns/op
Iteration   1: 13.352 ns/op
Iteration   2: 13.370 ns/op
Iteration   3: 13.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.361 ±(99.9%) 0.164 ns/op [Average]
  (min, avg, max) = (13.352, 13.361, 13.370), stdev = 0.009
  CI (99.9%): [13.196, 13.525] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 23.40% complete, ETA 00:22:21
# Fork: 1 of 1
# Warmup Iteration   1: 591.537 ns/op
# Warmup Iteration   2: 442.344 ns/op
# Warmup Iteration   3: 309.434 ns/op
Iteration   1: 309.393 ns/op
Iteration   2: 309.142 ns/op
Iteration   3: 309.114 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  309.216 ±(99.9%) 2.811 ns/op [Average]
  (min, avg, max) = (309.114, 309.216, 309.393), stdev = 0.154
  CI (99.9%): [306.405, 312.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 23.47% complete, ETA 00:22:20
# Fork: 1 of 1
# Warmup Iteration   1: 544.672 ns/op
# Warmup Iteration   2: 529.704 ns/op
# Warmup Iteration   3: 365.758 ns/op
Iteration   1: 365.664 ns/op
Iteration   2: 365.694 ns/op
Iteration   3: 365.603 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  365.654 ±(99.9%) 0.851 ns/op [Average]
  (min, avg, max) = (365.603, 365.654, 365.694), stdev = 0.047
  CI (99.9%): [364.803, 366.505] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 23.54% complete, ETA 00:22:18
# Fork: 1 of 1
# Warmup Iteration   1: 1122.492 ns/op
# Warmup Iteration   2: 413.328 ns/op
# Warmup Iteration   3: 287.160 ns/op
Iteration   1: 296.710 ns/op
Iteration   2: 287.518 ns/op
Iteration   3: 292.596 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  292.275 ±(99.9%) 84.006 ns/op [Average]
  (min, avg, max) = (287.518, 292.275, 296.710), stdev = 4.605
  CI (99.9%): [208.269, 376.280] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 23.61% complete, ETA 00:22:17
# Fork: 1 of 1
# Warmup Iteration   1: 736.453 ns/op
# Warmup Iteration   2: 423.787 ns/op
# Warmup Iteration   3: 305.781 ns/op
Iteration   1: 305.735 ns/op
Iteration   2: 305.385 ns/op
Iteration   3: 305.415 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  305.512 ±(99.9%) 3.546 ns/op [Average]
  (min, avg, max) = (305.385, 305.512, 305.735), stdev = 0.194
  CI (99.9%): [301.965, 309.058] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 23.68% complete, ETA 00:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 3267.212 ns/op
# Warmup Iteration   2: 2148.791 ns/op
# Warmup Iteration   3: 1502.983 ns/op
Iteration   1: 1504.313 ns/op
Iteration   2: 1503.903 ns/op
Iteration   3: 1506.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1504.857 ±(99.9%) 23.965 ns/op [Average]
  (min, avg, max) = (1503.903, 1504.857, 1506.356), stdev = 1.314
  CI (99.9%): [1480.892, 1528.822] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 23.75% complete, ETA 00:22:15
# Fork: 1 of 1
# Warmup Iteration   1: 18.873 ns/op
# Warmup Iteration   2: 21.781 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.363 ns/op
Iteration   3: 13.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.353 ±(99.9%) 0.154 ns/op [Average]
  (min, avg, max) = (13.347, 13.353, 13.363), stdev = 0.008
  CI (99.9%): [13.199, 13.507] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 23.82% complete, ETA 00:22:13
# Fork: 1 of 1
# Warmup Iteration   1: 1285.453 ns/op
# Warmup Iteration   2: 409.717 ns/op
# Warmup Iteration   3: 301.167 ns/op
Iteration   1: 302.542 ns/op
Iteration   2: 303.874 ns/op
Iteration   3: 303.981 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.465 ±(99.9%) 14.627 ns/op [Average]
  (min, avg, max) = (302.542, 303.465, 303.981), stdev = 0.802
  CI (99.9%): [288.838, 318.093] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 23.89% complete, ETA 00:22:12
# Fork: 1 of 1
# Warmup Iteration   1: 565.521 ns/op
# Warmup Iteration   2: 555.494 ns/op
# Warmup Iteration   3: 377.845 ns/op
Iteration   1: 379.434 ns/op
Iteration   2: 379.299 ns/op
Iteration   3: 378.044 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  378.926 ±(99.9%) 13.984 ns/op [Average]
  (min, avg, max) = (378.044, 378.926, 379.434), stdev = 0.767
  CI (99.9%): [364.942, 392.910] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 23.96% complete, ETA 00:22:11
# Fork: 1 of 1
# Warmup Iteration   1: 3246.571 ns/op
# Warmup Iteration   2: 404.542 ns/op
# Warmup Iteration   3: 364.555 ns/op
Iteration   1: 288.170 ns/op
Iteration   2: 283.730 ns/op
Iteration   3: 285.775 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  285.892 ±(99.9%) 40.546 ns/op [Average]
  (min, avg, max) = (283.730, 285.892, 288.170), stdev = 2.222
  CI (99.9%): [245.345, 326.438] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 24.03% complete, ETA 00:22:10
# Fork: 1 of 1
# Warmup Iteration   1: 493.003 ns/op
# Warmup Iteration   2: 462.710 ns/op
# Warmup Iteration   3: 312.766 ns/op
Iteration   1: 312.799 ns/op
Iteration   2: 313.099 ns/op
Iteration   3: 313.944 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.281 ±(99.9%) 10.830 ns/op [Average]
  (min, avg, max) = (312.799, 313.281, 313.944), stdev = 0.594
  CI (99.9%): [302.450, 324.111] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 24.10% complete, ETA 00:22:09
# Fork: 1 of 1
# Warmup Iteration   1: 3174.683 ns/op
# Warmup Iteration   2: 2345.736 ns/op
# Warmup Iteration   3: 1558.684 ns/op
Iteration   1: 1560.090 ns/op
Iteration   2: 1556.213 ns/op
Iteration   3: 1558.676 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1558.326 ±(99.9%) 35.792 ns/op [Average]
  (min, avg, max) = (1556.213, 1558.326, 1560.090), stdev = 1.962
  CI (99.9%): [1522.534, 1594.118] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 24.17% complete, ETA 00:22:07
# Fork: 1 of 1
# Warmup Iteration   1: 19.188 ns/op
# Warmup Iteration   2: 22.388 ns/op
# Warmup Iteration   3: 13.384 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.388 ns/op
Iteration   3: 13.357 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.364 ±(99.9%) 0.384 ns/op [Average]
  (min, avg, max) = (13.347, 13.364, 13.388), stdev = 0.021
  CI (99.9%): [12.980, 13.748] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 24.24% complete, ETA 00:22:06
# Fork: 1 of 1
# Warmup Iteration   1: 578.511 ns/op
# Warmup Iteration   2: 343.070 ns/op
# Warmup Iteration   3: 237.983 ns/op
Iteration   1: 237.714 ns/op
Iteration   2: 237.129 ns/op
Iteration   3: 237.780 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.541 ±(99.9%) 6.540 ns/op [Average]
  (min, avg, max) = (237.129, 237.541, 237.780), stdev = 0.358
  CI (99.9%): [231.001, 244.081] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 24.31% complete, ETA 00:22:05
# Fork: 1 of 1
# Warmup Iteration   1: 466.768 ns/op
# Warmup Iteration   2: 469.074 ns/op
# Warmup Iteration   3: 323.239 ns/op
Iteration   1: 323.049 ns/op
Iteration   2: 323.526 ns/op
Iteration   3: 323.063 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.213 ±(99.9%) 4.955 ns/op [Average]
  (min, avg, max) = (323.049, 323.213, 323.526), stdev = 0.272
  CI (99.9%): [318.257, 328.168] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 24.38% complete, ETA 00:22:04
# Fork: 1 of 1
# Warmup Iteration   1: 911.100 ns/op
# Warmup Iteration   2: 375.296 ns/op
# Warmup Iteration   3: 298.835 ns/op
Iteration   1: 263.207 ns/op
Iteration   2: 272.381 ns/op
Iteration   3: 263.244 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  266.277 ±(99.9%) 96.429 ns/op [Average]
  (min, avg, max) = (263.207, 266.277, 272.381), stdev = 5.286
  CI (99.9%): [169.848, 362.707] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 24.44% complete, ETA 00:22:02
# Fork: 1 of 1
# Warmup Iteration   1: 460.341 ns/op
# Warmup Iteration   2: 409.187 ns/op
# Warmup Iteration   3: 274.516 ns/op
Iteration   1: 274.313 ns/op
Iteration   2: 274.766 ns/op
Iteration   3: 274.412 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  274.497 ±(99.9%) 4.343 ns/op [Average]
  (min, avg, max) = (274.313, 274.497, 274.766), stdev = 0.238
  CI (99.9%): [270.155, 278.840] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 24.51% complete, ETA 00:22:01
# Fork: 1 of 1
# Warmup Iteration   1: 1348.135 ns/op
# Warmup Iteration   2: 1001.469 ns/op
# Warmup Iteration   3: 675.820 ns/op
Iteration   1: 676.293 ns/op
Iteration   2: 675.279 ns/op
Iteration   3: 676.541 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  676.038 ±(99.9%) 12.199 ns/op [Average]
  (min, avg, max) = (675.279, 676.038, 676.541), stdev = 0.669
  CI (99.9%): [663.838, 688.237] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 24.58% complete, ETA 00:22:00
# Fork: 1 of 1
# Warmup Iteration   1: 18.571 ns/op
# Warmup Iteration   2: 23.734 ns/op
# Warmup Iteration   3: 13.362 ns/op
Iteration   1: 13.365 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.361 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.366 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (13.361, 13.366, 13.373), stdev = 0.006
  CI (99.9%): [13.262, 13.471] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 24.65% complete, ETA 00:21:59
# Fork: 1 of 1
# Warmup Iteration   1: 815.841 ns/op
# Warmup Iteration   2: 397.379 ns/op
# Warmup Iteration   3: 294.592 ns/op
Iteration   1: 296.425 ns/op
Iteration   2: 296.119 ns/op
Iteration   3: 295.605 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  296.050 ±(99.9%) 7.561 ns/op [Average]
  (min, avg, max) = (295.605, 296.050, 296.425), stdev = 0.414
  CI (99.9%): [288.489, 303.610] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 24.72% complete, ETA 00:21:57
# Fork: 1 of 1
# Warmup Iteration   1: 348.449 ns/op
# Warmup Iteration   2: 351.083 ns/op
# Warmup Iteration   3: 238.574 ns/op
Iteration   1: 237.725 ns/op
Iteration   2: 238.108 ns/op
Iteration   3: 237.378 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.737 ±(99.9%) 6.659 ns/op [Average]
  (min, avg, max) = (237.378, 237.737, 238.108), stdev = 0.365
  CI (99.9%): [231.078, 244.396] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 24.79% complete, ETA 00:21:56
# Fork: 1 of 1
# Warmup Iteration   1: 5104.553 ns/op
# Warmup Iteration   2: 457.209 ns/op
# Warmup Iteration   3: 338.506 ns/op
Iteration   1: 337.565 ns/op
Iteration   2: 337.421 ns/op
Iteration   3: 337.513 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  337.500 ±(99.9%) 1.330 ns/op [Average]
  (min, avg, max) = (337.421, 337.500, 337.565), stdev = 0.073
  CI (99.9%): [336.170, 338.829] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 24.86% complete, ETA 00:21:55
# Fork: 1 of 1
# Warmup Iteration   1: 329.012 ns/op
# Warmup Iteration   2: 286.334 ns/op
# Warmup Iteration   3: 201.800 ns/op
Iteration   1: 202.683 ns/op
Iteration   2: 201.850 ns/op
Iteration   3: 201.764 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  202.099 ±(99.9%) 9.254 ns/op [Average]
  (min, avg, max) = (201.764, 202.099, 202.683), stdev = 0.507
  CI (99.9%): [192.845, 211.353] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 24.93% complete, ETA 00:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 5190.070 ns/op
# Warmup Iteration   2: 1615.366 ns/op
# Warmup Iteration   3: 1131.056 ns/op
Iteration   1: 1132.504 ns/op
Iteration   2: 1132.313 ns/op
Iteration   3: 1134.759 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1133.192 ±(99.9%) 24.815 ns/op [Average]
  (min, avg, max) = (1132.313, 1133.192, 1134.759), stdev = 1.360
  CI (99.9%): [1108.377, 1158.007] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 25.00% complete, ETA 00:21:52
# Fork: 1 of 1
# Warmup Iteration   1: 20.800 ns/op
# Warmup Iteration   2: 28.132 ns/op
# Warmup Iteration   3: 13.368 ns/op
Iteration   1: 13.364 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.360 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (13.355, 13.360, 13.364), stdev = 0.005
  CI (99.9%): [13.276, 13.445] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 25.07% complete, ETA 00:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 1088.279 ns/op
# Warmup Iteration   2: 465.361 ns/op
# Warmup Iteration   3: 326.791 ns/op
Iteration   1: 326.372 ns/op
Iteration   2: 326.506 ns/op
Iteration   3: 326.072 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  326.317 ±(99.9%) 4.053 ns/op [Average]
  (min, avg, max) = (326.072, 326.317, 326.506), stdev = 0.222
  CI (99.9%): [322.264, 330.370] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 25.14% complete, ETA 00:21:50
# Fork: 1 of 1
# Warmup Iteration   1: 465.675 ns/op
# Warmup Iteration   2: 463.537 ns/op
# Warmup Iteration   3: 311.221 ns/op
Iteration   1: 311.113 ns/op
Iteration   2: 311.133 ns/op
Iteration   3: 311.171 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  311.139 ±(99.9%) 0.536 ns/op [Average]
  (min, avg, max) = (311.113, 311.139, 311.171), stdev = 0.029
  CI (99.9%): [310.603, 311.674] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 25.21% complete, ETA 00:21:49
# Fork: 1 of 1
# Warmup Iteration   1: 4980.449 ns/op
# Warmup Iteration   2: 554.401 ns/op
# Warmup Iteration   3: 369.138 ns/op
Iteration   1: 368.757 ns/op
Iteration   2: 369.051 ns/op
Iteration   3: 368.888 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  368.899 ±(99.9%) 2.687 ns/op [Average]
  (min, avg, max) = (368.757, 368.899, 369.051), stdev = 0.147
  CI (99.9%): [366.212, 371.586] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 25.28% complete, ETA 00:21:47
# Fork: 1 of 1
# Warmup Iteration   1: 527.059 ns/op
# Warmup Iteration   2: 423.182 ns/op
# Warmup Iteration   3: 276.042 ns/op
Iteration   1: 275.952 ns/op
Iteration   2: 275.922 ns/op
Iteration   3: 276.018 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  275.964 ±(99.9%) 0.893 ns/op [Average]
  (min, avg, max) = (275.922, 275.964, 276.018), stdev = 0.049
  CI (99.9%): [275.071, 276.857] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 25.35% complete, ETA 00:21:46
# Fork: 1 of 1
# Warmup Iteration   1: 2605.926 ns/op
# Warmup Iteration   2: 1927.995 ns/op
# Warmup Iteration   3: 1396.753 ns/op
Iteration   1: 1396.865 ns/op
Iteration   2: 1396.369 ns/op
Iteration   3: 1395.839 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1396.358 ±(99.9%) 9.362 ns/op [Average]
  (min, avg, max) = (1395.839, 1396.358, 1396.865), stdev = 0.513
  CI (99.9%): [1386.996, 1405.719] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 25.42% complete, ETA 00:21:45
# Fork: 1 of 1
# Warmup Iteration   1: 18.832 ns/op
# Warmup Iteration   2: 20.970 ns/op
# Warmup Iteration   3: 13.541 ns/op
Iteration   1: 13.373 ns/op
Iteration   2: 13.364 ns/op
Iteration   3: 13.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.362 ±(99.9%) 0.216 ns/op [Average]
  (min, avg, max) = (13.349, 13.362, 13.373), stdev = 0.012
  CI (99.9%): [13.146, 13.578] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 25.49% complete, ETA 00:21:44
# Fork: 1 of 1
# Warmup Iteration   1: 782.183 ns/op
# Warmup Iteration   2: 447.993 ns/op
# Warmup Iteration   3: 331.213 ns/op
Iteration   1: 331.650 ns/op
Iteration   2: 331.540 ns/op
Iteration   3: 331.668 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  331.619 ±(99.9%) 1.261 ns/op [Average]
  (min, avg, max) = (331.540, 331.619, 331.668), stdev = 0.069
  CI (99.9%): [330.358, 332.880] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 25.56% complete, ETA 00:21:42
# Fork: 1 of 1
# Warmup Iteration   1: 489.200 ns/op
# Warmup Iteration   2: 482.175 ns/op
# Warmup Iteration   3: 333.666 ns/op
Iteration   1: 333.482 ns/op
Iteration   2: 333.369 ns/op
Iteration   3: 333.391 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  333.414 ±(99.9%) 1.088 ns/op [Average]
  (min, avg, max) = (333.369, 333.414, 333.482), stdev = 0.060
  CI (99.9%): [332.326, 334.503] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 25.62% complete, ETA 00:21:41
# Fork: 1 of 1
# Warmup Iteration   1: 7689.454 ns/op
# Warmup Iteration   2: 491.108 ns/op
# Warmup Iteration   3: 335.499 ns/op
Iteration   1: 335.168 ns/op
Iteration   2: 335.089 ns/op
Iteration   3: 335.162 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.140 ±(99.9%) 0.805 ns/op [Average]
  (min, avg, max) = (335.089, 335.140, 335.168), stdev = 0.044
  CI (99.9%): [334.335, 335.944] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 25.69% complete, ETA 00:21:40
# Fork: 1 of 1
# Warmup Iteration   1: 403.858 ns/op
# Warmup Iteration   2: 353.605 ns/op
# Warmup Iteration   3: 238.102 ns/op
Iteration   1: 238.097 ns/op
Iteration   2: 238.127 ns/op
Iteration   3: 238.026 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  238.083 ±(99.9%) 0.943 ns/op [Average]
  (min, avg, max) = (238.026, 238.083, 238.127), stdev = 0.052
  CI (99.9%): [237.140, 239.026] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 25.76% complete, ETA 00:21:39
# Fork: 1 of 1
# Warmup Iteration   1: 702.286 ns/op
# Warmup Iteration   2: 550.307 ns/op
# Warmup Iteration   3: 378.610 ns/op
Iteration   1: 378.536 ns/op
Iteration   2: 378.514 ns/op
Iteration   3: 378.497 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  378.516 ±(99.9%) 0.358 ns/op [Average]
  (min, avg, max) = (378.497, 378.516, 378.536), stdev = 0.020
  CI (99.9%): [378.158, 378.874] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 25.83% complete, ETA 00:21:38
# Fork: 1 of 1
# Warmup Iteration   1: 19.247 ns/op
# Warmup Iteration   2: 22.488 ns/op
# Warmup Iteration   3: 13.361 ns/op
Iteration   1: 13.376 ns/op
Iteration   2: 13.364 ns/op
Iteration   3: 13.367 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.369 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (13.364, 13.369, 13.376), stdev = 0.006
  CI (99.9%): [13.255, 13.483] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 25.90% complete, ETA 00:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 1486.306 ns/op
# Warmup Iteration   2: 553.965 ns/op
# Warmup Iteration   3: 367.979 ns/op
Iteration   1: 367.821 ns/op
Iteration   2: 367.890 ns/op
Iteration   3: 367.974 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  367.895 ±(99.9%) 1.400 ns/op [Average]
  (min, avg, max) = (367.821, 367.895, 367.974), stdev = 0.077
  CI (99.9%): [366.495, 369.295] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 25.97% complete, ETA 00:21:35
# Fork: 1 of 1
# Warmup Iteration   1: 675.876 ns/op
# Warmup Iteration   2: 589.039 ns/op
# Warmup Iteration   3: 429.526 ns/op
Iteration   1: 428.254 ns/op
Iteration   2: 426.927 ns/op
Iteration   3: 426.383 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  427.188 ±(99.9%) 17.557 ns/op [Average]
  (min, avg, max) = (426.383, 427.188, 428.254), stdev = 0.962
  CI (99.9%): [409.631, 444.745] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 26.04% complete, ETA 00:21:34
# Fork: 1 of 1
# Warmup Iteration   1: 17521.719 ns/op
# Warmup Iteration   2: 685.325 ns/op
# Warmup Iteration   3: 478.906 ns/op
Iteration   1: 430.574 ns/op
Iteration   2: 431.874 ns/op
Iteration   3: 434.426 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  432.291 ±(99.9%) 35.754 ns/op [Average]
  (min, avg, max) = (430.574, 432.291, 434.426), stdev = 1.960
  CI (99.9%): [396.537, 468.045] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 26.11% complete, ETA 00:21:33
# Fork: 1 of 1
# Warmup Iteration   1: 552.464 ns/op
# Warmup Iteration   2: 469.121 ns/op
# Warmup Iteration   3: 333.586 ns/op
Iteration   1: 333.622 ns/op
Iteration   2: 333.704 ns/op
Iteration   3: 333.448 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  333.591 ±(99.9%) 2.381 ns/op [Average]
  (min, avg, max) = (333.448, 333.591, 333.704), stdev = 0.131
  CI (99.9%): [331.211, 335.972] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 26.18% complete, ETA 00:21:31
# Fork: 1 of 1
# Warmup Iteration   1: 3213.608 ns/op
# Warmup Iteration   2: 2372.266 ns/op
# Warmup Iteration   3: 1618.536 ns/op
Iteration   1: 1625.010 ns/op
Iteration   2: 1615.598 ns/op
Iteration   3: 1622.297 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1620.969 ±(99.9%) 88.387 ns/op [Average]
  (min, avg, max) = (1615.598, 1620.969, 1625.010), stdev = 4.845
  CI (99.9%): [1532.582, 1709.355] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 26.25% complete, ETA 00:21:30
# Fork: 1 of 1
# Warmup Iteration   1: 18.235 ns/op
# Warmup Iteration   2: 24.525 ns/op
# Warmup Iteration   3: 13.377 ns/op
Iteration   1: 13.368 ns/op
Iteration   2: 13.365 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.363 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (13.354, 13.363, 13.368), stdev = 0.007
  CI (99.9%): [13.228, 13.497] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 26.32% complete, ETA 00:21:29
# Fork: 1 of 1
# Warmup Iteration   1: 105.578 ns/op
# Warmup Iteration   2: 99.991 ns/op
# Warmup Iteration   3: 68.037 ns/op
Iteration   1: 68.013 ns/op
Iteration   2: 68.011 ns/op
Iteration   3: 68.021 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  68.015 ±(99.9%) 0.099 ns/op [Average]
  (min, avg, max) = (68.011, 68.015, 68.021), stdev = 0.005
  CI (99.9%): [67.916, 68.114] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 26.39% complete, ETA 00:21:28
# Fork: 1 of 1
# Warmup Iteration   1: 66.045 ns/op
# Warmup Iteration   2: 67.264 ns/op
# Warmup Iteration   3: 44.065 ns/op
Iteration   1: 44.040 ns/op
Iteration   2: 44.038 ns/op
Iteration   3: 44.056 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.045 ±(99.9%) 0.176 ns/op [Average]
  (min, avg, max) = (44.038, 44.045, 44.056), stdev = 0.010
  CI (99.9%): [43.868, 44.221] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 26.46% complete, ETA 00:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 432.745 ns/op
# Warmup Iteration   2: 117.671 ns/op
# Warmup Iteration   3: 75.546 ns/op
Iteration   1: 75.522 ns/op
Iteration   2: 75.450 ns/op
Iteration   3: 75.521 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  75.498 ±(99.9%) 0.761 ns/op [Average]
  (min, avg, max) = (75.450, 75.498, 75.522), stdev = 0.042
  CI (99.9%): [74.737, 76.259] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 26.53% complete, ETA 00:21:25
# Fork: 1 of 1
# Warmup Iteration   1: 67.981 ns/op
# Warmup Iteration   2: 76.120 ns/op
# Warmup Iteration   3: 46.994 ns/op
Iteration   1: 46.970 ns/op
Iteration   2: 47.199 ns/op
Iteration   3: 46.974 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.048 ±(99.9%) 2.396 ns/op [Average]
  (min, avg, max) = (46.970, 47.048, 47.199), stdev = 0.131
  CI (99.9%): [44.651, 49.444] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 26.60% complete, ETA 00:21:24
# Fork: 1 of 1
# Warmup Iteration   1: 169.952 ns/op
# Warmup Iteration   2: 183.364 ns/op
# Warmup Iteration   3: 97.470 ns/op
Iteration   1: 97.464 ns/op
Iteration   2: 97.547 ns/op
Iteration   3: 97.571 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.527 ±(99.9%) 1.028 ns/op [Average]
  (min, avg, max) = (97.464, 97.527, 97.571), stdev = 0.056
  CI (99.9%): [96.500, 98.555] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 26.67% complete, ETA 00:21:23
# Fork: 1 of 1
# Warmup Iteration   1: 19.645 ns/op
# Warmup Iteration   2: 23.932 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.351 ns/op
Iteration   2: 13.382 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.363 ±(99.9%) 0.304 ns/op [Average]
  (min, avg, max) = (13.351, 13.363, 13.382), stdev = 0.017
  CI (99.9%): [13.059, 13.667] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 26.74% complete, ETA 00:21:22
# Fork: 1 of 1
# Warmup Iteration   1: 630.109 ns/op
# Warmup Iteration   2: 260.193 ns/op
# Warmup Iteration   3: 188.121 ns/op
Iteration   1: 190.744 ns/op
Iteration   2: 188.709 ns/op
Iteration   3: 189.454 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  189.636 ±(99.9%) 18.788 ns/op [Average]
  (min, avg, max) = (188.709, 189.636, 190.744), stdev = 1.030
  CI (99.9%): [170.848, 208.424] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 26.81% complete, ETA 00:21:20
# Fork: 1 of 1
# Warmup Iteration   1: 213.624 ns/op
# Warmup Iteration   2: 217.831 ns/op
# Warmup Iteration   3: 137.113 ns/op
Iteration   1: 136.991 ns/op
Iteration   2: 137.478 ns/op
Iteration   3: 136.998 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.156 ±(99.9%) 5.089 ns/op [Average]
  (min, avg, max) = (136.991, 137.156, 137.478), stdev = 0.279
  CI (99.9%): [132.067, 142.245] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 26.88% complete, ETA 00:21:19
# Fork: 1 of 1
# Warmup Iteration   1: 7617.455 ns/op
# Warmup Iteration   2: 249.765 ns/op
# Warmup Iteration   3: 176.034 ns/op
Iteration   1: 176.033 ns/op
Iteration   2: 176.422 ns/op
Iteration   3: 176.084 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  176.180 ±(99.9%) 3.851 ns/op [Average]
  (min, avg, max) = (176.033, 176.180, 176.422), stdev = 0.211
  CI (99.9%): [172.329, 180.030] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 26.94% complete, ETA 00:21:18
# Fork: 1 of 1
# Warmup Iteration   1: 146.038 ns/op
# Warmup Iteration   2: 137.049 ns/op
# Warmup Iteration   3: 99.813 ns/op
Iteration   1: 99.759 ns/op
Iteration   2: 99.886 ns/op
Iteration   3: 99.766 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  99.804 ±(99.9%) 1.295 ns/op [Average]
  (min, avg, max) = (99.759, 99.804, 99.886), stdev = 0.071
  CI (99.9%): [98.509, 101.099] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 27.01% complete, ETA 00:21:17
# Fork: 1 of 1
# Warmup Iteration   1: 1136.388 ns/op
# Warmup Iteration   2: 474.694 ns/op
# Warmup Iteration   3: 314.629 ns/op
Iteration   1: 314.445 ns/op
Iteration   2: 314.443 ns/op
Iteration   3: 314.524 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  314.471 ±(99.9%) 0.837 ns/op [Average]
  (min, avg, max) = (314.443, 314.471, 314.524), stdev = 0.046
  CI (99.9%): [313.633, 315.308] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 27.08% complete, ETA 00:21:15
# Fork: 1 of 1
# Warmup Iteration   1: 18.368 ns/op
# Warmup Iteration   2: 21.154 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.355 ns/op
Iteration   2: 13.371 ns/op
Iteration   3: 13.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.206 ns/op [Average]
  (min, avg, max) = (13.350, 13.359, 13.371), stdev = 0.011
  CI (99.9%): [13.153, 13.565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 27.15% complete, ETA 00:21:14
# Fork: 1 of 1
# Warmup Iteration   1: 1105.460 ns/op
# Warmup Iteration   2: 422.802 ns/op
# Warmup Iteration   3: 314.435 ns/op
Iteration   1: 313.794 ns/op
Iteration   2: 314.150 ns/op
Iteration   3: 313.850 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  313.932 ±(99.9%) 3.497 ns/op [Average]
  (min, avg, max) = (313.794, 313.932, 314.150), stdev = 0.192
  CI (99.9%): [310.435, 317.428] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 27.22% complete, ETA 00:21:13
# Fork: 1 of 1
# Warmup Iteration   1: 729.587 ns/op
# Warmup Iteration   2: 670.714 ns/op
# Warmup Iteration   3: 499.461 ns/op
Iteration   1: 499.556 ns/op
Iteration   2: 499.522 ns/op
Iteration   3: 499.490 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  499.523 ±(99.9%) 0.598 ns/op [Average]
  (min, avg, max) = (499.490, 499.523, 499.556), stdev = 0.033
  CI (99.9%): [498.925, 500.121] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 27.29% complete, ETA 00:21:12
# Fork: 1 of 1
# Warmup Iteration   1: 18858.437 ns/op
# Warmup Iteration   2: 464.070 ns/op
# Warmup Iteration   3: 373.550 ns/op
Iteration   1: 334.412 ns/op
Iteration   2: 334.249 ns/op
Iteration   3: 334.297 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  334.320 ±(99.9%) 1.531 ns/op [Average]
  (min, avg, max) = (334.249, 334.320, 334.412), stdev = 0.084
  CI (99.9%): [332.789, 335.850] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 27.36% complete, ETA 00:21:11
# Fork: 1 of 1
# Warmup Iteration   1: 667.986 ns/op
# Warmup Iteration   2: 625.791 ns/op
# Warmup Iteration   3: 412.889 ns/op
Iteration   1: 412.598 ns/op
Iteration   2: 413.008 ns/op
Iteration   3: 413.025 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  412.877 ±(99.9%) 4.418 ns/op [Average]
  (min, avg, max) = (412.598, 412.877, 413.025), stdev = 0.242
  CI (99.9%): [408.459, 417.294] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 27.43% complete, ETA 00:21:09
# Fork: 1 of 1
# Warmup Iteration   1: 3347.768 ns/op
# Warmup Iteration   2: 2510.718 ns/op
# Warmup Iteration   3: 1769.294 ns/op
Iteration   1: 1767.943 ns/op
Iteration   2: 1766.998 ns/op
Iteration   3: 1768.194 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1767.712 ±(99.9%) 11.505 ns/op [Average]
  (min, avg, max) = (1766.998, 1767.712, 1768.194), stdev = 0.631
  CI (99.9%): [1756.207, 1779.216] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 27.50% complete, ETA 00:21:08
# Fork: 1 of 1
# Warmup Iteration   1: 18.229 ns/op
# Warmup Iteration   2: 21.664 ns/op
# Warmup Iteration   3: 13.368 ns/op
Iteration   1: 13.353 ns/op
Iteration   2: 13.368 ns/op
Iteration   3: 13.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.150 ns/op [Average]
  (min, avg, max) = (13.353, 13.359, 13.368), stdev = 0.008
  CI (99.9%): [13.208, 13.509] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 27.57% complete, ETA 00:21:07
# Fork: 1 of 1
# Warmup Iteration   1: 626.041 ns/op
# Warmup Iteration   2: 378.157 ns/op
# Warmup Iteration   3: 266.481 ns/op
Iteration   1: 266.668 ns/op
Iteration   2: 266.627 ns/op
Iteration   3: 266.733 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  266.676 ±(99.9%) 0.972 ns/op [Average]
  (min, avg, max) = (266.627, 266.676, 266.733), stdev = 0.053
  CI (99.9%): [265.704, 267.648] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 27.64% complete, ETA 00:21:06
# Fork: 1 of 1
# Warmup Iteration   1: 731.242 ns/op
# Warmup Iteration   2: 672.408 ns/op
# Warmup Iteration   3: 484.391 ns/op
Iteration   1: 484.942 ns/op
Iteration   2: 483.914 ns/op
Iteration   3: 484.644 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  484.500 ±(99.9%) 9.654 ns/op [Average]
  (min, avg, max) = (483.914, 484.500, 484.942), stdev = 0.529
  CI (99.9%): [474.846, 494.154] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 27.71% complete, ETA 00:21:04
# Fork: 1 of 1
# Warmup Iteration   1: 2410.165 ns/op
# Warmup Iteration   2: 417.713 ns/op
# Warmup Iteration   3: 286.290 ns/op
Iteration   1: 286.316 ns/op
Iteration   2: 286.452 ns/op
Iteration   3: 286.220 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  286.329 ±(99.9%) 2.125 ns/op [Average]
  (min, avg, max) = (286.220, 286.329, 286.452), stdev = 0.116
  CI (99.9%): [284.205, 288.454] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 27.78% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 494.480 ns/op
# Warmup Iteration   2: 486.232 ns/op
# Warmup Iteration   3: 333.726 ns/op
Iteration   1: 333.680 ns/op
Iteration   2: 333.830 ns/op
Iteration   3: 333.657 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  333.722 ±(99.9%) 1.716 ns/op [Average]
  (min, avg, max) = (333.657, 333.722, 333.830), stdev = 0.094
  CI (99.9%): [332.006, 335.438] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 27.85% complete, ETA 00:21:02
# Fork: 1 of 1
# Warmup Iteration   1: 769.823 ns/op
# Warmup Iteration   2: 599.344 ns/op
# Warmup Iteration   3: 396.703 ns/op
Iteration   1: 396.624 ns/op
Iteration   2: 396.767 ns/op
Iteration   3: 396.498 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  396.630 ±(99.9%) 2.454 ns/op [Average]
  (min, avg, max) = (396.498, 396.630, 396.767), stdev = 0.134
  CI (99.9%): [394.176, 399.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 27.92% complete, ETA 00:21:01
# Fork: 1 of 1
# Warmup Iteration   1: 22.441 ns/op
# Warmup Iteration   2: 27.744 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.357 ns/op
Iteration   2: 13.367 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.357 ±(99.9%) 0.183 ns/op [Average]
  (min, avg, max) = (13.347, 13.357, 13.367), stdev = 0.010
  CI (99.9%): [13.173, 13.540] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 27.99% complete, ETA 00:20:59
# Fork: 1 of 1
# Warmup Iteration   1: 1374.474 ns/op
# Warmup Iteration   2: 547.443 ns/op
# Warmup Iteration   3: 377.201 ns/op
Iteration   1: 377.724 ns/op
Iteration   2: 375.532 ns/op
Iteration   3: 378.593 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  377.283 ±(99.9%) 28.784 ns/op [Average]
  (min, avg, max) = (375.532, 377.283, 378.593), stdev = 1.578
  CI (99.9%): [348.499, 406.068] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 28.06% complete, ETA 00:20:58
# Fork: 1 of 1
# Warmup Iteration   1: 594.399 ns/op
# Warmup Iteration   2: 573.321 ns/op
# Warmup Iteration   3: 417.164 ns/op
Iteration   1: 417.469 ns/op
Iteration   2: 416.815 ns/op
Iteration   3: 415.109 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  416.464 ±(99.9%) 22.232 ns/op [Average]
  (min, avg, max) = (415.109, 416.464, 417.469), stdev = 1.219
  CI (99.9%): [394.232, 438.696] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 28.13% complete, ETA 00:20:57
# Fork: 1 of 1
# Warmup Iteration   1: 11342.714 ns/op
# Warmup Iteration   2: 609.914 ns/op
# Warmup Iteration   3: 404.517 ns/op
Iteration   1: 404.451 ns/op
Iteration   2: 404.638 ns/op
Iteration   3: 404.730 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  404.606 ±(99.9%) 2.595 ns/op [Average]
  (min, avg, max) = (404.451, 404.606, 404.730), stdev = 0.142
  CI (99.9%): [402.011, 407.201] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 28.19% complete, ETA 00:20:56
# Fork: 1 of 1
# Warmup Iteration   1: 552.947 ns/op
# Warmup Iteration   2: 501.943 ns/op
# Warmup Iteration   3: 339.906 ns/op
Iteration   1: 338.850 ns/op
Iteration   2: 335.045 ns/op
Iteration   3: 338.172 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  337.355 ±(99.9%) 37.020 ns/op [Average]
  (min, avg, max) = (335.045, 337.355, 338.850), stdev = 2.029
  CI (99.9%): [300.335, 374.376] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 28.26% complete, ETA 00:20:55
# Fork: 1 of 1
# Warmup Iteration   1: 3309.982 ns/op
# Warmup Iteration   2: 2266.838 ns/op
# Warmup Iteration   3: 1639.284 ns/op
Iteration   1: 1637.120 ns/op
Iteration   2: 1640.474 ns/op
Iteration   3: 1637.382 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1638.325 ±(99.9%) 34.034 ns/op [Average]
  (min, avg, max) = (1637.120, 1638.325, 1640.474), stdev = 1.865
  CI (99.9%): [1604.292, 1672.359] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 28.33% complete, ETA 00:20:53
# Fork: 1 of 1
# Warmup Iteration   1: 18.216 ns/op
# Warmup Iteration   2: 21.296 ns/op
# Warmup Iteration   3: 13.366 ns/op
Iteration   1: 13.366 ns/op
Iteration   2: 13.361 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.183 ns/op [Average]
  (min, avg, max) = (13.347, 13.358, 13.366), stdev = 0.010
  CI (99.9%): [13.175, 13.541] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 28.40% complete, ETA 00:20:52
# Fork: 1 of 1
# Warmup Iteration   1: 398.137 ns/op
# Warmup Iteration   2: 326.638 ns/op
# Warmup Iteration   3: 217.986 ns/op
Iteration   1: 217.879 ns/op
Iteration   2: 217.900 ns/op
Iteration   3: 217.916 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  217.898 ±(99.9%) 0.340 ns/op [Average]
  (min, avg, max) = (217.879, 217.898, 217.916), stdev = 0.019
  CI (99.9%): [217.558, 218.238] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 28.47% complete, ETA 00:20:51
# Fork: 1 of 1
# Warmup Iteration   1: 541.192 ns/op
# Warmup Iteration   2: 537.846 ns/op
# Warmup Iteration   3: 352.735 ns/op
Iteration   1: 352.629 ns/op
Iteration   2: 352.704 ns/op
Iteration   3: 352.669 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  352.667 ±(99.9%) 0.685 ns/op [Average]
  (min, avg, max) = (352.629, 352.667, 352.704), stdev = 0.038
  CI (99.9%): [351.982, 353.352] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 28.54% complete, ETA 00:20:50
# Fork: 1 of 1
# Warmup Iteration   1: 509.664 ns/op
# Warmup Iteration   2: 150.636 ns/op
# Warmup Iteration   3: 103.733 ns/op
Iteration   1: 103.713 ns/op
Iteration   2: 103.719 ns/op
Iteration   3: 103.729 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  103.720 ±(99.9%) 0.144 ns/op [Average]
  (min, avg, max) = (103.713, 103.720, 103.729), stdev = 0.008
  CI (99.9%): [103.576, 103.864] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 28.61% complete, ETA 00:20:48
# Fork: 1 of 1
# Warmup Iteration   1: 368.924 ns/op
# Warmup Iteration   2: 309.581 ns/op
# Warmup Iteration   3: 235.168 ns/op
Iteration   1: 235.108 ns/op
Iteration   2: 235.086 ns/op
Iteration   3: 235.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  235.107 ±(99.9%) 0.385 ns/op [Average]
  (min, avg, max) = (235.086, 235.107, 235.128), stdev = 0.021
  CI (99.9%): [234.723, 235.492] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 28.68% complete, ETA 00:20:47
# Fork: 1 of 1
# Warmup Iteration   1: 236.557 ns/op
# Warmup Iteration   2: 218.351 ns/op
# Warmup Iteration   3: 124.191 ns/op
Iteration   1: 124.151 ns/op
Iteration   2: 124.197 ns/op
Iteration   3: 124.120 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  124.156 ±(99.9%) 0.707 ns/op [Average]
  (min, avg, max) = (124.120, 124.156, 124.197), stdev = 0.039
  CI (99.9%): [123.449, 124.863] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 28.75% complete, ETA 00:20:46
# Fork: 1 of 1
# Warmup Iteration   1: 19.297 ns/op
# Warmup Iteration   2: 24.630 ns/op
# Warmup Iteration   3: 13.626 ns/op
Iteration   1: 13.614 ns/op
Iteration   2: 13.631 ns/op
Iteration   3: 13.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.620 ±(99.9%) 0.170 ns/op [Average]
  (min, avg, max) = (13.614, 13.620, 13.631), stdev = 0.009
  CI (99.9%): [13.450, 13.790] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 28.82% complete, ETA 00:20:45
# Fork: 1 of 1
# Warmup Iteration   1: 1097.747 ns/op
# Warmup Iteration   2: 359.070 ns/op
# Warmup Iteration   3: 252.242 ns/op
Iteration   1: 253.538 ns/op
Iteration   2: 254.322 ns/op
Iteration   3: 254.313 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  254.057 ±(99.9%) 8.213 ns/op [Average]
  (min, avg, max) = (253.538, 254.057, 254.322), stdev = 0.450
  CI (99.9%): [245.844, 262.271] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 28.89% complete, ETA 00:20:44
# Fork: 1 of 1
# Warmup Iteration   1: 964.053 ns/op
# Warmup Iteration   2: 917.483 ns/op
# Warmup Iteration   3: 675.368 ns/op
Iteration   1: 668.855 ns/op
Iteration   2: 669.821 ns/op
Iteration   3: 672.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  670.250 ±(99.9%) 30.130 ns/op [Average]
  (min, avg, max) = (668.855, 670.250, 672.073), stdev = 1.652
  CI (99.9%): [640.120, 700.379] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 28.96% complete, ETA 00:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 7664.584 ns/op
# Warmup Iteration   2: 405.960 ns/op
# Warmup Iteration   3: 298.276 ns/op
Iteration   1: 298.224 ns/op
Iteration   2: 298.506 ns/op
Iteration   3: 299.138 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  298.623 ±(99.9%) 8.542 ns/op [Average]
  (min, avg, max) = (298.224, 298.623, 299.138), stdev = 0.468
  CI (99.9%): [290.081, 307.165] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 29.03% complete, ETA 00:20:41
# Fork: 1 of 1
# Warmup Iteration   1: 604.426 ns/op
# Warmup Iteration   2: 592.347 ns/op
# Warmup Iteration   3: 389.786 ns/op
Iteration   1: 388.656 ns/op
Iteration   2: 388.798 ns/op
Iteration   3: 389.425 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  388.960 ±(99.9%) 7.463 ns/op [Average]
  (min, avg, max) = (388.656, 388.960, 389.425), stdev = 0.409
  CI (99.9%): [381.497, 396.422] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 29.10% complete, ETA 00:20:40
# Fork: 1 of 1
# Warmup Iteration   1: 736.919 ns/op
# Warmup Iteration   2: 518.042 ns/op
# Warmup Iteration   3: 348.895 ns/op
Iteration   1: 348.397 ns/op
Iteration   2: 349.051 ns/op
Iteration   3: 349.051 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  348.833 ±(99.9%) 6.891 ns/op [Average]
  (min, avg, max) = (348.397, 348.833, 349.051), stdev = 0.378
  CI (99.9%): [341.942, 355.724] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 29.17% complete, ETA 00:20:39
# Fork: 1 of 1
# Warmup Iteration   1: 19.436 ns/op
# Warmup Iteration   2: 24.023 ns/op
# Warmup Iteration   3: 13.628 ns/op
Iteration   1: 13.614 ns/op
Iteration   2: 13.634 ns/op
Iteration   3: 13.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.621 ±(99.9%) 0.203 ns/op [Average]
  (min, avg, max) = (13.614, 13.621, 13.634), stdev = 0.011
  CI (99.9%): [13.418, 13.825] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 29.24% complete, ETA 00:20:37
# Fork: 1 of 1
# Warmup Iteration   1: 733.010 ns/op
# Warmup Iteration   2: 499.701 ns/op
# Warmup Iteration   3: 326.085 ns/op
Iteration   1: 326.113 ns/op
Iteration   2: 326.003 ns/op
Iteration   3: 326.064 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  326.060 ±(99.9%) 1.008 ns/op [Average]
  (min, avg, max) = (326.003, 326.060, 326.113), stdev = 0.055
  CI (99.9%): [325.052, 327.068] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 29.31% complete, ETA 00:20:36
# Fork: 1 of 1
# Warmup Iteration   1: 577.838 ns/op
# Warmup Iteration   2: 504.778 ns/op
# Warmup Iteration   3: 370.722 ns/op
Iteration   1: 370.684 ns/op
Iteration   2: 370.831 ns/op
Iteration   3: 370.693 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  370.736 ±(99.9%) 1.506 ns/op [Average]
  (min, avg, max) = (370.684, 370.736, 370.831), stdev = 0.083
  CI (99.9%): [369.231, 372.242] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 29.38% complete, ETA 00:20:35
# Fork: 1 of 1
# Warmup Iteration   1: 7982.712 ns/op
# Warmup Iteration   2: 528.630 ns/op
# Warmup Iteration   3: 390.891 ns/op
Iteration   1: 390.803 ns/op
Iteration   2: 390.846 ns/op
Iteration   3: 390.706 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  390.785 ±(99.9%) 1.307 ns/op [Average]
  (min, avg, max) = (390.706, 390.785, 390.846), stdev = 0.072
  CI (99.9%): [389.478, 392.092] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 29.44% complete, ETA 00:20:34
# Fork: 1 of 1
# Warmup Iteration   1: 542.717 ns/op
# Warmup Iteration   2: 475.648 ns/op
# Warmup Iteration   3: 342.180 ns/op
Iteration   1: 341.985 ns/op
Iteration   2: 342.097 ns/op
Iteration   3: 341.903 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  341.995 ±(99.9%) 1.777 ns/op [Average]
  (min, avg, max) = (341.903, 341.995, 342.097), stdev = 0.097
  CI (99.9%): [340.219, 343.772] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 29.51% complete, ETA 00:20:33
# Fork: 1 of 1
# Warmup Iteration   1: 3118.883 ns/op
# Warmup Iteration   2: 2087.387 ns/op
# Warmup Iteration   3: 1547.400 ns/op
Iteration   1: 1548.730 ns/op
Iteration   2: 1549.096 ns/op
Iteration   3: 1548.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1548.903 ±(99.9%) 3.350 ns/op [Average]
  (min, avg, max) = (1548.730, 1548.903, 1549.096), stdev = 0.184
  CI (99.9%): [1545.553, 1552.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 29.58% complete, ETA 00:20:31
# Fork: 1 of 1
# Warmup Iteration   1: 21.179 ns/op
# Warmup Iteration   2: 24.905 ns/op
# Warmup Iteration   3: 13.361 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.262 ns/op [Average]
  (min, avg, max) = (13.347, 13.356, 13.373), stdev = 0.014
  CI (99.9%): [13.094, 13.619] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 29.65% complete, ETA 00:20:30
# Fork: 1 of 1
# Warmup Iteration   1: 924.720 ns/op
# Warmup Iteration   2: 473.130 ns/op
# Warmup Iteration   3: 342.594 ns/op
Iteration   1: 342.696 ns/op
Iteration   2: 342.597 ns/op
Iteration   3: 342.656 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  342.650 ±(99.9%) 0.909 ns/op [Average]
  (min, avg, max) = (342.597, 342.650, 342.696), stdev = 0.050
  CI (99.9%): [341.741, 343.559] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 29.72% complete, ETA 00:20:29
# Fork: 1 of 1
# Warmup Iteration   1: 639.284 ns/op
# Warmup Iteration   2: 576.306 ns/op
# Warmup Iteration   3: 400.423 ns/op
Iteration   1: 399.923 ns/op
Iteration   2: 400.146 ns/op
Iteration   3: 400.112 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  400.060 ±(99.9%) 2.194 ns/op [Average]
  (min, avg, max) = (399.923, 400.060, 400.146), stdev = 0.120
  CI (99.9%): [397.867, 402.254] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 29.79% complete, ETA 00:20:28
# Fork: 1 of 1
# Warmup Iteration   1: 2676.992 ns/op
# Warmup Iteration   2: 505.378 ns/op
# Warmup Iteration   3: 331.375 ns/op
Iteration   1: 330.989 ns/op
Iteration   2: 330.689 ns/op
Iteration   3: 331.043 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  330.907 ±(99.9%) 3.482 ns/op [Average]
  (min, avg, max) = (330.689, 330.907, 331.043), stdev = 0.191
  CI (99.9%): [327.425, 334.389] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 29.86% complete, ETA 00:20:26
# Fork: 1 of 1
# Warmup Iteration   1: 477.675 ns/op
# Warmup Iteration   2: 396.816 ns/op
# Warmup Iteration   3: 301.667 ns/op
Iteration   1: 301.695 ns/op
Iteration   2: 302.407 ns/op
Iteration   3: 302.030 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  302.044 ±(99.9%) 6.502 ns/op [Average]
  (min, avg, max) = (301.695, 302.044, 302.407), stdev = 0.356
  CI (99.9%): [295.541, 308.546] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 29.93% complete, ETA 00:20:25
# Fork: 1 of 1
# Warmup Iteration   1: 1280.217 ns/op
# Warmup Iteration   2: 665.930 ns/op
# Warmup Iteration   3: 442.304 ns/op
Iteration   1: 441.845 ns/op
Iteration   2: 442.105 ns/op
Iteration   3: 440.529 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  441.493 ±(99.9%) 15.414 ns/op [Average]
  (min, avg, max) = (440.529, 441.493, 442.105), stdev = 0.845
  CI (99.9%): [426.080, 456.907] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 30.00% complete, ETA 00:20:24
# Fork: 1 of 1
# Warmup Iteration   1: 18.198 ns/op
# Warmup Iteration   2: 23.817 ns/op
# Warmup Iteration   3: 13.627 ns/op
Iteration   1: 13.616 ns/op
Iteration   2: 13.633 ns/op
Iteration   3: 13.617 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.622 ±(99.9%) 0.171 ns/op [Average]
  (min, avg, max) = (13.616, 13.622, 13.633), stdev = 0.009
  CI (99.9%): [13.451, 13.793] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 30.07% complete, ETA 00:20:23
# Fork: 1 of 1
# Warmup Iteration   1: 1449.042 ns/op
# Warmup Iteration   2: 515.893 ns/op
# Warmup Iteration   3: 360.095 ns/op
Iteration   1: 358.336 ns/op
Iteration   2: 362.009 ns/op
Iteration   3: 358.839 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  359.728 ±(99.9%) 36.324 ns/op [Average]
  (min, avg, max) = (358.336, 359.728, 362.009), stdev = 1.991
  CI (99.9%): [323.404, 396.052] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 30.14% complete, ETA 00:20:21
# Fork: 1 of 1
# Warmup Iteration   1: 604.294 ns/op
# Warmup Iteration   2: 628.638 ns/op
# Warmup Iteration   3: 421.774 ns/op
Iteration   1: 422.549 ns/op
Iteration   2: 424.242 ns/op
Iteration   3: 421.126 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  422.639 ±(99.9%) 28.455 ns/op [Average]
  (min, avg, max) = (421.126, 422.639, 424.242), stdev = 1.560
  CI (99.9%): [394.184, 451.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 30.21% complete, ETA 00:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 10558.991 ns/op
# Warmup Iteration   2: 531.632 ns/op
# Warmup Iteration   3: 415.149 ns/op
Iteration   1: 371.966 ns/op
Iteration   2: 371.909 ns/op
Iteration   3: 371.708 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  371.861 ±(99.9%) 2.464 ns/op [Average]
  (min, avg, max) = (371.708, 371.861, 371.966), stdev = 0.135
  CI (99.9%): [369.397, 374.325] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 30.28% complete, ETA 00:20:19
# Fork: 1 of 1
# Warmup Iteration   1: 581.105 ns/op
# Warmup Iteration   2: 468.520 ns/op
# Warmup Iteration   3: 325.360 ns/op
Iteration   1: 325.971 ns/op
Iteration   2: 327.158 ns/op
Iteration   3: 325.801 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  326.310 ±(99.9%) 13.492 ns/op [Average]
  (min, avg, max) = (325.801, 326.310, 327.158), stdev = 0.740
  CI (99.9%): [312.818, 339.802] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 30.35% complete, ETA 00:20:18
# Fork: 1 of 1
# Warmup Iteration   1: 3231.706 ns/op
# Warmup Iteration   2: 2333.984 ns/op
# Warmup Iteration   3: 1609.911 ns/op
Iteration   1: 1611.528 ns/op
Iteration   2: 1608.947 ns/op
Iteration   3: 1608.800 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1609.758 ±(99.9%) 27.992 ns/op [Average]
  (min, avg, max) = (1608.800, 1609.758, 1611.528), stdev = 1.534
  CI (99.9%): [1581.766, 1637.750] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 30.42% complete, ETA 00:20:17
# Fork: 1 of 1
# Warmup Iteration   1: 18.830 ns/op
# Warmup Iteration   2: 23.879 ns/op
# Warmup Iteration   3: 13.369 ns/op
Iteration   1: 13.346 ns/op
Iteration   2: 13.363 ns/op
Iteration   3: 13.365 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.192 ns/op [Average]
  (min, avg, max) = (13.346, 13.358, 13.365), stdev = 0.011
  CI (99.9%): [13.165, 13.550] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 30.49% complete, ETA 00:20:15
# Fork: 1 of 1
# Warmup Iteration   1: 277.118 ns/op
# Warmup Iteration   2: 211.469 ns/op
# Warmup Iteration   3: 148.601 ns/op
Iteration   1: 148.436 ns/op
Iteration   2: 148.664 ns/op
Iteration   3: 148.534 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  148.545 ±(99.9%) 2.087 ns/op [Average]
  (min, avg, max) = (148.436, 148.545, 148.664), stdev = 0.114
  CI (99.9%): [146.457, 150.632] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 30.56% complete, ETA 00:20:14
# Fork: 1 of 1
# Warmup Iteration   1: 300.217 ns/op
# Warmup Iteration   2: 291.077 ns/op
# Warmup Iteration   3: 207.217 ns/op
Iteration   1: 207.177 ns/op
Iteration   2: 207.086 ns/op
Iteration   3: 207.147 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  207.137 ±(99.9%) 0.838 ns/op [Average]
  (min, avg, max) = (207.086, 207.137, 207.177), stdev = 0.046
  CI (99.9%): [206.299, 207.974] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 30.63% complete, ETA 00:20:13
# Fork: 1 of 1
# Warmup Iteration   1: 466.222 ns/op
# Warmup Iteration   2: 323.504 ns/op
# Warmup Iteration   3: 226.508 ns/op
Iteration   1: 226.669 ns/op
Iteration   2: 226.751 ns/op
Iteration   3: 226.453 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  226.624 ±(99.9%) 2.816 ns/op [Average]
  (min, avg, max) = (226.453, 226.624, 226.751), stdev = 0.154
  CI (99.9%): [223.809, 229.440] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 30.69% complete, ETA 00:20:12
# Fork: 1 of 1
# Warmup Iteration   1: 245.564 ns/op
# Warmup Iteration   2: 228.041 ns/op
# Warmup Iteration   3: 160.118 ns/op
Iteration   1: 160.080 ns/op
Iteration   2: 160.117 ns/op
Iteration   3: 160.085 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  160.094 ±(99.9%) 0.366 ns/op [Average]
  (min, avg, max) = (160.080, 160.094, 160.117), stdev = 0.020
  CI (99.9%): [159.727, 160.460] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 30.76% complete, ETA 00:20:10
# Fork: 1 of 1
# Warmup Iteration   1: 214.468 ns/op
# Warmup Iteration   2: 224.341 ns/op
# Warmup Iteration   3: 114.584 ns/op
Iteration   1: 114.562 ns/op
Iteration   2: 114.460 ns/op
Iteration   3: 114.314 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.445 ±(99.9%) 2.274 ns/op [Average]
  (min, avg, max) = (114.314, 114.445, 114.562), stdev = 0.125
  CI (99.9%): [112.171, 116.719] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 30.83% complete, ETA 00:20:09
# Fork: 1 of 1
# Warmup Iteration   1: 19.170 ns/op
# Warmup Iteration   2: 20.464 ns/op
# Warmup Iteration   3: 13.358 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.364 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.089 ns/op [Average]
  (min, avg, max) = (13.355, 13.358, 13.364), stdev = 0.005
  CI (99.9%): [13.269, 13.448] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 30.90% complete, ETA 00:20:08
# Fork: 1 of 1
# Warmup Iteration   1: 755.343 ns/op
# Warmup Iteration   2: 303.313 ns/op
# Warmup Iteration   3: 236.643 ns/op
Iteration   1: 237.952 ns/op
Iteration   2: 237.704 ns/op
Iteration   3: 236.809 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.488 ±(99.9%) 10.967 ns/op [Average]
  (min, avg, max) = (236.809, 237.488, 237.952), stdev = 0.601
  CI (99.9%): [226.521, 248.456] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 30.97% complete, ETA 00:20:07
# Fork: 1 of 1
# Warmup Iteration   1: 401.255 ns/op
# Warmup Iteration   2: 393.961 ns/op
# Warmup Iteration   3: 283.059 ns/op
Iteration   1: 283.904 ns/op
Iteration   2: 283.172 ns/op
Iteration   3: 283.151 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  283.409 ±(99.9%) 7.830 ns/op [Average]
  (min, avg, max) = (283.151, 283.409, 283.904), stdev = 0.429
  CI (99.9%): [275.579, 291.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 31.04% complete, ETA 00:20:06
# Fork: 1 of 1
# Warmup Iteration   1: 11336.952 ns/op
# Warmup Iteration   2: 415.710 ns/op
# Warmup Iteration   3: 284.653 ns/op
Iteration   1: 284.495 ns/op
Iteration   2: 284.958 ns/op
Iteration   3: 284.467 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.640 ±(99.9%) 5.032 ns/op [Average]
  (min, avg, max) = (284.467, 284.640, 284.958), stdev = 0.276
  CI (99.9%): [279.608, 289.672] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 31.11% complete, ETA 00:20:04
# Fork: 1 of 1
# Warmup Iteration   1: 397.615 ns/op
# Warmup Iteration   2: 324.715 ns/op
# Warmup Iteration   3: 225.054 ns/op
Iteration   1: 224.838 ns/op
Iteration   2: 224.686 ns/op
Iteration   3: 224.929 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  224.818 ±(99.9%) 2.244 ns/op [Average]
  (min, avg, max) = (224.686, 224.818, 224.929), stdev = 0.123
  CI (99.9%): [222.574, 227.062] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 31.18% complete, ETA 00:20:03
# Fork: 1 of 1
# Warmup Iteration   1: 996.994 ns/op
# Warmup Iteration   2: 584.570 ns/op
# Warmup Iteration   3: 408.663 ns/op
Iteration   1: 405.803 ns/op
Iteration   2: 408.317 ns/op
Iteration   3: 406.646 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  406.922 ±(99.9%) 23.346 ns/op [Average]
  (min, avg, max) = (405.803, 406.922, 408.317), stdev = 1.280
  CI (99.9%): [383.576, 430.268] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 31.25% complete, ETA 00:20:02
# Fork: 1 of 1
# Warmup Iteration   1: 18.921 ns/op
# Warmup Iteration   2: 21.116 ns/op
# Warmup Iteration   3: 13.365 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.371 ns/op
Iteration   3: 13.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.355 ±(99.9%) 0.251 ns/op [Average]
  (min, avg, max) = (13.347, 13.355, 13.371), stdev = 0.014
  CI (99.9%): [13.104, 13.607] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 31.32% complete, ETA 00:20:01
# Fork: 1 of 1
# Warmup Iteration   1: 739.301 ns/op
# Warmup Iteration   2: 428.739 ns/op
# Warmup Iteration   3: 302.401 ns/op
Iteration   1: 302.962 ns/op
Iteration   2: 302.798 ns/op
Iteration   3: 303.238 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  302.999 ±(99.9%) 4.055 ns/op [Average]
  (min, avg, max) = (302.798, 302.999, 303.238), stdev = 0.222
  CI (99.9%): [298.944, 307.054] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 31.39% complete, ETA 00:19:59
# Fork: 1 of 1
# Warmup Iteration   1: 533.627 ns/op
# Warmup Iteration   2: 481.743 ns/op
# Warmup Iteration   3: 357.125 ns/op
Iteration   1: 357.073 ns/op
Iteration   2: 357.178 ns/op
Iteration   3: 357.017 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  357.089 ±(99.9%) 1.493 ns/op [Average]
  (min, avg, max) = (357.017, 357.089, 357.178), stdev = 0.082
  CI (99.9%): [355.596, 358.583] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 31.46% complete, ETA 00:19:58
# Fork: 1 of 1
# Warmup Iteration   1: 24765.471 ns/op
# Warmup Iteration   2: 484.387 ns/op
# Warmup Iteration   3: 338.944 ns/op
Iteration   1: 307.163 ns/op
Iteration   2: 307.068 ns/op
Iteration   3: 307.201 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  307.144 ±(99.9%) 1.250 ns/op [Average]
  (min, avg, max) = (307.068, 307.144, 307.201), stdev = 0.069
  CI (99.9%): [305.894, 308.394] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 31.53% complete, ETA 00:19:57
# Fork: 1 of 1
# Warmup Iteration   1: 493.669 ns/op
# Warmup Iteration   2: 411.590 ns/op
# Warmup Iteration   3: 301.766 ns/op
Iteration   1: 302.147 ns/op
Iteration   2: 302.548 ns/op
Iteration   3: 302.360 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  302.352 ±(99.9%) 3.661 ns/op [Average]
  (min, avg, max) = (302.147, 302.352, 302.548), stdev = 0.201
  CI (99.9%): [298.691, 306.012] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 31.60% complete, ETA 00:19:56
# Fork: 1 of 1
# Warmup Iteration   1: 2865.635 ns/op
# Warmup Iteration   2: 2246.217 ns/op
# Warmup Iteration   3: 1500.378 ns/op
Iteration   1: 1499.024 ns/op
Iteration   2: 1498.753 ns/op
Iteration   3: 1498.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1498.871 ±(99.9%) 2.530 ns/op [Average]
  (min, avg, max) = (1498.753, 1498.871, 1499.024), stdev = 0.139
  CI (99.9%): [1496.341, 1501.402] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 31.67% complete, ETA 00:19:55
# Fork: 1 of 1
# Warmup Iteration   1: 18.220 ns/op
# Warmup Iteration   2: 23.970 ns/op
# Warmup Iteration   3: 13.366 ns/op
Iteration   1: 13.358 ns/op
Iteration   2: 13.365 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.360 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (13.355, 13.360, 13.365), stdev = 0.005
  CI (99.9%): [13.265, 13.454] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 31.74% complete, ETA 00:19:53
# Fork: 1 of 1
# Warmup Iteration   1: 1103.875 ns/op
# Warmup Iteration   2: 431.237 ns/op
# Warmup Iteration   3: 294.198 ns/op
Iteration   1: 293.803 ns/op
Iteration   2: 293.942 ns/op
Iteration   3: 294.205 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  293.984 ±(99.9%) 3.727 ns/op [Average]
  (min, avg, max) = (293.803, 293.984, 294.205), stdev = 0.204
  CI (99.9%): [290.257, 297.710] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 31.81% complete, ETA 00:19:52
# Fork: 1 of 1
# Warmup Iteration   1: 545.784 ns/op
# Warmup Iteration   2: 486.412 ns/op
# Warmup Iteration   3: 345.512 ns/op
Iteration   1: 345.419 ns/op
Iteration   2: 345.304 ns/op
Iteration   3: 345.395 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  345.373 ±(99.9%) 1.105 ns/op [Average]
  (min, avg, max) = (345.304, 345.373, 345.419), stdev = 0.061
  CI (99.9%): [344.268, 346.478] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 31.87% complete, ETA 00:19:51
# Fork: 1 of 1
# Warmup Iteration   1: 4604.652 ns/op
# Warmup Iteration   2: 410.783 ns/op
# Warmup Iteration   3: 335.918 ns/op
Iteration   1: 335.937 ns/op
Iteration   2: 335.806 ns/op
Iteration   3: 335.580 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.775 ±(99.9%) 3.290 ns/op [Average]
  (min, avg, max) = (335.580, 335.775, 335.937), stdev = 0.180
  CI (99.9%): [332.485, 339.064] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 31.94% complete, ETA 00:19:50
# Fork: 1 of 1
# Warmup Iteration   1: 386.627 ns/op
# Warmup Iteration   2: 333.167 ns/op
# Warmup Iteration   3: 240.010 ns/op
Iteration   1: 240.052 ns/op
Iteration   2: 239.980 ns/op
Iteration   3: 240.021 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  240.018 ±(99.9%) 0.652 ns/op [Average]
  (min, avg, max) = (239.980, 240.018, 240.052), stdev = 0.036
  CI (99.9%): [239.366, 240.669] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 32.01% complete, ETA 00:19:48
# Fork: 1 of 1
# Warmup Iteration   1: 1100.090 ns/op
# Warmup Iteration   2: 620.557 ns/op
# Warmup Iteration   3: 467.238 ns/op
Iteration   1: 467.336 ns/op
Iteration   2: 467.114 ns/op
Iteration   3: 467.110 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  467.187 ±(99.9%) 2.366 ns/op [Average]
  (min, avg, max) = (467.110, 467.187, 467.336), stdev = 0.130
  CI (99.9%): [464.821, 469.553] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 32.08% complete, ETA 00:19:47
# Fork: 1 of 1
# Warmup Iteration   1: 19.238 ns/op
# Warmup Iteration   2: 24.064 ns/op
# Warmup Iteration   3: 13.370 ns/op
Iteration   1: 13.346 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.346 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.351 ±(99.9%) 0.175 ns/op [Average]
  (min, avg, max) = (13.346, 13.351, 13.362), stdev = 0.010
  CI (99.9%): [13.176, 13.526] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 32.15% complete, ETA 00:19:46
# Fork: 1 of 1
# Warmup Iteration   1: 4109.557 ns/op
# Warmup Iteration   2: 480.214 ns/op
# Warmup Iteration   3: 334.389 ns/op
Iteration   1: 334.384 ns/op
Iteration   2: 338.513 ns/op
Iteration   3: 334.083 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.660 ±(99.9%) 45.156 ns/op [Average]
  (min, avg, max) = (334.083, 335.660, 338.513), stdev = 2.475
  CI (99.9%): [290.505, 380.816] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 32.22% complete, ETA 00:19:45
# Fork: 1 of 1
# Warmup Iteration   1: 617.490 ns/op
# Warmup Iteration   2: 623.242 ns/op
# Warmup Iteration   3: 432.142 ns/op
Iteration   1: 429.831 ns/op
Iteration   2: 435.810 ns/op
Iteration   3: 428.923 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  431.521 ±(99.9%) 68.262 ns/op [Average]
  (min, avg, max) = (428.923, 431.521, 435.810), stdev = 3.742
  CI (99.9%): [363.259, 499.783] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 32.29% complete, ETA 00:19:44
# Fork: 1 of 1
# Warmup Iteration   1: 12116.512 ns/op
# Warmup Iteration   2: 635.604 ns/op
# Warmup Iteration   3: 465.836 ns/op
Iteration   1: 420.230 ns/op
Iteration   2: 422.659 ns/op
Iteration   3: 422.486 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  421.792 ±(99.9%) 24.718 ns/op [Average]
  (min, avg, max) = (420.230, 421.792, 422.659), stdev = 1.355
  CI (99.9%): [397.073, 446.510] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 32.36% complete, ETA 00:19:42
# Fork: 1 of 1
# Warmup Iteration   1: 562.394 ns/op
# Warmup Iteration   2: 487.449 ns/op
# Warmup Iteration   3: 340.332 ns/op
Iteration   1: 340.539 ns/op
Iteration   2: 341.496 ns/op
Iteration   3: 343.547 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  341.861 ±(99.9%) 28.042 ns/op [Average]
  (min, avg, max) = (340.539, 341.861, 343.547), stdev = 1.537
  CI (99.9%): [313.819, 369.902] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 32.43% complete, ETA 00:19:41
# Fork: 1 of 1
# Warmup Iteration   1: 3495.757 ns/op
# Warmup Iteration   2: 2211.855 ns/op
# Warmup Iteration   3: 1627.894 ns/op
Iteration   1: 1623.276 ns/op
Iteration   2: 1620.514 ns/op
Iteration   3: 1618.164 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1620.651 ±(99.9%) 46.677 ns/op [Average]
  (min, avg, max) = (1618.164, 1620.651, 1623.276), stdev = 2.559
  CI (99.9%): [1573.974, 1667.328] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 32.50% complete, ETA 00:19:40
# Fork: 1 of 1
# Warmup Iteration   1: 18.097 ns/op
# Warmup Iteration   2: 20.636 ns/op
# Warmup Iteration   3: 13.368 ns/op
Iteration   1: 13.355 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.361 ±(99.9%) 0.187 ns/op [Average]
  (min, avg, max) = (13.355, 13.361, 13.373), stdev = 0.010
  CI (99.9%): [13.174, 13.548] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 32.57% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 116.035 ns/op
# Warmup Iteration   2: 99.824 ns/op
# Warmup Iteration   3: 67.877 ns/op
Iteration   1: 67.856 ns/op
Iteration   2: 67.860 ns/op
Iteration   3: 68.004 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  67.907 ±(99.9%) 1.538 ns/op [Average]
  (min, avg, max) = (67.856, 67.907, 68.004), stdev = 0.084
  CI (99.9%): [66.369, 69.445] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 32.64% complete, ETA 00:19:37
# Fork: 1 of 1
# Warmup Iteration   1: 64.814 ns/op
# Warmup Iteration   2: 70.543 ns/op
# Warmup Iteration   3: 44.031 ns/op
Iteration   1: 44.044 ns/op
Iteration   2: 44.045 ns/op
Iteration   3: 44.044 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.044 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (44.044, 44.044, 44.045), stdev = 0.001
  CI (99.9%): [44.028, 44.061] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 32.71% complete, ETA 00:19:36
# Fork: 1 of 1
# Warmup Iteration   1: 3763.872 ns/op
# Warmup Iteration   2: 98.381 ns/op
# Warmup Iteration   3: 75.153 ns/op
Iteration   1: 75.121 ns/op
Iteration   2: 75.064 ns/op
Iteration   3: 75.123 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  75.103 ±(99.9%) 0.609 ns/op [Average]
  (min, avg, max) = (75.064, 75.103, 75.123), stdev = 0.033
  CI (99.9%): [74.494, 75.711] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 32.78% complete, ETA 00:19:35
# Fork: 1 of 1
# Warmup Iteration   1: 66.758 ns/op
# Warmup Iteration   2: 74.617 ns/op
# Warmup Iteration   3: 46.443 ns/op
Iteration   1: 46.435 ns/op
Iteration   2: 46.575 ns/op
Iteration   3: 46.445 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.485 ±(99.9%) 1.427 ns/op [Average]
  (min, avg, max) = (46.435, 46.485, 46.575), stdev = 0.078
  CI (99.9%): [45.058, 47.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 32.85% complete, ETA 00:19:34
# Fork: 1 of 1
# Warmup Iteration   1: 176.687 ns/op
# Warmup Iteration   2: 179.729 ns/op
# Warmup Iteration   3: 97.773 ns/op
Iteration   1: 97.754 ns/op
Iteration   2: 97.748 ns/op
Iteration   3: 97.745 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.749 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (97.745, 97.749, 97.754), stdev = 0.005
  CI (99.9%): [97.665, 97.833] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 32.92% complete, ETA 00:19:32
# Fork: 1 of 1
# Warmup Iteration   1: 19.149 ns/op
# Warmup Iteration   2: 23.276 ns/op
# Warmup Iteration   3: 13.374 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.385 ns/op
Iteration   3: 13.367 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.367 ±(99.9%) 0.342 ns/op [Average]
  (min, avg, max) = (13.348, 13.367, 13.385), stdev = 0.019
  CI (99.9%): [13.025, 13.709] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 32.99% complete, ETA 00:19:31
# Fork: 1 of 1
# Warmup Iteration   1: 867.484 ns/op
# Warmup Iteration   2: 349.469 ns/op
# Warmup Iteration   3: 243.856 ns/op
Iteration   1: 243.539 ns/op
Iteration   2: 243.881 ns/op
Iteration   3: 243.811 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  243.744 ±(99.9%) 3.302 ns/op [Average]
  (min, avg, max) = (243.539, 243.744, 243.881), stdev = 0.181
  CI (99.9%): [240.442, 247.046] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 33.06% complete, ETA 00:19:30
# Fork: 1 of 1
# Warmup Iteration   1: 413.006 ns/op
# Warmup Iteration   2: 435.873 ns/op
# Warmup Iteration   3: 285.164 ns/op
Iteration   1: 283.216 ns/op
Iteration   2: 283.742 ns/op
Iteration   3: 283.893 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  283.617 ±(99.9%) 6.487 ns/op [Average]
  (min, avg, max) = (283.216, 283.617, 283.893), stdev = 0.356
  CI (99.9%): [277.130, 290.104] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 33.13% complete, ETA 00:19:29
# Fork: 1 of 1
# Warmup Iteration   1: 11403.494 ns/op
# Warmup Iteration   2: 421.199 ns/op
# Warmup Iteration   3: 284.245 ns/op
Iteration   1: 283.590 ns/op
Iteration   2: 283.787 ns/op
Iteration   3: 283.589 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  283.655 ±(99.9%) 2.078 ns/op [Average]
  (min, avg, max) = (283.589, 283.655, 283.787), stdev = 0.114
  CI (99.9%): [281.578, 285.733] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 33.19% complete, ETA 00:19:28
# Fork: 1 of 1
# Warmup Iteration   1: 315.286 ns/op
# Warmup Iteration   2: 300.951 ns/op
# Warmup Iteration   3: 194.570 ns/op
Iteration   1: 193.259 ns/op
Iteration   2: 193.204 ns/op
Iteration   3: 193.943 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  193.469 ±(99.9%) 7.515 ns/op [Average]
  (min, avg, max) = (193.204, 193.469, 193.943), stdev = 0.412
  CI (99.9%): [185.954, 200.983] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 33.26% complete, ETA 00:19:26
# Fork: 1 of 1
# Warmup Iteration   1: 1049.559 ns/op
# Warmup Iteration   2: 635.875 ns/op
# Warmup Iteration   3: 414.555 ns/op
Iteration   1: 416.402 ns/op
Iteration   2: 415.028 ns/op
Iteration   3: 412.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  414.769 ±(99.9%) 32.396 ns/op [Average]
  (min, avg, max) = (412.879, 414.769, 416.402), stdev = 1.776
  CI (99.9%): [382.374, 447.165] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 33.33% complete, ETA 00:19:25
# Fork: 1 of 1
# Warmup Iteration   1: 18.678 ns/op
# Warmup Iteration   2: 23.364 ns/op
# Warmup Iteration   3: 13.350 ns/op
Iteration   1: 13.349 ns/op
Iteration   2: 17.727 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.808 ±(99.9%) 46.125 ns/op [Average]
  (min, avg, max) = (13.347, 14.808, 17.727), stdev = 2.528
  CI (99.9%): [≈ 0, 60.932] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 33.40% complete, ETA 00:19:24
# Fork: 1 of 1
# Warmup Iteration   1: 166.692 ns/op
# Warmup Iteration   2: 138.096 ns/op
# Warmup Iteration   3: 89.451 ns/op
Iteration   1: 89.188 ns/op
Iteration   2: 117.970 ns/op
Iteration   3: 89.080 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  98.746 ±(99.9%) 303.733 ns/op [Average]
  (min, avg, max) = (89.080, 98.746, 117.970), stdev = 16.649
  CI (99.9%): [≈ 0, 402.480] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 33.47% complete, ETA 00:19:23
# Fork: 1 of 1
# Warmup Iteration   1: 66.303 ns/op
# Warmup Iteration   2: 67.948 ns/op
# Warmup Iteration   3: 44.082 ns/op
Iteration   1: 44.078 ns/op
Iteration   2: 55.645 ns/op
Iteration   3: 44.069 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.930 ±(99.9%) 121.884 ns/op [Average]
  (min, avg, max) = (44.069, 47.930, 55.645), stdev = 6.681
  CI (99.9%): [≈ 0, 169.814] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 33.54% complete, ETA 00:19:22
# Fork: 1 of 1
# Warmup Iteration   1: 274.782 ns/op
# Warmup Iteration   2: 163.732 ns/op
# Warmup Iteration   3: 106.072 ns/op
Iteration   1: 106.038 ns/op
Iteration   2: 127.213 ns/op
Iteration   3: 106.097 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  113.116 ±(99.9%) 222.727 ns/op [Average]
  (min, avg, max) = (106.038, 113.116, 127.213), stdev = 12.208
  CI (99.9%): [≈ 0, 335.843] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 33.61% complete, ETA 00:19:20
# Fork: 1 of 1
# Warmup Iteration   1: 69.790 ns/op
# Warmup Iteration   2: 75.036 ns/op
# Warmup Iteration   3: 46.414 ns/op
Iteration   1: 46.384 ns/op
Iteration   2: 61.546 ns/op
Iteration   3: 46.393 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.441 ±(99.9%) 159.655 ns/op [Average]
  (min, avg, max) = (46.384, 51.441, 61.546), stdev = 8.751
  CI (99.9%): [≈ 0, 211.097] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 33.68% complete, ETA 00:19:19
# Fork: 1 of 1
# Warmup Iteration   1: 173.821 ns/op
# Warmup Iteration   2: 175.533 ns/op
# Warmup Iteration   3: 124.152 ns/op
Iteration   1: 124.128 ns/op
Iteration   2: 156.236 ns/op
Iteration   3: 124.101 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  134.822 ±(99.9%) 338.339 ns/op [Average]
  (min, avg, max) = (124.101, 134.822, 156.236), stdev = 18.546
  CI (99.9%): [≈ 0, 473.161] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 33.75% complete, ETA 00:19:18
# Fork: 1 of 1
# Warmup Iteration   1: 18.672 ns/op
# Warmup Iteration   2: 20.936 ns/op
# Warmup Iteration   3: 13.352 ns/op
Iteration   1: 13.390 ns/op
Iteration   2: 15.597 ns/op
Iteration   3: 13.362 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.116 ±(99.9%) 23.393 ns/op [Average]
  (min, avg, max) = (13.362, 14.116, 15.597), stdev = 1.282
  CI (99.9%): [≈ 0, 37.509] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 33.82% complete, ETA 00:19:17
# Fork: 1 of 1
# Warmup Iteration   1: 148.850 ns/op
# Warmup Iteration   2: 132.846 ns/op
# Warmup Iteration   3: 89.272 ns/op
Iteration   1: 89.293 ns/op
Iteration   2: 107.625 ns/op
Iteration   3: 89.282 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.400 ±(99.9%) 193.143 ns/op [Average]
  (min, avg, max) = (89.282, 95.400, 107.625), stdev = 10.587
  CI (99.9%): [≈ 0, 288.543] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 33.89% complete, ETA 00:19:16
# Fork: 1 of 1
# Warmup Iteration   1: 66.542 ns/op
# Warmup Iteration   2: 76.314 ns/op
# Warmup Iteration   3: 44.104 ns/op
Iteration   1: 44.057 ns/op
Iteration   2: 55.618 ns/op
Iteration   3: 44.074 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.916 ±(99.9%) 121.689 ns/op [Average]
  (min, avg, max) = (44.057, 47.916, 55.618), stdev = 6.670
  CI (99.9%): [≈ 0, 169.605] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 33.96% complete, ETA 00:19:14
# Fork: 1 of 1
# Warmup Iteration   1: 228.810 ns/op
# Warmup Iteration   2: 168.373 ns/op
# Warmup Iteration   3: 108.546 ns/op
Iteration   1: 108.501 ns/op
Iteration   2: 136.131 ns/op
Iteration   3: 108.503 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.712 ±(99.9%) 291.013 ns/op [Average]
  (min, avg, max) = (108.501, 117.712, 136.131), stdev = 15.951
  CI (99.9%): [≈ 0, 408.724] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 34.03% complete, ETA 00:19:13
# Fork: 1 of 1
# Warmup Iteration   1: 66.343 ns/op
# Warmup Iteration   2: 71.639 ns/op
# Warmup Iteration   3: 46.413 ns/op
Iteration   1: 46.414 ns/op
Iteration   2: 58.211 ns/op
Iteration   3: 46.378 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  50.334 ±(99.9%) 124.448 ns/op [Average]
  (min, avg, max) = (46.378, 50.334, 58.211), stdev = 6.821
  CI (99.9%): [≈ 0, 174.783] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 34.10% complete, ETA 00:19:12
# Fork: 1 of 1
# Warmup Iteration   1: 210.798 ns/op
# Warmup Iteration   2: 191.176 ns/op
# Warmup Iteration   3: 128.632 ns/op
Iteration   1: 128.586 ns/op
Iteration   2: 149.016 ns/op
Iteration   3: 128.646 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  135.416 ±(99.9%) 214.876 ns/op [Average]
  (min, avg, max) = (128.586, 135.416, 149.016), stdev = 11.778
  CI (99.9%): [≈ 0, 350.292] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 34.17% complete, ETA 00:19:11
# Fork: 1 of 1
# Warmup Iteration   1: 18.555 ns/op
# Warmup Iteration   2: 23.758 ns/op
# Warmup Iteration   3: 13.366 ns/op
Iteration   1: 17.797 ns/op
Iteration   2: 13.356 ns/op
Iteration   3: 13.364 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.839 ±(99.9%) 46.732 ns/op [Average]
  (min, avg, max) = (13.356, 14.839, 17.797), stdev = 2.562
  CI (99.9%): [≈ 0, 61.572] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 34.24% complete, ETA 00:19:10
# Fork: 1 of 1
# Warmup Iteration   1: 257.425 ns/op
# Warmup Iteration   2: 151.824 ns/op
# Warmup Iteration   3: 107.387 ns/op
Iteration   1: 136.919 ns/op
Iteration   2: 107.579 ns/op
Iteration   3: 107.397 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.298 ±(99.9%) 310.000 ns/op [Average]
  (min, avg, max) = (107.397, 117.298, 136.919), stdev = 16.992
  CI (99.9%): [≈ 0, 427.299] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 34.31% complete, ETA 00:19:08
# Fork: 1 of 1
# Warmup Iteration   1: 64.784 ns/op
# Warmup Iteration   2: 67.297 ns/op
# Warmup Iteration   3: 44.082 ns/op
Iteration   1: 60.772 ns/op
Iteration   2: 44.078 ns/op
Iteration   3: 44.085 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  49.645 ±(99.9%) 175.802 ns/op [Average]
  (min, avg, max) = (44.078, 49.645, 60.772), stdev = 9.636
  CI (99.9%): [≈ 0, 225.448] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 34.38% complete, ETA 00:19:07
# Fork: 1 of 1
# Warmup Iteration   1: 211.814 ns/op
# Warmup Iteration   2: 163.013 ns/op
# Warmup Iteration   3: 108.130 ns/op
Iteration   1: 147.880 ns/op
Iteration   2: 108.099 ns/op
Iteration   3: 108.104 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.361 ±(99.9%) 418.991 ns/op [Average]
  (min, avg, max) = (108.099, 121.361, 147.880), stdev = 22.966
  CI (99.9%): [≈ 0, 540.352] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 34.44% complete, ETA 00:19:06
# Fork: 1 of 1
# Warmup Iteration   1: 67.987 ns/op
# Warmup Iteration   2: 75.122 ns/op
# Warmup Iteration   3: 46.385 ns/op
Iteration   1: 63.967 ns/op
Iteration   2: 46.393 ns/op
Iteration   3: 46.380 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  52.247 ±(99.9%) 185.176 ns/op [Average]
  (min, avg, max) = (46.380, 52.247, 63.967), stdev = 10.150
  CI (99.9%): [≈ 0, 237.422] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 34.51% complete, ETA 00:19:05
# Fork: 1 of 1
# Warmup Iteration   1: 192.165 ns/op
# Warmup Iteration   2: 179.573 ns/op
# Warmup Iteration   3: 118.814 ns/op
Iteration   1: 163.639 ns/op
Iteration   2: 118.742 ns/op
Iteration   3: 118.803 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  133.728 ±(99.9%) 472.573 ns/op [Average]
  (min, avg, max) = (118.742, 133.728, 163.639), stdev = 25.903
  CI (99.9%): [≈ 0, 606.301] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 34.58% complete, ETA 00:19:04
# Fork: 1 of 1
# Warmup Iteration   1: 22.470 ns/op
# Warmup Iteration   2: 26.473 ns/op
# Warmup Iteration   3: 15.506 ns/op
Iteration   1: 15.505 ns/op
Iteration   2: 15.505 ns/op
Iteration   3: 15.502 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  15.504 ±(99.9%) 0.030 ns/op [Average]
  (min, avg, max) = (15.502, 15.504, 15.505), stdev = 0.002
  CI (99.9%): [15.474, 15.534] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 34.65% complete, ETA 00:19:02
# Fork: 1 of 1
# Warmup Iteration   1: 103.030 ns/op
# Warmup Iteration   2: 100.461 ns/op
# Warmup Iteration   3: 67.867 ns/op
Iteration   1: 67.844 ns/op
Iteration   2: 67.818 ns/op
Iteration   3: 67.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  67.833 ±(99.9%) 0.244 ns/op [Average]
  (min, avg, max) = (67.818, 67.833, 67.844), stdev = 0.013
  CI (99.9%): [67.589, 68.076] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 34.72% complete, ETA 00:19:01
# Fork: 1 of 1
# Warmup Iteration   1: 64.473 ns/op
# Warmup Iteration   2: 70.485 ns/op
# Warmup Iteration   3: 44.098 ns/op
Iteration   1: 44.073 ns/op
Iteration   2: 44.094 ns/op
Iteration   3: 44.080 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.082 ±(99.9%) 0.191 ns/op [Average]
  (min, avg, max) = (44.073, 44.082, 44.094), stdev = 0.010
  CI (99.9%): [43.891, 44.273] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 34.79% complete, ETA 00:19:00
# Fork: 1 of 1
# Warmup Iteration   1: 1097.092 ns/op
# Warmup Iteration   2: 116.140 ns/op
# Warmup Iteration   3: 75.551 ns/op
Iteration   1: 75.520 ns/op
Iteration   2: 75.525 ns/op
Iteration   3: 75.541 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  75.529 ±(99.9%) 0.201 ns/op [Average]
  (min, avg, max) = (75.520, 75.529, 75.541), stdev = 0.011
  CI (99.9%): [75.328, 75.730] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 34.86% complete, ETA 00:18:59
# Fork: 1 of 1
# Warmup Iteration   1: 67.789 ns/op
# Warmup Iteration   2: 74.083 ns/op
# Warmup Iteration   3: 46.400 ns/op
Iteration   1: 46.396 ns/op
Iteration   2: 46.389 ns/op
Iteration   3: 46.390 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.392 ±(99.9%) 0.072 ns/op [Average]
  (min, avg, max) = (46.389, 46.392, 46.396), stdev = 0.004
  CI (99.9%): [46.320, 46.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 34.93% complete, ETA 00:18:57
# Fork: 1 of 1
# Warmup Iteration   1: 173.883 ns/op
# Warmup Iteration   2: 183.777 ns/op
# Warmup Iteration   3: 123.589 ns/op
Iteration   1: 123.588 ns/op
Iteration   2: 123.562 ns/op
Iteration   3: 123.559 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  123.570 ±(99.9%) 0.297 ns/op [Average]
  (min, avg, max) = (123.559, 123.570, 123.588), stdev = 0.016
  CI (99.9%): [123.273, 123.867] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 35.00% complete, ETA 00:18:56
# Fork: 1 of 1
# Warmup Iteration   1: 17.635 ns/op
# Warmup Iteration   2: 20.609 ns/op
# Warmup Iteration   3: 13.359 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.363 ns/op
Iteration   3: 13.367 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.191 ns/op [Average]
  (min, avg, max) = (13.347, 13.359, 13.367), stdev = 0.010
  CI (99.9%): [13.169, 13.550] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 35.07% complete, ETA 00:18:55
# Fork: 1 of 1
# Warmup Iteration   1: 168.144 ns/op
# Warmup Iteration   2: 141.494 ns/op
# Warmup Iteration   3: 89.086 ns/op
Iteration   1: 89.025 ns/op
Iteration   2: 89.153 ns/op
Iteration   3: 89.072 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.083 ±(99.9%) 1.180 ns/op [Average]
  (min, avg, max) = (89.025, 89.083, 89.153), stdev = 0.065
  CI (99.9%): [87.903, 90.263] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 35.14% complete, ETA 00:18:54
# Fork: 1 of 1
# Warmup Iteration   1: 64.921 ns/op
# Warmup Iteration   2: 69.331 ns/op
# Warmup Iteration   3: 44.089 ns/op
Iteration   1: 44.089 ns/op
Iteration   2: 44.068 ns/op
Iteration   3: 44.044 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.067 ±(99.9%) 0.408 ns/op [Average]
  (min, avg, max) = (44.044, 44.067, 44.089), stdev = 0.022
  CI (99.9%): [43.659, 44.475] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 35.21% complete, ETA 00:18:53
# Fork: 1 of 1
# Warmup Iteration   1: 265.448 ns/op
# Warmup Iteration   2: 149.751 ns/op
# Warmup Iteration   3: 105.435 ns/op
Iteration   1: 105.389 ns/op
Iteration   2: 105.543 ns/op
Iteration   3: 105.271 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  105.401 ±(99.9%) 2.482 ns/op [Average]
  (min, avg, max) = (105.271, 105.401, 105.543), stdev = 0.136
  CI (99.9%): [102.919, 107.884] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 35.28% complete, ETA 00:18:51
# Fork: 1 of 1
# Warmup Iteration   1: 67.720 ns/op
# Warmup Iteration   2: 75.615 ns/op
# Warmup Iteration   3: 46.398 ns/op
Iteration   1: 46.395 ns/op
Iteration   2: 46.391 ns/op
Iteration   3: 46.400 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.395 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (46.391, 46.395, 46.400), stdev = 0.005
  CI (99.9%): [46.311, 46.480] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 35.35% complete, ETA 00:18:50
# Fork: 1 of 1
# Warmup Iteration   1: 189.962 ns/op
# Warmup Iteration   2: 149.404 ns/op
# Warmup Iteration   3: 124.897 ns/op
Iteration   1: 124.871 ns/op
Iteration   2: 124.826 ns/op
Iteration   3: 124.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  124.863 ±(99.9%) 0.607 ns/op [Average]
  (min, avg, max) = (124.826, 124.863, 124.892), stdev = 0.033
  CI (99.9%): [124.256, 125.469] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 35.42% complete, ETA 00:18:49
# Fork: 1 of 1
# Warmup Iteration   1: 19.106 ns/op
# Warmup Iteration   2: 20.205 ns/op
# Warmup Iteration   3: 13.374 ns/op
Iteration   1: 13.357 ns/op
Iteration   2: 13.388 ns/op
Iteration   3: 13.345 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.364 ±(99.9%) 0.403 ns/op [Average]
  (min, avg, max) = (13.345, 13.364, 13.388), stdev = 0.022
  CI (99.9%): [12.961, 13.767] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 35.49% complete, ETA 00:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 651.462 ns/op
# Warmup Iteration   2: 444.323 ns/op
# Warmup Iteration   3: 314.901 ns/op
Iteration   1: 314.688 ns/op
Iteration   2: 314.765 ns/op
Iteration   3: 314.681 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  314.712 ±(99.9%) 0.849 ns/op [Average]
  (min, avg, max) = (314.681, 314.712, 314.765), stdev = 0.047
  CI (99.9%): [313.863, 315.560] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 35.56% complete, ETA 00:18:46
# Fork: 1 of 1
# Warmup Iteration   1: 486.510 ns/op
# Warmup Iteration   2: 457.101 ns/op
# Warmup Iteration   3: 335.270 ns/op
Iteration   1: 335.184 ns/op
Iteration   2: 335.256 ns/op
Iteration   3: 335.180 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.207 ±(99.9%) 0.782 ns/op [Average]
  (min, avg, max) = (335.180, 335.207, 335.256), stdev = 0.043
  CI (99.9%): [334.425, 335.989] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 35.63% complete, ETA 00:18:45
# Fork: 1 of 1
# Warmup Iteration   1: 6879.040 ns/op
# Warmup Iteration   2: 511.927 ns/op
# Warmup Iteration   3: 370.817 ns/op
Iteration   1: 370.641 ns/op
Iteration   2: 370.672 ns/op
Iteration   3: 370.688 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  370.667 ±(99.9%) 0.440 ns/op [Average]
  (min, avg, max) = (370.641, 370.667, 370.688), stdev = 0.024
  CI (99.9%): [370.227, 371.107] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 35.69% complete, ETA 00:18:44
# Fork: 1 of 1
# Warmup Iteration   1: 624.221 ns/op
# Warmup Iteration   2: 447.874 ns/op
# Warmup Iteration   3: 295.213 ns/op
Iteration   1: 295.186 ns/op
Iteration   2: 294.962 ns/op
Iteration   3: 295.237 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  295.128 ±(99.9%) 2.671 ns/op [Average]
  (min, avg, max) = (294.962, 295.128, 295.237), stdev = 0.146
  CI (99.9%): [292.458, 297.799] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 35.76% complete, ETA 00:18:43
# Fork: 1 of 1
# Warmup Iteration   1: 2844.531 ns/op
# Warmup Iteration   2: 2056.282 ns/op
# Warmup Iteration   3: 1428.188 ns/op
Iteration   1: 1427.187 ns/op
Iteration   2: 1426.977 ns/op
Iteration   3: 1426.785 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1426.983 ±(99.9%) 3.664 ns/op [Average]
  (min, avg, max) = (1426.785, 1426.983, 1427.187), stdev = 0.201
  CI (99.9%): [1423.319, 1430.647] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 35.83% complete, ETA 00:18:42
# Fork: 1 of 1
# Warmup Iteration   1: 19.319 ns/op
# Warmup Iteration   2: 22.339 ns/op
# Warmup Iteration   3: 13.379 ns/op
Iteration   1: 13.360 ns/op
Iteration   2: 13.379 ns/op
Iteration   3: 13.370 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.370 ±(99.9%) 0.167 ns/op [Average]
  (min, avg, max) = (13.360, 13.370, 13.379), stdev = 0.009
  CI (99.9%): [13.203, 13.537] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 35.90% complete, ETA 00:18:40
# Fork: 1 of 1
# Warmup Iteration   1: 978.855 ns/op
# Warmup Iteration   2: 499.686 ns/op
# Warmup Iteration   3: 335.988 ns/op
Iteration   1: 335.860 ns/op
Iteration   2: 335.980 ns/op
Iteration   3: 335.863 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  335.901 ±(99.9%) 1.247 ns/op [Average]
  (min, avg, max) = (335.860, 335.901, 335.980), stdev = 0.068
  CI (99.9%): [334.655, 337.148] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 35.97% complete, ETA 00:18:39
# Fork: 1 of 1
# Warmup Iteration   1: 508.814 ns/op
# Warmup Iteration   2: 475.857 ns/op
# Warmup Iteration   3: 352.888 ns/op
Iteration   1: 352.799 ns/op
Iteration   2: 352.622 ns/op
Iteration   3: 352.757 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  352.726 ±(99.9%) 1.690 ns/op [Average]
  (min, avg, max) = (352.622, 352.726, 352.799), stdev = 0.093
  CI (99.9%): [351.037, 354.416] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 36.04% complete, ETA 00:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 3504.112 ns/op
# Warmup Iteration   2: 489.002 ns/op
# Warmup Iteration   3: 344.752 ns/op
Iteration   1: 346.335 ns/op
Iteration   2: 345.118 ns/op
Iteration   3: 346.340 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  345.931 ±(99.9%) 12.840 ns/op [Average]
  (min, avg, max) = (345.118, 345.931, 346.340), stdev = 0.704
  CI (99.9%): [333.091, 358.771] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 36.11% complete, ETA 00:18:37
# Fork: 1 of 1
# Warmup Iteration   1: 425.437 ns/op
# Warmup Iteration   2: 390.443 ns/op
# Warmup Iteration   3: 267.743 ns/op
Iteration   1: 267.631 ns/op
Iteration   2: 267.609 ns/op
Iteration   3: 267.902 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  267.714 ±(99.9%) 2.978 ns/op [Average]
  (min, avg, max) = (267.609, 267.714, 267.902), stdev = 0.163
  CI (99.9%): [264.736, 270.692] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 36.18% complete, ETA 00:18:35
# Fork: 1 of 1
# Warmup Iteration   1: 1808.319 ns/op
# Warmup Iteration   2: 1042.938 ns/op
# Warmup Iteration   3: 707.345 ns/op
Iteration   1: 707.295 ns/op
Iteration   2: 707.128 ns/op
Iteration   3: 707.313 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  707.246 ±(99.9%) 1.857 ns/op [Average]
  (min, avg, max) = (707.128, 707.246, 707.313), stdev = 0.102
  CI (99.9%): [705.388, 709.103] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 36.25% complete, ETA 00:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 19.160 ns/op
# Warmup Iteration   2: 20.159 ns/op
# Warmup Iteration   3: 14.182 ns/op
Iteration   1: 14.142 ns/op
Iteration   2: 14.148 ns/op
Iteration   3: 14.146 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.145 ±(99.9%) 0.050 ns/op [Average]
  (min, avg, max) = (14.142, 14.145, 14.148), stdev = 0.003
  CI (99.9%): [14.095, 14.196] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 36.32% complete, ETA 00:18:33
# Fork: 1 of 1
# Warmup Iteration   1: 1289.502 ns/op
# Warmup Iteration   2: 529.930 ns/op
# Warmup Iteration   3: 358.634 ns/op
Iteration   1: 359.462 ns/op
Iteration   2: 357.709 ns/op
Iteration   3: 357.647 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  358.272 ±(99.9%) 18.803 ns/op [Average]
  (min, avg, max) = (357.647, 358.272, 359.462), stdev = 1.031
  CI (99.9%): [339.470, 377.075] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 36.39% complete, ETA 00:18:32
# Fork: 1 of 1
# Warmup Iteration   1: 607.063 ns/op
# Warmup Iteration   2: 609.505 ns/op
# Warmup Iteration   3: 424.619 ns/op
Iteration   1: 425.231 ns/op
Iteration   2: 424.108 ns/op
Iteration   3: 424.211 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  424.517 ±(99.9%) 11.324 ns/op [Average]
  (min, avg, max) = (424.108, 424.517, 425.231), stdev = 0.621
  CI (99.9%): [413.192, 435.841] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 36.46% complete, ETA 00:18:30
# Fork: 1 of 1
# Warmup Iteration   1: 17936.172 ns/op
# Warmup Iteration   2: 908.848 ns/op
# Warmup Iteration   3: 424.821 ns/op
Iteration   1: 387.308 ns/op
Iteration   2: 383.239 ns/op
Iteration   3: 384.728 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  385.091 ±(99.9%) 37.555 ns/op [Average]
  (min, avg, max) = (383.239, 385.091, 387.308), stdev = 2.059
  CI (99.9%): [347.536, 422.647] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 36.53% complete, ETA 00:18:29
# Fork: 1 of 1
# Warmup Iteration   1: 714.301 ns/op
# Warmup Iteration   2: 445.176 ns/op
# Warmup Iteration   3: 328.622 ns/op
Iteration   1: 326.262 ns/op
Iteration   2: 326.603 ns/op
Iteration   3: 328.169 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  327.011 ±(99.9%) 18.549 ns/op [Average]
  (min, avg, max) = (326.262, 327.011, 328.169), stdev = 1.017
  CI (99.9%): [308.462, 345.561] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 36.60% complete, ETA 00:18:28
# Fork: 1 of 1
# Warmup Iteration   1: 3501.339 ns/op
# Warmup Iteration   2: 2249.710 ns/op
# Warmup Iteration   3: 1627.633 ns/op
Iteration   1: 1621.674 ns/op
Iteration   2: 1623.800 ns/op
Iteration   3: 1618.863 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1621.446 ±(99.9%) 45.178 ns/op [Average]
  (min, avg, max) = (1618.863, 1621.446, 1623.800), stdev = 2.476
  CI (99.9%): [1576.268, 1666.624] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 36.67% complete, ETA 00:18:27
# Fork: 1 of 1
# Warmup Iteration   1: 19.347 ns/op
# Warmup Iteration   2: 21.317 ns/op
# Warmup Iteration   3: 13.373 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.358 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.232 ns/op [Average]
  (min, avg, max) = (13.348, 13.359, 13.373), stdev = 0.013
  CI (99.9%): [13.127, 13.591] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 36.74% complete, ETA 00:18:26
# Fork: 1 of 1
# Warmup Iteration   1: 647.870 ns/op
# Warmup Iteration   2: 354.576 ns/op
# Warmup Iteration   3: 234.774 ns/op
Iteration   1: 234.698 ns/op
Iteration   2: 234.768 ns/op
Iteration   3: 234.713 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  234.726 ±(99.9%) 0.667 ns/op [Average]
  (min, avg, max) = (234.698, 234.726, 234.768), stdev = 0.037
  CI (99.9%): [234.060, 235.393] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 36.81% complete, ETA 00:18:24
# Fork: 1 of 1
# Warmup Iteration   1: 349.454 ns/op
# Warmup Iteration   2: 331.374 ns/op
# Warmup Iteration   3: 238.183 ns/op
Iteration   1: 238.511 ns/op
Iteration   2: 238.367 ns/op
Iteration   3: 238.141 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  238.340 ±(99.9%) 3.401 ns/op [Average]
  (min, avg, max) = (238.141, 238.340, 238.511), stdev = 0.186
  CI (99.9%): [234.939, 241.741] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 36.88% complete, ETA 00:18:23
# Fork: 1 of 1
# Warmup Iteration   1: 468.311 ns/op
# Warmup Iteration   2: 341.179 ns/op
# Warmup Iteration   3: 254.297 ns/op
Iteration   1: 254.224 ns/op
Iteration   2: 254.179 ns/op
Iteration   3: 254.151 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  254.185 ±(99.9%) 0.676 ns/op [Average]
  (min, avg, max) = (254.151, 254.185, 254.224), stdev = 0.037
  CI (99.9%): [253.509, 254.860] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 36.94% complete, ETA 00:18:22
# Fork: 1 of 1
# Warmup Iteration   1: 393.699 ns/op
# Warmup Iteration   2: 282.999 ns/op
# Warmup Iteration   3: 205.951 ns/op
Iteration   1: 205.910 ns/op
Iteration   2: 205.952 ns/op
Iteration   3: 205.829 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  205.897 ±(99.9%) 1.142 ns/op [Average]
  (min, avg, max) = (205.829, 205.897, 205.952), stdev = 0.063
  CI (99.9%): [204.755, 207.039] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 37.01% complete, ETA 00:18:21
# Fork: 1 of 1
# Warmup Iteration   1: 1344.905 ns/op
# Warmup Iteration   2: 992.301 ns/op
# Warmup Iteration   3: 664.975 ns/op
Iteration   1: 664.652 ns/op
Iteration   2: 664.783 ns/op
Iteration   3: 664.690 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  664.709 ±(99.9%) 1.230 ns/op [Average]
  (min, avg, max) = (664.652, 664.709, 664.783), stdev = 0.067
  CI (99.9%): [663.478, 665.939] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 37.08% complete, ETA 00:18:19
# Fork: 1 of 1
# Warmup Iteration   1: 18.340 ns/op
# Warmup Iteration   2: 22.867 ns/op
# Warmup Iteration   3: 13.368 ns/op
Iteration   1: 13.362 ns/op
Iteration   2: 13.431 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.383 ±(99.9%) 0.758 ns/op [Average]
  (min, avg, max) = (13.356, 13.383, 13.431), stdev = 0.042
  CI (99.9%): [12.624, 14.141] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 37.15% complete, ETA 00:18:18
# Fork: 1 of 1
# Warmup Iteration   1: 622.694 ns/op
# Warmup Iteration   2: 300.974 ns/op
# Warmup Iteration   3: 212.371 ns/op
Iteration   1: 212.200 ns/op
Iteration   2: 212.197 ns/op
Iteration   3: 212.159 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  212.185 ±(99.9%) 0.423 ns/op [Average]
  (min, avg, max) = (212.159, 212.185, 212.200), stdev = 0.023
  CI (99.9%): [211.762, 212.609] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 37.22% complete, ETA 00:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 250.602 ns/op
# Warmup Iteration   2: 237.580 ns/op
# Warmup Iteration   3: 152.893 ns/op
Iteration   1: 153.374 ns/op
Iteration   2: 153.046 ns/op
Iteration   3: 152.886 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  153.102 ±(99.9%) 4.537 ns/op [Average]
  (min, avg, max) = (152.886, 153.102, 153.374), stdev = 0.249
  CI (99.9%): [148.565, 157.639] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 37.29% complete, ETA 00:18:16
# Fork: 1 of 1
# Warmup Iteration   1: 11837.577 ns/op
# Warmup Iteration   2: 264.744 ns/op
# Warmup Iteration   3: 214.686 ns/op
Iteration   1: 187.532 ns/op
Iteration   2: 188.252 ns/op
Iteration   3: 189.392 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  188.392 ±(99.9%) 17.112 ns/op [Average]
  (min, avg, max) = (187.532, 188.392, 189.392), stdev = 0.938
  CI (99.9%): [171.280, 205.504] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 37.36% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 234.782 ns/op
# Warmup Iteration   2: 187.254 ns/op
# Warmup Iteration   3: 131.046 ns/op
Iteration   1: 130.894 ns/op
Iteration   2: 131.086 ns/op
Iteration   3: 130.988 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  130.989 ±(99.9%) 1.748 ns/op [Average]
  (min, avg, max) = (130.894, 130.989, 131.086), stdev = 0.096
  CI (99.9%): [129.241, 132.738] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 37.43% complete, ETA 00:18:13
# Fork: 1 of 1
# Warmup Iteration   1: 1607.353 ns/op
# Warmup Iteration   2: 1119.564 ns/op
# Warmup Iteration   3: 724.223 ns/op
Iteration   1: 726.464 ns/op
Iteration   2: 723.944 ns/op
Iteration   3: 724.197 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  724.869 ±(99.9%) 25.311 ns/op [Average]
  (min, avg, max) = (723.944, 724.869, 726.464), stdev = 1.387
  CI (99.9%): [699.557, 750.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 37.50% complete, ETA 00:18:12
# Fork: 1 of 1
# Warmup Iteration   1: 17.925 ns/op
# Warmup Iteration   2: 24.482 ns/op
# Warmup Iteration   3: 13.368 ns/op
Iteration   1: 13.365 ns/op
Iteration   2: 13.437 ns/op
Iteration   3: 13.366 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.389 ±(99.9%) 0.755 ns/op [Average]
  (min, avg, max) = (13.365, 13.389, 13.437), stdev = 0.041
  CI (99.9%): [12.634, 14.145] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 37.57% complete, ETA 00:18:11
# Fork: 1 of 1
# Warmup Iteration   1: 743.174 ns/op
# Warmup Iteration   2: 420.520 ns/op
# Warmup Iteration   3: 302.219 ns/op
Iteration   1: 302.962 ns/op
Iteration   2: 302.271 ns/op
Iteration   3: 302.436 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  302.556 ±(99.9%) 6.589 ns/op [Average]
  (min, avg, max) = (302.271, 302.556, 302.962), stdev = 0.361
  CI (99.9%): [295.967, 309.146] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 37.64% complete, ETA 00:18:10
# Fork: 1 of 1
# Warmup Iteration   1: 606.224 ns/op
# Warmup Iteration   2: 551.183 ns/op
# Warmup Iteration   3: 391.096 ns/op
Iteration   1: 391.103 ns/op
Iteration   2: 391.065 ns/op
Iteration   3: 391.008 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  391.059 ±(99.9%) 0.871 ns/op [Average]
  (min, avg, max) = (391.008, 391.059, 391.103), stdev = 0.048
  CI (99.9%): [390.188, 391.930] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 37.71% complete, ETA 00:18:08
# Fork: 1 of 1
# Warmup Iteration   1: 5163.806 ns/op
# Warmup Iteration   2: 457.495 ns/op
# Warmup Iteration   3: 315.587 ns/op
Iteration   1: 315.449 ns/op
Iteration   2: 315.426 ns/op
Iteration   3: 315.462 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  315.446 ±(99.9%) 0.334 ns/op [Average]
  (min, avg, max) = (315.426, 315.446, 315.462), stdev = 0.018
  CI (99.9%): [315.112, 315.779] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 37.78% complete, ETA 00:18:07
# Fork: 1 of 1
# Warmup Iteration   1: 500.201 ns/op
# Warmup Iteration   2: 455.537 ns/op
# Warmup Iteration   3: 312.341 ns/op
Iteration   1: 312.313 ns/op
Iteration   2: 312.381 ns/op
Iteration   3: 312.320 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  312.338 ±(99.9%) 0.678 ns/op [Average]
  (min, avg, max) = (312.313, 312.338, 312.381), stdev = 0.037
  CI (99.9%): [311.660, 313.016] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 37.85% complete, ETA 00:18:06
# Fork: 1 of 1
# Warmup Iteration   1: 2943.734 ns/op
# Warmup Iteration   2: 2147.163 ns/op
# Warmup Iteration   3: 1537.491 ns/op
Iteration   1: 1535.118 ns/op
Iteration   2: 1539.771 ns/op
Iteration   3: 1536.056 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1536.982 ±(99.9%) 44.895 ns/op [Average]
  (min, avg, max) = (1535.118, 1536.982, 1539.771), stdev = 2.461
  CI (99.9%): [1492.087, 1581.876] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 37.92% complete, ETA 00:18:05
# Fork: 1 of 1
# Warmup Iteration   1: 18.798 ns/op
# Warmup Iteration   2: 24.227 ns/op
# Warmup Iteration   3: 13.543 ns/op
Iteration   1: 13.346 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.346 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.351 ±(99.9%) 0.171 ns/op [Average]
  (min, avg, max) = (13.346, 13.351, 13.362), stdev = 0.009
  CI (99.9%): [13.180, 13.522] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 37.99% complete, ETA 00:18:03
# Fork: 1 of 1
# Warmup Iteration   1: 165.877 ns/op
# Warmup Iteration   2: 129.268 ns/op
# Warmup Iteration   3: 89.049 ns/op
Iteration   1: 88.964 ns/op
Iteration   2: 89.046 ns/op
Iteration   3: 89.087 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.032 ±(99.9%) 1.140 ns/op [Average]
  (min, avg, max) = (88.964, 89.032, 89.087), stdev = 0.062
  CI (99.9%): [87.892, 90.172] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 38.06% complete, ETA 00:18:02
# Fork: 1 of 1
# Warmup Iteration   1: 65.881 ns/op
# Warmup Iteration   2: 70.600 ns/op
# Warmup Iteration   3: 44.053 ns/op
Iteration   1: 44.043 ns/op
Iteration   2: 44.047 ns/op
Iteration   3: 44.040 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.043 ±(99.9%) 0.068 ns/op [Average]
  (min, avg, max) = (44.040, 44.043, 44.047), stdev = 0.004
  CI (99.9%): [43.975, 44.112] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 38.13% complete, ETA 00:18:01
# Fork: 1 of 1
# Warmup Iteration   1: 286.133 ns/op
# Warmup Iteration   2: 150.458 ns/op
# Warmup Iteration   3: 104.013 ns/op
Iteration   1: 104.008 ns/op
Iteration   2: 103.987 ns/op
Iteration   3: 103.980 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  103.992 ±(99.9%) 0.265 ns/op [Average]
  (min, avg, max) = (103.980, 103.992, 104.008), stdev = 0.015
  CI (99.9%): [103.727, 104.257] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 38.19% complete, ETA 00:18:00
# Fork: 1 of 1
# Warmup Iteration   1: 67.782 ns/op
# Warmup Iteration   2: 76.611 ns/op
# Warmup Iteration   3: 46.418 ns/op
Iteration   1: 46.389 ns/op
Iteration   2: 46.577 ns/op
Iteration   3: 46.437 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.468 ±(99.9%) 1.779 ns/op [Average]
  (min, avg, max) = (46.389, 46.468, 46.577), stdev = 0.097
  CI (99.9%): [44.689, 48.246] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 38.26% complete, ETA 00:17:59
# Fork: 1 of 1
# Warmup Iteration   1: 172.645 ns/op
# Warmup Iteration   2: 172.816 ns/op
# Warmup Iteration   3: 97.757 ns/op
Iteration   1: 97.711 ns/op
Iteration   2: 97.759 ns/op
Iteration   3: 97.748 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.739 ±(99.9%) 0.462 ns/op [Average]
  (min, avg, max) = (97.711, 97.739, 97.759), stdev = 0.025
  CI (99.9%): [97.278, 98.201] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 38.33% complete, ETA 00:17:57
# Fork: 1 of 1
# Warmup Iteration   1: 19.057 ns/op
# Warmup Iteration   2: 20.187 ns/op
# Warmup Iteration   3: 13.358 ns/op
Iteration   1: 13.349 ns/op
Iteration   2: 13.369 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.358 ±(99.9%) 0.189 ns/op [Average]
  (min, avg, max) = (13.349, 13.358, 13.369), stdev = 0.010
  CI (99.9%): [13.169, 13.547] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 38.40% complete, ETA 00:17:56
# Fork: 1 of 1
# Warmup Iteration   1: 6493.834 ns/op
# Warmup Iteration   2: 472.457 ns/op
# Warmup Iteration   3: 350.611 ns/op
Iteration   1: 351.693 ns/op
Iteration   2: 347.936 ns/op
Iteration   3: 352.685 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  350.771 ±(99.9%) 45.708 ns/op [Average]
  (min, avg, max) = (347.936, 350.771, 352.685), stdev = 2.505
  CI (99.9%): [305.063, 396.480] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 38.47% complete, ETA 00:17:55
# Fork: 1 of 1
# Warmup Iteration   1: 707.872 ns/op
# Warmup Iteration   2: 633.434 ns/op
# Warmup Iteration   3: 446.972 ns/op
Iteration   1: 442.955 ns/op
Iteration   2: 445.600 ns/op
Iteration   3: 443.942 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  444.166 ±(99.9%) 24.382 ns/op [Average]
  (min, avg, max) = (442.955, 444.166, 445.600), stdev = 1.336
  CI (99.9%): [419.783, 468.548] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 38.54% complete, ETA 00:17:54
# Fork: 1 of 1
# Warmup Iteration   1: 19816.256 ns/op
# Warmup Iteration   2: 605.534 ns/op
# Warmup Iteration   3: 465.055 ns/op
Iteration   1: 415.643 ns/op
Iteration   2: 415.496 ns/op
Iteration   3: 417.087 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  416.076 ±(99.9%) 16.042 ns/op [Average]
  (min, avg, max) = (415.496, 416.076, 417.087), stdev = 0.879
  CI (99.9%): [400.033, 432.118] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 38.61% complete, ETA 00:17:52
# Fork: 1 of 1
# Warmup Iteration   1: 725.211 ns/op
# Warmup Iteration   2: 476.972 ns/op
# Warmup Iteration   3: 344.591 ns/op
Iteration   1: 343.734 ns/op
Iteration   2: 345.289 ns/op
Iteration   3: 344.511 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  344.511 ±(99.9%) 14.178 ns/op [Average]
  (min, avg, max) = (343.734, 344.511, 345.289), stdev = 0.777
  CI (99.9%): [330.333, 358.689] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 38.68% complete, ETA 00:17:51
# Fork: 1 of 1
# Warmup Iteration   1: 3315.018 ns/op
# Warmup Iteration   2: 2422.073 ns/op
# Warmup Iteration   3: 1671.699 ns/op
Iteration   1: 1675.987 ns/op
Iteration   2: 1664.253 ns/op
Iteration   3: 1676.150 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1672.130 ±(99.9%) 124.462 ns/op [Average]
  (min, avg, max) = (1664.253, 1672.130, 1676.150), stdev = 6.822
  CI (99.9%): [1547.667, 1796.592] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 38.75% complete, ETA 00:17:50
# Fork: 1 of 1
# Warmup Iteration   1: 21.062 ns/op
# Warmup Iteration   2: 26.936 ns/op
# Warmup Iteration   3: 13.386 ns/op
Iteration   1: 13.355 ns/op
Iteration   2: 13.369 ns/op
Iteration   3: 13.352 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.160 ns/op [Average]
  (min, avg, max) = (13.352, 13.359, 13.369), stdev = 0.009
  CI (99.9%): [13.199, 13.519] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 38.82% complete, ETA 00:17:49
# Fork: 1 of 1
# Warmup Iteration   1: 165.924 ns/op
# Warmup Iteration   2: 124.483 ns/op
# Warmup Iteration   3: 89.132 ns/op
Iteration   1: 89.082 ns/op
Iteration   2: 89.087 ns/op
Iteration   3: 89.034 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.068 ±(99.9%) 0.530 ns/op [Average]
  (min, avg, max) = (89.034, 89.068, 89.087), stdev = 0.029
  CI (99.9%): [88.537, 89.598] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 38.89% complete, ETA 00:17:47
# Fork: 1 of 1
# Warmup Iteration   1: 69.280 ns/op
# Warmup Iteration   2: 67.487 ns/op
# Warmup Iteration   3: 44.054 ns/op
Iteration   1: 44.076 ns/op
Iteration   2: 44.056 ns/op
Iteration   3: 44.054 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.062 ±(99.9%) 0.219 ns/op [Average]
  (min, avg, max) = (44.054, 44.062, 44.076), stdev = 0.012
  CI (99.9%): [43.843, 44.280] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 38.96% complete, ETA 00:17:46
# Fork: 1 of 1
# Warmup Iteration   1: 267.658 ns/op
# Warmup Iteration   2: 161.457 ns/op
# Warmup Iteration   3: 106.696 ns/op
Iteration   1: 106.241 ns/op
Iteration   2: 106.589 ns/op
Iteration   3: 106.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  106.392 ±(99.9%) 3.255 ns/op [Average]
  (min, avg, max) = (106.241, 106.392, 106.589), stdev = 0.178
  CI (99.9%): [103.137, 109.648] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 39.03% complete, ETA 00:17:45
# Fork: 1 of 1
# Warmup Iteration   1: 67.963 ns/op
# Warmup Iteration   2: 75.751 ns/op
# Warmup Iteration   3: 46.413 ns/op
Iteration   1: 46.435 ns/op
Iteration   2: 46.558 ns/op
Iteration   3: 46.394 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.463 ±(99.9%) 1.558 ns/op [Average]
  (min, avg, max) = (46.394, 46.463, 46.558), stdev = 0.085
  CI (99.9%): [44.905, 48.020] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 39.10% complete, ETA 00:17:44
# Fork: 1 of 1
# Warmup Iteration   1: 175.700 ns/op
# Warmup Iteration   2: 180.514 ns/op
# Warmup Iteration   3: 97.751 ns/op
Iteration   1: 97.726 ns/op
Iteration   2: 97.724 ns/op
Iteration   3: 97.722 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.724 ±(99.9%) 0.038 ns/op [Average]
  (min, avg, max) = (97.722, 97.724, 97.726), stdev = 0.002
  CI (99.9%): [97.686, 97.762] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 39.17% complete, ETA 00:17:43
# Fork: 1 of 1
# Warmup Iteration   1: 19.555 ns/op
# Warmup Iteration   2: 23.453 ns/op
# Warmup Iteration   3: 13.375 ns/op
Iteration   1: 13.359 ns/op
Iteration   2: 13.376 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.364 ±(99.9%) 0.206 ns/op [Average]
  (min, avg, max) = (13.355, 13.364, 13.376), stdev = 0.011
  CI (99.9%): [13.157, 13.570] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 39.24% complete, ETA 00:17:41
# Fork: 1 of 1
# Warmup Iteration   1: 998.718 ns/op
# Warmup Iteration   2: 221.262 ns/op
# Warmup Iteration   3: 157.053 ns/op
Iteration   1: 157.016 ns/op
Iteration   2: 157.087 ns/op
Iteration   3: 157.164 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  157.089 ±(99.9%) 1.349 ns/op [Average]
  (min, avg, max) = (157.016, 157.089, 157.164), stdev = 0.074
  CI (99.9%): [155.740, 158.439] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 39.31% complete, ETA 00:17:40
# Fork: 1 of 1
# Warmup Iteration   1: 202.539 ns/op
# Warmup Iteration   2: 164.792 ns/op
# Warmup Iteration   3: 116.258 ns/op
Iteration   1: 116.682 ns/op
Iteration   2: 115.965 ns/op
Iteration   3: 116.173 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.273 ±(99.9%) 6.731 ns/op [Average]
  (min, avg, max) = (115.965, 116.273, 116.682), stdev = 0.369
  CI (99.9%): [109.543, 123.004] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 39.38% complete, ETA 00:17:39
# Fork: 1 of 1
# Warmup Iteration   1: 594.274 ns/op
# Warmup Iteration   2: 206.145 ns/op
# Warmup Iteration   3: 145.049 ns/op
Iteration   1: 144.950 ns/op
Iteration   2: 145.170 ns/op
Iteration   3: 144.968 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.029 ±(99.9%) 2.226 ns/op [Average]
  (min, avg, max) = (144.950, 145.029, 145.170), stdev = 0.122
  CI (99.9%): [142.803, 147.255] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 39.44% complete, ETA 00:17:38
# Fork: 1 of 1
# Warmup Iteration   1: 118.137 ns/op
# Warmup Iteration   2: 122.891 ns/op
# Warmup Iteration   3: 78.084 ns/op
Iteration   1: 78.060 ns/op
Iteration   2: 78.180 ns/op
Iteration   3: 78.072 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  78.104 ±(99.9%) 1.207 ns/op [Average]
  (min, avg, max) = (78.060, 78.104, 78.180), stdev = 0.066
  CI (99.9%): [76.898, 79.311] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 39.51% complete, ETA 00:17:37
# Fork: 1 of 1
# Warmup Iteration   1: 566.925 ns/op
# Warmup Iteration   2: 346.599 ns/op
# Warmup Iteration   3: 218.057 ns/op
Iteration   1: 217.842 ns/op
Iteration   2: 218.024 ns/op
Iteration   3: 219.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  218.333 ±(99.9%) 12.731 ns/op [Average]
  (min, avg, max) = (217.842, 218.333, 219.131), stdev = 0.698
  CI (99.9%): [205.601, 231.064] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 39.58% complete, ETA 00:17:35
# Fork: 1 of 1
# Warmup Iteration   1: 18.845 ns/op
# Warmup Iteration   2: 24.017 ns/op
# Warmup Iteration   3: 13.627 ns/op
Iteration   1: 13.611 ns/op
Iteration   2: 13.628 ns/op
Iteration   3: 13.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.618 ±(99.9%) 0.156 ns/op [Average]
  (min, avg, max) = (13.611, 13.618, 13.628), stdev = 0.009
  CI (99.9%): [13.462, 13.774] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 39.65% complete, ETA 00:17:34
# Fork: 1 of 1
# Warmup Iteration   1: 784.968 ns/op
# Warmup Iteration   2: 416.948 ns/op
# Warmup Iteration   3: 311.659 ns/op
Iteration   1: 311.587 ns/op
Iteration   2: 311.640 ns/op
Iteration   3: 311.617 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  311.615 ±(99.9%) 0.486 ns/op [Average]
  (min, avg, max) = (311.587, 311.615, 311.640), stdev = 0.027
  CI (99.9%): [311.128, 312.101] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 39.72% complete, ETA 00:17:33
# Fork: 1 of 1
# Warmup Iteration   1: 680.198 ns/op
# Warmup Iteration   2: 605.625 ns/op
# Warmup Iteration   3: 424.756 ns/op
Iteration   1: 424.800 ns/op
Iteration   2: 424.554 ns/op
Iteration   3: 433.489 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  427.615 ±(99.9%) 92.846 ns/op [Average]
  (min, avg, max) = (424.554, 427.615, 433.489), stdev = 5.089
  CI (99.9%): [334.769, 520.461] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 39.79% complete, ETA 00:17:32
# Fork: 1 of 1
# Warmup Iteration   1: 10844.021 ns/op
# Warmup Iteration   2: 548.228 ns/op
# Warmup Iteration   3: 401.804 ns/op
Iteration   1: 401.674 ns/op
Iteration   2: 401.918 ns/op
Iteration   3: 401.793 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  401.795 ±(99.9%) 2.225 ns/op [Average]
  (min, avg, max) = (401.674, 401.795, 401.918), stdev = 0.122
  CI (99.9%): [399.570, 404.020] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 39.86% complete, ETA 00:17:30
# Fork: 1 of 1
# Warmup Iteration   1: 513.159 ns/op
# Warmup Iteration   2: 463.305 ns/op
# Warmup Iteration   3: 319.920 ns/op
Iteration   1: 319.819 ns/op
Iteration   2: 320.500 ns/op
Iteration   3: 319.066 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  319.795 ±(99.9%) 13.090 ns/op [Average]
  (min, avg, max) = (319.066, 319.795, 320.500), stdev = 0.718
  CI (99.9%): [306.705, 332.885] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 39.93% complete, ETA 00:17:29
# Fork: 1 of 1
# Warmup Iteration   1: 3600.359 ns/op
# Warmup Iteration   2: 2318.734 ns/op
# Warmup Iteration   3: 1593.523 ns/op
Iteration   1: 1602.549 ns/op
Iteration   2: 1592.819 ns/op
Iteration   3: 1589.791 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1595.053 ±(99.9%) 121.615 ns/op [Average]
  (min, avg, max) = (1589.791, 1595.053, 1602.549), stdev = 6.666
  CI (99.9%): [1473.439, 1716.668] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 40.00% complete, ETA 00:17:28
# Fork: 1 of 1
# Warmup Iteration   1: 19.507 ns/op
# Warmup Iteration   2: 23.941 ns/op
# Warmup Iteration   3: 13.359 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 13.370 ns/op
Iteration   3: 13.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.220 ns/op [Average]
  (min, avg, max) = (13.348, 13.356, 13.370), stdev = 0.012
  CI (99.9%): [13.135, 13.576] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 40.07% complete, ETA 00:17:27
# Fork: 1 of 1
# Warmup Iteration   1: 515.549 ns/op
# Warmup Iteration   2: 283.614 ns/op
# Warmup Iteration   3: 203.505 ns/op
Iteration   1: 203.158 ns/op
Iteration   2: 203.302 ns/op
Iteration   3: 203.338 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  203.266 ±(99.9%) 1.742 ns/op [Average]
  (min, avg, max) = (203.158, 203.266, 203.338), stdev = 0.095
  CI (99.9%): [201.524, 205.008] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 40.14% complete, ETA 00:17:26
# Fork: 1 of 1
# Warmup Iteration   1: 889.604 ns/op
# Warmup Iteration   2: 876.634 ns/op
# Warmup Iteration   3: 603.595 ns/op
Iteration   1: 603.470 ns/op
Iteration   2: 603.367 ns/op
Iteration   3: 603.328 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  603.388 ±(99.9%) 1.342 ns/op [Average]
  (min, avg, max) = (603.328, 603.388, 603.470), stdev = 0.074
  CI (99.9%): [602.046, 604.731] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 40.21% complete, ETA 00:17:24
# Fork: 1 of 1
# Warmup Iteration   1: 502.799 ns/op
# Warmup Iteration   2: 232.639 ns/op
# Warmup Iteration   3: 159.478 ns/op
Iteration   1: 159.266 ns/op
Iteration   2: 160.060 ns/op
Iteration   3: 159.459 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  159.595 ±(99.9%) 7.559 ns/op [Average]
  (min, avg, max) = (159.266, 159.595, 160.060), stdev = 0.414
  CI (99.9%): [152.036, 167.154] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 40.28% complete, ETA 00:17:23
# Fork: 1 of 1
# Warmup Iteration   1: 657.192 ns/op
# Warmup Iteration   2: 622.189 ns/op
# Warmup Iteration   3: 432.857 ns/op
Iteration   1: 432.735 ns/op
Iteration   2: 432.768 ns/op
Iteration   3: 433.032 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  432.845 ±(99.9%) 2.963 ns/op [Average]
  (min, avg, max) = (432.735, 432.845, 433.032), stdev = 0.162
  CI (99.9%): [429.882, 435.808] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 40.35% complete, ETA 00:17:22
# Fork: 1 of 1
# Warmup Iteration   1: 257.289 ns/op
# Warmup Iteration   2: 242.732 ns/op
# Warmup Iteration   3: 139.284 ns/op
Iteration   1: 139.283 ns/op
Iteration   2: 139.275 ns/op
Iteration   3: 139.285 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.281 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (139.275, 139.281, 139.285), stdev = 0.005
  CI (99.9%): [139.186, 139.376] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 40.42% complete, ETA 00:17:21
# Fork: 1 of 1
# Warmup Iteration   1: 19.231 ns/op
# Warmup Iteration   2: 19.995 ns/op
# Warmup Iteration   3: 13.359 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.378 ns/op
Iteration   3: 13.381 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.372 ±(99.9%) 0.257 ns/op [Average]
  (min, avg, max) = (13.356, 13.372, 13.381), stdev = 0.014
  CI (99.9%): [13.115, 13.629] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 40.49% complete, ETA 00:17:19
# Fork: 1 of 1
# Warmup Iteration   1: 1395.193 ns/op
# Warmup Iteration   2: 570.509 ns/op
# Warmup Iteration   3: 392.077 ns/op
Iteration   1: 390.383 ns/op
Iteration   2: 388.903 ns/op
Iteration   3: 389.516 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  389.600 ±(99.9%) 13.570 ns/op [Average]
  (min, avg, max) = (388.903, 389.600, 390.383), stdev = 0.744
  CI (99.9%): [376.030, 403.170] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 40.56% complete, ETA 00:17:18
# Fork: 1 of 1
# Warmup Iteration   1: 710.668 ns/op
# Warmup Iteration   2: 570.232 ns/op
# Warmup Iteration   3: 431.583 ns/op
Iteration   1: 433.022 ns/op
Iteration   2: 432.916 ns/op
Iteration   3: 432.958 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  432.965 ±(99.9%) 0.974 ns/op [Average]
  (min, avg, max) = (432.916, 432.965, 433.022), stdev = 0.053
  CI (99.9%): [431.991, 433.940] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 40.63% complete, ETA 00:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 18360.587 ns/op
# Warmup Iteration   2: 581.468 ns/op
# Warmup Iteration   3: 453.251 ns/op
Iteration   1: 408.292 ns/op
Iteration   2: 411.922 ns/op
Iteration   3: 409.919 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  410.045 ±(99.9%) 33.169 ns/op [Average]
  (min, avg, max) = (408.292, 410.045, 411.922), stdev = 1.818
  CI (99.9%): [376.876, 443.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 40.69% complete, ETA 00:17:16
# Fork: 1 of 1
# Warmup Iteration   1: 626.310 ns/op
# Warmup Iteration   2: 495.907 ns/op
# Warmup Iteration   3: 353.682 ns/op
Iteration   1: 350.053 ns/op
Iteration   2: 350.993 ns/op
Iteration   3: 347.581 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  349.542 ±(99.9%) 32.147 ns/op [Average]
  (min, avg, max) = (347.581, 349.542, 350.993), stdev = 1.762
  CI (99.9%): [317.395, 381.689] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 40.76% complete, ETA 00:17:15
# Fork: 1 of 1
# Warmup Iteration   1: 3194.723 ns/op
# Warmup Iteration   2: 2379.863 ns/op
# Warmup Iteration   3: 1634.583 ns/op
Iteration   1: 1644.547 ns/op
Iteration   2: 1639.547 ns/op
Iteration   3: 1639.518 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1641.204 ±(99.9%) 52.825 ns/op [Average]
  (min, avg, max) = (1639.518, 1641.204, 1644.547), stdev = 2.896
  CI (99.9%): [1588.379, 1694.029] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 40.83% complete, ETA 00:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 18.735 ns/op
# Warmup Iteration   2: 23.948 ns/op
# Warmup Iteration   3: 13.375 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 13.427 ns/op
Iteration   3: 13.360 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.379 ±(99.9%) 0.767 ns/op [Average]
  (min, avg, max) = (13.350, 13.379, 13.427), stdev = 0.042
  CI (99.9%): [12.613, 14.146] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 40.90% complete, ETA 00:17:12
# Fork: 1 of 1
# Warmup Iteration   1: 609.945 ns/op
# Warmup Iteration   2: 286.515 ns/op
# Warmup Iteration   3: 207.447 ns/op
Iteration   1: 207.275 ns/op
Iteration   2: 207.377 ns/op
Iteration   3: 207.906 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  207.519 ±(99.9%) 6.184 ns/op [Average]
  (min, avg, max) = (207.275, 207.519, 207.906), stdev = 0.339
  CI (99.9%): [201.336, 213.703] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 40.97% complete, ETA 00:17:11
# Fork: 1 of 1
# Warmup Iteration   1: 862.826 ns/op
# Warmup Iteration   2: 902.885 ns/op
# Warmup Iteration   3: 603.602 ns/op
Iteration   1: 603.379 ns/op
Iteration   2: 603.485 ns/op
Iteration   3: 603.500 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  603.454 ±(99.9%) 1.204 ns/op [Average]
  (min, avg, max) = (603.379, 603.454, 603.500), stdev = 0.066
  CI (99.9%): [602.250, 604.659] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 41.04% complete, ETA 00:17:10
# Fork: 1 of 1
# Warmup Iteration   1: 512.739 ns/op
# Warmup Iteration   2: 243.653 ns/op
# Warmup Iteration   3: 167.965 ns/op
Iteration   1: 167.867 ns/op
Iteration   2: 167.538 ns/op
Iteration   3: 167.847 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  167.751 ±(99.9%) 3.371 ns/op [Average]
  (min, avg, max) = (167.538, 167.751, 167.867), stdev = 0.185
  CI (99.9%): [164.379, 171.122] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 41.11% complete, ETA 00:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 659.781 ns/op
# Warmup Iteration   2: 626.766 ns/op
# Warmup Iteration   3: 435.495 ns/op
Iteration   1: 435.376 ns/op
Iteration   2: 435.598 ns/op
Iteration   3: 435.441 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  435.472 ±(99.9%) 2.087 ns/op [Average]
  (min, avg, max) = (435.376, 435.472, 435.598), stdev = 0.114
  CI (99.9%): [433.384, 437.559] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 41.18% complete, ETA 00:17:07
# Fork: 1 of 1
# Warmup Iteration   1: 248.430 ns/op
# Warmup Iteration   2: 226.133 ns/op
# Warmup Iteration   3: 138.521 ns/op
Iteration   1: 138.496 ns/op
Iteration   2: 138.566 ns/op
Iteration   3: 138.461 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.508 ±(99.9%) 0.973 ns/op [Average]
  (min, avg, max) = (138.461, 138.508, 138.566), stdev = 0.053
  CI (99.9%): [137.535, 139.480] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 41.25% complete, ETA 00:17:06
# Fork: 1 of 1
# Warmup Iteration   1: 19.490 ns/op
# Warmup Iteration   2: 23.040 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 13.361 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.355 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (13.350, 13.355, 13.361), stdev = 0.006
  CI (99.9%): [13.252, 13.459] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 41.32% complete, ETA 00:17:05
# Fork: 1 of 1
# Warmup Iteration   1: 609.367 ns/op
# Warmup Iteration   2: 305.454 ns/op
# Warmup Iteration   3: 233.953 ns/op
Iteration   1: 234.565 ns/op
Iteration   2: 230.980 ns/op
Iteration   3: 230.158 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.901 ±(99.9%) 42.758 ns/op [Average]
  (min, avg, max) = (230.158, 231.901, 234.565), stdev = 2.344
  CI (99.9%): [189.143, 274.659] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 41.39% complete, ETA 00:17:04
# Fork: 1 of 1
# Warmup Iteration   1: 960.742 ns/op
# Warmup Iteration   2: 924.024 ns/op
# Warmup Iteration   3: 672.308 ns/op
Iteration   1: 673.940 ns/op
Iteration   2: 670.999 ns/op
Iteration   3: 675.254 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  673.398 ±(99.9%) 39.745 ns/op [Average]
  (min, avg, max) = (670.999, 673.398, 675.254), stdev = 2.179
  CI (99.9%): [633.653, 713.143] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 41.46% complete, ETA 00:17:02
# Fork: 1 of 1
# Warmup Iteration   1: 6849.756 ns/op
# Warmup Iteration   2: 321.910 ns/op
# Warmup Iteration   3: 246.560 ns/op
Iteration   1: 246.417 ns/op
Iteration   2: 246.568 ns/op
Iteration   3: 246.510 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  246.498 ±(99.9%) 1.391 ns/op [Average]
  (min, avg, max) = (246.417, 246.498, 246.568), stdev = 0.076
  CI (99.9%): [245.107, 247.889] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 41.53% complete, ETA 00:17:01
# Fork: 1 of 1
# Warmup Iteration   1: 597.181 ns/op
# Warmup Iteration   2: 531.592 ns/op
# Warmup Iteration   3: 390.766 ns/op
Iteration   1: 390.858 ns/op
Iteration   2: 391.308 ns/op
Iteration   3: 388.791 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  390.319 ±(99.9%) 24.493 ns/op [Average]
  (min, avg, max) = (388.791, 390.319, 391.308), stdev = 1.343
  CI (99.9%): [365.826, 414.812] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 41.60% complete, ETA 00:17:00
# Fork: 1 of 1
# Warmup Iteration   1: 579.693 ns/op
# Warmup Iteration   2: 390.388 ns/op
# Warmup Iteration   3: 249.290 ns/op
Iteration   1: 250.283 ns/op
Iteration   2: 249.302 ns/op
Iteration   3: 249.275 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  249.620 ±(99.9%) 10.475 ns/op [Average]
  (min, avg, max) = (249.275, 249.620, 250.283), stdev = 0.574
  CI (99.9%): [239.145, 260.096] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 41.67% complete, ETA 00:16:59
# Fork: 1 of 1
# Warmup Iteration   1: 18.999 ns/op
# Warmup Iteration   2: 20.200 ns/op
# Warmup Iteration   3: 13.537 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.428 ns/op
Iteration   3: 13.346 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.374 ±(99.9%) 0.852 ns/op [Average]
  (min, avg, max) = (13.346, 13.374, 13.428), stdev = 0.047
  CI (99.9%): [12.522, 14.226] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 41.74% complete, ETA 00:16:57
# Fork: 1 of 1
# Warmup Iteration   1: 610.391 ns/op
# Warmup Iteration   2: 407.916 ns/op
# Warmup Iteration   3: 279.315 ns/op
Iteration   1: 278.903 ns/op
Iteration   2: 278.954 ns/op
Iteration   3: 278.659 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  278.839 ±(99.9%) 2.877 ns/op [Average]
  (min, avg, max) = (278.659, 278.839, 278.954), stdev = 0.158
  CI (99.9%): [275.962, 281.716] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 41.81% complete, ETA 00:16:56
# Fork: 1 of 1
# Warmup Iteration   1: 660.483 ns/op
# Warmup Iteration   2: 601.662 ns/op
# Warmup Iteration   3: 414.063 ns/op
Iteration   1: 414.066 ns/op
Iteration   2: 413.954 ns/op
Iteration   3: 413.913 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  413.978 ±(99.9%) 1.444 ns/op [Average]
  (min, avg, max) = (413.913, 413.978, 414.066), stdev = 0.079
  CI (99.9%): [412.534, 415.422] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 41.88% complete, ETA 00:16:55
# Fork: 1 of 1
# Warmup Iteration   1: 11015.068 ns/op
# Warmup Iteration   2: 602.250 ns/op
# Warmup Iteration   3: 425.558 ns/op
Iteration   1: 425.271 ns/op
Iteration   2: 425.403 ns/op
Iteration   3: 425.342 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  425.339 ±(99.9%) 1.208 ns/op [Average]
  (min, avg, max) = (425.271, 425.339, 425.403), stdev = 0.066
  CI (99.9%): [424.130, 426.547] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 41.94% complete, ETA 00:16:54
# Fork: 1 of 1
# Warmup Iteration   1: 532.475 ns/op
# Warmup Iteration   2: 464.611 ns/op
# Warmup Iteration   3: 338.027 ns/op
Iteration   1: 338.257 ns/op
Iteration   2: 336.862 ns/op
Iteration   3: 335.314 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  336.811 ±(99.9%) 26.856 ns/op [Average]
  (min, avg, max) = (335.314, 336.811, 338.257), stdev = 1.472
  CI (99.9%): [309.955, 363.667] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 42.01% complete, ETA 00:16:53
# Fork: 1 of 1
# Warmup Iteration   1: 3084.087 ns/op
# Warmup Iteration   2: 2235.544 ns/op
# Warmup Iteration   3: 1558.363 ns/op
Iteration   1: 1578.114 ns/op
Iteration   2: 1556.875 ns/op
Iteration   3: 1578.241 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1571.077 ±(99.9%) 224.380 ns/op [Average]
  (min, avg, max) = (1556.875, 1571.077, 1578.241), stdev = 12.299
  CI (99.9%): [1346.696, 1795.457] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 42.08% complete, ETA 00:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 19.357 ns/op
# Warmup Iteration   2: 21.761 ns/op
# Warmup Iteration   3: 13.367 ns/op
Iteration   1: 13.361 ns/op
Iteration   2: 13.374 ns/op
Iteration   3: 13.368 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.367 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (13.361, 13.367, 13.374), stdev = 0.007
  CI (99.9%): [13.244, 13.491] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 42.15% complete, ETA 00:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 397.613 ns/op
# Warmup Iteration   2: 274.321 ns/op
# Warmup Iteration   3: 178.220 ns/op
Iteration   1: 178.151 ns/op
Iteration   2: 178.179 ns/op
Iteration   3: 178.298 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  178.209 ±(99.9%) 1.425 ns/op [Average]
  (min, avg, max) = (178.151, 178.209, 178.298), stdev = 0.078
  CI (99.9%): [176.784, 179.634] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 42.22% complete, ETA 00:16:49
# Fork: 1 of 1
# Warmup Iteration   1: 356.709 ns/op
# Warmup Iteration   2: 337.960 ns/op
# Warmup Iteration   3: 232.799 ns/op
Iteration   1: 232.737 ns/op
Iteration   2: 232.734 ns/op
Iteration   3: 232.759 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  232.743 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (232.734, 232.743, 232.759), stdev = 0.013
  CI (99.9%): [232.502, 232.985] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 42.29% complete, ETA 00:16:48
# Fork: 1 of 1
# Warmup Iteration   1: 1049.298 ns/op
# Warmup Iteration   2: 369.897 ns/op
# Warmup Iteration   3: 280.719 ns/op
Iteration   1: 280.631 ns/op
Iteration   2: 280.544 ns/op
Iteration   3: 280.731 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  280.635 ±(99.9%) 1.707 ns/op [Average]
  (min, avg, max) = (280.544, 280.635, 280.731), stdev = 0.094
  CI (99.9%): [278.929, 282.342] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 42.36% complete, ETA 00:16:46
# Fork: 1 of 1
# Warmup Iteration   1: 272.550 ns/op
# Warmup Iteration   2: 266.861 ns/op
# Warmup Iteration   3: 174.648 ns/op
Iteration   1: 174.611 ns/op
Iteration   2: 175.176 ns/op
Iteration   3: 174.565 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  174.784 ±(99.9%) 6.209 ns/op [Average]
  (min, avg, max) = (174.565, 174.784, 175.176), stdev = 0.340
  CI (99.9%): [168.575, 180.993] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 42.43% complete, ETA 00:16:45
# Fork: 1 of 1
# Warmup Iteration   1: 544.599 ns/op
# Warmup Iteration   2: 366.254 ns/op
# Warmup Iteration   3: 225.722 ns/op
Iteration   1: 231.978 ns/op
Iteration   2: 225.120 ns/op
Iteration   3: 225.141 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  227.413 ±(99.9%) 72.125 ns/op [Average]
  (min, avg, max) = (225.120, 227.413, 231.978), stdev = 3.953
  CI (99.9%): [155.287, 299.538] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 42.50% complete, ETA 00:16:44
# Fork: 1 of 1
# Warmup Iteration   1: 18.916 ns/op
# Warmup Iteration   2: 24.517 ns/op
# Warmup Iteration   3: 13.364 ns/op
Iteration   1: 13.380 ns/op
Iteration   2: 13.369 ns/op
Iteration   3: 13.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.368 ±(99.9%) 0.225 ns/op [Average]
  (min, avg, max) = (13.355, 13.368, 13.380), stdev = 0.012
  CI (99.9%): [13.143, 13.593] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 42.57% complete, ETA 00:16:43
# Fork: 1 of 1
# Warmup Iteration   1: 1266.599 ns/op
# Warmup Iteration   2: 447.271 ns/op
# Warmup Iteration   3: 341.302 ns/op
Iteration   1: 345.553 ns/op
Iteration   2: 344.132 ns/op
Iteration   3: 345.748 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  345.145 ±(99.9%) 16.098 ns/op [Average]
  (min, avg, max) = (344.132, 345.145, 345.748), stdev = 0.882
  CI (99.9%): [329.046, 361.243] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 42.64% complete, ETA 00:16:42
# Fork: 1 of 1
# Warmup Iteration   1: 627.107 ns/op
# Warmup Iteration   2: 586.593 ns/op
# Warmup Iteration   3: 440.832 ns/op
Iteration   1: 433.208 ns/op
Iteration   2: 438.736 ns/op
Iteration   3: 439.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  437.278 ±(99.9%) 65.175 ns/op [Average]
  (min, avg, max) = (433.208, 437.278, 439.892), stdev = 3.572
  CI (99.9%): [372.104, 502.453] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 42.71% complete, ETA 00:16:40
# Fork: 1 of 1
# Warmup Iteration   1: 12022.640 ns/op
# Warmup Iteration   2: 575.279 ns/op
# Warmup Iteration   3: 442.310 ns/op
Iteration   1: 400.911 ns/op
Iteration   2: 401.104 ns/op
Iteration   3: 401.441 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  401.152 ±(99.9%) 4.894 ns/op [Average]
  (min, avg, max) = (400.911, 401.152, 401.441), stdev = 0.268
  CI (99.9%): [396.258, 406.046] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 42.78% complete, ETA 00:16:39
# Fork: 1 of 1
# Warmup Iteration   1: 625.789 ns/op
# Warmup Iteration   2: 458.130 ns/op
# Warmup Iteration   3: 338.865 ns/op
Iteration   1: 329.523 ns/op
Iteration   2: 334.967 ns/op
Iteration   3: 335.586 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  333.359 ±(99.9%) 60.863 ns/op [Average]
  (min, avg, max) = (329.523, 333.359, 335.586), stdev = 3.336
  CI (99.9%): [272.496, 394.221] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 42.85% complete, ETA 00:16:38
# Fork: 1 of 1
# Warmup Iteration   1: 3713.205 ns/op
# Warmup Iteration   2: 2364.869 ns/op
# Warmup Iteration   3: 1646.535 ns/op
Iteration   1: 1649.125 ns/op
Iteration   2: 1645.610 ns/op
Iteration   3: 1642.738 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1645.824 ±(99.9%) 58.359 ns/op [Average]
  (min, avg, max) = (1642.738, 1645.824, 1649.125), stdev = 3.199
  CI (99.9%): [1587.465, 1704.183] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 42.92% complete, ETA 00:16:37
# Fork: 1 of 1
# Warmup Iteration   1: 19.181 ns/op
# Warmup Iteration   2: 20.081 ns/op
# Warmup Iteration   3: 13.365 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 13.362 ns/op
Iteration   3: 13.357 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (13.350, 13.356, 13.362), stdev = 0.006
  CI (99.9%): [13.242, 13.471] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 42.99% complete, ETA 00:16:35
# Fork: 1 of 1
# Warmup Iteration   1: 407.732 ns/op
# Warmup Iteration   2: 263.789 ns/op
# Warmup Iteration   3: 184.692 ns/op
Iteration   1: 184.628 ns/op
Iteration   2: 184.684 ns/op
Iteration   3: 184.706 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  184.672 ±(99.9%) 0.732 ns/op [Average]
  (min, avg, max) = (184.628, 184.672, 184.706), stdev = 0.040
  CI (99.9%): [183.941, 185.404] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 43.06% complete, ETA 00:16:34
# Fork: 1 of 1
# Warmup Iteration   1: 348.064 ns/op
# Warmup Iteration   2: 323.595 ns/op
# Warmup Iteration   3: 232.803 ns/op
Iteration   1: 232.728 ns/op
Iteration   2: 232.742 ns/op
Iteration   3: 232.747 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  232.739 ±(99.9%) 0.182 ns/op [Average]
  (min, avg, max) = (232.728, 232.739, 232.747), stdev = 0.010
  CI (99.9%): [232.557, 232.921] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 43.13% complete, ETA 00:16:33
# Fork: 1 of 1
# Warmup Iteration   1: 1800.345 ns/op
# Warmup Iteration   2: 423.135 ns/op
# Warmup Iteration   3: 281.710 ns/op
Iteration   1: 281.617 ns/op
Iteration   2: 281.695 ns/op
Iteration   3: 281.641 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  281.651 ±(99.9%) 0.732 ns/op [Average]
  (min, avg, max) = (281.617, 281.651, 281.695), stdev = 0.040
  CI (99.9%): [280.919, 282.383] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 43.19% complete, ETA 00:16:32
# Fork: 1 of 1
# Warmup Iteration   1: 264.817 ns/op
# Warmup Iteration   2: 251.112 ns/op
# Warmup Iteration   3: 173.571 ns/op
Iteration   1: 173.575 ns/op
Iteration   2: 174.127 ns/op
Iteration   3: 173.503 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  173.735 ±(99.9%) 6.227 ns/op [Average]
  (min, avg, max) = (173.503, 173.735, 174.127), stdev = 0.341
  CI (99.9%): [167.507, 179.962] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 43.26% complete, ETA 00:16:31
# Fork: 1 of 1
# Warmup Iteration   1: 496.360 ns/op
# Warmup Iteration   2: 338.637 ns/op
# Warmup Iteration   3: 225.044 ns/op
Iteration   1: 225.020 ns/op
Iteration   2: 225.034 ns/op
Iteration   3: 225.003 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  225.019 ±(99.9%) 0.286 ns/op [Average]
  (min, avg, max) = (225.003, 225.019, 225.034), stdev = 0.016
  CI (99.9%): [224.733, 225.305] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 43.33% complete, ETA 00:16:29
# Fork: 1 of 1
# Warmup Iteration   1: 18.210 ns/op
# Warmup Iteration   2: 22.610 ns/op
# Warmup Iteration   3: 13.627 ns/op
Iteration   1: 13.615 ns/op
Iteration   2: 13.631 ns/op
Iteration   3: 13.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.620 ±(99.9%) 0.169 ns/op [Average]
  (min, avg, max) = (13.615, 13.620, 13.631), stdev = 0.009
  CI (99.9%): [13.452, 13.789] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 43.40% complete, ETA 00:16:28
# Fork: 1 of 1
# Warmup Iteration   1: 723.170 ns/op
# Warmup Iteration   2: 281.181 ns/op
# Warmup Iteration   3: 205.449 ns/op
Iteration   1: 205.302 ns/op
Iteration   2: 205.271 ns/op
Iteration   3: 205.650 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  205.407 ±(99.9%) 3.845 ns/op [Average]
  (min, avg, max) = (205.271, 205.407, 205.650), stdev = 0.211
  CI (99.9%): [201.563, 209.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 43.47% complete, ETA 00:16:27
# Fork: 1 of 1
# Warmup Iteration   1: 399.702 ns/op
# Warmup Iteration   2: 361.756 ns/op
# Warmup Iteration   3: 274.001 ns/op
Iteration   1: 273.584 ns/op
Iteration   2: 273.928 ns/op
Iteration   3: 273.366 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  273.626 ±(99.9%) 5.171 ns/op [Average]
  (min, avg, max) = (273.366, 273.626, 273.928), stdev = 0.283
  CI (99.9%): [268.454, 278.797] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 43.54% complete, ETA 00:16:26
# Fork: 1 of 1
# Warmup Iteration   1: 10486.922 ns/op
# Warmup Iteration   2: 485.471 ns/op
# Warmup Iteration   3: 307.313 ns/op
Iteration   1: 307.223 ns/op
Iteration   2: 307.049 ns/op
Iteration   3: 307.158 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  307.143 ±(99.9%) 1.608 ns/op [Average]
  (min, avg, max) = (307.049, 307.143, 307.223), stdev = 0.088
  CI (99.9%): [305.536, 308.751] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 43.61% complete, ETA 00:16:24
# Fork: 1 of 1
# Warmup Iteration   1: 323.089 ns/op
# Warmup Iteration   2: 315.287 ns/op
# Warmup Iteration   3: 207.436 ns/op
Iteration   1: 207.325 ns/op
Iteration   2: 207.067 ns/op
Iteration   3: 207.310 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  207.234 ±(99.9%) 2.636 ns/op [Average]
  (min, avg, max) = (207.067, 207.234, 207.325), stdev = 0.144
  CI (99.9%): [204.598, 209.870] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 43.68% complete, ETA 00:16:23
# Fork: 1 of 1
# Warmup Iteration   1: 857.340 ns/op
# Warmup Iteration   2: 503.487 ns/op
# Warmup Iteration   3: 329.179 ns/op
Iteration   1: 329.235 ns/op
Iteration   2: 329.188 ns/op
Iteration   3: 329.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  329.166 ±(99.9%) 1.517 ns/op [Average]
  (min, avg, max) = (329.073, 329.166, 329.235), stdev = 0.083
  CI (99.9%): [327.648, 330.683] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 43.75% complete, ETA 00:16:22
# Fork: 1 of 1
# Warmup Iteration   1: 19.015 ns/op
# Warmup Iteration   2: 20.317 ns/op
# Warmup Iteration   3: 13.373 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.371 ns/op
Iteration   3: 13.350 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.356 ±(99.9%) 0.235 ns/op [Average]
  (min, avg, max) = (13.347, 13.356, 13.371), stdev = 0.013
  CI (99.9%): [13.121, 13.591] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 43.82% complete, ETA 00:16:21
# Fork: 1 of 1
# Warmup Iteration   1: 1008.655 ns/op
# Warmup Iteration   2: 388.930 ns/op
# Warmup Iteration   3: 267.459 ns/op
Iteration   1: 268.187 ns/op
Iteration   2: 268.285 ns/op
Iteration   3: 268.579 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  268.350 ±(99.9%) 3.717 ns/op [Average]
  (min, avg, max) = (268.187, 268.350, 268.579), stdev = 0.204
  CI (99.9%): [264.633, 272.067] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 43.89% complete, ETA 00:16:20
# Fork: 1 of 1
# Warmup Iteration   1: 563.332 ns/op
# Warmup Iteration   2: 562.373 ns/op
# Warmup Iteration   3: 384.171 ns/op
Iteration   1: 384.025 ns/op
Iteration   2: 383.885 ns/op
Iteration   3: 383.947 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  383.953 ±(99.9%) 1.280 ns/op [Average]
  (min, avg, max) = (383.885, 383.953, 384.025), stdev = 0.070
  CI (99.9%): [382.673, 385.232] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 43.96% complete, ETA 00:16:18
# Fork: 1 of 1
# Warmup Iteration   1: 4356.333 ns/op
# Warmup Iteration   2: 451.352 ns/op
# Warmup Iteration   3: 338.891 ns/op
Iteration   1: 338.859 ns/op
Iteration   2: 338.819 ns/op
Iteration   3: 338.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.852 ±(99.9%) 0.566 ns/op [Average]
  (min, avg, max) = (338.819, 338.852, 338.880), stdev = 0.031
  CI (99.9%): [338.287, 339.418] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 44.03% complete, ETA 00:16:17
# Fork: 1 of 1
# Warmup Iteration   1: 501.461 ns/op
# Warmup Iteration   2: 478.486 ns/op
# Warmup Iteration   3: 312.583 ns/op
Iteration   1: 312.665 ns/op
Iteration   2: 312.820 ns/op
Iteration   3: 312.563 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  312.683 ±(99.9%) 2.365 ns/op [Average]
  (min, avg, max) = (312.563, 312.683, 312.820), stdev = 0.130
  CI (99.9%): [310.317, 315.048] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 44.10% complete, ETA 00:16:16
# Fork: 1 of 1
# Warmup Iteration   1: 4053.842 ns/op
# Warmup Iteration   2: 2296.675 ns/op
# Warmup Iteration   3: 1554.437 ns/op
Iteration   1: 1555.804 ns/op
Iteration   2: 1554.312 ns/op
Iteration   3: 1563.311 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1557.809 ±(99.9%) 87.993 ns/op [Average]
  (min, avg, max) = (1554.312, 1557.809, 1563.311), stdev = 4.823
  CI (99.9%): [1469.816, 1645.802] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 44.17% complete, ETA 00:16:15
# Fork: 1 of 1
# Warmup Iteration   1: 18.226 ns/op
# Warmup Iteration   2: 23.614 ns/op
# Warmup Iteration   3: 13.359 ns/op
Iteration   1: 13.351 ns/op
Iteration   2: 13.427 ns/op
Iteration   3: 13.345 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.374 ±(99.9%) 0.836 ns/op [Average]
  (min, avg, max) = (13.345, 13.374, 13.427), stdev = 0.046
  CI (99.9%): [12.538, 14.210] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 44.24% complete, ETA 00:16:13
# Fork: 1 of 1
# Warmup Iteration   1: 412.454 ns/op
# Warmup Iteration   2: 202.999 ns/op
# Warmup Iteration   3: 138.059 ns/op
Iteration   1: 137.948 ns/op
Iteration   2: 137.980 ns/op
Iteration   3: 138.004 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.978 ±(99.9%) 0.509 ns/op [Average]
  (min, avg, max) = (137.948, 137.978, 138.004), stdev = 0.028
  CI (99.9%): [137.469, 138.486] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 44.31% complete, ETA 00:16:12
# Fork: 1 of 1
# Warmup Iteration   1: 368.053 ns/op
# Warmup Iteration   2: 348.927 ns/op
# Warmup Iteration   3: 250.611 ns/op
Iteration   1: 250.783 ns/op
Iteration   2: 250.627 ns/op
Iteration   3: 250.925 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  250.778 ±(99.9%) 2.722 ns/op [Average]
  (min, avg, max) = (250.627, 250.778, 250.925), stdev = 0.149
  CI (99.9%): [248.057, 253.500] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 44.38% complete, ETA 00:16:11
# Fork: 1 of 1
# Warmup Iteration   1: 668.090 ns/op
# Warmup Iteration   2: 277.704 ns/op
# Warmup Iteration   3: 196.249 ns/op
Iteration   1: 196.225 ns/op
Iteration   2: 196.165 ns/op
Iteration   3: 196.184 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  196.192 ±(99.9%) 0.560 ns/op [Average]
  (min, avg, max) = (196.165, 196.192, 196.225), stdev = 0.031
  CI (99.9%): [195.632, 196.751] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 44.44% complete, ETA 00:16:10
# Fork: 1 of 1
# Warmup Iteration   1: 229.329 ns/op
# Warmup Iteration   2: 227.395 ns/op
# Warmup Iteration   3: 154.582 ns/op
Iteration   1: 154.534 ns/op
Iteration   2: 154.733 ns/op
Iteration   3: 154.599 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  154.622 ±(99.9%) 1.852 ns/op [Average]
  (min, avg, max) = (154.534, 154.622, 154.733), stdev = 0.102
  CI (99.9%): [152.770, 156.475] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 44.51% complete, ETA 00:16:09
# Fork: 1 of 1
# Warmup Iteration   1: 570.969 ns/op
# Warmup Iteration   2: 360.186 ns/op
# Warmup Iteration   3: 233.829 ns/op
Iteration   1: 233.980 ns/op
Iteration   2: 233.805 ns/op
Iteration   3: 233.764 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.850 ±(99.9%) 2.089 ns/op [Average]
  (min, avg, max) = (233.764, 233.850, 233.980), stdev = 0.115
  CI (99.9%): [231.760, 235.939] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 44.58% complete, ETA 00:16:07
# Fork: 1 of 1
# Warmup Iteration   1: 19.178 ns/op
# Warmup Iteration   2: 23.927 ns/op
# Warmup Iteration   3: 13.374 ns/op
Iteration   1: 13.347 ns/op
Iteration   2: 13.371 ns/op
Iteration   3: 13.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.355 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (13.347, 13.355, 13.371), stdev = 0.013
  CI (99.9%): [13.114, 13.597] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 44.65% complete, ETA 00:16:06
# Fork: 1 of 1
# Warmup Iteration   1: 2957.861 ns/op
# Warmup Iteration   2: 470.357 ns/op
# Warmup Iteration   3: 346.427 ns/op
Iteration   1: 346.701 ns/op
Iteration   2: 344.413 ns/op
Iteration   3: 348.974 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  346.696 ±(99.9%) 41.605 ns/op [Average]
  (min, avg, max) = (344.413, 346.696, 348.974), stdev = 2.281
  CI (99.9%): [305.091, 388.301] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 44.72% complete, ETA 00:16:05
# Fork: 1 of 1
# Warmup Iteration   1: 654.005 ns/op
# Warmup Iteration   2: 635.302 ns/op
# Warmup Iteration   3: 451.228 ns/op
Iteration   1: 444.338 ns/op
Iteration   2: 451.426 ns/op
Iteration   3: 449.784 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  448.516 ±(99.9%) 67.689 ns/op [Average]
  (min, avg, max) = (444.338, 448.516, 451.426), stdev = 3.710
  CI (99.9%): [380.827, 516.205] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 44.79% complete, ETA 00:16:04
# Fork: 1 of 1
# Warmup Iteration   1: 10595.249 ns/op
# Warmup Iteration   2: 592.109 ns/op
# Warmup Iteration   3: 463.310 ns/op
Iteration   1: 416.574 ns/op
Iteration   2: 418.444 ns/op
Iteration   3: 416.387 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  417.135 ±(99.9%) 20.754 ns/op [Average]
  (min, avg, max) = (416.387, 417.135, 418.444), stdev = 1.138
  CI (99.9%): [396.381, 437.888] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 44.86% complete, ETA 00:16:02
# Fork: 1 of 1
# Warmup Iteration   1: 701.734 ns/op
# Warmup Iteration   2: 482.295 ns/op
# Warmup Iteration   3: 347.337 ns/op
Iteration   1: 347.633 ns/op
Iteration   2: 347.813 ns/op
Iteration   3: 347.991 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  347.812 ±(99.9%) 3.269 ns/op [Average]
  (min, avg, max) = (347.633, 347.812, 347.991), stdev = 0.179
  CI (99.9%): [344.543, 351.082] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 44.93% complete, ETA 00:16:01
# Fork: 1 of 1
# Warmup Iteration   1: 3372.200 ns/op
# Warmup Iteration   2: 2429.360 ns/op
# Warmup Iteration   3: 1690.658 ns/op
Iteration   1: 1680.596 ns/op
Iteration   2: 1691.044 ns/op
Iteration   3: 1690.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1687.329 ±(99.9%) 106.578 ns/op [Average]
  (min, avg, max) = (1680.596, 1687.329, 1691.044), stdev = 5.842
  CI (99.9%): [1580.751, 1793.907] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 45.00% complete, ETA 00:16:00
# Fork: 1 of 1
# Warmup Iteration   1: 19.194 ns/op
# Warmup Iteration   2: 22.729 ns/op
# Warmup Iteration   3: 14.061 ns/op
Iteration   1: 14.038 ns/op
Iteration   2: 14.065 ns/op
Iteration   3: 14.036 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.046 ±(99.9%) 0.302 ns/op [Average]
  (min, avg, max) = (14.036, 14.046, 14.065), stdev = 0.017
  CI (99.9%): [13.745, 14.348] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 45.07% complete, ETA 00:15:59
# Fork: 1 of 1
# Warmup Iteration   1: 435.092 ns/op
# Warmup Iteration   2: 200.886 ns/op
# Warmup Iteration   3: 138.573 ns/op
Iteration   1: 138.527 ns/op
Iteration   2: 138.500 ns/op
Iteration   3: 138.475 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.501 ±(99.9%) 0.478 ns/op [Average]
  (min, avg, max) = (138.475, 138.501, 138.527), stdev = 0.026
  CI (99.9%): [138.023, 138.978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 45.14% complete, ETA 00:15:58
# Fork: 1 of 1
# Warmup Iteration   1: 375.421 ns/op
# Warmup Iteration   2: 344.071 ns/op
# Warmup Iteration   3: 247.360 ns/op
Iteration   1: 247.227 ns/op
Iteration   2: 247.302 ns/op
Iteration   3: 247.285 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  247.271 ±(99.9%) 0.713 ns/op [Average]
  (min, avg, max) = (247.227, 247.271, 247.302), stdev = 0.039
  CI (99.9%): [246.559, 247.984] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 45.21% complete, ETA 00:15:56
# Fork: 1 of 1
# Warmup Iteration   1: 543.152 ns/op
# Warmup Iteration   2: 288.599 ns/op
# Warmup Iteration   3: 194.821 ns/op
Iteration   1: 194.811 ns/op
Iteration   2: 195.033 ns/op
Iteration   3: 194.788 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  194.877 ±(99.9%) 2.469 ns/op [Average]
  (min, avg, max) = (194.788, 194.877, 195.033), stdev = 0.135
  CI (99.9%): [192.408, 197.346] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 45.28% complete, ETA 00:15:55
# Fork: 1 of 1
# Warmup Iteration   1: 238.990 ns/op
# Warmup Iteration   2: 238.524 ns/op
# Warmup Iteration   3: 161.614 ns/op
Iteration   1: 161.549 ns/op
Iteration   2: 161.599 ns/op
Iteration   3: 161.568 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  161.572 ±(99.9%) 0.463 ns/op [Average]
  (min, avg, max) = (161.549, 161.572, 161.599), stdev = 0.025
  CI (99.9%): [161.109, 162.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 45.35% complete, ETA 00:15:54
# Fork: 1 of 1
# Warmup Iteration   1: 557.325 ns/op
# Warmup Iteration   2: 360.463 ns/op
# Warmup Iteration   3: 241.463 ns/op
Iteration   1: 241.235 ns/op
Iteration   2: 241.290 ns/op
Iteration   3: 241.328 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  241.284 ±(99.9%) 0.850 ns/op [Average]
  (min, avg, max) = (241.235, 241.284, 241.328), stdev = 0.047
  CI (99.9%): [240.434, 242.134] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 45.42% complete, ETA 00:15:53
# Fork: 1 of 1
# Warmup Iteration   1: 19.600 ns/op
# Warmup Iteration   2: 23.631 ns/op
# Warmup Iteration   3: 13.626 ns/op
Iteration   1: 13.615 ns/op
Iteration   2: 13.630 ns/op
Iteration   3: 13.614 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.620 ±(99.9%) 0.159 ns/op [Average]
  (min, avg, max) = (13.614, 13.620, 13.630), stdev = 0.009
  CI (99.9%): [13.461, 13.778] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 45.49% complete, ETA 00:15:52
# Fork: 1 of 1
# Warmup Iteration   1: 2038.386 ns/op
# Warmup Iteration   2: 292.557 ns/op
# Warmup Iteration   3: 216.037 ns/op
Iteration   1: 215.868 ns/op
Iteration   2: 215.942 ns/op
Iteration   3: 215.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  215.881 ±(99.9%) 1.002 ns/op [Average]
  (min, avg, max) = (215.834, 215.881, 215.942), stdev = 0.055
  CI (99.9%): [214.879, 216.883] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 45.56% complete, ETA 00:15:50
# Fork: 1 of 1
# Warmup Iteration   1: 399.045 ns/op
# Warmup Iteration   2: 362.954 ns/op
# Warmup Iteration   3: 272.975 ns/op
Iteration   1: 272.916 ns/op
Iteration   2: 273.328 ns/op
Iteration   3: 272.944 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  273.063 ±(99.9%) 4.196 ns/op [Average]
  (min, avg, max) = (272.916, 273.063, 273.328), stdev = 0.230
  CI (99.9%): [268.867, 277.259] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 45.63% complete, ETA 00:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 8636.901 ns/op
# Warmup Iteration   2: 404.668 ns/op
# Warmup Iteration   3: 262.003 ns/op
Iteration   1: 261.958 ns/op
Iteration   2: 262.092 ns/op
Iteration   3: 292.763 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  272.271 ±(99.9%) 323.766 ns/op [Average]
  (min, avg, max) = (261.958, 272.271, 292.763), stdev = 17.747
  CI (99.9%): [≈ 0, 596.037] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 45.69% complete, ETA 00:15:48
# Fork: 1 of 1
# Warmup Iteration   1: 326.674 ns/op
# Warmup Iteration   2: 298.026 ns/op
# Warmup Iteration   3: 196.796 ns/op
Iteration   1: 196.763 ns/op
Iteration   2: 196.998 ns/op
Iteration   3: 196.766 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  196.842 ±(99.9%) 2.457 ns/op [Average]
  (min, avg, max) = (196.763, 196.842, 196.998), stdev = 0.135
  CI (99.9%): [194.385, 199.299] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 45.76% complete, ETA 00:15:47
# Fork: 1 of 1
# Warmup Iteration   1: 888.943 ns/op
# Warmup Iteration   2: 526.165 ns/op
# Warmup Iteration   3: 340.341 ns/op
Iteration   1: 340.178 ns/op
Iteration   2: 340.081 ns/op
Iteration   3: 339.999 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  340.086 ±(99.9%) 1.631 ns/op [Average]
  (min, avg, max) = (339.999, 340.086, 340.178), stdev = 0.089
  CI (99.9%): [338.455, 341.717] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 45.83% complete, ETA 00:15:45
# Fork: 1 of 1
# Warmup Iteration   1: 18.866 ns/op
# Warmup Iteration   2: 23.697 ns/op
# Warmup Iteration   3: 13.360 ns/op
Iteration   1: 13.364 ns/op
Iteration   2: 16.562 ns/op
Iteration   3: 13.345 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.424 ±(99.9%) 33.785 ns/op [Average]
  (min, avg, max) = (13.345, 14.424, 16.562), stdev = 1.852
  CI (99.9%): [≈ 0, 48.209] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 45.90% complete, ETA 00:15:44
# Fork: 1 of 1
# Warmup Iteration   1: 189.252 ns/op
# Warmup Iteration   2: 137.611 ns/op
# Warmup Iteration   3: 95.212 ns/op
Iteration   1: 95.205 ns/op
Iteration   2: 112.601 ns/op
Iteration   3: 95.207 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  101.004 ±(99.9%) 183.226 ns/op [Average]
  (min, avg, max) = (95.205, 101.004, 112.601), stdev = 10.043
  CI (99.9%): [≈ 0, 284.230] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 45.97% complete, ETA 00:15:43
# Fork: 1 of 1
# Warmup Iteration   1: 69.140 ns/op
# Warmup Iteration   2: 72.206 ns/op
# Warmup Iteration   3: 44.076 ns/op
Iteration   1: 44.070 ns/op
Iteration   2: 51.728 ns/op
Iteration   3: 44.082 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.626 ±(99.9%) 80.597 ns/op [Average]
  (min, avg, max) = (44.070, 46.626, 51.728), stdev = 4.418
  CI (99.9%): [≈ 0, 127.223] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 46.04% complete, ETA 00:15:42
# Fork: 1 of 1
# Warmup Iteration   1: 240.955 ns/op
# Warmup Iteration   2: 171.001 ns/op
# Warmup Iteration   3: 108.990 ns/op
Iteration   1: 109.233 ns/op
Iteration   2: 133.779 ns/op
Iteration   3: 108.938 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.317 ±(99.9%) 260.109 ns/op [Average]
  (min, avg, max) = (108.938, 117.317, 133.779), stdev = 14.257
  CI (99.9%): [≈ 0, 377.425] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 46.11% complete, ETA 00:15:41
# Fork: 1 of 1
# Warmup Iteration   1: 67.368 ns/op
# Warmup Iteration   2: 71.464 ns/op
# Warmup Iteration   3: 46.409 ns/op
Iteration   1: 46.403 ns/op
Iteration   2: 52.566 ns/op
Iteration   3: 46.393 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  48.454 ±(99.9%) 64.965 ns/op [Average]
  (min, avg, max) = (46.393, 48.454, 52.566), stdev = 3.561
  CI (99.9%): [≈ 0, 113.419] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 46.18% complete, ETA 00:15:39
# Fork: 1 of 1
# Warmup Iteration   1: 195.589 ns/op
# Warmup Iteration   2: 183.501 ns/op
# Warmup Iteration   3: 128.766 ns/op
Iteration   1: 128.786 ns/op
Iteration   2: 152.329 ns/op
Iteration   3: 128.776 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  136.630 ±(99.9%) 248.037 ns/op [Average]
  (min, avg, max) = (128.776, 136.630, 152.329), stdev = 13.596
  CI (99.9%): [≈ 0, 384.667] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 46.25% complete, ETA 00:15:38
# Fork: 1 of 1
# Warmup Iteration   1: 18.789 ns/op
# Warmup Iteration   2: 23.686 ns/op
# Warmup Iteration   3: 13.351 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.355 ns/op
Iteration   3: 13.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.353 ±(99.9%) 0.086 ns/op [Average]
  (min, avg, max) = (13.347, 13.353, 13.356), stdev = 0.005
  CI (99.9%): [13.267, 13.439] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 46.32% complete, ETA 00:15:37
# Fork: 1 of 1
# Warmup Iteration   1: 172.031 ns/op
# Warmup Iteration   2: 136.896 ns/op
# Warmup Iteration   3: 89.202 ns/op
Iteration   1: 89.104 ns/op
Iteration   2: 89.099 ns/op
Iteration   3: 89.041 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.081 ±(99.9%) 0.644 ns/op [Average]
  (min, avg, max) = (89.041, 89.081, 89.104), stdev = 0.035
  CI (99.9%): [88.437, 89.725] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 46.39% complete, ETA 00:15:36
# Fork: 1 of 1
# Warmup Iteration   1: 68.641 ns/op
# Warmup Iteration   2: 75.567 ns/op
# Warmup Iteration   3: 44.078 ns/op
Iteration   1: 44.084 ns/op
Iteration   2: 44.065 ns/op
Iteration   3: 44.086 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.078 ±(99.9%) 0.204 ns/op [Average]
  (min, avg, max) = (44.065, 44.078, 44.086), stdev = 0.011
  CI (99.9%): [43.875, 44.282] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 46.46% complete, ETA 00:15:35
# Fork: 1 of 1
# Warmup Iteration   1: 268.589 ns/op
# Warmup Iteration   2: 166.185 ns/op
# Warmup Iteration   3: 104.582 ns/op
Iteration   1: 104.597 ns/op
Iteration   2: 104.581 ns/op
Iteration   3: 104.586 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  104.588 ±(99.9%) 0.147 ns/op [Average]
  (min, avg, max) = (104.581, 104.588, 104.597), stdev = 0.008
  CI (99.9%): [104.441, 104.735] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 46.53% complete, ETA 00:15:33
# Fork: 1 of 1
# Warmup Iteration   1: 66.756 ns/op
# Warmup Iteration   2: 68.947 ns/op
# Warmup Iteration   3: 46.395 ns/op
Iteration   1: 46.383 ns/op
Iteration   2: 46.399 ns/op
Iteration   3: 46.419 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.401 ±(99.9%) 0.323 ns/op [Average]
  (min, avg, max) = (46.383, 46.401, 46.419), stdev = 0.018
  CI (99.9%): [46.077, 46.724] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 46.60% complete, ETA 00:15:32
# Fork: 1 of 1
# Warmup Iteration   1: 177.838 ns/op
# Warmup Iteration   2: 181.264 ns/op
# Warmup Iteration   3: 124.255 ns/op
Iteration   1: 124.131 ns/op
Iteration   2: 124.067 ns/op
Iteration   3: 124.174 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  124.124 ±(99.9%) 0.983 ns/op [Average]
  (min, avg, max) = (124.067, 124.124, 124.174), stdev = 0.054
  CI (99.9%): [123.142, 125.107] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 46.67% complete, ETA 00:15:31
# Fork: 1 of 1
# Warmup Iteration   1: 19.306 ns/op
# Warmup Iteration   2: 21.827 ns/op
# Warmup Iteration   3: 13.375 ns/op
Iteration   1: 16.113 ns/op
Iteration   2: 13.353 ns/op
Iteration   3: 13.368 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.278 ±(99.9%) 28.995 ns/op [Average]
  (min, avg, max) = (13.353, 14.278, 16.113), stdev = 1.589
  CI (99.9%): [≈ 0, 43.273] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 46.74% complete, ETA 00:15:30
# Fork: 1 of 1
# Warmup Iteration   1: 200.056 ns/op
# Warmup Iteration   2: 151.470 ns/op
# Warmup Iteration   3: 99.847 ns/op
Iteration   1: 126.099 ns/op
Iteration   2: 99.945 ns/op
Iteration   3: 99.765 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.603 ±(99.9%) 276.430 ns/op [Average]
  (min, avg, max) = (99.765, 108.603, 126.099), stdev = 15.152
  CI (99.9%): [≈ 0, 385.033] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 46.81% complete, ETA 00:15:28
# Fork: 1 of 1
# Warmup Iteration   1: 66.012 ns/op
# Warmup Iteration   2: 67.514 ns/op
# Warmup Iteration   3: 44.095 ns/op
Iteration   1: 55.752 ns/op
Iteration   2: 44.065 ns/op
Iteration   3: 44.048 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.955 ±(99.9%) 123.187 ns/op [Average]
  (min, avg, max) = (44.048, 47.955, 55.752), stdev = 6.752
  CI (99.9%): [≈ 0, 171.142] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 46.88% complete, ETA 00:15:27
# Fork: 1 of 1
# Warmup Iteration   1: 350.482 ns/op
# Warmup Iteration   2: 176.404 ns/op
# Warmup Iteration   3: 115.629 ns/op
Iteration   1: 133.120 ns/op
Iteration   2: 115.548 ns/op
Iteration   3: 115.387 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.352 ±(99.9%) 185.942 ns/op [Average]
  (min, avg, max) = (115.387, 121.352, 133.120), stdev = 10.192
  CI (99.9%): [≈ 0, 307.293] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 46.94% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 75.943 ns/op
# Warmup Iteration   2: 67.842 ns/op
# Warmup Iteration   3: 47.804 ns/op
Iteration   1: 59.198 ns/op
Iteration   2: 47.788 ns/op
Iteration   3: 47.795 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  51.594 ±(99.9%) 120.149 ns/op [Average]
  (min, avg, max) = (47.788, 51.594, 59.198), stdev = 6.586
  CI (99.9%): [≈ 0, 171.743] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 47.01% complete, ETA 00:15:25
# Fork: 1 of 1
# Warmup Iteration   1: 190.157 ns/op
# Warmup Iteration   2: 198.223 ns/op
# Warmup Iteration   3: 129.601 ns/op
Iteration   1: 149.266 ns/op
Iteration   2: 129.603 ns/op
Iteration   3: 129.583 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  136.151 ±(99.9%) 207.211 ns/op [Average]
  (min, avg, max) = (129.583, 136.151, 149.266), stdev = 11.358
  CI (99.9%): [≈ 0, 343.362] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 47.08% complete, ETA 00:15:24
# Fork: 1 of 1
# Warmup Iteration   1: 21.509 ns/op
# Warmup Iteration   2: 22.639 ns/op
# Warmup Iteration   3: 14.147 ns/op
Iteration   1: 14.143 ns/op
Iteration   2: 14.147 ns/op
Iteration   3: 14.144 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  14.145 ±(99.9%) 0.045 ns/op [Average]
  (min, avg, max) = (14.143, 14.145, 14.147), stdev = 0.002
  CI (99.9%): [14.099, 14.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 47.15% complete, ETA 00:15:23
# Fork: 1 of 1
# Warmup Iteration   1: 170.136 ns/op
# Warmup Iteration   2: 137.710 ns/op
# Warmup Iteration   3: 89.296 ns/op
Iteration   1: 89.047 ns/op
Iteration   2: 89.029 ns/op
Iteration   3: 89.046 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.041 ±(99.9%) 0.183 ns/op [Average]
  (min, avg, max) = (89.029, 89.041, 89.047), stdev = 0.010
  CI (99.9%): [88.858, 89.223] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 47.22% complete, ETA 00:15:21
# Fork: 1 of 1
# Warmup Iteration   1: 65.662 ns/op
# Warmup Iteration   2: 70.129 ns/op
# Warmup Iteration   3: 44.725 ns/op
Iteration   1: 44.703 ns/op
Iteration   2: 44.724 ns/op
Iteration   3: 44.726 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.718 ±(99.9%) 0.229 ns/op [Average]
  (min, avg, max) = (44.703, 44.718, 44.726), stdev = 0.013
  CI (99.9%): [44.488, 44.947] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 47.29% complete, ETA 00:15:20
# Fork: 1 of 1
# Warmup Iteration   1: 264.791 ns/op
# Warmup Iteration   2: 157.762 ns/op
# Warmup Iteration   3: 107.047 ns/op
Iteration   1: 107.114 ns/op
Iteration   2: 106.963 ns/op
Iteration   3: 107.107 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  107.061 ±(99.9%) 1.551 ns/op [Average]
  (min, avg, max) = (106.963, 107.061, 107.114), stdev = 0.085
  CI (99.9%): [105.510, 108.613] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 47.36% complete, ETA 00:15:19
# Fork: 1 of 1
# Warmup Iteration   1: 69.942 ns/op
# Warmup Iteration   2: 68.545 ns/op
# Warmup Iteration   3: 46.410 ns/op
Iteration   1: 46.381 ns/op
Iteration   2: 46.382 ns/op
Iteration   3: 46.411 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  46.391 ±(99.9%) 0.309 ns/op [Average]
  (min, avg, max) = (46.381, 46.391, 46.411), stdev = 0.017
  CI (99.9%): [46.082, 46.700] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 47.43% complete, ETA 00:15:18
# Fork: 1 of 1
# Warmup Iteration   1: 177.338 ns/op
# Warmup Iteration   2: 174.453 ns/op
# Warmup Iteration   3: 125.472 ns/op
Iteration   1: 125.477 ns/op
Iteration   2: 125.469 ns/op
Iteration   3: 125.432 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  125.459 ±(99.9%) 0.432 ns/op [Average]
  (min, avg, max) = (125.432, 125.459, 125.477), stdev = 0.024
  CI (99.9%): [125.027, 125.891] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 47.50% complete, ETA 00:15:16
# Fork: 1 of 1
# Warmup Iteration   1: 19.549 ns/op
# Warmup Iteration   2: 23.835 ns/op
# Warmup Iteration   3: 13.359 ns/op
Iteration   1: 13.356 ns/op
Iteration   2: 13.373 ns/op
Iteration   3: 13.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.359 ±(99.9%) 0.227 ns/op [Average]
  (min, avg, max) = (13.348, 13.359, 13.373), stdev = 0.012
  CI (99.9%): [13.132, 13.586] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 47.57% complete, ETA 00:15:15
# Fork: 1 of 1
# Warmup Iteration   1: 165.847 ns/op
# Warmup Iteration   2: 122.548 ns/op
# Warmup Iteration   3: 89.387 ns/op
Iteration   1: 89.304 ns/op
Iteration   2: 89.322 ns/op
Iteration   3: 89.272 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.299 ±(99.9%) 0.464 ns/op [Average]
  (min, avg, max) = (89.272, 89.299, 89.322), stdev = 0.025
  CI (99.9%): [88.836, 89.763] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 47.64% complete, ETA 00:15:14
# Fork: 1 of 1
# Warmup Iteration   1: 64.485 ns/op
# Warmup Iteration   2: 69.981 ns/op
# Warmup Iteration   3: 44.069 ns/op
Iteration   1: 44.056 ns/op
Iteration   2: 44.067 ns/op
Iteration   3: 44.091 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  44.072 ±(99.9%) 0.323 ns/op [Average]
  (min, avg, max) = (44.056, 44.072, 44.091), stdev = 0.018
  CI (99.9%): [43.748, 44.395] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 47.71% complete, ETA 00:15:13
# Fork: 1 of 1
# Warmup Iteration   1: 270.773 ns/op
# Warmup Iteration   2: 151.533 ns/op
# Warmup Iteration   3: 104.253 ns/op
Iteration   1: 104.209 ns/op
Iteration   2: 104.158 ns/op
Iteration   3: 104.158 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  104.175 ±(99.9%) 0.541 ns/op [Average]
  (min, avg, max) = (104.158, 104.175, 104.209), stdev = 0.030
  CI (99.9%): [103.634, 104.716] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 47.78% complete, ETA 00:15:12
# Fork: 1 of 1
# Warmup Iteration   1: 67.983 ns/op
# Warmup Iteration   2: 67.097 ns/op
# Warmup Iteration   3: 47.794 ns/op
Iteration   1: 47.788 ns/op
Iteration   2: 47.792 ns/op
Iteration   3: 47.772 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  47.784 ±(99.9%) 0.185 ns/op [Average]
  (min, avg, max) = (47.772, 47.784, 47.792), stdev = 0.010
  CI (99.9%): [47.599, 47.969] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 47.85% complete, ETA 00:15:10
# Fork: 1 of 1
# Warmup Iteration   1: 168.094 ns/op
# Warmup Iteration   2: 171.875 ns/op
# Warmup Iteration   3: 115.250 ns/op
Iteration   1: 115.171 ns/op
Iteration   2: 115.124 ns/op
Iteration   3: 115.123 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.139 ±(99.9%) 0.500 ns/op [Average]
  (min, avg, max) = (115.123, 115.139, 115.171), stdev = 0.027
  CI (99.9%): [114.639, 115.639] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 47.92% complete, ETA 00:15:09
# Fork: 1 of 1
# Warmup Iteration   1: 19.082 ns/op
# Warmup Iteration   2: 20.132 ns/op
# Warmup Iteration   3: 13.366 ns/op
Iteration   1: 13.355 ns/op
Iteration   2: 13.372 ns/op
Iteration   3: 13.357 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.361 ±(99.9%) 0.169 ns/op [Average]
  (min, avg, max) = (13.355, 13.361, 13.372), stdev = 0.009
  CI (99.9%): [13.193, 13.530] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 47.99% complete, ETA 00:15:08
# Fork: 1 of 1
# Warmup Iteration   1: 708.886 ns/op
# Warmup Iteration   2: 443.393 ns/op
# Warmup Iteration   3: 303.730 ns/op
Iteration   1: 304.052 ns/op
Iteration   2: 303.819 ns/op
Iteration   3: 303.998 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  303.957 ±(99.9%) 2.223 ns/op [Average]
  (min, avg, max) = (303.819, 303.957, 304.052), stdev = 0.122
  CI (99.9%): [301.734, 306.179] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 48.06% complete, ETA 00:15:07
# Fork: 1 of 1
# Warmup Iteration   1: 566.159 ns/op
# Warmup Iteration   2: 566.004 ns/op
# Warmup Iteration   3: 385.704 ns/op
Iteration   1: 385.692 ns/op
Iteration   2: 385.910 ns/op
Iteration   3: 385.660 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  385.754 ±(99.9%) 2.484 ns/op [Average]
  (min, avg, max) = (385.660, 385.754, 385.910), stdev = 0.136
  CI (99.9%): [383.270, 388.238] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 48.13% complete, ETA 00:15:06
# Fork: 1 of 1
# Warmup Iteration   1: 5787.995 ns/op
# Warmup Iteration   2: 477.647 ns/op
# Warmup Iteration   3: 315.509 ns/op
Iteration   1: 315.518 ns/op
Iteration   2: 315.470 ns/op
Iteration   3: 315.382 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  315.457 ±(99.9%) 1.265 ns/op [Average]
  (min, avg, max) = (315.382, 315.457, 315.518), stdev = 0.069
  CI (99.9%): [314.192, 316.722] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 48.19% complete, ETA 00:15:04
# Fork: 1 of 1
# Warmup Iteration   1: 576.505 ns/op
# Warmup Iteration   2: 430.063 ns/op
# Warmup Iteration   3: 312.809 ns/op
Iteration   1: 312.494 ns/op
Iteration   2: 312.432 ns/op
Iteration   3: 312.440 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  312.455 ±(99.9%) 0.614 ns/op [Average]
  (min, avg, max) = (312.432, 312.455, 312.494), stdev = 0.034
  CI (99.9%): [311.841, 313.069] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 48.26% complete, ETA 00:15:03
# Fork: 1 of 1
# Warmup Iteration   1: 2996.176 ns/op
# Warmup Iteration   2: 2245.018 ns/op
# Warmup Iteration   3: 1529.496 ns/op
Iteration   1: 1529.774 ns/op
Iteration   2: 1529.913 ns/op
Iteration   3: 1529.685 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1529.790 ±(99.9%) 2.097 ns/op [Average]
  (min, avg, max) = (1529.685, 1529.790, 1529.913), stdev = 0.115
  CI (99.9%): [1527.693, 1531.888] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 48.33% complete, ETA 00:15:02
# Fork: 1 of 1
# Warmup Iteration   1: 19.593 ns/op
# Warmup Iteration   2: 24.170 ns/op
# Warmup Iteration   3: 13.376 ns/op
Iteration   1: 13.350 ns/op
Iteration   2: 13.361 ns/op
Iteration   3: 13.349 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.353 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (13.349, 13.353, 13.361), stdev = 0.007
  CI (99.9%): [13.229, 13.478] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 48.40% complete, ETA 00:15:01
# Fork: 1 of 1
# Warmup Iteration   1: 495.206 ns/op
# Warmup Iteration   2: 273.476 ns/op
# Warmup Iteration   3: 200.153 ns/op
Iteration   1: 200.096 ns/op
Iteration   2: 200.009 ns/op
Iteration   3: 199.945 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  200.016 ±(99.9%) 1.385 ns/op [Average]
  (min, avg, max) = (199.945, 200.016, 200.096), stdev = 0.076
  CI (99.9%): [198.632, 201.401] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 48.47% complete, ETA 00:14:59
# Fork: 1 of 1
# Warmup Iteration   1: 189.151 ns/op
# Warmup Iteration   2: 166.787 ns/op
# Warmup Iteration   3: 117.108 ns/op
Iteration   1: 117.092 ns/op
Iteration   2: 117.136 ns/op
Iteration   3: 117.076 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.101 ±(99.9%) 0.573 ns/op [Average]
  (min, avg, max) = (117.076, 117.101, 117.136), stdev = 0.031
  CI (99.9%): [116.529, 117.674] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 48.54% complete, ETA 00:14:58
# Fork: 1 of 1
# Warmup Iteration   1: 1679.729 ns/op
# Warmup Iteration   2: 227.687 ns/op
# Warmup Iteration   3: 197.953 ns/op
Iteration   1: 197.716 ns/op
Iteration   2: 197.969 ns/op
Iteration   3: 197.611 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  197.765 ±(99.9%) 3.362 ns/op [Average]
  (min, avg, max) = (197.611, 197.765, 197.969), stdev = 0.184
  CI (99.9%): [194.404, 201.127] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 48.61% complete, ETA 00:14:57
# Fork: 1 of 1
# Warmup Iteration   1: 178.820 ns/op
# Warmup Iteration   2: 180.589 ns/op
# Warmup Iteration   3: 114.629 ns/op
Iteration   1: 115.149 ns/op
Iteration   2: 115.228 ns/op
Iteration   3: 115.438 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.272 ±(99.9%) 2.723 ns/op [Average]
  (min, avg, max) = (115.149, 115.272, 115.438), stdev = 0.149
  CI (99.9%): [112.549, 117.995] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 48.68% complete, ETA 00:14:56
# Fork: 1 of 1
# Warmup Iteration   1: 1045.263 ns/op
# Warmup Iteration   2: 976.558 ns/op
# Warmup Iteration   3: 640.980 ns/op
Iteration   1: 641.096 ns/op
Iteration   2: 647.556 ns/op
Iteration   3: 641.003 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  643.218 ±(99.9%) 68.543 ns/op [Average]
  (min, avg, max) = (641.003, 643.218, 647.556), stdev = 3.757
  CI (99.9%): [574.675, 711.762] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 48.75% complete, ETA 00:14:55
# Fork: 1 of 1
# Warmup Iteration   1: 19.208 ns/op
# Warmup Iteration   2: 23.515 ns/op
# Warmup Iteration   3: 13.627 ns/op
Iteration   1: 13.616 ns/op
Iteration   2: 13.631 ns/op
Iteration   3: 13.614 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.621 ±(99.9%) 0.162 ns/op [Average]
  (min, avg, max) = (13.614, 13.621, 13.631), stdev = 0.009
  CI (99.9%): [13.458, 13.783] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 48.82% complete, ETA 00:14:53
# Fork: 1 of 1
# Warmup Iteration   1: 1323.571 ns/op
# Warmup Iteration   2: 534.132 ns/op
# Warmup Iteration   3: 374.247 ns/op
Iteration   1: 374.493 ns/op
Iteration   2: 372.011 ns/op
Iteration   3: 372.756 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  373.087 ±(99.9%) 23.237 ns/op [Average]
  (min, avg, max) = (372.011, 373.087, 374.493), stdev = 1.274
  CI (99.9%): [349.850, 396.323] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 48.89% complete, ETA 00:14:52
# Fork: 1 of 1
# Warmup Iteration   1: 705.164 ns/op
# Warmup Iteration   2: 639.377 ns/op
# Warmup Iteration   3: 434.713 ns/op
Iteration   1: 436.704 ns/op
Iteration   2: 436.325 ns/op
Iteration   3: 436.258 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  436.429 ±(99.9%) 4.384 ns/op [Average]
  (min, avg, max) = (436.258, 436.429, 436.704), stdev = 0.240
  CI (99.9%): [432.045, 440.813] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 48.96% complete, ETA 00:14:51
# Fork: 1 of 1
# Warmup Iteration   1: 12059.885 ns/op
# Warmup Iteration   2: 628.346 ns/op
# Warmup Iteration   3: 465.851 ns/op
Iteration   1: 419.484 ns/op
Iteration   2: 419.435 ns/op
Iteration   3: 419.814 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  419.578 ±(99.9%) 3.755 ns/op [Average]
  (min, avg, max) = (419.435, 419.578, 419.814), stdev = 0.206
  CI (99.9%): [415.823, 423.332] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 49.03% complete, ETA 00:14:50
# Fork: 1 of 1
# Warmup Iteration   1: 540.311 ns/op
# Warmup Iteration   2: 525.559 ns/op
# Warmup Iteration   3: 343.698 ns/op
Iteration   1: 346.640 ns/op
Iteration   2: 345.750 ns/op
Iteration   3: 343.371 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  345.254 ±(99.9%) 30.833 ns/op [Average]
  (min, avg, max) = (343.371, 345.254, 346.640), stdev = 1.690
  CI (99.9%): [314.421, 376.087] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 49.10% complete, ETA 00:14:48
# Fork: 1 of 1
# Warmup Iteration   1: 3522.383 ns/op
# Warmup Iteration   2: 2313.123 ns/op
# Warmup Iteration   3: 1650.378 ns/op
Iteration   1: 1652.548 ns/op
Iteration   2: 1646.666 ns/op
Iteration   3: 1650.934 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1650.049 ±(99.9%) 55.441 ns/op [Average]
  (min, avg, max) = (1646.666, 1650.049, 1652.548), stdev = 3.039
  CI (99.9%): [1594.609, 1705.490] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 49.17% complete, ETA 00:14:47
# Fork: 1 of 1
# Warmup Iteration   1: 18.766 ns/op
# Warmup Iteration   2: 20.252 ns/op
# Warmup Iteration   3: 13.363 ns/op
Iteration   1: 13.358 ns/op
Iteration   2: 13.361 ns/op
Iteration   3: 13.368 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.362 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (13.358, 13.362, 13.368), stdev = 0.005
  CI (99.9%): [13.276, 13.449] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 49.24% complete, ETA 00:14:46
# Fork: 1 of 1
# Warmup Iteration   1: 489.503 ns/op
# Warmup Iteration   2: 277.313 ns/op
# Warmup Iteration   3: 200.092 ns/op
Iteration   1: 200.055 ns/op
Iteration   2: 200.115 ns/op
Iteration   3: 200.321 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  200.164 ±(99.9%) 2.544 ns/op [Average]
  (min, avg, max) = (200.055, 200.164, 200.321), stdev = 0.139
  CI (99.9%): [197.620, 202.708] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 49.31% complete, ETA 00:14:45
# Fork: 1 of 1
# Warmup Iteration   1: 177.720 ns/op
# Warmup Iteration   2: 185.034 ns/op
# Warmup Iteration   3: 117.112 ns/op
Iteration   1: 117.083 ns/op
Iteration   2: 117.124 ns/op
Iteration   3: 117.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.094 ±(99.9%) 0.490 ns/op [Average]
  (min, avg, max) = (117.073, 117.094, 117.124), stdev = 0.027
  CI (99.9%): [116.604, 117.583] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 49.38% complete, ETA 00:14:44
# Fork: 1 of 1
# Warmup Iteration   1: 1616.390 ns/op
# Warmup Iteration   2: 251.011 ns/op
# Warmup Iteration   3: 198.951 ns/op
Iteration   1: 198.817 ns/op
Iteration   2: 198.787 ns/op
Iteration   3: 198.895 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  198.833 ±(99.9%) 1.020 ns/op [Average]
  (min, avg, max) = (198.787, 198.833, 198.895), stdev = 0.056
  CI (99.9%): [197.813, 199.854] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 49.44% complete, ETA 00:14:42
# Fork: 1 of 1
# Warmup Iteration   1: 199.754 ns/op
# Warmup Iteration   2: 179.897 ns/op
# Warmup Iteration   3: 114.814 ns/op
Iteration   1: 115.058 ns/op
Iteration   2: 115.341 ns/op
Iteration   3: 115.261 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.220 ±(99.9%) 2.666 ns/op [Average]
  (min, avg, max) = (115.058, 115.220, 115.341), stdev = 0.146
  CI (99.9%): [112.554, 117.886] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 49.51% complete, ETA 00:14:41
# Fork: 1 of 1
# Warmup Iteration   1: 1187.310 ns/op
# Warmup Iteration   2: 982.609 ns/op
# Warmup Iteration   3: 640.893 ns/op
Iteration   1: 640.642 ns/op
Iteration   2: 640.589 ns/op
Iteration   3: 640.664 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  640.632 ±(99.9%) 0.699 ns/op [Average]
  (min, avg, max) = (640.589, 640.632, 640.664), stdev = 0.038
  CI (99.9%): [639.932, 641.331] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 49.58% complete, ETA 00:14:40
# Fork: 1 of 1
# Warmup Iteration   1: 19.416 ns/op
# Warmup Iteration   2: 23.082 ns/op
# Warmup Iteration   3: 13.359 ns/op
Iteration   1: 13.348 ns/op
Iteration   2: 13.368 ns/op
Iteration   3: 13.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  13.357 ±(99.9%) 0.177 ns/op [Average]
  (min, avg, max) = (13.348, 13.357, 13.368), stdev = 0.010
  CI (99.9%): [13.180, 13.534] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 49.65% complete, ETA 00:14:39
# Fork: 1 of 1
# Warmup Iteration   1: 781.805 ns/op
# Warmup Iteration   2: 266.127 ns/op
# Warmup Iteration   3: 186.619 ns/op
Iteration   1: 186.604 ns/op
Iteration   2: 186.561 ns/op
Iteration   3: 186.576 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  186.581 ±(99.9%) 0.396 ns/op [Average]
  (min, avg, max) = (186.561, 186.581, 186.604), stdev = 0.022
  CI (99.9%): [186.185, 186.976] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 49.72% complete, ETA 00:14:38
# Fork: 1 of 1
# Warmup Iteration   1: 200.819 ns/op
# Warmup Iteration   2: 197.270 ns/op
# Warmup Iteration   3: 127.573 ns/op
Iteration   1: 127.113 ns/op
Iteration   2: 127.503 ns/op
Iteration   3: 126.900 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  127.172 ±(99.9%) 5.571 ns/op [Average]
  (min, avg, max) = (126.900, 127.172, 127.503), stdev = 0.305
  CI (99.9%): [121.601, 132.743] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 49.79% complete, ETA 00:14:36
# Fork: 1 of 1
# Warmup Iteration   1: 5232.136 ns/op
# Warmup Iteration   2: 226.078 ns/op
# Warmup Iteration   3: 159.942 ns/op
Iteration   1: 159.930 ns/op
Iteration   2: 160.119 ns/op
Iteration   3: 159.936 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  159.995 ±(99.9%) 1.964 ns/op [Average]
  (min, avg, max) = (159.930, 159.995, 160.119), stdev = 0.108
  CI (99.9%): [158.030, 161.959] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 49.86% complete, ETA 00:14:35
# Fork: 1 of 1
# Warmup Iteration   1: 185.670 ns/op
# Warmup Iteration   2: 174.942 ns/op
# Warmup Iteration   3: 115.643 ns/op
Iteration   1: 115.649 ns/op
Iteration   2: 115.687 ns/op
Iteration   3: 115.617 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.651 ±(99.9%) 0.639 ns/op [Average]
  (min, avg, max) = (115.617, 115.651, 115.687), stdev = 0.035
  CI (99.9%): [115.011, 116.290] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 50, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 49.93% complete, ETA 00:14:34
# Fork: 1 of 1
# Warmup Iteration   1: 1716.327 ns/op
# Warmup Iteration   2: 989.546 ns/op
# Warmup Iteration   3: 658.599 ns/op
Iteration   1: 657.339 ns/op
Iteration   2: 659.925 ns/op
Iteration   3: 655.889 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  657.718 ±(99.9%) 37.305 ns/op [Average]
  (min, avg, max) = (655.889, 657.718, 659.925), stdev = 2.045
  CI (99.9%): [620.413, 695.023] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 50.00% complete, ETA 00:14:33
# Fork: 1 of 1
# Warmup Iteration   1: 22.902 ns/op
# Warmup Iteration   2: 26.436 ns/op
# Warmup Iteration   3: 19.131 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.129 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.131 ±(99.9%) 0.077 ns/op [Average]
  (min, avg, max) = (19.128, 19.131, 19.136), stdev = 0.004
  CI (99.9%): [19.054, 19.208] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 50.07% complete, ETA 00:14:31
# Fork: 1 of 1
# Warmup Iteration   1: 2674.930 ns/op
# Warmup Iteration   2: 1055.871 ns/op
# Warmup Iteration   3: 783.992 ns/op
Iteration   1: 775.951 ns/op
Iteration   2: 782.290 ns/op
Iteration   3: 774.737 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  777.660 ±(99.9%) 73.999 ns/op [Average]
  (min, avg, max) = (774.737, 777.660, 782.290), stdev = 4.056
  CI (99.9%): [703.661, 851.658] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 50.14% complete, ETA 00:14:30
# Fork: 1 of 1
# Warmup Iteration   1: 13876.671 ns/op
# Warmup Iteration   2: 1053.374 ns/op
# Warmup Iteration   3: 784.638 ns/op
Iteration   1: 695.727 ns/op
Iteration   2: 740.502 ns/op
Iteration   3: 722.776 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  719.669 ±(99.9%) 411.375 ns/op [Average]
  (min, avg, max) = (695.727, 719.669, 740.502), stdev = 22.549
  CI (99.9%): [308.294, 1131.043] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 50.21% complete, ETA 00:14:29
# Fork: 1 of 1
# Warmup Iteration   1: 7697.625 ns/op
# Warmup Iteration   2: 855.851 ns/op
# Warmup Iteration   3: 637.465 ns/op
Iteration   1: 638.485 ns/op
Iteration   2: 637.107 ns/op
Iteration   3: 636.253 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  637.282 ±(99.9%) 20.550 ns/op [Average]
  (min, avg, max) = (636.253, 637.282, 638.485), stdev = 1.126
  CI (99.9%): [616.732, 657.831] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 50.28% complete, ETA 00:14:28
# Fork: 1 of 1
# Warmup Iteration   1: 738.316 ns/op
# Warmup Iteration   2: 717.147 ns/op
# Warmup Iteration   3: 490.284 ns/op
Iteration   1: 492.695 ns/op
Iteration   2: 501.535 ns/op
Iteration   3: 498.408 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  497.546 ±(99.9%) 81.778 ns/op [Average]
  (min, avg, max) = (492.695, 497.546, 501.535), stdev = 4.483
  CI (99.9%): [415.768, 579.324] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 50.35% complete, ETA 00:14:27
# Fork: 1 of 1
# Warmup Iteration   1: 673.692 ns/op
# Warmup Iteration   2: 532.820 ns/op
# Warmup Iteration   3: 386.486 ns/op
Iteration   1: 386.157 ns/op
Iteration   2: 386.337 ns/op
Iteration   3: 385.969 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  386.154 ±(99.9%) 3.353 ns/op [Average]
  (min, avg, max) = (385.969, 386.154, 386.337), stdev = 0.184
  CI (99.9%): [382.801, 389.508] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 50.42% complete, ETA 00:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 23.624 ns/op
# Warmup Iteration   2: 30.949 ns/op
# Warmup Iteration   3: 19.137 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.129 ns/op
Iteration   3: 19.134 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (19.129, 19.133, 19.135), stdev = 0.003
  CI (99.9%): [19.075, 19.191] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 50.49% complete, ETA 00:14:24
# Fork: 1 of 1
# Warmup Iteration   1: 104.561 ns/op
# Warmup Iteration   2: 103.142 ns/op
# Warmup Iteration   3: 74.151 ns/op
Iteration   1: 74.160 ns/op
Iteration   2: 74.180 ns/op
Iteration   3: 74.161 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.167 ±(99.9%) 0.205 ns/op [Average]
  (min, avg, max) = (74.160, 74.167, 74.180), stdev = 0.011
  CI (99.9%): [73.962, 74.372] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 50.56% complete, ETA 00:14:23
# Fork: 1 of 1
# Warmup Iteration   1: 511.937 ns/op
# Warmup Iteration   2: 111.249 ns/op
# Warmup Iteration   3: 71.281 ns/op
Iteration   1: 71.266 ns/op
Iteration   2: 71.259 ns/op
Iteration   3: 71.307 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.277 ±(99.9%) 0.469 ns/op [Average]
  (min, avg, max) = (71.259, 71.277, 71.307), stdev = 0.026
  CI (99.9%): [70.808, 71.746] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 50.63% complete, ETA 00:14:22
# Fork: 1 of 1
# Warmup Iteration   1: 230.688 ns/op
# Warmup Iteration   2: 112.673 ns/op
# Warmup Iteration   3: 72.274 ns/op
Iteration   1: 72.279 ns/op
Iteration   2: 72.229 ns/op
Iteration   3: 72.237 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.248 ±(99.9%) 0.489 ns/op [Average]
  (min, avg, max) = (72.229, 72.248, 72.279), stdev = 0.027
  CI (99.9%): [71.760, 72.737] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 50.69% complete, ETA 00:14:21
# Fork: 1 of 1
# Warmup Iteration   1: 103.088 ns/op
# Warmup Iteration   2: 117.279 ns/op
# Warmup Iteration   3: 74.190 ns/op
Iteration   1: 74.196 ns/op
Iteration   2: 74.160 ns/op
Iteration   3: 74.183 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.179 ±(99.9%) 0.332 ns/op [Average]
  (min, avg, max) = (74.160, 74.179, 74.196), stdev = 0.018
  CI (99.9%): [73.847, 74.511] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 50.76% complete, ETA 00:14:19
# Fork: 1 of 1
# Warmup Iteration   1: 210.467 ns/op
# Warmup Iteration   2: 210.160 ns/op
# Warmup Iteration   3: 146.740 ns/op
Iteration   1: 146.708 ns/op
Iteration   2: 147.170 ns/op
Iteration   3: 146.622 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.833 ±(99.9%) 5.376 ns/op [Average]
  (min, avg, max) = (146.622, 146.833, 147.170), stdev = 0.295
  CI (99.9%): [141.457, 152.209] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 50.83% complete, ETA 00:14:18
# Fork: 1 of 1
# Warmup Iteration   1: 24.379 ns/op
# Warmup Iteration   2: 25.532 ns/op
# Warmup Iteration   3: 19.136 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.137 ns/op
Iteration   3: 19.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (19.130, 19.134, 19.137), stdev = 0.004
  CI (99.9%): [19.060, 19.208] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 50.90% complete, ETA 00:14:17
# Fork: 1 of 1
# Warmup Iteration   1: 103.436 ns/op
# Warmup Iteration   2: 107.650 ns/op
# Warmup Iteration   3: 74.519 ns/op
Iteration   1: 74.286 ns/op
Iteration   2: 74.363 ns/op
Iteration   3: 74.288 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.313 ±(99.9%) 0.801 ns/op [Average]
  (min, avg, max) = (74.286, 74.313, 74.363), stdev = 0.044
  CI (99.9%): [73.512, 75.114] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 50.97% complete, ETA 00:14:16
# Fork: 1 of 1
# Warmup Iteration   1: 424.859 ns/op
# Warmup Iteration   2: 112.717 ns/op
# Warmup Iteration   3: 71.380 ns/op
Iteration   1: 71.271 ns/op
Iteration   2: 71.248 ns/op
Iteration   3: 71.272 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.264 ±(99.9%) 0.244 ns/op [Average]
  (min, avg, max) = (71.248, 71.264, 71.272), stdev = 0.013
  CI (99.9%): [71.020, 71.508] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 51.04% complete, ETA 00:14:15
# Fork: 1 of 1
# Warmup Iteration   1: 241.290 ns/op
# Warmup Iteration   2: 105.941 ns/op
# Warmup Iteration   3: 72.252 ns/op
Iteration   1: 72.270 ns/op
Iteration   2: 72.235 ns/op
Iteration   3: 72.238 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.248 ±(99.9%) 0.348 ns/op [Average]
  (min, avg, max) = (72.235, 72.248, 72.270), stdev = 0.019
  CI (99.9%): [71.900, 72.596] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 51.11% complete, ETA 00:14:13
# Fork: 1 of 1
# Warmup Iteration   1: 106.425 ns/op
# Warmup Iteration   2: 120.197 ns/op
# Warmup Iteration   3: 74.676 ns/op
Iteration   1: 74.612 ns/op
Iteration   2: 74.652 ns/op
Iteration   3: 74.808 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.691 ±(99.9%) 1.888 ns/op [Average]
  (min, avg, max) = (74.612, 74.691, 74.808), stdev = 0.104
  CI (99.9%): [72.802, 76.579] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 51.18% complete, ETA 00:14:12
# Fork: 1 of 1
# Warmup Iteration   1: 209.794 ns/op
# Warmup Iteration   2: 226.929 ns/op
# Warmup Iteration   3: 146.671 ns/op
Iteration   1: 146.584 ns/op
Iteration   2: 147.190 ns/op
Iteration   3: 146.834 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.869 ±(99.9%) 5.560 ns/op [Average]
  (min, avg, max) = (146.584, 146.869, 147.190), stdev = 0.305
  CI (99.9%): [141.309, 152.429] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 51.25% complete, ETA 00:14:11
# Fork: 1 of 1
# Warmup Iteration   1: 24.172 ns/op
# Warmup Iteration   2: 31.009 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.140 ns/op
Iteration   2: 19.144 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.152 ns/op [Average]
  (min, avg, max) = (19.128, 19.137, 19.144), stdev = 0.008
  CI (99.9%): [18.986, 19.289] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 51.32% complete, ETA 00:14:10
# Fork: 1 of 1
# Warmup Iteration   1: 114.038 ns/op
# Warmup Iteration   2: 120.016 ns/op
# Warmup Iteration   3: 93.935 ns/op
Iteration   1: 93.201 ns/op
Iteration   2: 93.911 ns/op
Iteration   3: 93.621 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.578 ±(99.9%) 6.513 ns/op [Average]
  (min, avg, max) = (93.201, 93.578, 93.911), stdev = 0.357
  CI (99.9%): [87.065, 100.091] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 51.39% complete, ETA 00:14:09
# Fork: 1 of 1
# Warmup Iteration   1: 734.904 ns/op
# Warmup Iteration   2: 171.360 ns/op
# Warmup Iteration   3: 108.399 ns/op
Iteration   1: 108.413 ns/op
Iteration   2: 108.369 ns/op
Iteration   3: 108.380 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.388 ±(99.9%) 0.416 ns/op [Average]
  (min, avg, max) = (108.369, 108.388, 108.413), stdev = 0.023
  CI (99.9%): [107.972, 108.804] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 51.46% complete, ETA 00:14:07
# Fork: 1 of 1
# Warmup Iteration   1: 406.700 ns/op
# Warmup Iteration   2: 171.432 ns/op
# Warmup Iteration   3: 108.987 ns/op
Iteration   1: 108.996 ns/op
Iteration   2: 108.949 ns/op
Iteration   3: 108.978 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.974 ±(99.9%) 0.426 ns/op [Average]
  (min, avg, max) = (108.949, 108.974, 108.996), stdev = 0.023
  CI (99.9%): [108.549, 109.400] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 51.53% complete, ETA 00:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 106.482 ns/op
# Warmup Iteration   2: 115.263 ns/op
# Warmup Iteration   3: 74.160 ns/op
Iteration   1: 74.157 ns/op
Iteration   2: 74.171 ns/op
Iteration   3: 74.178 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.169 ±(99.9%) 0.203 ns/op [Average]
  (min, avg, max) = (74.157, 74.169, 74.178), stdev = 0.011
  CI (99.9%): [73.966, 74.371] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 51.60% complete, ETA 00:14:05
# Fork: 1 of 1
# Warmup Iteration   1: 227.777 ns/op
# Warmup Iteration   2: 226.123 ns/op
# Warmup Iteration   3: 156.945 ns/op
Iteration   1: 156.963 ns/op
Iteration   2: 156.923 ns/op
Iteration   3: 156.925 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.937 ±(99.9%) 0.415 ns/op [Average]
  (min, avg, max) = (156.923, 156.937, 156.963), stdev = 0.023
  CI (99.9%): [156.522, 157.352] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 51.67% complete, ETA 00:14:04
# Fork: 1 of 1
# Warmup Iteration   1: 24.045 ns/op
# Warmup Iteration   2: 28.386 ns/op
# Warmup Iteration   3: 19.145 ns/op
Iteration   1: 19.145 ns/op
Iteration   2: 19.139 ns/op
Iteration   3: 19.122 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.220 ns/op [Average]
  (min, avg, max) = (19.122, 19.135, 19.145), stdev = 0.012
  CI (99.9%): [18.916, 19.355] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 51.74% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 220.859 ns/op
# Warmup Iteration   2: 192.394 ns/op
# Warmup Iteration   3: 139.676 ns/op
Iteration   1: 139.552 ns/op
Iteration   2: 139.560 ns/op
Iteration   3: 139.636 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.583 ±(99.9%) 0.842 ns/op [Average]
  (min, avg, max) = (139.552, 139.583, 139.636), stdev = 0.046
  CI (99.9%): [138.740, 140.425] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 51.81% complete, ETA 00:14:01
# Fork: 1 of 1
# Warmup Iteration   1: 379.809 ns/op
# Warmup Iteration   2: 249.827 ns/op
# Warmup Iteration   3: 165.765 ns/op
Iteration   1: 164.654 ns/op
Iteration   2: 165.439 ns/op
Iteration   3: 165.387 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  165.160 ±(99.9%) 8.011 ns/op [Average]
  (min, avg, max) = (164.654, 165.160, 165.439), stdev = 0.439
  CI (99.9%): [157.149, 173.171] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 51.88% complete, ETA 00:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 492.141 ns/op
# Warmup Iteration   2: 292.327 ns/op
# Warmup Iteration   3: 205.872 ns/op
Iteration   1: 206.133 ns/op
Iteration   2: 205.932 ns/op
Iteration   3: 205.946 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  206.004 ±(99.9%) 2.051 ns/op [Average]
  (min, avg, max) = (205.932, 206.004, 206.133), stdev = 0.112
  CI (99.9%): [203.953, 208.055] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 51.94% complete, ETA 00:13:59
# Fork: 1 of 1
# Warmup Iteration   1: 106.470 ns/op
# Warmup Iteration   2: 114.997 ns/op
# Warmup Iteration   3: 74.161 ns/op
Iteration   1: 74.156 ns/op
Iteration   2: 74.208 ns/op
Iteration   3: 74.129 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.164 ±(99.9%) 0.735 ns/op [Average]
  (min, avg, max) = (74.129, 74.164, 74.208), stdev = 0.040
  CI (99.9%): [73.430, 74.899] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 52.01% complete, ETA 00:13:58
# Fork: 1 of 1
# Warmup Iteration   1: 221.923 ns/op
# Warmup Iteration   2: 248.298 ns/op
# Warmup Iteration   3: 156.915 ns/op
Iteration   1: 156.932 ns/op
Iteration   2: 157.097 ns/op
Iteration   3: 156.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.974 ±(99.9%) 1.968 ns/op [Average]
  (min, avg, max) = (156.894, 156.974, 157.097), stdev = 0.108
  CI (99.9%): [155.006, 158.942] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 52.08% complete, ETA 00:13:56
# Fork: 1 of 1
# Warmup Iteration   1: 22.812 ns/op
# Warmup Iteration   2: 29.867 ns/op
# Warmup Iteration   3: 19.136 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.062 ns/op [Average]
  (min, avg, max) = (19.131, 19.134, 19.137), stdev = 0.003
  CI (99.9%): [19.071, 19.196] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 52.15% complete, ETA 00:13:55
# Fork: 1 of 1
# Warmup Iteration   1: 1748.808 ns/op
# Warmup Iteration   2: 981.420 ns/op
# Warmup Iteration   3: 705.796 ns/op
Iteration   1: 702.479 ns/op
Iteration   2: 702.754 ns/op
Iteration   3: 692.516 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  699.250 ±(99.9%) 106.412 ns/op [Average]
  (min, avg, max) = (692.516, 699.250, 702.754), stdev = 5.833
  CI (99.9%): [592.837, 805.662] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 52.22% complete, ETA 00:13:54
# Fork: 1 of 1
# Warmup Iteration   1: 31952.820 ns/op
# Warmup Iteration   2: 1569.290 ns/op
# Warmup Iteration   3: 1227.704 ns/op
Iteration   1: 1113.712 ns/op
Iteration   2: 1113.390 ns/op
Iteration   3: 1113.458 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1113.520 ±(99.9%) 3.099 ns/op [Average]
  (min, avg, max) = (1113.390, 1113.520, 1113.712), stdev = 0.170
  CI (99.9%): [1110.422, 1116.619] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 52.29% complete, ETA 00:13:53
# Fork: 1 of 1
# Warmup Iteration   1: 23265.255 ns/op
# Warmup Iteration   2: 1601.944 ns/op
# Warmup Iteration   3: 1238.156 ns/op
Iteration   1: 1135.780 ns/op
Iteration   2: 1135.861 ns/op
Iteration   3: 1135.484 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1135.709 ±(99.9%) 3.622 ns/op [Average]
  (min, avg, max) = (1135.484, 1135.709, 1135.861), stdev = 0.199
  CI (99.9%): [1132.086, 1139.331] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 52.36% complete, ETA 00:13:52
# Fork: 1 of 1
# Warmup Iteration   1: 2058.477 ns/op
# Warmup Iteration   2: 1892.283 ns/op
# Warmup Iteration   3: 1301.105 ns/op
Iteration   1: 1311.274 ns/op
Iteration   2: 1295.635 ns/op
Iteration   3: 1308.905 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1305.271 ±(99.9%) 153.777 ns/op [Average]
  (min, avg, max) = (1295.635, 1305.271, 1311.274), stdev = 8.429
  CI (99.9%): [1151.495, 1459.048] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 52.43% complete, ETA 00:13:50
# Fork: 1 of 1
# Warmup Iteration   1: 808.082 ns/op
# Warmup Iteration   2: 641.663 ns/op
# Warmup Iteration   3: 468.510 ns/op
Iteration   1: 470.154 ns/op
Iteration   2: 468.215 ns/op
Iteration   3: 468.224 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  468.864 ±(99.9%) 20.377 ns/op [Average]
  (min, avg, max) = (468.215, 468.864, 470.154), stdev = 1.117
  CI (99.9%): [448.487, 489.241] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 52.50% complete, ETA 00:13:49
# Fork: 1 of 1
# Warmup Iteration   1: 24.232 ns/op
# Warmup Iteration   2: 26.749 ns/op
# Warmup Iteration   3: 19.133 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.060 ns/op [Average]
  (min, avg, max) = (19.131, 19.134, 19.137), stdev = 0.003
  CI (99.9%): [19.074, 19.194] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 52.57% complete, ETA 00:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 104.170 ns/op
# Warmup Iteration   2: 116.138 ns/op
# Warmup Iteration   3: 74.202 ns/op
Iteration   1: 74.219 ns/op
Iteration   2: 74.144 ns/op
Iteration   3: 74.224 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.195 ±(99.9%) 0.820 ns/op [Average]
  (min, avg, max) = (74.144, 74.195, 74.224), stdev = 0.045
  CI (99.9%): [73.376, 75.015] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 52.64% complete, ETA 00:13:47
# Fork: 1 of 1
# Warmup Iteration   1: 419.588 ns/op
# Warmup Iteration   2: 112.601 ns/op
# Warmup Iteration   3: 71.404 ns/op
Iteration   1: 71.363 ns/op
Iteration   2: 71.260 ns/op
Iteration   3: 71.364 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.329 ±(99.9%) 1.089 ns/op [Average]
  (min, avg, max) = (71.260, 71.329, 71.364), stdev = 0.060
  CI (99.9%): [70.240, 72.418] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 52.71% complete, ETA 00:13:45
# Fork: 1 of 1
# Warmup Iteration   1: 212.716 ns/op
# Warmup Iteration   2: 112.544 ns/op
# Warmup Iteration   3: 72.260 ns/op
Iteration   1: 72.258 ns/op
Iteration   2: 72.241 ns/op
Iteration   3: 72.236 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.245 ±(99.9%) 0.211 ns/op [Average]
  (min, avg, max) = (72.236, 72.245, 72.258), stdev = 0.012
  CI (99.9%): [72.034, 72.456] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 52.78% complete, ETA 00:13:44
# Fork: 1 of 1
# Warmup Iteration   1: 105.950 ns/op
# Warmup Iteration   2: 115.339 ns/op
# Warmup Iteration   3: 74.206 ns/op
Iteration   1: 74.174 ns/op
Iteration   2: 74.164 ns/op
Iteration   3: 74.142 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.160 ±(99.9%) 0.299 ns/op [Average]
  (min, avg, max) = (74.142, 74.160, 74.174), stdev = 0.016
  CI (99.9%): [73.861, 74.459] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 52.85% complete, ETA 00:13:43
# Fork: 1 of 1
# Warmup Iteration   1: 208.751 ns/op
# Warmup Iteration   2: 219.153 ns/op
# Warmup Iteration   3: 146.927 ns/op
Iteration   1: 146.928 ns/op
Iteration   2: 146.710 ns/op
Iteration   3: 146.612 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.750 ±(99.9%) 2.952 ns/op [Average]
  (min, avg, max) = (146.612, 146.750, 146.928), stdev = 0.162
  CI (99.9%): [143.798, 149.703] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 52.92% complete, ETA 00:13:42
# Fork: 1 of 1
# Warmup Iteration   1: 23.980 ns/op
# Warmup Iteration   2: 26.716 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.155 ns/op
Iteration   2: 19.137 ns/op
Iteration   3: 19.138 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.144 ±(99.9%) 0.185 ns/op [Average]
  (min, avg, max) = (19.137, 19.144, 19.155), stdev = 0.010
  CI (99.9%): [18.959, 19.329] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 52.99% complete, ETA 00:13:41
# Fork: 1 of 1
# Warmup Iteration   1: 103.452 ns/op
# Warmup Iteration   2: 108.799 ns/op
# Warmup Iteration   3: 74.577 ns/op
Iteration   1: 74.603 ns/op
Iteration   2: 74.711 ns/op
Iteration   3: 74.798 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.704 ±(99.9%) 1.782 ns/op [Average]
  (min, avg, max) = (74.603, 74.704, 74.798), stdev = 0.098
  CI (99.9%): [72.922, 76.487] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 53.06% complete, ETA 00:13:39
# Fork: 1 of 1
# Warmup Iteration   1: 533.857 ns/op
# Warmup Iteration   2: 106.960 ns/op
# Warmup Iteration   3: 72.825 ns/op
Iteration   1: 72.813 ns/op
Iteration   2: 72.774 ns/op
Iteration   3: 72.782 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.789 ±(99.9%) 0.380 ns/op [Average]
  (min, avg, max) = (72.774, 72.789, 72.813), stdev = 0.021
  CI (99.9%): [72.409, 73.169] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 53.13% complete, ETA 00:13:38
# Fork: 1 of 1
# Warmup Iteration   1: 233.708 ns/op
# Warmup Iteration   2: 105.642 ns/op
# Warmup Iteration   3: 72.423 ns/op
Iteration   1: 72.335 ns/op
Iteration   2: 72.323 ns/op
Iteration   3: 72.442 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.367 ±(99.9%) 1.198 ns/op [Average]
  (min, avg, max) = (72.323, 72.367, 72.442), stdev = 0.066
  CI (99.9%): [71.169, 73.565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 53.19% complete, ETA 00:13:37
# Fork: 1 of 1
# Warmup Iteration   1: 106.265 ns/op
# Warmup Iteration   2: 114.522 ns/op
# Warmup Iteration   3: 74.528 ns/op
Iteration   1: 74.530 ns/op
Iteration   2: 74.510 ns/op
Iteration   3: 74.507 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.515 ±(99.9%) 0.223 ns/op [Average]
  (min, avg, max) = (74.507, 74.515, 74.530), stdev = 0.012
  CI (99.9%): [74.292, 74.739] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 53.26% complete, ETA 00:13:36
# Fork: 1 of 1
# Warmup Iteration   1: 228.466 ns/op
# Warmup Iteration   2: 232.226 ns/op
# Warmup Iteration   3: 146.761 ns/op
Iteration   1: 146.892 ns/op
Iteration   2: 146.991 ns/op
Iteration   3: 146.637 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.840 ±(99.9%) 3.334 ns/op [Average]
  (min, avg, max) = (146.637, 146.840, 146.991), stdev = 0.183
  CI (99.9%): [143.506, 150.174] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 53.33% complete, ETA 00:13:35
# Fork: 1 of 1
# Warmup Iteration   1: 23.659 ns/op
# Warmup Iteration   2: 30.003 ns/op
# Warmup Iteration   3: 19.140 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.149 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.206 ns/op [Average]
  (min, avg, max) = (19.127, 19.137, 19.149), stdev = 0.011
  CI (99.9%): [18.931, 19.343] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 53.40% complete, ETA 00:13:33
# Fork: 1 of 1
# Warmup Iteration   1: 113.126 ns/op
# Warmup Iteration   2: 115.606 ns/op
# Warmup Iteration   3: 93.406 ns/op
Iteration   1: 93.392 ns/op
Iteration   2: 93.319 ns/op
Iteration   3: 93.346 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  93.352 ±(99.9%) 0.672 ns/op [Average]
  (min, avg, max) = (93.319, 93.352, 93.392), stdev = 0.037
  CI (99.9%): [92.681, 94.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 53.47% complete, ETA 00:13:32
# Fork: 1 of 1
# Warmup Iteration   1: 1404.784 ns/op
# Warmup Iteration   2: 170.703 ns/op
# Warmup Iteration   3: 116.055 ns/op
Iteration   1: 116.208 ns/op
Iteration   2: 116.067 ns/op
Iteration   3: 116.126 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  116.134 ±(99.9%) 1.292 ns/op [Average]
  (min, avg, max) = (116.067, 116.134, 116.208), stdev = 0.071
  CI (99.9%): [114.842, 117.425] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 53.54% complete, ETA 00:13:31
# Fork: 1 of 1
# Warmup Iteration   1: 462.693 ns/op
# Warmup Iteration   2: 176.136 ns/op
# Warmup Iteration   3: 116.008 ns/op
Iteration   1: 116.032 ns/op
Iteration   2: 115.963 ns/op
Iteration   3: 115.985 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.993 ±(99.9%) 0.648 ns/op [Average]
  (min, avg, max) = (115.963, 115.993, 116.032), stdev = 0.036
  CI (99.9%): [115.345, 116.641] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 53.61% complete, ETA 00:13:30
# Fork: 1 of 1
# Warmup Iteration   1: 206.054 ns/op
# Warmup Iteration   2: 209.385 ns/op
# Warmup Iteration   3: 141.986 ns/op
Iteration   1: 142.280 ns/op
Iteration   2: 146.228 ns/op
Iteration   3: 141.927 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  143.478 ±(99.9%) 43.561 ns/op [Average]
  (min, avg, max) = (141.927, 143.478, 146.228), stdev = 2.388
  CI (99.9%): [99.917, 187.040] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 53.68% complete, ETA 00:13:29
# Fork: 1 of 1
# Warmup Iteration   1: 242.817 ns/op
# Warmup Iteration   2: 243.065 ns/op
# Warmup Iteration   3: 155.998 ns/op
Iteration   1: 156.050 ns/op
Iteration   2: 155.877 ns/op
Iteration   3: 155.841 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  155.923 ±(99.9%) 2.041 ns/op [Average]
  (min, avg, max) = (155.841, 155.923, 156.050), stdev = 0.112
  CI (99.9%): [153.881, 157.964] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 53.75% complete, ETA 00:13:27
# Fork: 1 of 1
# Warmup Iteration   1: 24.125 ns/op
# Warmup Iteration   2: 26.023 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.063 ns/op [Average]
  (min, avg, max) = (19.130, 19.134, 19.136), stdev = 0.003
  CI (99.9%): [19.070, 19.197] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 53.82% complete, ETA 00:13:26
# Fork: 1 of 1
# Warmup Iteration   1: 1603.638 ns/op
# Warmup Iteration   2: 570.193 ns/op
# Warmup Iteration   3: 425.223 ns/op
Iteration   1: 424.078 ns/op
Iteration   2: 424.332 ns/op
Iteration   3: 423.601 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  424.004 ±(99.9%) 6.774 ns/op [Average]
  (min, avg, max) = (423.601, 424.004, 424.332), stdev = 0.371
  CI (99.9%): [417.230, 430.778] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 53.89% complete, ETA 00:13:25
# Fork: 1 of 1
# Warmup Iteration   1: 3434.598 ns/op
# Warmup Iteration   2: 476.232 ns/op
# Warmup Iteration   3: 340.763 ns/op
Iteration   1: 340.570 ns/op
Iteration   2: 340.739 ns/op
Iteration   3: 340.830 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  340.713 ±(99.9%) 2.413 ns/op [Average]
  (min, avg, max) = (340.570, 340.713, 340.830), stdev = 0.132
  CI (99.9%): [338.300, 343.126] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 53.96% complete, ETA 00:13:24
# Fork: 1 of 1
# Warmup Iteration   1: 10354.838 ns/op
# Warmup Iteration   2: 603.482 ns/op
# Warmup Iteration   3: 420.635 ns/op
Iteration   1: 414.117 ns/op
Iteration   2: 414.619 ns/op
Iteration   3: 414.655 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  414.464 ±(99.9%) 5.483 ns/op [Average]
  (min, avg, max) = (414.117, 414.464, 414.655), stdev = 0.301
  CI (99.9%): [408.981, 419.947] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 54.03% complete, ETA 00:13:22
# Fork: 1 of 1
# Warmup Iteration   1: 2429.946 ns/op
# Warmup Iteration   2: 2328.447 ns/op
# Warmup Iteration   3: 1560.966 ns/op
Iteration   1: 1565.386 ns/op
Iteration   2: 1567.741 ns/op
Iteration   3: 1565.605 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1566.244 ±(99.9%) 23.730 ns/op [Average]
  (min, avg, max) = (1565.386, 1566.244, 1567.741), stdev = 1.301
  CI (99.9%): [1542.514, 1589.974] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 54.10% complete, ETA 00:13:21
# Fork: 1 of 1
# Warmup Iteration   1: 356.640 ns/op
# Warmup Iteration   2: 353.721 ns/op
# Warmup Iteration   3: 236.191 ns/op
Iteration   1: 236.320 ns/op
Iteration   2: 236.539 ns/op
Iteration   3: 236.385 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  236.415 ±(99.9%) 2.050 ns/op [Average]
  (min, avg, max) = (236.320, 236.415, 236.539), stdev = 0.112
  CI (99.9%): [234.365, 238.465] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 54.17% complete, ETA 00:13:20
# Fork: 1 of 1
# Warmup Iteration   1: 24.352 ns/op
# Warmup Iteration   2: 29.756 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.131 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.133 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.048 ns/op [Average]
  (min, avg, max) = (19.131, 19.133, 19.136), stdev = 0.003
  CI (99.9%): [19.085, 19.182] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 54.24% complete, ETA 00:13:19
# Fork: 1 of 1
# Warmup Iteration   1: 2165.212 ns/op
# Warmup Iteration   2: 1098.477 ns/op
# Warmup Iteration   3: 810.495 ns/op
Iteration   1: 817.904 ns/op
Iteration   2: 818.092 ns/op
Iteration   3: 814.010 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  816.669 ±(99.9%) 42.044 ns/op [Average]
  (min, avg, max) = (814.010, 816.669, 818.092), stdev = 2.305
  CI (99.9%): [774.624, 858.713] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 54.31% complete, ETA 00:13:18
# Fork: 1 of 1
# Warmup Iteration   1: 19809.569 ns/op
# Warmup Iteration   2: 1304.644 ns/op
# Warmup Iteration   3: 986.488 ns/op
Iteration   1: 886.364 ns/op
Iteration   2: 886.010 ns/op
Iteration   3: 885.478 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  885.951 ±(99.9%) 8.141 ns/op [Average]
  (min, avg, max) = (885.478, 885.951, 886.364), stdev = 0.446
  CI (99.9%): [877.810, 894.092] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 54.37% complete, ETA 00:13:16
# Fork: 1 of 1
# Warmup Iteration   1: 7611.740 ns/op
# Warmup Iteration   2: 1259.573 ns/op
# Warmup Iteration   3: 889.700 ns/op
Iteration   1: 889.539 ns/op
Iteration   2: 889.391 ns/op
Iteration   3: 889.603 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  889.511 ±(99.9%) 1.980 ns/op [Average]
  (min, avg, max) = (889.391, 889.511, 889.603), stdev = 0.109
  CI (99.9%): [887.531, 891.491] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 54.44% complete, ETA 00:13:15
# Fork: 1 of 1
# Warmup Iteration   1: 1433.517 ns/op
# Warmup Iteration   2: 1294.380 ns/op
# Warmup Iteration   3: 872.544 ns/op
Iteration   1: 872.531 ns/op
Iteration   2: 872.323 ns/op
Iteration   3: 872.383 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  872.412 ±(99.9%) 1.953 ns/op [Average]
  (min, avg, max) = (872.323, 872.412, 872.531), stdev = 0.107
  CI (99.9%): [870.459, 874.365] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 54.51% complete, ETA 00:13:14
# Fork: 1 of 1
# Warmup Iteration   1: 913.852 ns/op
# Warmup Iteration   2: 640.836 ns/op
# Warmup Iteration   3: 439.075 ns/op
Iteration   1: 439.098 ns/op
Iteration   2: 439.076 ns/op
Iteration   3: 439.679 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  439.284 ±(99.9%) 6.236 ns/op [Average]
  (min, avg, max) = (439.076, 439.284, 439.679), stdev = 0.342
  CI (99.9%): [433.048, 445.521] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 54.58% complete, ETA 00:13:13
# Fork: 1 of 1
# Warmup Iteration   1: 24.294 ns/op
# Warmup Iteration   2: 26.874 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.139 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.126 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.119 ns/op [Average]
  (min, avg, max) = (19.126, 19.133, 19.139), stdev = 0.007
  CI (99.9%): [19.015, 19.252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 54.65% complete, ETA 00:13:12
# Fork: 1 of 1
# Warmup Iteration   1: 104.214 ns/op
# Warmup Iteration   2: 107.837 ns/op
# Warmup Iteration   3: 74.225 ns/op
Iteration   1: 74.147 ns/op
Iteration   2: 74.189 ns/op
Iteration   3: 74.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.156 ±(99.9%) 0.544 ns/op [Average]
  (min, avg, max) = (74.132, 74.156, 74.189), stdev = 0.030
  CI (99.9%): [73.612, 74.700] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 54.72% complete, ETA 00:13:10
# Fork: 1 of 1
# Warmup Iteration   1: 355.353 ns/op
# Warmup Iteration   2: 105.805 ns/op
# Warmup Iteration   3: 71.403 ns/op
Iteration   1: 71.372 ns/op
Iteration   2: 71.263 ns/op
Iteration   3: 71.286 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.307 ±(99.9%) 1.046 ns/op [Average]
  (min, avg, max) = (71.263, 71.307, 71.372), stdev = 0.057
  CI (99.9%): [70.261, 72.352] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 54.79% complete, ETA 00:13:09
# Fork: 1 of 1
# Warmup Iteration   1: 229.748 ns/op
# Warmup Iteration   2: 104.656 ns/op
# Warmup Iteration   3: 72.257 ns/op
Iteration   1: 72.247 ns/op
Iteration   2: 72.243 ns/op
Iteration   3: 72.247 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.246 ±(99.9%) 0.046 ns/op [Average]
  (min, avg, max) = (72.243, 72.246, 72.247), stdev = 0.003
  CI (99.9%): [72.199, 72.292] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 54.86% complete, ETA 00:13:08
# Fork: 1 of 1
# Warmup Iteration   1: 107.478 ns/op
# Warmup Iteration   2: 107.926 ns/op
# Warmup Iteration   3: 74.172 ns/op
Iteration   1: 74.212 ns/op
Iteration   2: 74.192 ns/op
Iteration   3: 74.155 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.186 ±(99.9%) 0.531 ns/op [Average]
  (min, avg, max) = (74.155, 74.186, 74.212), stdev = 0.029
  CI (99.9%): [73.655, 74.718] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 54.93% complete, ETA 00:13:07
# Fork: 1 of 1
# Warmup Iteration   1: 211.442 ns/op
# Warmup Iteration   2: 221.364 ns/op
# Warmup Iteration   3: 146.554 ns/op
Iteration   1: 146.771 ns/op
Iteration   2: 147.163 ns/op
Iteration   3: 146.627 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.854 ±(99.9%) 5.060 ns/op [Average]
  (min, avg, max) = (146.627, 146.854, 147.163), stdev = 0.277
  CI (99.9%): [141.794, 151.914] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 55.00% complete, ETA 00:13:05
# Fork: 1 of 1
# Warmup Iteration   1: 24.741 ns/op
# Warmup Iteration   2: 31.172 ns/op
# Warmup Iteration   3: 19.146 ns/op
Iteration   1: 19.129 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.082 ns/op [Average]
  (min, avg, max) = (19.127, 19.130, 19.136), stdev = 0.005
  CI (99.9%): [19.048, 19.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 55.07% complete, ETA 00:13:04
# Fork: 1 of 1
# Warmup Iteration   1: 102.586 ns/op
# Warmup Iteration   2: 115.707 ns/op
# Warmup Iteration   3: 74.361 ns/op
Iteration   1: 74.435 ns/op
Iteration   2: 74.384 ns/op
Iteration   3: 74.377 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.399 ±(99.9%) 0.579 ns/op [Average]
  (min, avg, max) = (74.377, 74.399, 74.435), stdev = 0.032
  CI (99.9%): [73.820, 74.977] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 55.14% complete, ETA 00:13:03
# Fork: 1 of 1
# Warmup Iteration   1: 3777.318 ns/op
# Warmup Iteration   2: 113.679 ns/op
# Warmup Iteration   3: 71.334 ns/op
Iteration   1: 71.379 ns/op
Iteration   2: 71.387 ns/op
Iteration   3: 71.305 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.357 ±(99.9%) 0.823 ns/op [Average]
  (min, avg, max) = (71.305, 71.357, 71.387), stdev = 0.045
  CI (99.9%): [70.535, 72.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 55.21% complete, ETA 00:13:02
# Fork: 1 of 1
# Warmup Iteration   1: 233.280 ns/op
# Warmup Iteration   2: 112.149 ns/op
# Warmup Iteration   3: 72.276 ns/op
Iteration   1: 72.256 ns/op
Iteration   2: 72.244 ns/op
Iteration   3: 72.252 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.250 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (72.244, 72.250, 72.256), stdev = 0.006
  CI (99.9%): [72.138, 72.363] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 55.28% complete, ETA 00:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 106.537 ns/op
# Warmup Iteration   2: 107.774 ns/op
# Warmup Iteration   3: 74.534 ns/op
Iteration   1: 74.484 ns/op
Iteration   2: 74.513 ns/op
Iteration   3: 74.505 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.501 ±(99.9%) 0.276 ns/op [Average]
  (min, avg, max) = (74.484, 74.501, 74.513), stdev = 0.015
  CI (99.9%): [74.224, 74.777] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 55.35% complete, ETA 00:12:59
# Fork: 1 of 1
# Warmup Iteration   1: 207.836 ns/op
# Warmup Iteration   2: 224.849 ns/op
# Warmup Iteration   3: 146.615 ns/op
Iteration   1: 146.589 ns/op
Iteration   2: 146.493 ns/op
Iteration   3: 146.594 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.559 ±(99.9%) 1.036 ns/op [Average]
  (min, avg, max) = (146.493, 146.559, 146.594), stdev = 0.057
  CI (99.9%): [145.523, 147.595] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 55.42% complete, ETA 00:12:58
# Fork: 1 of 1
# Warmup Iteration   1: 23.935 ns/op
# Warmup Iteration   2: 30.713 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.140 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (19.132, 19.137, 19.140), stdev = 0.004
  CI (99.9%): [19.061, 19.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 55.49% complete, ETA 00:12:57
# Fork: 1 of 1
# Warmup Iteration   1: 115.508 ns/op
# Warmup Iteration   2: 113.672 ns/op
# Warmup Iteration   3: 82.382 ns/op
Iteration   1: 82.391 ns/op
Iteration   2: 82.394 ns/op
Iteration   3: 82.338 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  82.374 ±(99.9%) 0.576 ns/op [Average]
  (min, avg, max) = (82.338, 82.374, 82.394), stdev = 0.032
  CI (99.9%): [81.798, 82.951] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 55.56% complete, ETA 00:12:56
# Fork: 1 of 1
# Warmup Iteration   1: 747.816 ns/op
# Warmup Iteration   2: 178.572 ns/op
# Warmup Iteration   3: 109.857 ns/op
Iteration   1: 109.912 ns/op
Iteration   2: 109.824 ns/op
Iteration   3: 110.517 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  110.084 ±(99.9%) 6.879 ns/op [Average]
  (min, avg, max) = (109.824, 110.084, 110.517), stdev = 0.377
  CI (99.9%): [103.205, 116.964] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 55.63% complete, ETA 00:12:55
# Fork: 1 of 1
# Warmup Iteration   1: 431.612 ns/op
# Warmup Iteration   2: 186.328 ns/op
# Warmup Iteration   3: 121.633 ns/op
Iteration   1: 120.778 ns/op
Iteration   2: 122.477 ns/op
Iteration   3: 123.230 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  122.162 ±(99.9%) 22.909 ns/op [Average]
  (min, avg, max) = (120.778, 122.162, 123.230), stdev = 1.256
  CI (99.9%): [99.253, 145.070] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 55.69% complete, ETA 00:12:53
# Fork: 1 of 1
# Warmup Iteration   1: 161.647 ns/op
# Warmup Iteration   2: 169.610 ns/op
# Warmup Iteration   3: 112.483 ns/op
Iteration   1: 112.303 ns/op
Iteration   2: 112.311 ns/op
Iteration   3: 112.464 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.360 ±(99.9%) 1.658 ns/op [Average]
  (min, avg, max) = (112.303, 112.360, 112.464), stdev = 0.091
  CI (99.9%): [110.702, 114.017] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 55.76% complete, ETA 00:12:52
# Fork: 1 of 1
# Warmup Iteration   1: 226.646 ns/op
# Warmup Iteration   2: 175.717 ns/op
# Warmup Iteration   3: 141.387 ns/op
Iteration   1: 141.385 ns/op
Iteration   2: 141.678 ns/op
Iteration   3: 141.412 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.492 ±(99.9%) 2.956 ns/op [Average]
  (min, avg, max) = (141.385, 141.492, 141.678), stdev = 0.162
  CI (99.9%): [138.536, 144.448] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 55.83% complete, ETA 00:12:51
# Fork: 1 of 1
# Warmup Iteration   1: 24.140 ns/op
# Warmup Iteration   2: 25.052 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (19.135, 19.136, 19.136), stdev = 0.001
  CI (99.9%): [19.120, 19.151] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 55.90% complete, ETA 00:12:50
# Fork: 1 of 1
# Warmup Iteration   1: 1028.821 ns/op
# Warmup Iteration   2: 560.658 ns/op
# Warmup Iteration   3: 419.091 ns/op
Iteration   1: 418.894 ns/op
Iteration   2: 419.082 ns/op
Iteration   3: 419.103 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  419.027 ±(99.9%) 2.102 ns/op [Average]
  (min, avg, max) = (418.894, 419.027, 419.103), stdev = 0.115
  CI (99.9%): [416.925, 421.128] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 55.97% complete, ETA 00:12:49
# Fork: 1 of 1
# Warmup Iteration   1: 9254.704 ns/op
# Warmup Iteration   2: 936.060 ns/op
# Warmup Iteration   3: 657.529 ns/op
Iteration   1: 657.451 ns/op
Iteration   2: 657.362 ns/op
Iteration   3: 657.386 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  657.400 ±(99.9%) 0.844 ns/op [Average]
  (min, avg, max) = (657.362, 657.400, 657.451), stdev = 0.046
  CI (99.9%): [656.556, 658.244] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 56.04% complete, ETA 00:12:47
# Fork: 1 of 1
# Warmup Iteration   1: 7665.189 ns/op
# Warmup Iteration   2: 980.200 ns/op
# Warmup Iteration   3: 660.765 ns/op
Iteration   1: 661.239 ns/op
Iteration   2: 660.799 ns/op
Iteration   3: 660.522 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  660.853 ±(99.9%) 6.597 ns/op [Average]
  (min, avg, max) = (660.522, 660.853, 661.239), stdev = 0.362
  CI (99.9%): [654.256, 667.449] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 56.11% complete, ETA 00:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 739.961 ns/op
# Warmup Iteration   2: 750.484 ns/op
# Warmup Iteration   3: 517.866 ns/op
Iteration   1: 517.704 ns/op
Iteration   2: 517.930 ns/op
Iteration   3: 517.697 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  517.777 ±(99.9%) 2.414 ns/op [Average]
  (min, avg, max) = (517.697, 517.777, 517.930), stdev = 0.132
  CI (99.9%): [515.363, 520.191] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 56.18% complete, ETA 00:12:45
# Fork: 1 of 1
# Warmup Iteration   1: 835.383 ns/op
# Warmup Iteration   2: 528.111 ns/op
# Warmup Iteration   3: 397.808 ns/op
Iteration   1: 398.059 ns/op
Iteration   2: 397.647 ns/op
Iteration   3: 398.089 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  397.932 ±(99.9%) 4.504 ns/op [Average]
  (min, avg, max) = (397.647, 397.932, 398.089), stdev = 0.247
  CI (99.9%): [393.428, 402.436] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 56.25% complete, ETA 00:12:44
# Fork: 1 of 1
# Warmup Iteration   1: 24.445 ns/op
# Warmup Iteration   2: 31.391 ns/op
# Warmup Iteration   3: 19.142 ns/op
Iteration   1: 19.146 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.171 ns/op [Average]
  (min, avg, max) = (19.127, 19.136, 19.146), stdev = 0.009
  CI (99.9%): [18.965, 19.307] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 56.32% complete, ETA 00:12:42
# Fork: 1 of 1
# Warmup Iteration   1: 3507.770 ns/op
# Warmup Iteration   2: 914.345 ns/op
# Warmup Iteration   3: 682.036 ns/op
Iteration   1: 682.020 ns/op
Iteration   2: 682.198 ns/op
Iteration   3: 681.950 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  682.056 ±(99.9%) 2.336 ns/op [Average]
  (min, avg, max) = (681.950, 682.056, 682.198), stdev = 0.128
  CI (99.9%): [679.720, 684.392] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 56.39% complete, ETA 00:12:41
# Fork: 1 of 1
# Warmup Iteration   1: 31519.528 ns/op
# Warmup Iteration   2: 1063.330 ns/op
# Warmup Iteration   3: 874.113 ns/op
Iteration   1: 793.270 ns/op
Iteration   2: 793.176 ns/op
Iteration   3: 793.036 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  793.160 ±(99.9%) 2.150 ns/op [Average]
  (min, avg, max) = (793.036, 793.160, 793.270), stdev = 0.118
  CI (99.9%): [791.011, 795.310] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 56.46% complete, ETA 00:12:40
# Fork: 1 of 1
# Warmup Iteration   1: 23265.099 ns/op
# Warmup Iteration   2: 1081.769 ns/op
# Warmup Iteration   3: 860.552 ns/op
Iteration   1: 782.211 ns/op
Iteration   2: 782.461 ns/op
Iteration   3: 787.070 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  783.914 ±(99.9%) 49.919 ns/op [Average]
  (min, avg, max) = (782.211, 783.914, 787.070), stdev = 2.736
  CI (99.9%): [733.995, 833.833] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 56.53% complete, ETA 00:12:39
# Fork: 1 of 1
# Warmup Iteration   1: 1222.704 ns/op
# Warmup Iteration   2: 1071.558 ns/op
# Warmup Iteration   3: 746.544 ns/op
Iteration   1: 746.611 ns/op
Iteration   2: 746.614 ns/op
Iteration   3: 746.918 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  746.714 ±(99.9%) 3.221 ns/op [Average]
  (min, avg, max) = (746.611, 746.714, 746.918), stdev = 0.177
  CI (99.9%): [743.493, 749.935] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 56.60% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 1813.551 ns/op
# Warmup Iteration   2: 662.092 ns/op
# Warmup Iteration   3: 419.533 ns/op
Iteration   1: 419.487 ns/op
Iteration   2: 419.330 ns/op
Iteration   3: 419.100 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  419.306 ±(99.9%) 3.550 ns/op [Average]
  (min, avg, max) = (419.100, 419.306, 419.487), stdev = 0.195
  CI (99.9%): [415.755, 422.856] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 56.67% complete, ETA 00:12:36
# Fork: 1 of 1
# Warmup Iteration   1: 24.794 ns/op
# Warmup Iteration   2: 28.583 ns/op
# Warmup Iteration   3: 19.147 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.121 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.143 ns/op [Average]
  (min, avg, max) = (19.121, 19.130, 19.135), stdev = 0.008
  CI (99.9%): [18.987, 19.273] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 56.74% complete, ETA 00:12:35
# Fork: 1 of 1
# Warmup Iteration   1: 103.777 ns/op
# Warmup Iteration   2: 114.518 ns/op
# Warmup Iteration   3: 74.438 ns/op
Iteration   1: 74.369 ns/op
Iteration   2: 74.391 ns/op
Iteration   3: 74.388 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.383 ±(99.9%) 0.217 ns/op [Average]
  (min, avg, max) = (74.369, 74.383, 74.391), stdev = 0.012
  CI (99.9%): [74.166, 74.599] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 56.81% complete, ETA 00:12:34
# Fork: 1 of 1
# Warmup Iteration   1: 508.330 ns/op
# Warmup Iteration   2: 110.849 ns/op
# Warmup Iteration   3: 71.394 ns/op
Iteration   1: 71.293 ns/op
Iteration   2: 71.380 ns/op
Iteration   3: 71.295 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.323 ±(99.9%) 0.910 ns/op [Average]
  (min, avg, max) = (71.293, 71.323, 71.380), stdev = 0.050
  CI (99.9%): [70.413, 72.232] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 56.88% complete, ETA 00:12:33
# Fork: 1 of 1
# Warmup Iteration   1: 291.517 ns/op
# Warmup Iteration   2: 112.682 ns/op
# Warmup Iteration   3: 72.304 ns/op
Iteration   1: 72.261 ns/op
Iteration   2: 72.263 ns/op
Iteration   3: 72.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.268 ±(99.9%) 0.195 ns/op [Average]
  (min, avg, max) = (72.261, 72.268, 72.280), stdev = 0.011
  CI (99.9%): [72.072, 72.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 56.94% complete, ETA 00:12:32
# Fork: 1 of 1
# Warmup Iteration   1: 105.299 ns/op
# Warmup Iteration   2: 116.158 ns/op
# Warmup Iteration   3: 74.190 ns/op
Iteration   1: 74.172 ns/op
Iteration   2: 74.175 ns/op
Iteration   3: 74.220 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.189 ±(99.9%) 0.485 ns/op [Average]
  (min, avg, max) = (74.172, 74.189, 74.220), stdev = 0.027
  CI (99.9%): [73.704, 74.674] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 57.01% complete, ETA 00:12:30
# Fork: 1 of 1
# Warmup Iteration   1: 214.502 ns/op
# Warmup Iteration   2: 231.101 ns/op
# Warmup Iteration   3: 147.496 ns/op
Iteration   1: 147.362 ns/op
Iteration   2: 147.670 ns/op
Iteration   3: 147.345 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  147.459 ±(99.9%) 3.331 ns/op [Average]
  (min, avg, max) = (147.345, 147.459, 147.670), stdev = 0.183
  CI (99.9%): [144.128, 150.790] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 57.08% complete, ETA 00:12:29
# Fork: 1 of 1
# Warmup Iteration   1: 23.743 ns/op
# Warmup Iteration   2: 31.038 ns/op
# Warmup Iteration   3: 19.145 ns/op
Iteration   1: 19.131 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.133 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (19.131, 19.133, 19.134), stdev = 0.001
  CI (99.9%): [19.111, 19.154] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 57.15% complete, ETA 00:12:28
# Fork: 1 of 1
# Warmup Iteration   1: 100.395 ns/op
# Warmup Iteration   2: 115.369 ns/op
# Warmup Iteration   3: 74.198 ns/op
Iteration   1: 74.147 ns/op
Iteration   2: 74.141 ns/op
Iteration   3: 74.184 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.157 ±(99.9%) 0.428 ns/op [Average]
  (min, avg, max) = (74.141, 74.157, 74.184), stdev = 0.023
  CI (99.9%): [73.729, 74.586] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 57.22% complete, ETA 00:12:27
# Fork: 1 of 1
# Warmup Iteration   1: 856.841 ns/op
# Warmup Iteration   2: 97.395 ns/op
# Warmup Iteration   3: 72.788 ns/op
Iteration   1: 72.807 ns/op
Iteration   2: 72.792 ns/op
Iteration   3: 72.758 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.785 ±(99.9%) 0.462 ns/op [Average]
  (min, avg, max) = (72.758, 72.785, 72.807), stdev = 0.025
  CI (99.9%): [72.324, 73.247] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 57.29% complete, ETA 00:12:25
# Fork: 1 of 1
# Warmup Iteration   1: 242.205 ns/op
# Warmup Iteration   2: 115.577 ns/op
# Warmup Iteration   3: 72.302 ns/op
Iteration   1: 72.270 ns/op
Iteration   2: 72.225 ns/op
Iteration   3: 72.255 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.250 ±(99.9%) 0.415 ns/op [Average]
  (min, avg, max) = (72.225, 72.250, 72.270), stdev = 0.023
  CI (99.9%): [71.834, 72.665] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 57.36% complete, ETA 00:12:24
# Fork: 1 of 1
# Warmup Iteration   1: 106.608 ns/op
# Warmup Iteration   2: 114.992 ns/op
# Warmup Iteration   3: 74.199 ns/op
Iteration   1: 74.170 ns/op
Iteration   2: 74.189 ns/op
Iteration   3: 74.209 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.189 ±(99.9%) 0.354 ns/op [Average]
  (min, avg, max) = (74.170, 74.189, 74.209), stdev = 0.019
  CI (99.9%): [73.835, 74.544] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 57.43% complete, ETA 00:12:23
# Fork: 1 of 1
# Warmup Iteration   1: 212.345 ns/op
# Warmup Iteration   2: 221.495 ns/op
# Warmup Iteration   3: 146.758 ns/op
Iteration   1: 146.748 ns/op
Iteration   2: 146.879 ns/op
Iteration   3: 146.833 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.820 ±(99.9%) 1.215 ns/op [Average]
  (min, avg, max) = (146.748, 146.820, 146.879), stdev = 0.067
  CI (99.9%): [145.606, 148.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 57.50% complete, ETA 00:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 24.614 ns/op
# Warmup Iteration   2: 25.597 ns/op
# Warmup Iteration   3: 19.146 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.136 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (19.134, 19.135, 19.136), stdev = 0.001
  CI (99.9%): [19.115, 19.155] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 57.57% complete, ETA 00:12:21
# Fork: 1 of 1
# Warmup Iteration   1: 116.666 ns/op
# Warmup Iteration   2: 113.635 ns/op
# Warmup Iteration   3: 80.718 ns/op
Iteration   1: 80.829 ns/op
Iteration   2: 80.719 ns/op
Iteration   3: 80.819 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  80.789 ±(99.9%) 1.102 ns/op [Average]
  (min, avg, max) = (80.719, 80.789, 80.829), stdev = 0.060
  CI (99.9%): [79.687, 81.891] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 57.64% complete, ETA 00:12:19
# Fork: 1 of 1
# Warmup Iteration   1: 673.438 ns/op
# Warmup Iteration   2: 171.436 ns/op
# Warmup Iteration   3: 108.564 ns/op
Iteration   1: 108.461 ns/op
Iteration   2: 108.654 ns/op
Iteration   3: 108.592 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.569 ±(99.9%) 1.795 ns/op [Average]
  (min, avg, max) = (108.461, 108.569, 108.654), stdev = 0.098
  CI (99.9%): [106.774, 110.364] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 57.71% complete, ETA 00:12:18
# Fork: 1 of 1
# Warmup Iteration   1: 788.858 ns/op
# Warmup Iteration   2: 163.848 ns/op
# Warmup Iteration   3: 108.836 ns/op
Iteration   1: 109.008 ns/op
Iteration   2: 108.821 ns/op
Iteration   3: 108.830 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.887 ±(99.9%) 1.925 ns/op [Average]
  (min, avg, max) = (108.821, 108.887, 109.008), stdev = 0.105
  CI (99.9%): [106.962, 110.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 57.78% complete, ETA 00:12:17
# Fork: 1 of 1
# Warmup Iteration   1: 106.764 ns/op
# Warmup Iteration   2: 115.187 ns/op
# Warmup Iteration   3: 74.206 ns/op
Iteration   1: 74.164 ns/op
Iteration   2: 74.178 ns/op
Iteration   3: 74.173 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.172 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (74.164, 74.172, 74.178), stdev = 0.007
  CI (99.9%): [74.045, 74.299] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 57.85% complete, ETA 00:12:16
# Fork: 1 of 1
# Warmup Iteration   1: 223.835 ns/op
# Warmup Iteration   2: 237.605 ns/op
# Warmup Iteration   3: 156.973 ns/op
Iteration   1: 156.936 ns/op
Iteration   2: 156.841 ns/op
Iteration   3: 156.856 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.878 ±(99.9%) 0.936 ns/op [Average]
  (min, avg, max) = (156.841, 156.878, 156.936), stdev = 0.051
  CI (99.9%): [155.942, 157.813] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 57.92% complete, ETA 00:12:15
# Fork: 1 of 1
# Warmup Iteration   1: 23.978 ns/op
# Warmup Iteration   2: 30.428 ns/op
# Warmup Iteration   3: 19.726 ns/op
Iteration   1: 19.791 ns/op
Iteration   2: 19.733 ns/op
Iteration   3: 19.813 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.779 ±(99.9%) 0.756 ns/op [Average]
  (min, avg, max) = (19.733, 19.779, 19.813), stdev = 0.041
  CI (99.9%): [19.022, 20.535] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 57.99% complete, ETA 00:12:13
# Fork: 1 of 1
# Warmup Iteration   1: 630.885 ns/op
# Warmup Iteration   2: 346.139 ns/op
# Warmup Iteration   3: 236.390 ns/op
Iteration   1: 236.136 ns/op
Iteration   2: 236.427 ns/op
Iteration   3: 236.688 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  236.417 ±(99.9%) 5.036 ns/op [Average]
  (min, avg, max) = (236.136, 236.417, 236.688), stdev = 0.276
  CI (99.9%): [231.381, 241.453] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 58.06% complete, ETA 00:12:12
# Fork: 1 of 1
# Warmup Iteration   1: 1264.169 ns/op
# Warmup Iteration   2: 621.992 ns/op
# Warmup Iteration   3: 408.873 ns/op
Iteration   1: 408.939 ns/op
Iteration   2: 409.015 ns/op
Iteration   3: 408.948 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  408.967 ±(99.9%) 0.753 ns/op [Average]
  (min, avg, max) = (408.939, 408.967, 409.015), stdev = 0.041
  CI (99.9%): [408.214, 409.720] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 58.13% complete, ETA 00:12:11
# Fork: 1 of 1
# Warmup Iteration   1: 2220.895 ns/op
# Warmup Iteration   2: 702.853 ns/op
# Warmup Iteration   3: 516.509 ns/op
Iteration   1: 517.159 ns/op
Iteration   2: 517.256 ns/op
Iteration   3: 518.452 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  517.622 ±(99.9%) 13.135 ns/op [Average]
  (min, avg, max) = (517.159, 517.622, 518.452), stdev = 0.720
  CI (99.9%): [504.488, 530.757] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 58.19% complete, ETA 00:12:10
# Fork: 1 of 1
# Warmup Iteration   1: 671.232 ns/op
# Warmup Iteration   2: 670.773 ns/op
# Warmup Iteration   3: 461.539 ns/op
Iteration   1: 461.430 ns/op
Iteration   2: 461.547 ns/op
Iteration   3: 461.428 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  461.469 ±(99.9%) 1.245 ns/op [Average]
  (min, avg, max) = (461.428, 461.469, 461.547), stdev = 0.068
  CI (99.9%): [460.223, 462.714] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 58.26% complete, ETA 00:12:08
# Fork: 1 of 1
# Warmup Iteration   1: 890.274 ns/op
# Warmup Iteration   2: 613.176 ns/op
# Warmup Iteration   3: 417.278 ns/op
Iteration   1: 417.338 ns/op
Iteration   2: 417.276 ns/op
Iteration   3: 417.169 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  417.261 ±(99.9%) 1.562 ns/op [Average]
  (min, avg, max) = (417.169, 417.261, 417.338), stdev = 0.086
  CI (99.9%): [415.699, 418.822] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 58.33% complete, ETA 00:12:07
# Fork: 1 of 1
# Warmup Iteration   1: 23.675 ns/op
# Warmup Iteration   2: 120.301 ns/op
# Warmup Iteration   3: 21.116 ns/op
Iteration   1: 20.917 ns/op
Iteration   2: 20.473 ns/op
Iteration   3: 20.393 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  20.594 ±(99.9%) 5.155 ns/op [Average]
  (min, avg, max) = (20.393, 20.594, 20.917), stdev = 0.283
  CI (99.9%): [15.439, 25.749] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 58.40% complete, ETA 00:12:06
# Fork: 1 of 1
# Warmup Iteration   1: 259.633 ns/op
# Warmup Iteration   2: 437.733 ns/op
# Warmup Iteration   3: 139.352 ns/op
Iteration   1: 139.147 ns/op
Iteration   2: 139.074 ns/op
Iteration   3: 139.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.125 ±(99.9%) 0.794 ns/op [Average]
  (min, avg, max) = (139.074, 139.125, 139.152), stdev = 0.044
  CI (99.9%): [138.331, 139.918] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 58.47% complete, ETA 00:12:05
# Fork: 1 of 1
# Warmup Iteration   1: 413.486 ns/op
# Warmup Iteration   2: 525.202 ns/op
# Warmup Iteration   3: 164.079 ns/op
Iteration   1: 164.027 ns/op
Iteration   2: 164.095 ns/op
Iteration   3: 164.376 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  164.166 ±(99.9%) 3.373 ns/op [Average]
  (min, avg, max) = (164.027, 164.166, 164.376), stdev = 0.185
  CI (99.9%): [160.793, 167.539] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 58.54% complete, ETA 00:12:04
# Fork: 1 of 1
# Warmup Iteration   1: 801.923 ns/op
# Warmup Iteration   2: 692.717 ns/op
# Warmup Iteration   3: 221.681 ns/op
Iteration   1: 221.595 ns/op
Iteration   2: 221.776 ns/op
Iteration   3: 221.851 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  221.741 ±(99.9%) 2.406 ns/op [Average]
  (min, avg, max) = (221.595, 221.741, 221.851), stdev = 0.132
  CI (99.9%): [219.335, 224.146] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 58.61% complete, ETA 00:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 103.734 ns/op
# Warmup Iteration   2: 256.804 ns/op
# Warmup Iteration   3: 74.278 ns/op
Iteration   1: 74.467 ns/op
Iteration   2: 74.284 ns/op
Iteration   3: 74.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.344 ±(99.9%) 1.951 ns/op [Average]
  (min, avg, max) = (74.280, 74.344, 74.467), stdev = 0.107
  CI (99.9%): [72.393, 76.295] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 58.68% complete, ETA 00:12:01
# Fork: 1 of 1
# Warmup Iteration   1: 237.100 ns/op
# Warmup Iteration   2: 518.248 ns/op
# Warmup Iteration   3: 141.145 ns/op
Iteration   1: 141.385 ns/op
Iteration   2: 141.353 ns/op
Iteration   3: 141.458 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.399 ±(99.9%) 0.984 ns/op [Average]
  (min, avg, max) = (141.353, 141.399, 141.458), stdev = 0.054
  CI (99.9%): [140.415, 142.383] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 58.75% complete, ETA 00:12:00
# Fork: 1 of 1
# Warmup Iteration   1: 24.863 ns/op
# Warmup Iteration   2: 28.542 ns/op
# Warmup Iteration   3: 19.292 ns/op
Iteration   1: 19.139 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.146 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.141 ±(99.9%) 0.078 ns/op [Average]
  (min, avg, max) = (19.138, 19.141, 19.146), stdev = 0.004
  CI (99.9%): [19.063, 19.219] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 58.82% complete, ETA 00:11:59
# Fork: 1 of 1
# Warmup Iteration   1: 103.424 ns/op
# Warmup Iteration   2: 115.829 ns/op
# Warmup Iteration   3: 74.468 ns/op
Iteration   1: 74.427 ns/op
Iteration   2: 74.510 ns/op
Iteration   3: 74.465 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.468 ±(99.9%) 0.751 ns/op [Average]
  (min, avg, max) = (74.427, 74.468, 74.510), stdev = 0.041
  CI (99.9%): [73.716, 75.219] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 58.89% complete, ETA 00:11:58
# Fork: 1 of 1
# Warmup Iteration   1: 429.832 ns/op
# Warmup Iteration   2: 111.746 ns/op
# Warmup Iteration   3: 71.544 ns/op
Iteration   1: 71.670 ns/op
Iteration   2: 71.488 ns/op
Iteration   3: 71.529 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.562 ±(99.9%) 1.738 ns/op [Average]
  (min, avg, max) = (71.488, 71.562, 71.670), stdev = 0.095
  CI (99.9%): [69.824, 73.301] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 58.96% complete, ETA 00:11:56
# Fork: 1 of 1
# Warmup Iteration   1: 222.968 ns/op
# Warmup Iteration   2: 110.886 ns/op
# Warmup Iteration   3: 72.314 ns/op
Iteration   1: 72.347 ns/op
Iteration   2: 72.296 ns/op
Iteration   3: 72.301 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.315 ±(99.9%) 0.510 ns/op [Average]
  (min, avg, max) = (72.296, 72.315, 72.347), stdev = 0.028
  CI (99.9%): [71.804, 72.825] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 59.03% complete, ETA 00:11:55
# Fork: 1 of 1
# Warmup Iteration   1: 107.340 ns/op
# Warmup Iteration   2: 114.282 ns/op
# Warmup Iteration   3: 74.331 ns/op
Iteration   1: 74.427 ns/op
Iteration   2: 74.239 ns/op
Iteration   3: 74.333 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.333 ±(99.9%) 1.715 ns/op [Average]
  (min, avg, max) = (74.239, 74.333, 74.427), stdev = 0.094
  CI (99.9%): [72.618, 76.048] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 59.10% complete, ETA 00:11:54
# Fork: 1 of 1
# Warmup Iteration   1: 210.391 ns/op
# Warmup Iteration   2: 235.333 ns/op
# Warmup Iteration   3: 123.603 ns/op
Iteration   1: 124.450 ns/op
Iteration   2: 123.652 ns/op
Iteration   3: 123.704 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  123.935 ±(99.9%) 8.152 ns/op [Average]
  (min, avg, max) = (123.652, 123.935, 124.450), stdev = 0.447
  CI (99.9%): [115.784, 132.087] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 59.17% complete, ETA 00:11:53
# Fork: 1 of 1
# Warmup Iteration   1: 24.733 ns/op
# Warmup Iteration   2: 28.873 ns/op
# Warmup Iteration   3: 19.292 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.143 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (19.134, 19.137, 19.143), stdev = 0.005
  CI (99.9%): [19.052, 19.222] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 59.24% complete, ETA 00:11:52
# Fork: 1 of 1
# Warmup Iteration   1: 103.561 ns/op
# Warmup Iteration   2: 108.269 ns/op
# Warmup Iteration   3: 74.215 ns/op
Iteration   1: 74.116 ns/op
Iteration   2: 74.198 ns/op
Iteration   3: 74.158 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.157 ±(99.9%) 0.754 ns/op [Average]
  (min, avg, max) = (74.116, 74.157, 74.198), stdev = 0.041
  CI (99.9%): [73.403, 74.911] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 59.31% complete, ETA 00:11:50
# Fork: 1 of 1
# Warmup Iteration   1: 476.161 ns/op
# Warmup Iteration   2: 104.539 ns/op
# Warmup Iteration   3: 71.568 ns/op
Iteration   1: 71.642 ns/op
Iteration   2: 71.576 ns/op
Iteration   3: 71.618 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  71.612 ±(99.9%) 0.609 ns/op [Average]
  (min, avg, max) = (71.576, 71.612, 71.642), stdev = 0.033
  CI (99.9%): [71.003, 72.221] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 59.38% complete, ETA 00:11:49
# Fork: 1 of 1
# Warmup Iteration   1: 184.115 ns/op
# Warmup Iteration   2: 110.907 ns/op
# Warmup Iteration   3: 72.242 ns/op
Iteration   1: 72.225 ns/op
Iteration   2: 72.223 ns/op
Iteration   3: 72.240 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  72.229 ±(99.9%) 0.169 ns/op [Average]
  (min, avg, max) = (72.223, 72.229, 72.240), stdev = 0.009
  CI (99.9%): [72.060, 72.398] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 59.44% complete, ETA 00:11:48
# Fork: 1 of 1
# Warmup Iteration   1: 104.339 ns/op
# Warmup Iteration   2: 111.572 ns/op
# Warmup Iteration   3: 74.324 ns/op
Iteration   1: 74.434 ns/op
Iteration   2: 74.330 ns/op
Iteration   3: 74.283 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.349 ±(99.9%) 1.403 ns/op [Average]
  (min, avg, max) = (74.283, 74.349, 74.434), stdev = 0.077
  CI (99.9%): [72.946, 75.752] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 59.51% complete, ETA 00:11:47
# Fork: 1 of 1
# Warmup Iteration   1: 208.790 ns/op
# Warmup Iteration   2: 219.866 ns/op
# Warmup Iteration   3: 123.858 ns/op
Iteration   1: 124.044 ns/op
Iteration   2: 123.824 ns/op
Iteration   3: 123.751 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  123.873 ±(99.9%) 2.780 ns/op [Average]
  (min, avg, max) = (123.751, 123.873, 124.044), stdev = 0.152
  CI (99.9%): [121.093, 126.653] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 59.58% complete, ETA 00:11:46
# Fork: 1 of 1
# Warmup Iteration   1: 25.637 ns/op
# Warmup Iteration   2: 30.987 ns/op
# Warmup Iteration   3: 19.295 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.144 ns/op
Iteration   3: 19.144 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.142 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (19.137, 19.142, 19.144), stdev = 0.004
  CI (99.9%): [19.065, 19.218] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 59.65% complete, ETA 00:11:44
# Fork: 1 of 1
# Warmup Iteration   1: 111.976 ns/op
# Warmup Iteration   2: 112.697 ns/op
# Warmup Iteration   3: 80.857 ns/op
Iteration   1: 80.799 ns/op
Iteration   2: 80.809 ns/op
Iteration   3: 80.779 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  80.796 ±(99.9%) 0.277 ns/op [Average]
  (min, avg, max) = (80.779, 80.796, 80.809), stdev = 0.015
  CI (99.9%): [80.519, 81.072] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 59.72% complete, ETA 00:11:43
# Fork: 1 of 1
# Warmup Iteration   1: 1099.345 ns/op
# Warmup Iteration   2: 160.581 ns/op
# Warmup Iteration   3: 108.477 ns/op
Iteration   1: 108.558 ns/op
Iteration   2: 108.458 ns/op
Iteration   3: 108.446 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.487 ±(99.9%) 1.121 ns/op [Average]
  (min, avg, max) = (108.446, 108.487, 108.558), stdev = 0.061
  CI (99.9%): [107.367, 109.608] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 59.79% complete, ETA 00:11:42
# Fork: 1 of 1
# Warmup Iteration   1: 444.535 ns/op
# Warmup Iteration   2: 147.168 ns/op
# Warmup Iteration   3: 108.868 ns/op
Iteration   1: 108.842 ns/op
Iteration   2: 108.849 ns/op
Iteration   3: 108.874 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  108.855 ±(99.9%) 0.310 ns/op [Average]
  (min, avg, max) = (108.842, 108.855, 108.874), stdev = 0.017
  CI (99.9%): [108.545, 109.166] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 59.86% complete, ETA 00:11:41
# Fork: 1 of 1
# Warmup Iteration   1: 105.464 ns/op
# Warmup Iteration   2: 116.181 ns/op
# Warmup Iteration   3: 74.369 ns/op
Iteration   1: 74.329 ns/op
Iteration   2: 74.266 ns/op
Iteration   3: 74.313 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.303 ±(99.9%) 0.596 ns/op [Average]
  (min, avg, max) = (74.266, 74.303, 74.329), stdev = 0.033
  CI (99.9%): [73.707, 74.899] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 59.93% complete, ETA 00:11:39
# Fork: 1 of 1
# Warmup Iteration   1: 227.256 ns/op
# Warmup Iteration   2: 242.324 ns/op
# Warmup Iteration   3: 131.459 ns/op
Iteration   1: 131.479 ns/op
Iteration   2: 131.411 ns/op
Iteration   3: 131.498 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.463 ±(99.9%) 0.827 ns/op [Average]
  (min, avg, max) = (131.411, 131.463, 131.498), stdev = 0.045
  CI (99.9%): [130.636, 132.289] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 60.00% complete, ETA 00:11:38
# Fork: 1 of 1
# Warmup Iteration   1: 23.335 ns/op
# Warmup Iteration   2: 27.641 ns/op
# Warmup Iteration   3: 19.294 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.131 ns/op
Iteration   3: 19.715 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.327 ±(99.9%) 6.140 ns/op [Average]
  (min, avg, max) = (19.131, 19.327, 19.715), stdev = 0.337
  CI (99.9%): [13.187, 25.467] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 60.07% complete, ETA 00:11:37
# Fork: 1 of 1
# Warmup Iteration   1: 240.650 ns/op
# Warmup Iteration   2: 197.664 ns/op
# Warmup Iteration   3: 138.722 ns/op
Iteration   1: 138.800 ns/op
Iteration   2: 138.567 ns/op
Iteration   3: 144.048 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.472 ±(99.9%) 56.547 ns/op [Average]
  (min, avg, max) = (138.567, 140.472, 144.048), stdev = 3.100
  CI (99.9%): [83.924, 197.019] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 60.14% complete, ETA 00:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 430.821 ns/op
# Warmup Iteration   2: 231.906 ns/op
# Warmup Iteration   3: 159.870 ns/op
Iteration   1: 159.892 ns/op
Iteration   2: 159.828 ns/op
Iteration   3: 159.832 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  159.850 ±(99.9%) 0.657 ns/op [Average]
  (min, avg, max) = (159.828, 159.850, 159.892), stdev = 0.036
  CI (99.9%): [159.193, 160.507] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 60.21% complete, ETA 00:11:35
# Fork: 1 of 1
# Warmup Iteration   1: 523.444 ns/op
# Warmup Iteration   2: 319.352 ns/op
# Warmup Iteration   3: 213.927 ns/op
Iteration   1: 213.612 ns/op
Iteration   2: 213.527 ns/op
Iteration   3: 222.376 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  216.505 ±(99.9%) 92.760 ns/op [Average]
  (min, avg, max) = (213.527, 216.505, 222.376), stdev = 5.084
  CI (99.9%): [123.745, 309.265] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 60.28% complete, ETA 00:11:33
# Fork: 1 of 1
# Warmup Iteration   1: 106.913 ns/op
# Warmup Iteration   2: 109.960 ns/op
# Warmup Iteration   3: 74.311 ns/op
Iteration   1: 74.313 ns/op
Iteration   2: 74.292 ns/op
Iteration   3: 76.271 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.958 ±(99.9%) 20.732 ns/op [Average]
  (min, avg, max) = (74.292, 74.958, 76.271), stdev = 1.136
  CI (99.9%): [54.227, 95.690] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 60.35% complete, ETA 00:11:32
# Fork: 1 of 1
# Warmup Iteration   1: 228.016 ns/op
# Warmup Iteration   2: 234.900 ns/op
# Warmup Iteration   3: 131.712 ns/op
Iteration   1: 131.918 ns/op
Iteration   2: 131.544 ns/op
Iteration   3: 131.907 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.790 ±(99.9%) 3.875 ns/op [Average]
  (min, avg, max) = (131.544, 131.790, 131.918), stdev = 0.212
  CI (99.9%): [127.915, 135.664] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 60.42% complete, ETA 00:11:31
# Fork: 1 of 1
# Warmup Iteration   1: 24.052 ns/op
# Warmup Iteration   2: 30.306 ns/op
# Warmup Iteration   3: 19.142 ns/op
Iteration   1: 19.127 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (19.127, 19.133, 19.136), stdev = 0.005
  CI (99.9%): [19.048, 19.217] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 60.49% complete, ETA 00:11:30
# Fork: 1 of 1
# Warmup Iteration   1: 1935.946 ns/op
# Warmup Iteration   2: 1060.207 ns/op
# Warmup Iteration   3: 763.243 ns/op
Iteration   1: 762.808 ns/op
Iteration   2: 762.981 ns/op
Iteration   3: 762.818 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  762.869 ±(99.9%) 1.772 ns/op [Average]
  (min, avg, max) = (762.808, 762.869, 762.981), stdev = 0.097
  CI (99.9%): [761.097, 764.641] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 60.56% complete, ETA 00:11:29
# Fork: 1 of 1
# Warmup Iteration   1: 11358.258 ns/op
# Warmup Iteration   2: 1005.322 ns/op
# Warmup Iteration   3: 687.508 ns/op
Iteration   1: 691.461 ns/op
Iteration   2: 687.552 ns/op
Iteration   3: 689.427 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  689.480 ±(99.9%) 35.663 ns/op [Average]
  (min, avg, max) = (687.552, 689.480, 691.461), stdev = 1.955
  CI (99.9%): [653.817, 725.143] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 60.62% complete, ETA 00:11:27
# Fork: 1 of 1
# Warmup Iteration   1: 14074.126 ns/op
# Warmup Iteration   2: 1072.337 ns/op
# Warmup Iteration   3: 824.705 ns/op
Iteration   1: 798.676 ns/op
Iteration   2: 781.636 ns/op
Iteration   3: 762.036 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  780.782 ±(99.9%) 334.498 ns/op [Average]
  (min, avg, max) = (762.036, 780.782, 798.676), stdev = 18.335
  CI (99.9%): [446.284, 1115.281] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 60.69% complete, ETA 00:11:26
# Fork: 1 of 1
# Warmup Iteration   1: 841.973 ns/op
# Warmup Iteration   2: 777.026 ns/op
# Warmup Iteration   3: 534.544 ns/op
Iteration   1: 534.336 ns/op
Iteration   2: 534.257 ns/op
Iteration   3: 534.272 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  534.288 ±(99.9%) 0.766 ns/op [Average]
  (min, avg, max) = (534.257, 534.288, 534.336), stdev = 0.042
  CI (99.9%): [533.522, 535.055] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 60.76% complete, ETA 00:11:25
# Fork: 1 of 1
# Warmup Iteration   1: 10356.277 ns/op
# Warmup Iteration   2: 5299.012 ns/op
# Warmup Iteration   3: 3957.936 ns/op
Iteration   1: 3955.810 ns/op
Iteration   2: 3958.610 ns/op
Iteration   3: 3958.709 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3957.710 ±(99.9%) 30.028 ns/op [Average]
  (min, avg, max) = (3955.810, 3957.710, 3958.709), stdev = 1.646
  CI (99.9%): [3927.681, 3987.738] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 60.83% complete, ETA 00:11:24
# Fork: 1 of 1
# Warmup Iteration   1: 24.413 ns/op
# Warmup Iteration   2: 29.280 ns/op
# Warmup Iteration   3: 19.137 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.032 ns/op [Average]
  (min, avg, max) = (19.134, 19.135, 19.137), stdev = 0.002
  CI (99.9%): [19.103, 19.168] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 60.90% complete, ETA 00:11:23
# Fork: 1 of 1
# Warmup Iteration   1: 865.563 ns/op
# Warmup Iteration   2: 486.342 ns/op
# Warmup Iteration   3: 323.603 ns/op
Iteration   1: 323.439 ns/op
Iteration   2: 323.419 ns/op
Iteration   3: 323.364 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.407 ±(99.9%) 0.708 ns/op [Average]
  (min, avg, max) = (323.364, 323.407, 323.439), stdev = 0.039
  CI (99.9%): [322.699, 324.115] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 60.97% complete, ETA 00:11:21
# Fork: 1 of 1
# Warmup Iteration   1: 4355.230 ns/op
# Warmup Iteration   2: 606.715 ns/op
# Warmup Iteration   3: 428.908 ns/op
Iteration   1: 428.733 ns/op
Iteration   2: 429.635 ns/op
Iteration   3: 428.718 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  429.028 ±(99.9%) 9.582 ns/op [Average]
  (min, avg, max) = (428.718, 429.028, 429.635), stdev = 0.525
  CI (99.9%): [419.447, 438.610] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 61.04% complete, ETA 00:11:20
# Fork: 1 of 1
# Warmup Iteration   1: 4086.151 ns/op
# Warmup Iteration   2: 606.929 ns/op
# Warmup Iteration   3: 430.923 ns/op
Iteration   1: 430.667 ns/op
Iteration   2: 430.640 ns/op
Iteration   3: 430.364 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  430.557 ±(99.9%) 3.061 ns/op [Average]
  (min, avg, max) = (430.364, 430.557, 430.667), stdev = 0.168
  CI (99.9%): [427.496, 433.617] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 61.11% complete, ETA 00:11:19
# Fork: 1 of 1
# Warmup Iteration   1: 1730.092 ns/op
# Warmup Iteration   2: 1302.098 ns/op
# Warmup Iteration   3: 868.858 ns/op
Iteration   1: 868.210 ns/op
Iteration   2: 868.507 ns/op
Iteration   3: 868.235 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  868.317 ±(99.9%) 3.000 ns/op [Average]
  (min, avg, max) = (868.210, 868.317, 868.507), stdev = 0.164
  CI (99.9%): [865.317, 871.317] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 61.18% complete, ETA 00:11:18
# Fork: 1 of 1
# Warmup Iteration   1: 9554.117 ns/op
# Warmup Iteration   2: 4946.404 ns/op
# Warmup Iteration   3: 3436.782 ns/op
Iteration   1: 3434.662 ns/op
Iteration   2: 3437.833 ns/op
Iteration   3: 3426.105 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3432.867 ±(99.9%) 110.681 ns/op [Average]
  (min, avg, max) = (3426.105, 3432.867, 3437.833), stdev = 6.067
  CI (99.9%): [3322.186, 3543.547] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 61.25% complete, ETA 00:11:16
# Fork: 1 of 1
# Warmup Iteration   1: 24.522 ns/op
# Warmup Iteration   2: 30.384 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.154 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.150 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.146 ±(99.9%) 0.181 ns/op [Average]
  (min, avg, max) = (19.135, 19.146, 19.154), stdev = 0.010
  CI (99.9%): [18.965, 19.328] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 61.32% complete, ETA 00:11:15
# Fork: 1 of 1
# Warmup Iteration   1: 1014.702 ns/op
# Warmup Iteration   2: 430.991 ns/op
# Warmup Iteration   3: 323.438 ns/op
Iteration   1: 323.479 ns/op
Iteration   2: 323.461 ns/op
Iteration   3: 323.094 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  323.345 ±(99.9%) 3.972 ns/op [Average]
  (min, avg, max) = (323.094, 323.345, 323.479), stdev = 0.218
  CI (99.9%): [319.373, 327.316] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 61.39% complete, ETA 00:11:14
# Fork: 1 of 1
# Warmup Iteration   1: 10410.864 ns/op
# Warmup Iteration   2: 646.423 ns/op
# Warmup Iteration   3: 426.262 ns/op
Iteration   1: 426.331 ns/op
Iteration   2: 426.736 ns/op
Iteration   3: 426.577 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.548 ±(99.9%) 3.721 ns/op [Average]
  (min, avg, max) = (426.331, 426.548, 426.736), stdev = 0.204
  CI (99.9%): [422.827, 430.270] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 61.46% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 3729.546 ns/op
# Warmup Iteration   2: 647.916 ns/op
# Warmup Iteration   3: 437.725 ns/op
Iteration   1: 437.631 ns/op
Iteration   2: 437.534 ns/op
Iteration   3: 437.943 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  437.703 ±(99.9%) 3.901 ns/op [Average]
  (min, avg, max) = (437.534, 437.703, 437.943), stdev = 0.214
  CI (99.9%): [433.802, 441.604] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 61.53% complete, ETA 00:11:12
# Fork: 1 of 1
# Warmup Iteration   1: 1993.798 ns/op
# Warmup Iteration   2: 1268.836 ns/op
# Warmup Iteration   3: 870.146 ns/op
Iteration   1: 870.212 ns/op
Iteration   2: 870.186 ns/op
Iteration   3: 870.094 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  870.164 ±(99.9%) 1.134 ns/op [Average]
  (min, avg, max) = (870.094, 870.164, 870.212), stdev = 0.062
  CI (99.9%): [869.030, 871.298] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 61.60% complete, ETA 00:11:10
# Fork: 1 of 1
# Warmup Iteration   1: 11056.647 ns/op
# Warmup Iteration   2: 4822.855 ns/op
# Warmup Iteration   3: 3379.905 ns/op
Iteration   1: 3381.086 ns/op
Iteration   2: 3380.836 ns/op
Iteration   3: 3382.760 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3381.561 ±(99.9%) 19.088 ns/op [Average]
  (min, avg, max) = (3380.836, 3381.561, 3382.760), stdev = 1.046
  CI (99.9%): [3362.473, 3400.648] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 61.67% complete, ETA 00:11:09
# Fork: 1 of 1
# Warmup Iteration   1: 23.261 ns/op
# Warmup Iteration   2: 28.037 ns/op
# Warmup Iteration   3: 19.129 ns/op
Iteration   1: 19.140 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.096 ns/op [Average]
  (min, avg, max) = (19.130, 19.136, 19.140), stdev = 0.005
  CI (99.9%): [19.040, 19.233] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 61.74% complete, ETA 00:11:08
# Fork: 1 of 1
# Warmup Iteration   1: 1161.728 ns/op
# Warmup Iteration   2: 463.236 ns/op
# Warmup Iteration   3: 344.230 ns/op
Iteration   1: 344.157 ns/op
Iteration   2: 344.407 ns/op
Iteration   3: 344.170 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  344.245 ±(99.9%) 2.572 ns/op [Average]
  (min, avg, max) = (344.157, 344.245, 344.407), stdev = 0.141
  CI (99.9%): [341.672, 346.817] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 61.81% complete, ETA 00:11:07
# Fork: 1 of 1
# Warmup Iteration   1: 4704.708 ns/op
# Warmup Iteration   2: 597.224 ns/op
# Warmup Iteration   3: 459.438 ns/op
Iteration   1: 460.958 ns/op
Iteration   2: 459.302 ns/op
Iteration   3: 459.563 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  459.941 ±(99.9%) 16.247 ns/op [Average]
  (min, avg, max) = (459.302, 459.941, 460.958), stdev = 0.891
  CI (99.9%): [443.694, 476.188] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 61.88% complete, ETA 00:11:06
# Fork: 1 of 1
# Warmup Iteration   1: 3833.599 ns/op
# Warmup Iteration   2: 663.544 ns/op
# Warmup Iteration   3: 452.729 ns/op
Iteration   1: 452.179 ns/op
Iteration   2: 452.519 ns/op
Iteration   3: 452.309 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  452.336 ±(99.9%) 3.133 ns/op [Average]
  (min, avg, max) = (452.179, 452.336, 452.519), stdev = 0.172
  CI (99.9%): [449.203, 455.469] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 61.94% complete, ETA 00:11:04
# Fork: 1 of 1
# Warmup Iteration   1: 1618.099 ns/op
# Warmup Iteration   2: 1245.718 ns/op
# Warmup Iteration   3: 867.226 ns/op
Iteration   1: 867.113 ns/op
Iteration   2: 867.305 ns/op
Iteration   3: 867.373 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  867.264 ±(99.9%) 2.467 ns/op [Average]
  (min, avg, max) = (867.113, 867.264, 867.373), stdev = 0.135
  CI (99.9%): [864.797, 869.730] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 62.01% complete, ETA 00:11:03
# Fork: 1 of 1
# Warmup Iteration   1: 11397.501 ns/op
# Warmup Iteration   2: 5088.580 ns/op
# Warmup Iteration   3: 4112.828 ns/op
Iteration   1: 3779.735 ns/op
Iteration   2: 3778.136 ns/op
Iteration   3: 3781.318 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3779.730 ±(99.9%) 29.025 ns/op [Average]
  (min, avg, max) = (3778.136, 3779.730, 3781.318), stdev = 1.591
  CI (99.9%): [3750.705, 3808.755] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 62.08% complete, ETA 00:11:02
# Fork: 1 of 1
# Warmup Iteration   1: 24.731 ns/op
# Warmup Iteration   2: 29.045 ns/op
# Warmup Iteration   3: 19.140 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.125 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.132 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (19.125, 19.132, 19.136), stdev = 0.006
  CI (99.9%): [19.020, 19.244] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 62.15% complete, ETA 00:11:01
# Fork: 1 of 1
# Warmup Iteration   1: 559.939 ns/op
# Warmup Iteration   2: 339.395 ns/op
# Warmup Iteration   3: 233.345 ns/op
Iteration   1: 233.017 ns/op
Iteration   2: 233.300 ns/op
Iteration   3: 233.186 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  233.167 ±(99.9%) 2.592 ns/op [Average]
  (min, avg, max) = (233.017, 233.167, 233.300), stdev = 0.142
  CI (99.9%): [230.575, 235.760] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 62.22% complete, ETA 00:10:59
# Fork: 1 of 1
# Warmup Iteration   1: 7667.515 ns/op
# Warmup Iteration   2: 557.109 ns/op
# Warmup Iteration   3: 407.141 ns/op
Iteration   1: 407.109 ns/op
Iteration   2: 407.028 ns/op
Iteration   3: 407.078 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  407.072 ±(99.9%) 0.745 ns/op [Average]
  (min, avg, max) = (407.028, 407.072, 407.109), stdev = 0.041
  CI (99.9%): [406.327, 407.816] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 62.29% complete, ETA 00:10:58
# Fork: 1 of 1
# Warmup Iteration   1: 21385.151 ns/op
# Warmup Iteration   2: 562.800 ns/op
# Warmup Iteration   3: 400.853 ns/op
Iteration   1: 371.395 ns/op
Iteration   2: 370.939 ns/op
Iteration   3: 370.710 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  371.015 ±(99.9%) 6.367 ns/op [Average]
  (min, avg, max) = (370.710, 371.015, 371.395), stdev = 0.349
  CI (99.9%): [364.648, 377.381] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 62.36% complete, ETA 00:10:57
# Fork: 1 of 1
# Warmup Iteration   1: 203.858 ns/op
# Warmup Iteration   2: 195.768 ns/op
# Warmup Iteration   3: 139.259 ns/op
Iteration   1: 139.162 ns/op
Iteration   2: 139.177 ns/op
Iteration   3: 139.186 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.175 ±(99.9%) 0.219 ns/op [Average]
  (min, avg, max) = (139.162, 139.175, 139.186), stdev = 0.012
  CI (99.9%): [138.955, 139.394] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 1, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 62.43% complete, ETA 00:10:56
# Fork: 1 of 1
# Warmup Iteration   1: 13245.632 ns/op
# Warmup Iteration   2: 5907.795 ns/op
# Warmup Iteration   3: 4547.610 ns/op
Iteration   1: 4179.953 ns/op
Iteration   2: 4180.708 ns/op
Iteration   3: 4181.848 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4180.836 ±(99.9%) 17.403 ns/op [Average]
  (min, avg, max) = (4179.953, 4180.836, 4181.848), stdev = 0.954
  CI (99.9%): [4163.433, 4198.240] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 62.50% complete, ETA 00:10:55
# Fork: 1 of 1
# Warmup Iteration   1: 24.820 ns/op
# Warmup Iteration   2: 28.578 ns/op
# Warmup Iteration   3: 19.142 ns/op
Iteration   1: 19.144 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.143 ns/op [Average]
  (min, avg, max) = (19.128, 19.136, 19.144), stdev = 0.008
  CI (99.9%): [18.992, 19.279] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 62.57% complete, ETA 00:10:53
# Fork: 1 of 1
# Warmup Iteration   1: 13278.648 ns/op
# Warmup Iteration   2: 972.793 ns/op
# Warmup Iteration   3: 800.854 ns/op
Iteration   1: 747.436 ns/op
Iteration   2: 747.301 ns/op
Iteration   3: 747.260 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  747.332 ±(99.9%) 1.674 ns/op [Average]
  (min, avg, max) = (747.260, 747.332, 747.436), stdev = 0.092
  CI (99.9%): [745.658, 749.007] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 62.64% complete, ETA 00:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 6549.094 ns/op
# Warmup Iteration   2: 1254.011 ns/op
# Warmup Iteration   3: 858.761 ns/op
Iteration   1: 858.968 ns/op
Iteration   2: 858.524 ns/op
Iteration   3: 858.779 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  858.757 ±(99.9%) 4.066 ns/op [Average]
  (min, avg, max) = (858.524, 858.757, 858.968), stdev = 0.223
  CI (99.9%): [854.691, 862.823] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 62.71% complete, ETA 00:10:51
# Fork: 1 of 1
# Warmup Iteration   1: 6092.614 ns/op
# Warmup Iteration   2: 1324.415 ns/op
# Warmup Iteration   3: 863.500 ns/op
Iteration   1: 880.304 ns/op
Iteration   2: 874.498 ns/op
Iteration   3: 863.202 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  872.668 ±(99.9%) 158.660 ns/op [Average]
  (min, avg, max) = (863.202, 872.668, 880.304), stdev = 8.697
  CI (99.9%): [714.008, 1031.327] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 62.78% complete, ETA 00:10:50
# Fork: 1 of 1
# Warmup Iteration   1: 1149.738 ns/op
# Warmup Iteration   2: 1043.358 ns/op
# Warmup Iteration   3: 770.813 ns/op
Iteration   1: 778.463 ns/op
Iteration   2: 770.316 ns/op
Iteration   3: 786.952 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  778.577 ±(99.9%) 151.762 ns/op [Average]
  (min, avg, max) = (770.316, 778.577, 786.952), stdev = 8.319
  CI (99.9%): [626.815, 930.339] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 62.85% complete, ETA 00:10:49
# Fork: 1 of 1
# Warmup Iteration   1: 2283.914 ns/op
# Warmup Iteration   2: 1017.493 ns/op
# Warmup Iteration   3: 766.653 ns/op
Iteration   1: 766.061 ns/op
Iteration   2: 766.155 ns/op
Iteration   3: 766.727 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  766.315 ±(99.9%) 6.578 ns/op [Average]
  (min, avg, max) = (766.061, 766.315, 766.727), stdev = 0.361
  CI (99.9%): [759.736, 772.893] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 62.92% complete, ETA 00:10:47
# Fork: 1 of 1
# Warmup Iteration   1: 24.941 ns/op
# Warmup Iteration   2: 28.280 ns/op
# Warmup Iteration   3: 19.144 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (19.135, 19.137, 19.138), stdev = 0.001
  CI (99.9%): [19.113, 19.161] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 62.99% complete, ETA 00:10:46
# Fork: 1 of 1
# Warmup Iteration   1: 569.419 ns/op
# Warmup Iteration   2: 476.944 ns/op
# Warmup Iteration   3: 305.566 ns/op
Iteration   1: 306.256 ns/op
Iteration   2: 309.666 ns/op
Iteration   3: 307.716 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  307.879 ±(99.9%) 31.212 ns/op [Average]
  (min, avg, max) = (306.256, 307.879, 309.666), stdev = 1.711
  CI (99.9%): [276.668, 339.091] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 63.06% complete, ETA 00:10:45
# Fork: 1 of 1
# Warmup Iteration   1: 2595.803 ns/op
# Warmup Iteration   2: 633.582 ns/op
# Warmup Iteration   3: 457.758 ns/op
Iteration   1: 457.877 ns/op
Iteration   2: 457.078 ns/op
Iteration   3: 456.645 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  457.200 ±(99.9%) 11.399 ns/op [Average]
  (min, avg, max) = (456.645, 457.200, 457.877), stdev = 0.625
  CI (99.9%): [445.800, 468.599] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 63.13% complete, ETA 00:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 2657.129 ns/op
# Warmup Iteration   2: 619.159 ns/op
# Warmup Iteration   3: 454.870 ns/op
Iteration   1: 454.809 ns/op
Iteration   2: 454.685 ns/op
Iteration   3: 454.949 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  454.814 ±(99.9%) 2.414 ns/op [Average]
  (min, avg, max) = (454.685, 454.814, 454.949), stdev = 0.132
  CI (99.9%): [452.400, 457.229] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 63.19% complete, ETA 00:10:43
# Fork: 1 of 1
# Warmup Iteration   1: 1459.721 ns/op
# Warmup Iteration   2: 1309.455 ns/op
# Warmup Iteration   3: 871.049 ns/op
Iteration   1: 870.473 ns/op
Iteration   2: 870.781 ns/op
Iteration   3: 870.283 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  870.512 ±(99.9%) 4.583 ns/op [Average]
  (min, avg, max) = (870.283, 870.512, 870.781), stdev = 0.251
  CI (99.9%): [865.929, 875.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 63.26% complete, ETA 00:10:41
# Fork: 1 of 1
# Warmup Iteration   1: 10978.622 ns/op
# Warmup Iteration   2: 4974.286 ns/op
# Warmup Iteration   3: 3439.081 ns/op
Iteration   1: 3437.886 ns/op
Iteration   2: 3441.555 ns/op
Iteration   3: 3436.560 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3438.667 ±(99.9%) 47.207 ns/op [Average]
  (min, avg, max) = (3436.560, 3438.667, 3441.555), stdev = 2.588
  CI (99.9%): [3391.461, 3485.874] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 63.33% complete, ETA 00:10:40
# Fork: 1 of 1
# Warmup Iteration   1: 24.819 ns/op
# Warmup Iteration   2: 30.564 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.140 ns/op
Iteration   2: 19.140 ns/op
Iteration   3: 19.133 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.138 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (19.133, 19.138, 19.140), stdev = 0.004
  CI (99.9%): [19.064, 19.212] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 63.40% complete, ETA 00:10:39
# Fork: 1 of 1
# Warmup Iteration   1: 23830.925 ns/op
# Warmup Iteration   2: 697.902 ns/op
# Warmup Iteration   3: 545.992 ns/op
Iteration   1: 498.104 ns/op
Iteration   2: 497.868 ns/op
Iteration   3: 502.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  499.617 ±(99.9%) 51.601 ns/op [Average]
  (min, avg, max) = (497.868, 499.617, 502.880), stdev = 2.828
  CI (99.9%): [448.016, 551.219] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 63.47% complete, ETA 00:10:38
# Fork: 1 of 1
# Warmup Iteration   1: 7635.857 ns/op
# Warmup Iteration   2: 720.616 ns/op
# Warmup Iteration   3: 535.423 ns/op
Iteration   1: 536.540 ns/op
Iteration   2: 534.105 ns/op
Iteration   3: 534.250 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  534.965 ±(99.9%) 24.921 ns/op [Average]
  (min, avg, max) = (534.105, 534.965, 536.540), stdev = 1.366
  CI (99.9%): [510.044, 559.886] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 63.54% complete, ETA 00:10:36
# Fork: 1 of 1
# Warmup Iteration   1: 3622.524 ns/op
# Warmup Iteration   2: 694.994 ns/op
# Warmup Iteration   3: 342.442 ns/op
Iteration   1: 343.651 ns/op
Iteration   2: 341.418 ns/op
Iteration   3: 347.325 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  344.131 ±(99.9%) 54.419 ns/op [Average]
  (min, avg, max) = (341.418, 344.131, 347.325), stdev = 2.983
  CI (99.9%): [289.712, 398.550] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 63.61% complete, ETA 00:10:35
# Fork: 1 of 1
# Warmup Iteration   1: 1752.867 ns/op
# Warmup Iteration   2: 1273.504 ns/op
# Warmup Iteration   3: 874.005 ns/op
Iteration   1: 871.703 ns/op
Iteration   2: 866.552 ns/op
Iteration   3: 869.956 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  869.404 ±(99.9%) 47.792 ns/op [Average]
  (min, avg, max) = (866.552, 869.404, 871.703), stdev = 2.620
  CI (99.9%): [821.612, 917.195] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 63.68% complete, ETA 00:10:34
# Fork: 1 of 1
# Warmup Iteration   1: 8474.347 ns/op
# Warmup Iteration   2: 5070.873 ns/op
# Warmup Iteration   3: 3541.256 ns/op
Iteration   1: 3539.273 ns/op
Iteration   2: 3541.103 ns/op
Iteration   3: 3543.442 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3541.272 ±(99.9%) 38.121 ns/op [Average]
  (min, avg, max) = (3539.273, 3541.272, 3543.442), stdev = 2.090
  CI (99.9%): [3503.151, 3579.394] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 63.75% complete, ETA 00:10:33
# Fork: 1 of 1
# Warmup Iteration   1: 23.419 ns/op
# Warmup Iteration   2: 26.712 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.129 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.131 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (19.127, 19.131, 19.138), stdev = 0.006
  CI (99.9%): [19.020, 19.242] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 63.82% complete, ETA 00:10:32
# Fork: 1 of 1
# Warmup Iteration   1: 116.354 ns/op
# Warmup Iteration   2: 126.268 ns/op
# Warmup Iteration   3: 81.529 ns/op
Iteration   1: 81.524 ns/op
Iteration   2: 81.543 ns/op
Iteration   3: 81.526 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  81.531 ±(99.9%) 0.193 ns/op [Average]
  (min, avg, max) = (81.524, 81.531, 81.543), stdev = 0.011
  CI (99.9%): [81.338, 81.725] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 63.89% complete, ETA 00:10:30
# Fork: 1 of 1
# Warmup Iteration   1: 433.126 ns/op
# Warmup Iteration   2: 170.192 ns/op
# Warmup Iteration   3: 112.829 ns/op
Iteration   1: 112.405 ns/op
Iteration   2: 112.545 ns/op
Iteration   3: 112.379 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.443 ±(99.9%) 1.629 ns/op [Average]
  (min, avg, max) = (112.379, 112.443, 112.545), stdev = 0.089
  CI (99.9%): [110.814, 114.072] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 63.96% complete, ETA 00:10:29
# Fork: 1 of 1
# Warmup Iteration   1: 439.421 ns/op
# Warmup Iteration   2: 165.900 ns/op
# Warmup Iteration   3: 112.776 ns/op
Iteration   1: 112.821 ns/op
Iteration   2: 112.806 ns/op
Iteration   3: 112.767 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.798 ±(99.9%) 0.505 ns/op [Average]
  (min, avg, max) = (112.767, 112.798, 112.821), stdev = 0.028
  CI (99.9%): [112.293, 113.303] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 64.03% complete, ETA 00:10:28
# Fork: 1 of 1
# Warmup Iteration   1: 106.917 ns/op
# Warmup Iteration   2: 115.726 ns/op
# Warmup Iteration   3: 74.212 ns/op
Iteration   1: 74.196 ns/op
Iteration   2: 74.156 ns/op
Iteration   3: 74.157 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.170 ±(99.9%) 0.424 ns/op [Average]
  (min, avg, max) = (74.156, 74.170, 74.196), stdev = 0.023
  CI (99.9%): [73.746, 74.594] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 64.10% complete, ETA 00:10:27
# Fork: 1 of 1
# Warmup Iteration   1: 219.291 ns/op
# Warmup Iteration   2: 235.707 ns/op
# Warmup Iteration   3: 156.935 ns/op
Iteration   1: 156.876 ns/op
Iteration   2: 156.919 ns/op
Iteration   3: 156.941 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.912 ±(99.9%) 0.603 ns/op [Average]
  (min, avg, max) = (156.876, 156.912, 156.941), stdev = 0.033
  CI (99.9%): [156.309, 157.515] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 64.17% complete, ETA 00:10:26
# Fork: 1 of 1
# Warmup Iteration   1: 24.153 ns/op
# Warmup Iteration   2: 25.889 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.141 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.139 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.091 ns/op [Average]
  (min, avg, max) = (19.132, 19.137, 19.141), stdev = 0.005
  CI (99.9%): [19.046, 19.229] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 64.24% complete, ETA 00:10:24
# Fork: 1 of 1
# Warmup Iteration   1: 3059.378 ns/op
# Warmup Iteration   2: 1000.125 ns/op
# Warmup Iteration   3: 739.685 ns/op
Iteration   1: 745.308 ns/op
Iteration   2: 743.738 ns/op
Iteration   3: 739.879 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  742.975 ±(99.9%) 50.966 ns/op [Average]
  (min, avg, max) = (739.879, 742.975, 745.308), stdev = 2.794
  CI (99.9%): [692.009, 793.941] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 64.31% complete, ETA 00:10:23
# Fork: 1 of 1
# Warmup Iteration   1: 10984.100 ns/op
# Warmup Iteration   2: 1072.449 ns/op
# Warmup Iteration   3: 713.125 ns/op
Iteration   1: 712.303 ns/op
Iteration   2: 713.384 ns/op
Iteration   3: 716.423 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  714.037 ±(99.9%) 38.967 ns/op [Average]
  (min, avg, max) = (712.303, 714.037, 716.423), stdev = 2.136
  CI (99.9%): [675.070, 753.004] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 64.38% complete, ETA 00:10:22
# Fork: 1 of 1
# Warmup Iteration   1: 11930.950 ns/op
# Warmup Iteration   2: 951.448 ns/op
# Warmup Iteration   3: 751.666 ns/op
Iteration   1: 693.762 ns/op
Iteration   2: 691.829 ns/op
Iteration   3: 692.725 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  692.772 ±(99.9%) 17.643 ns/op [Average]
  (min, avg, max) = (691.829, 692.772, 693.762), stdev = 0.967
  CI (99.9%): [675.129, 710.415] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 64.44% complete, ETA 00:10:21
# Fork: 1 of 1
# Warmup Iteration   1: 985.579 ns/op
# Warmup Iteration   2: 784.610 ns/op
# Warmup Iteration   3: 545.945 ns/op
Iteration   1: 543.551 ns/op
Iteration   2: 542.530 ns/op
Iteration   3: 548.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  544.739 ±(99.9%) 54.474 ns/op [Average]
  (min, avg, max) = (542.530, 544.739, 548.137), stdev = 2.986
  CI (99.9%): [490.265, 599.214] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 64.51% complete, ETA 00:10:19
# Fork: 1 of 1
# Warmup Iteration   1: 36396.129 ns/op
# Warmup Iteration   2: 4904.113 ns/op
# Warmup Iteration   3: 4323.746 ns/op
Iteration   1: 3669.010 ns/op
Iteration   2: 3673.915 ns/op
Iteration   3: 3670.115 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3671.014 ±(99.9%) 46.941 ns/op [Average]
  (min, avg, max) = (3669.010, 3671.014, 3673.915), stdev = 2.573
  CI (99.9%): [3624.072, 3717.955] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 64.58% complete, ETA 00:10:18
# Fork: 1 of 1
# Warmup Iteration   1: 24.788 ns/op
# Warmup Iteration   2: 30.257 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.129 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.131 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (19.129, 19.131, 19.134), stdev = 0.002
  CI (99.9%): [19.088, 19.175] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 64.65% complete, ETA 00:10:17
# Fork: 1 of 1
# Warmup Iteration   1: 2656.126 ns/op
# Warmup Iteration   2: 960.430 ns/op
# Warmup Iteration   3: 690.945 ns/op
Iteration   1: 690.142 ns/op
Iteration   2: 690.686 ns/op
Iteration   3: 690.492 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  690.440 ±(99.9%) 5.030 ns/op [Average]
  (min, avg, max) = (690.142, 690.440, 690.686), stdev = 0.276
  CI (99.9%): [685.410, 695.470] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 64.72% complete, ETA 00:10:16
# Fork: 1 of 1
# Warmup Iteration   1: 7779.205 ns/op
# Warmup Iteration   2: 1635.532 ns/op
# Warmup Iteration   3: 1107.319 ns/op
Iteration   1: 1106.961 ns/op
Iteration   2: 1106.486 ns/op
Iteration   3: 1107.046 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1106.831 ±(99.9%) 5.506 ns/op [Average]
  (min, avg, max) = (1106.486, 1106.831, 1107.046), stdev = 0.302
  CI (99.9%): [1101.325, 1112.336] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 64.79% complete, ETA 00:10:15
# Fork: 1 of 1
# Warmup Iteration   1: 16046.817 ns/op
# Warmup Iteration   2: 1621.755 ns/op
# Warmup Iteration   3: 1213.367 ns/op
Iteration   1: 1101.679 ns/op
Iteration   2: 1101.266 ns/op
Iteration   3: 1101.465 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1101.470 ±(99.9%) 3.770 ns/op [Average]
  (min, avg, max) = (1101.266, 1101.470, 1101.679), stdev = 0.207
  CI (99.9%): [1097.700, 1105.240] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 64.86% complete, ETA 00:10:13
# Fork: 1 of 1
# Warmup Iteration   1: 1700.986 ns/op
# Warmup Iteration   2: 1385.033 ns/op
# Warmup Iteration   3: 1052.403 ns/op
Iteration   1: 1052.203 ns/op
Iteration   2: 1052.171 ns/op
Iteration   3: 1052.587 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1052.320 ±(99.9%) 4.225 ns/op [Average]
  (min, avg, max) = (1052.171, 1052.320, 1052.587), stdev = 0.232
  CI (99.9%): [1048.095, 1056.545] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 64.93% complete, ETA 00:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 2194.998 ns/op
# Warmup Iteration   2: 1068.088 ns/op
# Warmup Iteration   3: 829.494 ns/op
Iteration   1: 828.369 ns/op
Iteration   2: 828.825 ns/op
Iteration   3: 828.999 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  828.731 ±(99.9%) 5.928 ns/op [Average]
  (min, avg, max) = (828.369, 828.731, 828.999), stdev = 0.325
  CI (99.9%): [822.803, 834.659] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 65.00% complete, ETA 00:10:11
# Fork: 1 of 1
# Warmup Iteration   1: 22.537 ns/op
# Warmup Iteration   2: 28.501 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.131 ns/op
Iteration   3: 19.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (19.131, 19.133, 19.136), stdev = 0.003
  CI (99.9%): [19.085, 19.180] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 65.07% complete, ETA 00:10:10
# Fork: 1 of 1
# Warmup Iteration   1: 470.875 ns/op
# Warmup Iteration   2: 399.038 ns/op
# Warmup Iteration   3: 284.703 ns/op
Iteration   1: 284.638 ns/op
Iteration   2: 284.318 ns/op
Iteration   3: 284.060 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  284.339 ±(99.9%) 5.283 ns/op [Average]
  (min, avg, max) = (284.060, 284.339, 284.638), stdev = 0.290
  CI (99.9%): [279.056, 289.622] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 65.14% complete, ETA 00:10:09
# Fork: 1 of 1
# Warmup Iteration   1: 1059.332 ns/op
# Warmup Iteration   2: 721.100 ns/op
# Warmup Iteration   3: 533.869 ns/op
Iteration   1: 534.050 ns/op
Iteration   2: 534.412 ns/op
Iteration   3: 533.727 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  534.063 ±(99.9%) 6.249 ns/op [Average]
  (min, avg, max) = (533.727, 534.063, 534.412), stdev = 0.343
  CI (99.9%): [527.814, 540.312] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 65.21% complete, ETA 00:10:07
# Fork: 1 of 1
# Warmup Iteration   1: 559.800 ns/op
# Warmup Iteration   2: 442.709 ns/op
# Warmup Iteration   3: 299.342 ns/op
Iteration   1: 299.711 ns/op
Iteration   2: 299.477 ns/op
Iteration   3: 299.431 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  299.540 ±(99.9%) 2.736 ns/op [Average]
  (min, avg, max) = (299.431, 299.540, 299.711), stdev = 0.150
  CI (99.9%): [296.803, 302.276] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 65.28% complete, ETA 00:10:06
# Fork: 1 of 1
# Warmup Iteration   1: 1480.453 ns/op
# Warmup Iteration   2: 1205.779 ns/op
# Warmup Iteration   3: 910.461 ns/op
Iteration   1: 922.509 ns/op
Iteration   2: 922.883 ns/op
Iteration   3: 910.723 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  918.705 ±(99.9%) 126.164 ns/op [Average]
  (min, avg, max) = (910.723, 918.705, 922.883), stdev = 6.915
  CI (99.9%): [792.541, 1044.869] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 65.35% complete, ETA 00:10:05
# Fork: 1 of 1
# Warmup Iteration   1: 11900.099 ns/op
# Warmup Iteration   2: 5546.779 ns/op
# Warmup Iteration   3: 4157.959 ns/op
Iteration   1: 3833.839 ns/op
Iteration   2: 3828.664 ns/op
Iteration   3: 3829.254 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3830.586 ±(99.9%) 51.683 ns/op [Average]
  (min, avg, max) = (3828.664, 3830.586, 3833.839), stdev = 2.833
  CI (99.9%): [3778.902, 3882.269] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 65.42% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 24.900 ns/op
# Warmup Iteration   2: 29.857 ns/op
# Warmup Iteration   3: 19.142 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.134 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (19.134, 19.134, 19.135), stdev = 0.001
  CI (99.9%): [19.120, 19.149] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 65.49% complete, ETA 00:10:02
# Fork: 1 of 1
# Warmup Iteration   1: 842.839 ns/op
# Warmup Iteration   2: 580.514 ns/op
# Warmup Iteration   3: 427.902 ns/op
Iteration   1: 428.059 ns/op
Iteration   2: 427.432 ns/op
Iteration   3: 425.351 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.948 ±(99.9%) 25.863 ns/op [Average]
  (min, avg, max) = (425.351, 426.948, 428.059), stdev = 1.418
  CI (99.9%): [401.085, 452.810] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 65.56% complete, ETA 00:10:01
# Fork: 1 of 1
# Warmup Iteration   1: 13173.100 ns/op
# Warmup Iteration   2: 755.405 ns/op
# Warmup Iteration   3: 617.227 ns/op
Iteration   1: 565.202 ns/op
Iteration   2: 569.586 ns/op
Iteration   3: 566.326 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  567.038 ±(99.9%) 41.549 ns/op [Average]
  (min, avg, max) = (565.202, 567.038, 569.586), stdev = 2.277
  CI (99.9%): [525.488, 608.587] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 65.63% complete, ETA 00:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 11198.520 ns/op
# Warmup Iteration   2: 650.542 ns/op
# Warmup Iteration   3: 463.209 ns/op
Iteration   1: 460.458 ns/op
Iteration   2: 460.243 ns/op
Iteration   3: 469.399 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  463.367 ±(99.9%) 95.325 ns/op [Average]
  (min, avg, max) = (460.243, 463.367, 469.399), stdev = 5.225
  CI (99.9%): [368.042, 558.692] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 65.69% complete, ETA 00:09:59
# Fork: 1 of 1
# Warmup Iteration   1: 2051.694 ns/op
# Warmup Iteration   2: 1268.073 ns/op
# Warmup Iteration   3: 856.706 ns/op
Iteration   1: 861.209 ns/op
Iteration   2: 853.068 ns/op
Iteration   3: 854.116 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  856.131 ±(99.9%) 80.794 ns/op [Average]
  (min, avg, max) = (853.068, 856.131, 861.209), stdev = 4.429
  CI (99.9%): [775.336, 936.925] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 65.76% complete, ETA 00:09:58
# Fork: 1 of 1
# Warmup Iteration   1: 11073.025 ns/op
# Warmup Iteration   2: 5227.638 ns/op
# Warmup Iteration   3: 3511.477 ns/op
Iteration   1: 3556.729 ns/op
Iteration   2: 3514.540 ns/op
Iteration   3: 3519.673 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3530.314 ±(99.9%) 419.970 ns/op [Average]
  (min, avg, max) = (3514.540, 3530.314, 3556.729), stdev = 23.020
  CI (99.9%): [3110.344, 3950.284] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 65.83% complete, ETA 00:09:56
# Fork: 1 of 1
# Warmup Iteration   1: 24.849 ns/op
# Warmup Iteration   2: 28.582 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.126 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (19.126, 19.133, 19.137), stdev = 0.006
  CI (99.9%): [19.019, 19.247] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 65.90% complete, ETA 00:09:55
# Fork: 1 of 1
# Warmup Iteration   1: 131.506 ns/op
# Warmup Iteration   2: 130.325 ns/op
# Warmup Iteration   3: 90.751 ns/op
Iteration   1: 90.778 ns/op
Iteration   2: 90.717 ns/op
Iteration   3: 90.732 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  90.742 ±(99.9%) 0.584 ns/op [Average]
  (min, avg, max) = (90.717, 90.742, 90.778), stdev = 0.032
  CI (99.9%): [90.158, 91.326] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 65.97% complete, ETA 00:09:54
# Fork: 1 of 1
# Warmup Iteration   1: 647.925 ns/op
# Warmup Iteration   2: 169.171 ns/op
# Warmup Iteration   3: 120.306 ns/op
Iteration   1: 120.274 ns/op
Iteration   2: 120.300 ns/op
Iteration   3: 120.226 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  120.267 ±(99.9%) 0.684 ns/op [Average]
  (min, avg, max) = (120.226, 120.267, 120.300), stdev = 0.037
  CI (99.9%): [119.583, 120.950] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 66.04% complete, ETA 00:09:53
# Fork: 1 of 1
# Warmup Iteration   1: 998.764 ns/op
# Warmup Iteration   2: 173.592 ns/op
# Warmup Iteration   3: 117.905 ns/op
Iteration   1: 117.945 ns/op
Iteration   2: 117.766 ns/op
Iteration   3: 117.740 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  117.817 ±(99.9%) 2.042 ns/op [Average]
  (min, avg, max) = (117.740, 117.817, 117.945), stdev = 0.112
  CI (99.9%): [115.775, 119.858] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 66.11% complete, ETA 00:09:52
# Fork: 1 of 1
# Warmup Iteration   1: 283.783 ns/op
# Warmup Iteration   2: 287.263 ns/op
# Warmup Iteration   3: 195.513 ns/op
Iteration   1: 196.507 ns/op
Iteration   2: 195.069 ns/op
Iteration   3: 194.989 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  195.522 ±(99.9%) 15.580 ns/op [Average]
  (min, avg, max) = (194.989, 195.522, 196.507), stdev = 0.854
  CI (99.9%): [179.942, 211.102] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 66.18% complete, ETA 00:09:50
# Fork: 1 of 1
# Warmup Iteration   1: 252.114 ns/op
# Warmup Iteration   2: 235.695 ns/op
# Warmup Iteration   3: 152.299 ns/op
Iteration   1: 152.185 ns/op
Iteration   2: 152.232 ns/op
Iteration   3: 152.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  152.181 ±(99.9%) 0.965 ns/op [Average]
  (min, avg, max) = (152.127, 152.181, 152.232), stdev = 0.053
  CI (99.9%): [151.216, 153.147] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 66.25% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 23.014 ns/op
# Warmup Iteration   2: 26.970 ns/op
# Warmup Iteration   3: 19.137 ns/op
Iteration   1: 19.131 ns/op
Iteration   2: 19.133 ns/op
Iteration   3: 19.140 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.094 ns/op [Average]
  (min, avg, max) = (19.131, 19.135, 19.140), stdev = 0.005
  CI (99.9%): [19.040, 19.229] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 66.32% complete, ETA 00:09:48
# Fork: 1 of 1
# Warmup Iteration   1: 2375.531 ns/op
# Warmup Iteration   2: 965.595 ns/op
# Warmup Iteration   3: 741.264 ns/op
Iteration   1: 740.456 ns/op
Iteration   2: 736.336 ns/op
Iteration   3: 743.360 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  740.051 ±(99.9%) 64.387 ns/op [Average]
  (min, avg, max) = (736.336, 740.051, 743.360), stdev = 3.529
  CI (99.9%): [675.664, 804.438] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 66.39% complete, ETA 00:09:47
# Fork: 1 of 1
# Warmup Iteration   1: 11111.659 ns/op
# Warmup Iteration   2: 1082.519 ns/op
# Warmup Iteration   3: 752.557 ns/op
Iteration   1: 750.835 ns/op
Iteration   2: 750.801 ns/op
Iteration   3: 750.327 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  750.654 ±(99.9%) 5.180 ns/op [Average]
  (min, avg, max) = (750.327, 750.654, 750.835), stdev = 0.284
  CI (99.9%): [745.475, 755.834] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 66.46% complete, ETA 00:09:45
# Fork: 1 of 1
# Warmup Iteration   1: 25455.728 ns/op
# Warmup Iteration   2: 1114.889 ns/op
# Warmup Iteration   3: 859.209 ns/op
Iteration   1: 776.005 ns/op
Iteration   2: 775.961 ns/op
Iteration   3: 778.076 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  776.681 ±(99.9%) 22.054 ns/op [Average]
  (min, avg, max) = (775.961, 776.681, 778.076), stdev = 1.209
  CI (99.9%): [754.627, 798.735] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 66.53% complete, ETA 00:09:44
# Fork: 1 of 1
# Warmup Iteration   1: 3267.059 ns/op
# Warmup Iteration   2: 1638.447 ns/op
# Warmup Iteration   3: 1197.655 ns/op
Iteration   1: 1210.828 ns/op
Iteration   2: 1209.364 ns/op
Iteration   3: 1208.325 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1209.505 ±(99.9%) 22.938 ns/op [Average]
  (min, avg, max) = (1208.325, 1209.505, 1210.828), stdev = 1.257
  CI (99.9%): [1186.567, 1232.444] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 66.60% complete, ETA 00:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 25221.310 ns/op
# Warmup Iteration   2: 5390.326 ns/op
# Warmup Iteration   3: 4291.304 ns/op
Iteration   1: 3952.410 ns/op
Iteration   2: 3953.275 ns/op
Iteration   3: 3951.501 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3952.395 ±(99.9%) 16.183 ns/op [Average]
  (min, avg, max) = (3951.501, 3952.395, 3953.275), stdev = 0.887
  CI (99.9%): [3936.212, 3968.578] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 66.67% complete, ETA 00:09:42
# Fork: 1 of 1
# Warmup Iteration   1: 24.613 ns/op
# Warmup Iteration   2: 28.266 ns/op
# Warmup Iteration   3: 19.134 ns/op
Iteration   1: 19.133 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.136 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.032 ns/op [Average]
  (min, avg, max) = (19.133, 19.134, 19.136), stdev = 0.002
  CI (99.9%): [19.102, 19.167] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 66.74% complete, ETA 00:09:41
# Fork: 1 of 1
# Warmup Iteration   1: 7494.169 ns/op
# Warmup Iteration   2: 1039.978 ns/op
# Warmup Iteration   3: 762.172 ns/op
Iteration   1: 761.054 ns/op
Iteration   2: 762.184 ns/op
Iteration   3: 762.139 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  761.792 ±(99.9%) 11.670 ns/op [Average]
  (min, avg, max) = (761.054, 761.792, 762.184), stdev = 0.640
  CI (99.9%): [750.122, 773.463] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 66.81% complete, ETA 00:09:39
# Fork: 1 of 1
# Warmup Iteration   1: 10773.173 ns/op
# Warmup Iteration   2: 1196.244 ns/op
# Warmup Iteration   3: 822.729 ns/op
Iteration   1: 822.690 ns/op
Iteration   2: 822.412 ns/op
Iteration   3: 823.656 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  822.919 ±(99.9%) 11.904 ns/op [Average]
  (min, avg, max) = (822.412, 822.919, 823.656), stdev = 0.652
  CI (99.9%): [811.016, 834.823] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 66.88% complete, ETA 00:09:38
# Fork: 1 of 1
# Warmup Iteration   1: 9996.518 ns/op
# Warmup Iteration   2: 1221.357 ns/op
# Warmup Iteration   3: 909.243 ns/op
Iteration   1: 909.101 ns/op
Iteration   2: 909.485 ns/op
Iteration   3: 910.547 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  909.711 ±(99.9%) 13.665 ns/op [Average]
  (min, avg, max) = (909.101, 909.711, 910.547), stdev = 0.749
  CI (99.9%): [896.047, 923.376] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 66.94% complete, ETA 00:09:37
# Fork: 1 of 1
# Warmup Iteration   1: 1374.342 ns/op
# Warmup Iteration   2: 1249.742 ns/op
# Warmup Iteration   3: 866.594 ns/op
Iteration   1: 865.988 ns/op
Iteration   2: 866.056 ns/op
Iteration   3: 866.079 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  866.041 ±(99.9%) 0.861 ns/op [Average]
  (min, avg, max) = (865.988, 866.041, 866.079), stdev = 0.047
  CI (99.9%): [865.181, 866.902] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 67.01% complete, ETA 00:09:36
# Fork: 1 of 1
# Warmup Iteration   1: 1862.766 ns/op
# Warmup Iteration   2: 1162.220 ns/op
# Warmup Iteration   3: 807.350 ns/op
Iteration   1: 807.406 ns/op
Iteration   2: 804.543 ns/op
Iteration   3: 806.433 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  806.127 ±(99.9%) 26.562 ns/op [Average]
  (min, avg, max) = (804.543, 806.127, 807.406), stdev = 1.456
  CI (99.9%): [779.565, 832.689] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 67.08% complete, ETA 00:09:35
# Fork: 1 of 1
# Warmup Iteration   1: 24.006 ns/op
# Warmup Iteration   2: 27.134 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (19.135, 19.136, 19.136), stdev = 0.001
  CI (99.9%): [19.130, 19.141] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 67.15% complete, ETA 00:09:33
# Fork: 1 of 1
# Warmup Iteration   1: 455.798 ns/op
# Warmup Iteration   2: 398.739 ns/op
# Warmup Iteration   3: 292.390 ns/op
Iteration   1: 291.590 ns/op
Iteration   2: 291.465 ns/op
Iteration   3: 291.181 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  291.412 ±(99.9%) 3.827 ns/op [Average]
  (min, avg, max) = (291.181, 291.412, 291.590), stdev = 0.210
  CI (99.9%): [287.585, 295.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 67.22% complete, ETA 00:09:32
# Fork: 1 of 1
# Warmup Iteration   1: 2684.861 ns/op
# Warmup Iteration   2: 650.332 ns/op
# Warmup Iteration   3: 429.483 ns/op
Iteration   1: 430.328 ns/op
Iteration   2: 430.754 ns/op
Iteration   3: 433.736 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  431.606 ±(99.9%) 33.878 ns/op [Average]
  (min, avg, max) = (430.328, 431.606, 433.736), stdev = 1.857
  CI (99.9%): [397.728, 465.484] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 67.29% complete, ETA 00:09:31
# Fork: 1 of 1
# Warmup Iteration   1: 2776.034 ns/op
# Warmup Iteration   2: 645.319 ns/op
# Warmup Iteration   3: 444.628 ns/op
Iteration   1: 444.490 ns/op
Iteration   2: 444.571 ns/op
Iteration   3: 444.546 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  444.535 ±(99.9%) 0.757 ns/op [Average]
  (min, avg, max) = (444.490, 444.535, 444.571), stdev = 0.042
  CI (99.9%): [443.778, 445.293] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 67.36% complete, ETA 00:09:30
# Fork: 1 of 1
# Warmup Iteration   1: 1393.738 ns/op
# Warmup Iteration   2: 1161.615 ns/op
# Warmup Iteration   3: 863.408 ns/op
Iteration   1: 861.195 ns/op
Iteration   2: 862.781 ns/op
Iteration   3: 860.895 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  861.624 ±(99.9%) 18.486 ns/op [Average]
  (min, avg, max) = (860.895, 861.624, 862.781), stdev = 1.013
  CI (99.9%): [843.137, 880.110] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 67.43% complete, ETA 00:09:29
# Fork: 1 of 1
# Warmup Iteration   1: 9609.890 ns/op
# Warmup Iteration   2: 5441.816 ns/op
# Warmup Iteration   3: 3577.865 ns/op
Iteration   1: 3573.794 ns/op
Iteration   2: 3587.109 ns/op
Iteration   3: 3578.546 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3579.816 ±(99.9%) 123.103 ns/op [Average]
  (min, avg, max) = (3573.794, 3579.816, 3587.109), stdev = 6.748
  CI (99.9%): [3456.714, 3702.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 67.50% complete, ETA 00:09:27
# Fork: 1 of 1
# Warmup Iteration   1: 24.311 ns/op
# Warmup Iteration   2: 30.317 ns/op
# Warmup Iteration   3: 19.146 ns/op
Iteration   1: 19.125 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (19.125, 19.133, 19.138), stdev = 0.007
  CI (99.9%): [19.011, 19.256] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 67.57% complete, ETA 00:09:26
# Fork: 1 of 1
# Warmup Iteration   1: 947.800 ns/op
# Warmup Iteration   2: 589.219 ns/op
# Warmup Iteration   3: 419.072 ns/op
Iteration   1: 428.345 ns/op
Iteration   2: 427.427 ns/op
Iteration   3: 423.895 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.556 ±(99.9%) 42.864 ns/op [Average]
  (min, avg, max) = (423.895, 426.556, 428.345), stdev = 2.350
  CI (99.9%): [383.692, 469.420] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 67.64% complete, ETA 00:09:25
# Fork: 1 of 1
# Warmup Iteration   1: 25451.012 ns/op
# Warmup Iteration   2: 986.631 ns/op
# Warmup Iteration   3: 600.701 ns/op
Iteration   1: 542.470 ns/op
Iteration   2: 542.986 ns/op
Iteration   3: 545.125 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  543.527 ±(99.9%) 25.683 ns/op [Average]
  (min, avg, max) = (542.470, 543.527, 545.125), stdev = 1.408
  CI (99.9%): [517.844, 569.211] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 67.71% complete, ETA 00:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 24653.331 ns/op
# Warmup Iteration   2: 588.804 ns/op
# Warmup Iteration   3: 400.609 ns/op
Iteration   1: 363.704 ns/op
Iteration   2: 364.466 ns/op
Iteration   3: 360.989 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  363.053 ±(99.9%) 33.344 ns/op [Average]
  (min, avg, max) = (360.989, 363.053, 364.466), stdev = 1.828
  CI (99.9%): [329.708, 396.397] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 67.78% complete, ETA 00:09:22
# Fork: 1 of 1
# Warmup Iteration   1: 1437.405 ns/op
# Warmup Iteration   2: 1266.171 ns/op
# Warmup Iteration   3: 880.391 ns/op
Iteration   1: 882.557 ns/op
Iteration   2: 882.138 ns/op
Iteration   3: 884.547 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  883.081 ±(99.9%) 23.478 ns/op [Average]
  (min, avg, max) = (882.138, 883.081, 884.547), stdev = 1.287
  CI (99.9%): [859.602, 906.559] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 67.85% complete, ETA 00:09:21
# Fork: 1 of 1
# Warmup Iteration   1: 11241.951 ns/op
# Warmup Iteration   2: 5267.220 ns/op
# Warmup Iteration   3: 3506.712 ns/op
Iteration   1: 3499.884 ns/op
Iteration   2: 3510.164 ns/op
Iteration   3: 3504.880 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3504.976 ±(99.9%) 93.786 ns/op [Average]
  (min, avg, max) = (3499.884, 3504.976, 3510.164), stdev = 5.141
  CI (99.9%): [3411.190, 3598.761] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 67.92% complete, ETA 00:09:20
# Fork: 1 of 1
# Warmup Iteration   1: 24.344 ns/op
# Warmup Iteration   2: 30.038 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.133 ns/op
Iteration   2: 19.140 ns/op
Iteration   3: 19.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.093 ns/op [Average]
  (min, avg, max) = (19.131, 19.135, 19.140), stdev = 0.005
  CI (99.9%): [19.042, 19.228] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 67.99% complete, ETA 00:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 133.567 ns/op
# Warmup Iteration   2: 126.491 ns/op
# Warmup Iteration   3: 96.924 ns/op
Iteration   1: 97.100 ns/op
Iteration   2: 98.058 ns/op
Iteration   3: 97.870 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  97.676 ±(99.9%) 9.254 ns/op [Average]
  (min, avg, max) = (97.100, 97.676, 98.058), stdev = 0.507
  CI (99.9%): [88.422, 106.930] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 68.06% complete, ETA 00:09:18
# Fork: 1 of 1
# Warmup Iteration   1: 1012.499 ns/op
# Warmup Iteration   2: 162.476 ns/op
# Warmup Iteration   3: 113.191 ns/op
Iteration   1: 113.281 ns/op
Iteration   2: 113.225 ns/op
Iteration   3: 113.182 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  113.229 ±(99.9%) 0.902 ns/op [Average]
  (min, avg, max) = (113.182, 113.229, 113.281), stdev = 0.049
  CI (99.9%): [112.328, 114.131] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 68.13% complete, ETA 00:09:16
# Fork: 1 of 1
# Warmup Iteration   1: 492.308 ns/op
# Warmup Iteration   2: 162.245 ns/op
# Warmup Iteration   3: 112.840 ns/op
Iteration   1: 112.979 ns/op
Iteration   2: 112.842 ns/op
Iteration   3: 112.851 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.891 ±(99.9%) 1.401 ns/op [Average]
  (min, avg, max) = (112.842, 112.891, 112.979), stdev = 0.077
  CI (99.9%): [111.490, 114.292] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 68.19% complete, ETA 00:09:15
# Fork: 1 of 1
# Warmup Iteration   1: 198.671 ns/op
# Warmup Iteration   2: 201.257 ns/op
# Warmup Iteration   3: 137.578 ns/op
Iteration   1: 137.530 ns/op
Iteration   2: 137.602 ns/op
Iteration   3: 137.529 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.554 ±(99.9%) 0.756 ns/op [Average]
  (min, avg, max) = (137.529, 137.554, 137.602), stdev = 0.041
  CI (99.9%): [136.798, 138.310] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 68.26% complete, ETA 00:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 224.995 ns/op
# Warmup Iteration   2: 211.927 ns/op
# Warmup Iteration   3: 147.112 ns/op
Iteration   1: 146.996 ns/op
Iteration   2: 147.902 ns/op
Iteration   3: 146.978 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  147.292 ±(99.9%) 9.638 ns/op [Average]
  (min, avg, max) = (146.978, 147.292, 147.902), stdev = 0.528
  CI (99.9%): [137.653, 156.930] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 68.33% complete, ETA 00:09:13
# Fork: 1 of 1
# Warmup Iteration   1: 25.243 ns/op
# Warmup Iteration   2: 30.321 ns/op
# Warmup Iteration   3: 19.135 ns/op
Iteration   1: 19.131 ns/op
Iteration   2: 19.133 ns/op
Iteration   3: 19.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (19.131, 19.134, 19.137), stdev = 0.003
  CI (99.9%): [19.080, 19.188] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 68.40% complete, ETA 00:09:11
# Fork: 1 of 1
# Warmup Iteration   1: 3259.172 ns/op
# Warmup Iteration   2: 1062.832 ns/op
# Warmup Iteration   3: 789.347 ns/op
Iteration   1: 789.106 ns/op
Iteration   2: 791.511 ns/op
Iteration   3: 792.013 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  790.877 ±(99.9%) 28.351 ns/op [Average]
  (min, avg, max) = (789.106, 790.877, 792.013), stdev = 1.554
  CI (99.9%): [762.525, 819.228] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 68.47% complete, ETA 00:09:10
# Fork: 1 of 1
# Warmup Iteration   1: 19401.776 ns/op
# Warmup Iteration   2: 1139.324 ns/op
# Warmup Iteration   3: 890.617 ns/op
Iteration   1: 808.841 ns/op
Iteration   2: 811.322 ns/op
Iteration   3: 811.621 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  810.595 ±(99.9%) 27.843 ns/op [Average]
  (min, avg, max) = (808.841, 810.595, 811.621), stdev = 1.526
  CI (99.9%): [782.752, 838.438] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 68.54% complete, ETA 00:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 30292.609 ns/op
# Warmup Iteration   2: 1175.873 ns/op
# Warmup Iteration   3: 918.710 ns/op
Iteration   1: 844.523 ns/op
Iteration   2: 841.753 ns/op
Iteration   3: 848.085 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  844.787 ±(99.9%) 57.916 ns/op [Average]
  (min, avg, max) = (841.753, 844.787, 848.085), stdev = 3.175
  CI (99.9%): [786.871, 902.703] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 68.61% complete, ETA 00:09:08
# Fork: 1 of 1
# Warmup Iteration   1: 1523.512 ns/op
# Warmup Iteration   2: 1087.496 ns/op
# Warmup Iteration   3: 793.337 ns/op
Iteration   1: 794.013 ns/op
Iteration   2: 794.639 ns/op
Iteration   3: 798.759 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  795.804 ±(99.9%) 47.045 ns/op [Average]
  (min, avg, max) = (794.013, 795.804, 798.759), stdev = 2.579
  CI (99.9%): [748.759, 842.849] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 68.68% complete, ETA 00:09:07
# Fork: 1 of 1
# Warmup Iteration   1: 16176.473 ns/op
# Warmup Iteration   2: 6082.789 ns/op
# Warmup Iteration   3: 4906.466 ns/op
Iteration   1: 4529.884 ns/op
Iteration   2: 4526.518 ns/op
Iteration   3: 4526.235 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4527.546 ±(99.9%) 37.029 ns/op [Average]
  (min, avg, max) = (4526.235, 4527.546, 4529.884), stdev = 2.030
  CI (99.9%): [4490.516, 4564.575] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 68.75% complete, ETA 00:09:05
# Fork: 1 of 1
# Warmup Iteration   1: 23.370 ns/op
# Warmup Iteration   2: 29.233 ns/op
# Warmup Iteration   3: 19.144 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.129 ns/op
Iteration   3: 19.125 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.098 ns/op [Average]
  (min, avg, max) = (19.125, 19.130, 19.135), stdev = 0.005
  CI (99.9%): [19.032, 19.227] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 68.82% complete, ETA 00:09:04
# Fork: 1 of 1
# Warmup Iteration   1: 2541.128 ns/op
# Warmup Iteration   2: 1101.063 ns/op
# Warmup Iteration   3: 750.731 ns/op
Iteration   1: 750.586 ns/op
Iteration   2: 750.970 ns/op
Iteration   3: 750.650 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  750.735 ±(99.9%) 3.753 ns/op [Average]
  (min, avg, max) = (750.586, 750.735, 750.970), stdev = 0.206
  CI (99.9%): [746.983, 754.488] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 68.89% complete, ETA 00:09:03
# Fork: 1 of 1
# Warmup Iteration   1: 4207.353 ns/op
# Warmup Iteration   2: 1155.744 ns/op
# Warmup Iteration   3: 813.185 ns/op
Iteration   1: 805.566 ns/op
Iteration   2: 805.429 ns/op
Iteration   3: 813.285 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  808.093 ±(99.9%) 82.039 ns/op [Average]
  (min, avg, max) = (805.429, 808.093, 813.285), stdev = 4.497
  CI (99.9%): [726.054, 890.132] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 68.96% complete, ETA 00:09:02
# Fork: 1 of 1
# Warmup Iteration   1: 34727.358 ns/op
# Warmup Iteration   2: 1105.831 ns/op
# Warmup Iteration   3: 902.071 ns/op
Iteration   1: 761.135 ns/op
Iteration   2: 760.789 ns/op
Iteration   3: 760.990 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  760.971 ±(99.9%) 3.172 ns/op [Average]
  (min, avg, max) = (760.789, 760.971, 761.135), stdev = 0.174
  CI (99.9%): [757.799, 764.143] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 69.03% complete, ETA 00:09:01
# Fork: 1 of 1
# Warmup Iteration   1: 1343.820 ns/op
# Warmup Iteration   2: 1077.940 ns/op
# Warmup Iteration   3: 724.039 ns/op
Iteration   1: 723.907 ns/op
Iteration   2: 724.513 ns/op
Iteration   3: 723.784 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  724.068 ±(99.9%) 7.122 ns/op [Average]
  (min, avg, max) = (723.784, 724.068, 724.513), stdev = 0.390
  CI (99.9%): [716.946, 731.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 69.10% complete, ETA 00:08:59
# Fork: 1 of 1
# Warmup Iteration   1: 2716.951 ns/op
# Warmup Iteration   2: 1236.207 ns/op
# Warmup Iteration   3: 865.459 ns/op
Iteration   1: 868.461 ns/op
Iteration   2: 867.345 ns/op
Iteration   3: 863.938 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  866.581 ±(99.9%) 42.982 ns/op [Average]
  (min, avg, max) = (863.938, 866.581, 868.461), stdev = 2.356
  CI (99.9%): [823.600, 909.563] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 69.17% complete, ETA 00:08:58
# Fork: 1 of 1
# Warmup Iteration   1: 23.865 ns/op
# Warmup Iteration   2: 26.247 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.138 ns/op
Iteration   2: 19.142 ns/op
Iteration   3: 19.134 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.138 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (19.134, 19.138, 19.142), stdev = 0.004
  CI (99.9%): [19.062, 19.214] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 69.24% complete, ETA 00:08:57
# Fork: 1 of 1
# Warmup Iteration   1: 495.684 ns/op
# Warmup Iteration   2: 450.371 ns/op
# Warmup Iteration   3: 318.954 ns/op
Iteration   1: 317.159 ns/op
Iteration   2: 317.341 ns/op
Iteration   3: 317.369 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  317.290 ±(99.9%) 2.079 ns/op [Average]
  (min, avg, max) = (317.159, 317.290, 317.369), stdev = 0.114
  CI (99.9%): [315.211, 319.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 69.31% complete, ETA 00:08:56
# Fork: 1 of 1
# Warmup Iteration   1: 4405.415 ns/op
# Warmup Iteration   2: 558.362 ns/op
# Warmup Iteration   3: 399.134 ns/op
Iteration   1: 398.905 ns/op
Iteration   2: 398.921 ns/op
Iteration   3: 398.892 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  398.906 ±(99.9%) 0.267 ns/op [Average]
  (min, avg, max) = (398.892, 398.906, 398.921), stdev = 0.015
  CI (99.9%): [398.639, 399.174] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 69.38% complete, ETA 00:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 2102.293 ns/op
# Warmup Iteration   2: 612.585 ns/op
# Warmup Iteration   3: 441.126 ns/op
Iteration   1: 440.906 ns/op
Iteration   2: 441.217 ns/op
Iteration   3: 441.027 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  441.050 ±(99.9%) 2.862 ns/op [Average]
  (min, avg, max) = (440.906, 441.050, 441.217), stdev = 0.157
  CI (99.9%): [438.188, 443.912] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 69.44% complete, ETA 00:08:53
# Fork: 1 of 1
# Warmup Iteration   1: 1423.098 ns/op
# Warmup Iteration   2: 1065.629 ns/op
# Warmup Iteration   3: 742.476 ns/op
Iteration   1: 742.014 ns/op
Iteration   2: 742.573 ns/op
Iteration   3: 742.498 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  742.362 ±(99.9%) 5.542 ns/op [Average]
  (min, avg, max) = (742.014, 742.362, 742.573), stdev = 0.304
  CI (99.9%): [736.820, 747.904] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 69.51% complete, ETA 00:08:52
# Fork: 1 of 1
# Warmup Iteration   1: 13536.644 ns/op
# Warmup Iteration   2: 4803.867 ns/op
# Warmup Iteration   3: 3755.767 ns/op
Iteration   1: 3461.643 ns/op
Iteration   2: 3453.908 ns/op
Iteration   3: 3458.764 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3458.105 ±(99.9%) 71.318 ns/op [Average]
  (min, avg, max) = (3453.908, 3458.105, 3461.643), stdev = 3.909
  CI (99.9%): [3386.787, 3529.422] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 69.58% complete, ETA 00:08:51
# Fork: 1 of 1
# Warmup Iteration   1: 24.681 ns/op
# Warmup Iteration   2: 27.939 ns/op
# Warmup Iteration   3: 19.137 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.136 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.051 ns/op [Average]
  (min, avg, max) = (19.132, 19.135, 19.137), stdev = 0.003
  CI (99.9%): [19.084, 19.186] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 69.65% complete, ETA 00:08:50
# Fork: 1 of 1
# Warmup Iteration   1: 895.604 ns/op
# Warmup Iteration   2: 574.193 ns/op
# Warmup Iteration   3: 430.549 ns/op
Iteration   1: 417.904 ns/op
Iteration   2: 424.515 ns/op
Iteration   3: 419.057 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  420.492 ±(99.9%) 64.427 ns/op [Average]
  (min, avg, max) = (417.904, 420.492, 424.515), stdev = 3.531
  CI (99.9%): [356.065, 484.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 69.72% complete, ETA 00:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 5206.066 ns/op
# Warmup Iteration   2: 675.352 ns/op
# Warmup Iteration   3: 507.583 ns/op
Iteration   1: 507.608 ns/op
Iteration   2: 508.769 ns/op
Iteration   3: 506.883 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  507.754 ±(99.9%) 17.360 ns/op [Average]
  (min, avg, max) = (506.883, 507.754, 508.769), stdev = 0.952
  CI (99.9%): [490.394, 525.113] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 69.79% complete, ETA 00:08:47
# Fork: 1 of 1
# Warmup Iteration   1: 2022.422 ns/op
# Warmup Iteration   2: 522.539 ns/op
# Warmup Iteration   3: 345.782 ns/op
Iteration   1: 339.145 ns/op
Iteration   2: 346.584 ns/op
Iteration   3: 338.291 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  341.340 ±(99.9%) 83.224 ns/op [Average]
  (min, avg, max) = (338.291, 341.340, 346.584), stdev = 4.562
  CI (99.9%): [258.116, 424.564] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 69.86% complete, ETA 00:08:46
# Fork: 1 of 1
# Warmup Iteration   1: 1675.347 ns/op
# Warmup Iteration   2: 1254.712 ns/op
# Warmup Iteration   3: 861.674 ns/op
Iteration   1: 862.134 ns/op
Iteration   2: 856.730 ns/op
Iteration   3: 865.694 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  861.519 ±(99.9%) 82.343 ns/op [Average]
  (min, avg, max) = (856.730, 861.519, 865.694), stdev = 4.513
  CI (99.9%): [779.177, 943.862] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 69.93% complete, ETA 00:08:45
# Fork: 1 of 1
# Warmup Iteration   1: 9261.469 ns/op
# Warmup Iteration   2: 4617.337 ns/op
# Warmup Iteration   3: 3550.578 ns/op
Iteration   1: 3554.489 ns/op
Iteration   2: 3553.147 ns/op
Iteration   3: 3553.681 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3553.772 ±(99.9%) 12.323 ns/op [Average]
  (min, avg, max) = (3553.147, 3553.772, 3554.489), stdev = 0.675
  CI (99.9%): [3541.449, 3566.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 70.00% complete, ETA 00:08:44
# Fork: 1 of 1
# Warmup Iteration   1: 24.013 ns/op
# Warmup Iteration   2: 26.147 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.137 ns/op
Iteration   3: 19.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.055 ns/op [Average]
  (min, avg, max) = (19.131, 19.133, 19.137), stdev = 0.003
  CI (99.9%): [19.079, 19.188] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 70.07% complete, ETA 00:08:42
# Fork: 1 of 1
# Warmup Iteration   1: 115.072 ns/op
# Warmup Iteration   2: 133.954 ns/op
# Warmup Iteration   3: 81.396 ns/op
Iteration   1: 81.417 ns/op
Iteration   2: 81.400 ns/op
Iteration   3: 81.389 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  81.402 ±(99.9%) 0.263 ns/op [Average]
  (min, avg, max) = (81.389, 81.402, 81.417), stdev = 0.014
  CI (99.9%): [81.139, 81.665] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 70.14% complete, ETA 00:08:41
# Fork: 1 of 1
# Warmup Iteration   1: 3121.535 ns/op
# Warmup Iteration   2: 165.063 ns/op
# Warmup Iteration   3: 115.331 ns/op
Iteration   1: 115.295 ns/op
Iteration   2: 115.337 ns/op
Iteration   3: 115.302 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.311 ±(99.9%) 0.410 ns/op [Average]
  (min, avg, max) = (115.295, 115.311, 115.337), stdev = 0.022
  CI (99.9%): [114.901, 115.722] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 70.21% complete, ETA 00:08:40
# Fork: 1 of 1
# Warmup Iteration   1: 513.887 ns/op
# Warmup Iteration   2: 163.992 ns/op
# Warmup Iteration   3: 112.859 ns/op
Iteration   1: 113.037 ns/op
Iteration   2: 112.897 ns/op
Iteration   3: 112.802 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.912 ±(99.9%) 2.157 ns/op [Average]
  (min, avg, max) = (112.802, 112.912, 113.037), stdev = 0.118
  CI (99.9%): [110.755, 115.069] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 70.28% complete, ETA 00:08:39
# Fork: 1 of 1
# Warmup Iteration   1: 107.946 ns/op
# Warmup Iteration   2: 115.755 ns/op
# Warmup Iteration   3: 74.232 ns/op
Iteration   1: 74.157 ns/op
Iteration   2: 74.175 ns/op
Iteration   3: 74.183 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.172 ±(99.9%) 0.236 ns/op [Average]
  (min, avg, max) = (74.157, 74.172, 74.183), stdev = 0.013
  CI (99.9%): [73.935, 74.408] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 70.35% complete, ETA 00:08:38
# Fork: 1 of 1
# Warmup Iteration   1: 216.702 ns/op
# Warmup Iteration   2: 212.626 ns/op
# Warmup Iteration   3: 156.020 ns/op
Iteration   1: 156.195 ns/op
Iteration   2: 156.548 ns/op
Iteration   3: 156.179 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.307 ±(99.9%) 3.805 ns/op [Average]
  (min, avg, max) = (156.179, 156.307, 156.548), stdev = 0.209
  CI (99.9%): [152.502, 160.112] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 70.42% complete, ETA 00:08:36
# Fork: 1 of 1
# Warmup Iteration   1: 24.046 ns/op
# Warmup Iteration   2: 26.254 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.131 ns/op
Iteration   2: 19.133 ns/op
Iteration   3: 19.142 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (19.131, 19.135, 19.142), stdev = 0.006
  CI (99.9%): [19.027, 19.244] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 70.49% complete, ETA 00:08:35
# Fork: 1 of 1
# Warmup Iteration   1: 7586.545 ns/op
# Warmup Iteration   2: 1055.245 ns/op
# Warmup Iteration   3: 764.949 ns/op
Iteration   1: 765.126 ns/op
Iteration   2: 768.655 ns/op
Iteration   3: 771.238 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  768.340 ±(99.9%) 55.978 ns/op [Average]
  (min, avg, max) = (765.126, 768.340, 771.238), stdev = 3.068
  CI (99.9%): [712.361, 824.318] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 70.56% complete, ETA 00:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 30348.669 ns/op
# Warmup Iteration   2: 1248.653 ns/op
# Warmup Iteration   3: 959.176 ns/op
Iteration   1: 874.660 ns/op
Iteration   2: 874.068 ns/op
Iteration   3: 875.196 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  874.641 ±(99.9%) 10.301 ns/op [Average]
  (min, avg, max) = (874.068, 874.641, 875.196), stdev = 0.565
  CI (99.9%): [864.340, 884.943] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 70.63% complete, ETA 00:08:33
# Fork: 1 of 1
# Warmup Iteration   1: 11013.386 ns/op
# Warmup Iteration   2: 1286.726 ns/op
# Warmup Iteration   3: 1410.717 ns/op
Iteration   1: 1527.063 ns/op
Iteration   2: 887.212 ns/op
Iteration   3: 1023.193 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1145.823 ±(99.9%) 6149.807 ns/op [Average]
  (min, avg, max) = (887.212, 1145.823, 1527.063), stdev = 337.092
  CI (99.9%): [≈ 0, 7295.629] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 70.69% complete, ETA 00:08:31
# Fork: 1 of 1
# Warmup Iteration   1: 1344.159 ns/op
# Warmup Iteration   2: 1070.271 ns/op
# Warmup Iteration   3: 727.281 ns/op
Iteration   1: 728.999 ns/op
Iteration   2: 728.934 ns/op
Iteration   3: 739.076 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  732.336 ±(99.9%) 106.486 ns/op [Average]
  (min, avg, max) = (728.934, 732.336, 739.076), stdev = 5.837
  CI (99.9%): [625.850, 838.822] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 70.76% complete, ETA 00:08:30
# Fork: 1 of 1
# Warmup Iteration   1: 11260.396 ns/op
# Warmup Iteration   2: 6229.760 ns/op
# Warmup Iteration   3: 4232.747 ns/op
Iteration   1: 4231.579 ns/op
Iteration   2: 4246.222 ns/op
Iteration   3: 4235.755 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4237.852 ±(99.9%) 137.620 ns/op [Average]
  (min, avg, max) = (4231.579, 4237.852, 4246.222), stdev = 7.543
  CI (99.9%): [4100.232, 4375.472] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 70.83% complete, ETA 00:08:29
# Fork: 1 of 1
# Warmup Iteration   1: 23.552 ns/op
# Warmup Iteration   2: 119.044 ns/op
# Warmup Iteration   3: 19.295 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.142 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.097 ns/op [Average]
  (min, avg, max) = (19.132, 19.137, 19.142), stdev = 0.005
  CI (99.9%): [19.041, 19.234] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 70.90% complete, ETA 00:08:28
# Fork: 1 of 1
# Warmup Iteration   1: 269.773 ns/op
# Warmup Iteration   2: 444.810 ns/op
# Warmup Iteration   3: 142.804 ns/op
Iteration   1: 142.530 ns/op
Iteration   2: 142.674 ns/op
Iteration   3: 142.398 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  142.534 ±(99.9%) 2.514 ns/op [Average]
  (min, avg, max) = (142.398, 142.534, 142.674), stdev = 0.138
  CI (99.9%): [140.020, 145.048] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 70.97% complete, ETA 00:08:27
# Fork: 1 of 1
# Warmup Iteration   1: 422.772 ns/op
# Warmup Iteration   2: 490.529 ns/op
# Warmup Iteration   3: 168.205 ns/op
Iteration   1: 167.978 ns/op
Iteration   2: 168.045 ns/op
Iteration   3: 168.321 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  168.115 ±(99.9%) 3.314 ns/op [Average]
  (min, avg, max) = (167.978, 168.115, 168.321), stdev = 0.182
  CI (99.9%): [164.801, 171.429] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 71.04% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 571.145 ns/op
# Warmup Iteration   2: 602.608 ns/op
# Warmup Iteration   3: 221.503 ns/op
Iteration   1: 222.019 ns/op
Iteration   2: 222.037 ns/op
Iteration   3: 222.232 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  222.096 ±(99.9%) 2.158 ns/op [Average]
  (min, avg, max) = (222.019, 222.096, 222.232), stdev = 0.118
  CI (99.9%): [219.938, 224.254] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 71.11% complete, ETA 00:08:24
# Fork: 1 of 1
# Warmup Iteration   1: 106.167 ns/op
# Warmup Iteration   2: 264.089 ns/op
# Warmup Iteration   3: 74.730 ns/op
Iteration   1: 74.742 ns/op
Iteration   2: 74.699 ns/op
Iteration   3: 74.753 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.732 ±(99.9%) 0.518 ns/op [Average]
  (min, avg, max) = (74.699, 74.732, 74.753), stdev = 0.028
  CI (99.9%): [74.213, 75.250] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 71.18% complete, ETA 00:08:23
# Fork: 1 of 1
# Warmup Iteration   1: 249.669 ns/op
# Warmup Iteration   2: 499.778 ns/op
# Warmup Iteration   3: 139.666 ns/op
Iteration   1: 139.616 ns/op
Iteration   2: 139.513 ns/op
Iteration   3: 139.615 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.581 ±(99.9%) 1.081 ns/op [Average]
  (min, avg, max) = (139.513, 139.581, 139.616), stdev = 0.059
  CI (99.9%): [138.500, 140.663] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 71.25% complete, ETA 00:08:22
# Fork: 1 of 1
# Warmup Iteration   1: 24.462 ns/op
# Warmup Iteration   2: 29.499 ns/op
# Warmup Iteration   3: 19.296 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.150 ns/op
Iteration   3: 19.145 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.142 ±(99.9%) 0.166 ns/op [Average]
  (min, avg, max) = (19.132, 19.142, 19.150), stdev = 0.009
  CI (99.9%): [18.976, 19.309] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 71.32% complete, ETA 00:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 372.131 ns/op
# Warmup Iteration   2: 347.501 ns/op
# Warmup Iteration   3: 234.930 ns/op
Iteration   1: 235.021 ns/op
Iteration   2: 235.177 ns/op
Iteration   3: 235.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  235.109 ±(99.9%) 1.455 ns/op [Average]
  (min, avg, max) = (235.021, 235.109, 235.177), stdev = 0.080
  CI (99.9%): [233.653, 236.564] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 71.39% complete, ETA 00:08:19
# Fork: 1 of 1
# Warmup Iteration   1: 360.411 ns/op
# Warmup Iteration   2: 262.430 ns/op
# Warmup Iteration   3: 183.370 ns/op
Iteration   1: 183.888 ns/op
Iteration   2: 183.018 ns/op
Iteration   3: 182.837 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  183.248 ±(99.9%) 10.254 ns/op [Average]
  (min, avg, max) = (182.837, 183.248, 183.888), stdev = 0.562
  CI (99.9%): [172.994, 193.502] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 71.46% complete, ETA 00:08:18
# Fork: 1 of 1
# Warmup Iteration   1: 387.505 ns/op
# Warmup Iteration   2: 282.886 ns/op
# Warmup Iteration   3: 189.994 ns/op
Iteration   1: 190.177 ns/op
Iteration   2: 190.352 ns/op
Iteration   3: 190.175 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  190.235 ±(99.9%) 1.858 ns/op [Average]
  (min, avg, max) = (190.175, 190.235, 190.352), stdev = 0.102
  CI (99.9%): [188.377, 192.093] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 71.53% complete, ETA 00:08:17
# Fork: 1 of 1
# Warmup Iteration   1: 106.113 ns/op
# Warmup Iteration   2: 116.262 ns/op
# Warmup Iteration   3: 74.366 ns/op
Iteration   1: 74.330 ns/op
Iteration   2: 74.300 ns/op
Iteration   3: 74.296 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.309 ±(99.9%) 0.335 ns/op [Average]
  (min, avg, max) = (74.296, 74.309, 74.330), stdev = 0.018
  CI (99.9%): [73.974, 74.644] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 71.60% complete, ETA 00:08:16
# Fork: 1 of 1
# Warmup Iteration   1: 273.424 ns/op
# Warmup Iteration   2: 248.028 ns/op
# Warmup Iteration   3: 137.656 ns/op
Iteration   1: 137.815 ns/op
Iteration   2: 137.836 ns/op
Iteration   3: 137.734 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.795 ±(99.9%) 0.980 ns/op [Average]
  (min, avg, max) = (137.734, 137.795, 137.836), stdev = 0.054
  CI (99.9%): [136.815, 138.775] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 71.67% complete, ETA 00:08:15
# Fork: 1 of 1
# Warmup Iteration   1: 23.008 ns/op
# Warmup Iteration   2: 29.945 ns/op
# Warmup Iteration   3: 19.734 ns/op
Iteration   1: 33.515 ns/op
Iteration   2: 19.518 ns/op
Iteration   3: 19.552 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  24.195 ±(99.9%) 147.252 ns/op [Average]
  (min, avg, max) = (19.518, 24.195, 33.515), stdev = 8.071
  CI (99.9%): [≈ 0, 171.448] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 71.74% complete, ETA 00:08:13
# Fork: 1 of 1
# Warmup Iteration   1: 421.800 ns/op
# Warmup Iteration   2: 340.374 ns/op
# Warmup Iteration   3: 231.748 ns/op
Iteration   1: 381.302 ns/op
Iteration   2: 232.083 ns/op
Iteration   3: 231.755 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  281.713 ±(99.9%) 1573.452 ns/op [Average]
  (min, avg, max) = (231.755, 281.713, 381.302), stdev = 86.246
  CI (99.9%): [≈ 0, 1855.165] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 71.81% complete, ETA 00:08:12
# Fork: 1 of 1
# Warmup Iteration   1: 312.683 ns/op
# Warmup Iteration   2: 243.297 ns/op
# Warmup Iteration   3: 164.940 ns/op
Iteration   1: 270.077 ns/op
Iteration   2: 164.729 ns/op
Iteration   3: 164.813 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  199.873 ±(99.9%) 1109.194 ns/op [Average]
  (min, avg, max) = (164.729, 199.873, 270.077), stdev = 60.799
  CI (99.9%): [≈ 0, 1309.067] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 71.88% complete, ETA 00:08:11
# Fork: 1 of 1
# Warmup Iteration   1: 376.390 ns/op
# Warmup Iteration   2: 284.822 ns/op
# Warmup Iteration   3: 211.337 ns/op
Iteration   1: 346.754 ns/op
Iteration   2: 211.211 ns/op
Iteration   3: 211.191 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  256.385 ±(99.9%) 1427.783 ns/op [Average]
  (min, avg, max) = (211.191, 256.385, 346.754), stdev = 78.262
  CI (99.9%): [≈ 0, 1684.169] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 71.94% complete, ETA 00:08:10
# Fork: 1 of 1
# Warmup Iteration   1: 106.219 ns/op
# Warmup Iteration   2: 108.825 ns/op
# Warmup Iteration   3: 74.644 ns/op
Iteration   1: 120.379 ns/op
Iteration   2: 74.592 ns/op
Iteration   3: 74.637 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  89.869 ±(99.9%) 482.041 ns/op [Average]
  (min, avg, max) = (74.592, 89.869, 120.379), stdev = 26.422
  CI (99.9%): [≈ 0, 571.910] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 72.01% complete, ETA 00:08:09
# Fork: 1 of 1
# Warmup Iteration   1: 280.484 ns/op
# Warmup Iteration   2: 268.934 ns/op
# Warmup Iteration   3: 144.766 ns/op
Iteration   1: 234.128 ns/op
Iteration   2: 144.808 ns/op
Iteration   3: 144.812 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  174.583 ±(99.9%) 940.786 ns/op [Average]
  (min, avg, max) = (144.808, 174.583, 234.128), stdev = 51.568
  CI (99.9%): [≈ 0, 1115.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 72.08% complete, ETA 00:08:07
# Fork: 1 of 1
# Warmup Iteration   1: 22.974 ns/op
# Warmup Iteration   2: 28.141 ns/op
# Warmup Iteration   3: 19.295 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.131 ns/op
Iteration   3: 19.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (19.131, 19.134, 19.137), stdev = 0.003
  CI (99.9%): [19.081, 19.188] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 72.15% complete, ETA 00:08:06
# Fork: 1 of 1
# Warmup Iteration   1: 114.333 ns/op
# Warmup Iteration   2: 115.454 ns/op
# Warmup Iteration   3: 81.438 ns/op
Iteration   1: 81.387 ns/op
Iteration   2: 81.389 ns/op
Iteration   3: 81.406 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  81.394 ±(99.9%) 0.184 ns/op [Average]
  (min, avg, max) = (81.387, 81.394, 81.406), stdev = 0.010
  CI (99.9%): [81.210, 81.578] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 72.22% complete, ETA 00:08:05
# Fork: 1 of 1
# Warmup Iteration   1: 468.980 ns/op
# Warmup Iteration   2: 162.783 ns/op
# Warmup Iteration   3: 112.502 ns/op
Iteration   1: 112.612 ns/op
Iteration   2: 112.589 ns/op
Iteration   3: 112.603 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  112.601 ±(99.9%) 0.209 ns/op [Average]
  (min, avg, max) = (112.589, 112.601, 112.612), stdev = 0.011
  CI (99.9%): [112.392, 112.811] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 72.29% complete, ETA 00:08:04
# Fork: 1 of 1
# Warmup Iteration   1: 573.714 ns/op
# Warmup Iteration   2: 164.448 ns/op
# Warmup Iteration   3: 121.476 ns/op
Iteration   1: 121.384 ns/op
Iteration   2: 121.385 ns/op
Iteration   3: 121.381 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  121.383 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (121.381, 121.383, 121.385), stdev = 0.002
  CI (99.9%): [121.351, 121.416] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 72.36% complete, ETA 00:08:02
# Fork: 1 of 1
# Warmup Iteration   1: 104.790 ns/op
# Warmup Iteration   2: 114.993 ns/op
# Warmup Iteration   3: 74.326 ns/op
Iteration   1: 74.392 ns/op
Iteration   2: 74.326 ns/op
Iteration   3: 74.287 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.335 ±(99.9%) 0.968 ns/op [Average]
  (min, avg, max) = (74.287, 74.335, 74.392), stdev = 0.053
  CI (99.9%): [73.367, 75.303] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 72.43% complete, ETA 00:08:01
# Fork: 1 of 1
# Warmup Iteration   1: 221.184 ns/op
# Warmup Iteration   2: 234.253 ns/op
# Warmup Iteration   3: 131.865 ns/op
Iteration   1: 131.585 ns/op
Iteration   2: 131.603 ns/op
Iteration   3: 131.839 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.676 ±(99.9%) 2.584 ns/op [Average]
  (min, avg, max) = (131.585, 131.676, 131.839), stdev = 0.142
  CI (99.9%): [129.091, 134.260] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 72.50% complete, ETA 00:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 24.894 ns/op
# Warmup Iteration   2: 128.411 ns/op
# Warmup Iteration   3: 19.298 ns/op
Iteration   1: 19.143 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (19.132, 19.137, 19.143), stdev = 0.005
  CI (99.9%): [19.037, 19.237] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 72.57% complete, ETA 00:07:59
# Fork: 1 of 1
# Warmup Iteration   1: 216.784 ns/op
# Warmup Iteration   2: 417.144 ns/op
# Warmup Iteration   3: 138.022 ns/op
Iteration   1: 137.956 ns/op
Iteration   2: 137.927 ns/op
Iteration   3: 137.928 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.937 ±(99.9%) 0.295 ns/op [Average]
  (min, avg, max) = (137.927, 137.937, 137.956), stdev = 0.016
  CI (99.9%): [137.642, 138.232] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 72.64% complete, ETA 00:07:58
# Fork: 1 of 1
# Warmup Iteration   1: 371.042 ns/op
# Warmup Iteration   2: 479.748 ns/op
# Warmup Iteration   3: 161.442 ns/op
Iteration   1: 161.267 ns/op
Iteration   2: 161.752 ns/op
Iteration   3: 161.557 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  161.526 ±(99.9%) 4.453 ns/op [Average]
  (min, avg, max) = (161.267, 161.526, 161.752), stdev = 0.244
  CI (99.9%): [157.073, 165.978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 72.71% complete, ETA 00:07:56
# Fork: 1 of 1
# Warmup Iteration   1: 400.629 ns/op
# Warmup Iteration   2: 558.216 ns/op
# Warmup Iteration   3: 210.072 ns/op
Iteration   1: 210.016 ns/op
Iteration   2: 210.034 ns/op
Iteration   3: 209.868 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  209.973 ±(99.9%) 1.661 ns/op [Average]
  (min, avg, max) = (209.868, 209.973, 210.034), stdev = 0.091
  CI (99.9%): [208.311, 211.634] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 72.78% complete, ETA 00:07:55
# Fork: 1 of 1
# Warmup Iteration   1: 106.309 ns/op
# Warmup Iteration   2: 261.857 ns/op
# Warmup Iteration   3: 74.306 ns/op
Iteration   1: 74.270 ns/op
Iteration   2: 74.282 ns/op
Iteration   3: 74.253 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.269 ±(99.9%) 0.274 ns/op [Average]
  (min, avg, max) = (74.253, 74.269, 74.282), stdev = 0.015
  CI (99.9%): [73.995, 74.542] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 72.85% complete, ETA 00:07:54
# Fork: 1 of 1
# Warmup Iteration   1: 221.060 ns/op
# Warmup Iteration   2: 465.438 ns/op
# Warmup Iteration   3: 131.703 ns/op
Iteration   1: 131.723 ns/op
Iteration   2: 131.984 ns/op
Iteration   3: 131.773 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.827 ±(99.9%) 2.533 ns/op [Average]
  (min, avg, max) = (131.723, 131.827, 131.984), stdev = 0.139
  CI (99.9%): [129.294, 134.359] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 72.92% complete, ETA 00:07:53
# Fork: 1 of 1
# Warmup Iteration   1: 22.754 ns/op
# Warmup Iteration   2: 26.220 ns/op
# Warmup Iteration   3: 19.148 ns/op
Iteration   1: 19.142 ns/op
Iteration   2: 19.133 ns/op
Iteration   3: 19.142 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.139 ±(99.9%) 0.097 ns/op [Average]
  (min, avg, max) = (19.133, 19.139, 19.142), stdev = 0.005
  CI (99.9%): [19.042, 19.236] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 72.99% complete, ETA 00:07:52
# Fork: 1 of 1
# Warmup Iteration   1: 9574.434 ns/op
# Warmup Iteration   2: 961.337 ns/op
# Warmup Iteration   3: 724.083 ns/op
Iteration   1: 724.196 ns/op
Iteration   2: 724.116 ns/op
Iteration   3: 724.068 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  724.127 ±(99.9%) 1.178 ns/op [Average]
  (min, avg, max) = (724.068, 724.127, 724.196), stdev = 0.065
  CI (99.9%): [722.949, 725.305] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 73.06% complete, ETA 00:07:50
# Fork: 1 of 1
# Warmup Iteration   1: 3702.618 ns/op
# Warmup Iteration   2: 1258.203 ns/op
# Warmup Iteration   3: 858.264 ns/op
Iteration   1: 858.252 ns/op
Iteration   2: 858.034 ns/op
Iteration   3: 858.246 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  858.178 ±(99.9%) 2.263 ns/op [Average]
  (min, avg, max) = (858.034, 858.178, 858.252), stdev = 0.124
  CI (99.9%): [855.915, 860.440] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 73.13% complete, ETA 00:07:49
# Fork: 1 of 1
# Warmup Iteration   1: 7604.988 ns/op
# Warmup Iteration   2: 1117.939 ns/op
# Warmup Iteration   3: 858.269 ns/op
Iteration   1: 858.306 ns/op
Iteration   2: 858.298 ns/op
Iteration   3: 858.469 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  858.358 ±(99.9%) 1.757 ns/op [Average]
  (min, avg, max) = (858.298, 858.358, 858.469), stdev = 0.096
  CI (99.9%): [856.601, 860.114] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 73.19% complete, ETA 00:07:48
# Fork: 1 of 1
# Warmup Iteration   1: 1260.734 ns/op
# Warmup Iteration   2: 1104.982 ns/op
# Warmup Iteration   3: 770.290 ns/op
Iteration   1: 770.410 ns/op
Iteration   2: 770.110 ns/op
Iteration   3: 770.402 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  770.307 ±(99.9%) 3.113 ns/op [Average]
  (min, avg, max) = (770.110, 770.307, 770.410), stdev = 0.171
  CI (99.9%): [767.194, 773.420] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 73.26% complete, ETA 00:07:47
# Fork: 1 of 1
# Warmup Iteration   1: 1977.643 ns/op
# Warmup Iteration   2: 1150.882 ns/op
# Warmup Iteration   3: 766.813 ns/op
Iteration   1: 766.670 ns/op
Iteration   2: 767.139 ns/op
Iteration   3: 766.719 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  766.843 ±(99.9%) 4.699 ns/op [Average]
  (min, avg, max) = (766.670, 766.843, 767.139), stdev = 0.258
  CI (99.9%): [762.144, 771.542] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 73.33% complete, ETA 00:07:46
# Fork: 1 of 1
# Warmup Iteration   1: 24.729 ns/op
# Warmup Iteration   2: 28.679 ns/op
# Warmup Iteration   3: 19.150 ns/op
Iteration   1: 19.145 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.141 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.141 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (19.136, 19.141, 19.145), stdev = 0.004
  CI (99.9%): [19.061, 19.220] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 73.40% complete, ETA 00:07:44
# Fork: 1 of 1
# Warmup Iteration   1: 1053.971 ns/op
# Warmup Iteration   2: 746.010 ns/op
# Warmup Iteration   3: 497.390 ns/op
Iteration   1: 498.053 ns/op
Iteration   2: 498.750 ns/op
Iteration   3: 498.013 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  498.272 ±(99.9%) 7.563 ns/op [Average]
  (min, avg, max) = (498.013, 498.272, 498.750), stdev = 0.415
  CI (99.9%): [490.709, 505.835] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 73.47% complete, ETA 00:07:43
# Fork: 1 of 1
# Warmup Iteration   1: 7742.385 ns/op
# Warmup Iteration   2: 1472.630 ns/op
# Warmup Iteration   3: 1125.706 ns/op
Iteration   1: 1125.356 ns/op
Iteration   2: 1125.389 ns/op
Iteration   3: 1125.611 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1125.452 ±(99.9%) 2.530 ns/op [Average]
  (min, avg, max) = (1125.356, 1125.452, 1125.611), stdev = 0.139
  CI (99.9%): [1122.922, 1127.982] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 73.54% complete, ETA 00:07:42
# Fork: 1 of 1
# Warmup Iteration   1: 12135.379 ns/op
# Warmup Iteration   2: 1646.637 ns/op
# Warmup Iteration   3: 1228.479 ns/op
Iteration   1: 1112.400 ns/op
Iteration   2: 1111.697 ns/op
Iteration   3: 1112.014 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1112.037 ±(99.9%) 6.427 ns/op [Average]
  (min, avg, max) = (1111.697, 1112.037, 1112.400), stdev = 0.352
  CI (99.9%): [1105.610, 1118.464] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 73.61% complete, ETA 00:07:41
# Fork: 1 of 1
# Warmup Iteration   1: 1545.903 ns/op
# Warmup Iteration   2: 1371.582 ns/op
# Warmup Iteration   3: 952.083 ns/op
Iteration   1: 951.686 ns/op
Iteration   2: 961.829 ns/op
Iteration   3: 952.347 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  955.287 ±(99.9%) 103.529 ns/op [Average]
  (min, avg, max) = (951.686, 955.287, 961.829), stdev = 5.675
  CI (99.9%): [851.758, 1058.816] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 73.68% complete, ETA 00:07:39
# Fork: 1 of 1
# Warmup Iteration   1: 14027.367 ns/op
# Warmup Iteration   2: 5199.917 ns/op
# Warmup Iteration   3: 4080.713 ns/op
Iteration   1: 3749.990 ns/op
Iteration   2: 3747.149 ns/op
Iteration   3: 3747.179 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3748.106 ±(99.9%) 29.761 ns/op [Average]
  (min, avg, max) = (3747.149, 3748.106, 3749.990), stdev = 1.631
  CI (99.9%): [3718.345, 3777.867] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 73.75% complete, ETA 00:07:38
# Fork: 1 of 1
# Warmup Iteration   1: 23.046 ns/op
# Warmup Iteration   2: 30.465 ns/op
# Warmup Iteration   3: 19.142 ns/op
Iteration   1: 19.127 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.132 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (19.127, 19.132, 19.138), stdev = 0.006
  CI (99.9%): [19.020, 19.243] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 73.82% complete, ETA 00:07:37
# Fork: 1 of 1
# Warmup Iteration   1: 32049.913 ns/op
# Warmup Iteration   2: 907.347 ns/op
# Warmup Iteration   3: 593.638 ns/op
Iteration   1: 546.141 ns/op
Iteration   2: 546.884 ns/op
Iteration   3: 551.027 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  548.018 ±(99.9%) 48.035 ns/op [Average]
  (min, avg, max) = (546.141, 548.018, 551.027), stdev = 2.633
  CI (99.9%): [499.983, 596.052] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 73.89% complete, ETA 00:07:36
# Fork: 1 of 1
# Warmup Iteration   1: 15150.477 ns/op
# Warmup Iteration   2: 995.402 ns/op
# Warmup Iteration   3: 732.307 ns/op
Iteration   1: 674.294 ns/op
Iteration   2: 671.628 ns/op
Iteration   3: 677.199 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  674.374 ±(99.9%) 50.829 ns/op [Average]
  (min, avg, max) = (671.628, 674.374, 677.199), stdev = 2.786
  CI (99.9%): [623.545, 725.202] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 73.96% complete, ETA 00:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 10727.867 ns/op
# Warmup Iteration   2: 806.565 ns/op
# Warmup Iteration   3: 578.057 ns/op
Iteration   1: 579.003 ns/op
Iteration   2: 577.821 ns/op
Iteration   3: 579.288 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  578.704 ±(99.9%) 14.193 ns/op [Average]
  (min, avg, max) = (577.821, 578.704, 579.288), stdev = 0.778
  CI (99.9%): [564.511, 592.897] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 74.03% complete, ETA 00:07:33
# Fork: 1 of 1
# Warmup Iteration   1: 1866.516 ns/op
# Warmup Iteration   2: 1370.040 ns/op
# Warmup Iteration   3: 970.199 ns/op
Iteration   1: 974.255 ns/op
Iteration   2: 970.458 ns/op
Iteration   3: 970.596 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  971.769 ±(99.9%) 39.288 ns/op [Average]
  (min, avg, max) = (970.458, 971.769, 974.255), stdev = 2.154
  CI (99.9%): [932.482, 1011.057] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 74.10% complete, ETA 00:07:32
# Fork: 1 of 1
# Warmup Iteration   1: 11459.043 ns/op
# Warmup Iteration   2: 4998.527 ns/op
# Warmup Iteration   3: 4107.344 ns/op
Iteration   1: 3793.260 ns/op
Iteration   2: 3794.609 ns/op
Iteration   3: 3794.605 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3794.158 ±(99.9%) 14.187 ns/op [Average]
  (min, avg, max) = (3793.260, 3794.158, 3794.609), stdev = 0.778
  CI (99.9%): [3779.971, 3808.345] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 74.17% complete, ETA 00:07:31
# Fork: 1 of 1
# Warmup Iteration   1: 24.147 ns/op
# Warmup Iteration   2: 27.196 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.148 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.118 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.266 ns/op [Average]
  (min, avg, max) = (19.118, 19.133, 19.148), stdev = 0.015
  CI (99.9%): [18.867, 19.399] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 74.24% complete, ETA 00:07:30
# Fork: 1 of 1
# Warmup Iteration   1: 647.640 ns/op
# Warmup Iteration   2: 456.995 ns/op
# Warmup Iteration   3: 308.932 ns/op
Iteration   1: 308.853 ns/op
Iteration   2: 308.874 ns/op
Iteration   3: 308.473 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  308.733 ±(99.9%) 4.117 ns/op [Average]
  (min, avg, max) = (308.473, 308.733, 308.874), stdev = 0.226
  CI (99.9%): [304.617, 312.850] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 74.31% complete, ETA 00:07:29
# Fork: 1 of 1
# Warmup Iteration   1: 4737.818 ns/op
# Warmup Iteration   2: 675.256 ns/op
# Warmup Iteration   3: 478.429 ns/op
Iteration   1: 478.537 ns/op
Iteration   2: 478.388 ns/op
Iteration   3: 478.477 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  478.467 ±(99.9%) 1.375 ns/op [Average]
  (min, avg, max) = (478.388, 478.467, 478.537), stdev = 0.075
  CI (99.9%): [477.092, 479.843] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 74.38% complete, ETA 00:07:27
# Fork: 1 of 1
# Warmup Iteration   1: 2847.516 ns/op
# Warmup Iteration   2: 664.199 ns/op
# Warmup Iteration   3: 471.279 ns/op
Iteration   1: 470.716 ns/op
Iteration   2: 470.737 ns/op
Iteration   3: 470.744 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  470.732 ±(99.9%) 0.264 ns/op [Average]
  (min, avg, max) = (470.716, 470.732, 470.744), stdev = 0.014
  CI (99.9%): [470.469, 470.996] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 74.44% complete, ETA 00:07:26
# Fork: 1 of 1
# Warmup Iteration   1: 1352.594 ns/op
# Warmup Iteration   2: 1231.860 ns/op
# Warmup Iteration   3: 849.341 ns/op
Iteration   1: 849.653 ns/op
Iteration   2: 849.130 ns/op
Iteration   3: 849.237 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  849.340 ±(99.9%) 5.038 ns/op [Average]
  (min, avg, max) = (849.130, 849.340, 849.653), stdev = 0.276
  CI (99.9%): [844.302, 854.378] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 74.51% complete, ETA 00:07:25
# Fork: 1 of 1
# Warmup Iteration   1: 11412.547 ns/op
# Warmup Iteration   2: 4725.618 ns/op
# Warmup Iteration   3: 3754.376 ns/op
Iteration   1: 3422.022 ns/op
Iteration   2: 3421.223 ns/op
Iteration   3: 3421.293 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3421.513 ±(99.9%) 8.073 ns/op [Average]
  (min, avg, max) = (3421.223, 3421.513, 3422.022), stdev = 0.442
  CI (99.9%): [3413.440, 3429.585] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 74.58% complete, ETA 00:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 24.580 ns/op
# Warmup Iteration   2: 26.476 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.133 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.144 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (19.133, 19.137, 19.144), stdev = 0.006
  CI (99.9%): [19.025, 19.248] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 74.65% complete, ETA 00:07:22
# Fork: 1 of 1
# Warmup Iteration   1: 12815.098 ns/op
# Warmup Iteration   2: 1130.219 ns/op
# Warmup Iteration   3: 888.802 ns/op
Iteration   1: 818.725 ns/op
Iteration   2: 813.088 ns/op
Iteration   3: 813.447 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  815.087 ±(99.9%) 57.579 ns/op [Average]
  (min, avg, max) = (813.088, 815.087, 818.725), stdev = 3.156
  CI (99.9%): [757.507, 872.666] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 74.72% complete, ETA 00:07:21
# Fork: 1 of 1
# Warmup Iteration   1: 25818.537 ns/op
# Warmup Iteration   2: 1113.685 ns/op
# Warmup Iteration   3: 820.200 ns/op
Iteration   1: 748.875 ns/op
Iteration   2: 747.346 ns/op
Iteration   3: 751.664 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  749.295 ±(99.9%) 39.950 ns/op [Average]
  (min, avg, max) = (747.346, 749.295, 751.664), stdev = 2.190
  CI (99.9%): [709.345, 789.245] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 74.79% complete, ETA 00:07:20
# Fork: 1 of 1
# Warmup Iteration   1: 29415.811 ns/op
# Warmup Iteration   2: 1075.953 ns/op
# Warmup Iteration   3: 788.257 ns/op
Iteration   1: 716.189 ns/op
Iteration   2: 718.159 ns/op
Iteration   3: 714.205 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  716.185 ±(99.9%) 36.065 ns/op [Average]
  (min, avg, max) = (714.205, 716.185, 718.159), stdev = 1.977
  CI (99.9%): [680.120, 752.249] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 74.86% complete, ETA 00:07:19
# Fork: 1 of 1
# Warmup Iteration   1: 1128.185 ns/op
# Warmup Iteration   2: 869.358 ns/op
# Warmup Iteration   3: 594.990 ns/op
Iteration   1: 594.872 ns/op
Iteration   2: 592.487 ns/op
Iteration   3: 595.579 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  594.313 ±(99.9%) 29.552 ns/op [Average]
  (min, avg, max) = (592.487, 594.313, 595.579), stdev = 1.620
  CI (99.9%): [564.761, 623.864] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 4, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 74.93% complete, ETA 00:07:18
# Fork: 1 of 1
# Warmup Iteration   1: 19416.171 ns/op
# Warmup Iteration   2: 5881.521 ns/op
# Warmup Iteration   3: 4905.093 ns/op
Iteration   1: 4530.454 ns/op
Iteration   2: 4530.542 ns/op
Iteration   3: 4535.305 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4532.100 ±(99.9%) 50.632 ns/op [Average]
  (min, avg, max) = (4530.454, 4532.100, 4535.305), stdev = 2.775
  CI (99.9%): [4481.469, 4582.732] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 75.00% complete, ETA 00:07:16
# Fork: 1 of 1
# Warmup Iteration   1: 24.296 ns/op
# Warmup Iteration   2: 25.481 ns/op
# Warmup Iteration   3: 19.144 ns/op
Iteration   1: 19.145 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.144 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.141 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (19.134, 19.141, 19.145), stdev = 0.006
  CI (99.9%): [19.038, 19.243] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 75.07% complete, ETA 00:07:15
# Fork: 1 of 1
# Warmup Iteration   1: 2047.620 ns/op
# Warmup Iteration   2: 1253.498 ns/op
# Warmup Iteration   3: 846.147 ns/op
Iteration   1: 853.813 ns/op
Iteration   2: 855.276 ns/op
Iteration   3: 853.670 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  854.253 ±(99.9%) 16.217 ns/op [Average]
  (min, avg, max) = (853.670, 854.253, 855.276), stdev = 0.889
  CI (99.9%): [838.036, 870.470] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 75.14% complete, ETA 00:07:14
# Fork: 1 of 1
# Warmup Iteration   1: 39000.041 ns/op
# Warmup Iteration   2: 1260.451 ns/op
# Warmup Iteration   3: 991.637 ns/op
Iteration   1: 837.891 ns/op
Iteration   2: 837.569 ns/op
Iteration   3: 837.493 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  837.651 ±(99.9%) 3.847 ns/op [Average]
  (min, avg, max) = (837.493, 837.651, 837.891), stdev = 0.211
  CI (99.9%): [833.804, 841.498] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 75.21% complete, ETA 00:07:13
# Fork: 1 of 1
# Warmup Iteration   1: 12359.152 ns/op
# Warmup Iteration   2: 1185.109 ns/op
# Warmup Iteration   3: 968.439 ns/op
Iteration   1: 871.019 ns/op
Iteration   2: 870.949 ns/op
Iteration   3: 871.220 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  871.062 ±(99.9%) 2.572 ns/op [Average]
  (min, avg, max) = (870.949, 871.062, 871.220), stdev = 0.141
  CI (99.9%): [868.491, 873.634] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 75.28% complete, ETA 00:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 1963.489 ns/op
# Warmup Iteration   2: 1378.136 ns/op
# Warmup Iteration   3: 939.518 ns/op
Iteration   1: 939.438 ns/op
Iteration   2: 939.544 ns/op
Iteration   3: 938.792 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  939.258 ±(99.9%) 7.432 ns/op [Average]
  (min, avg, max) = (938.792, 939.258, 939.544), stdev = 0.407
  CI (99.9%): [931.826, 946.690] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 75.35% complete, ETA 00:07:10
# Fork: 1 of 1
# Warmup Iteration   1: 14469.943 ns/op
# Warmup Iteration   2: 5193.530 ns/op
# Warmup Iteration   3: 4186.327 ns/op
Iteration   1: 3813.345 ns/op
Iteration   2: 3813.451 ns/op
Iteration   3: 3813.212 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3813.336 ±(99.9%) 2.186 ns/op [Average]
  (min, avg, max) = (3813.212, 3813.336, 3813.451), stdev = 0.120
  CI (99.9%): [3811.150, 3815.522] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 75.42% complete, ETA 00:07:09
# Fork: 1 of 1
# Warmup Iteration   1: 23.058 ns/op
# Warmup Iteration   2: 29.840 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.130 ns/op
Iteration   2: 19.131 ns/op
Iteration   3: 19.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.131 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (19.130, 19.131, 19.132), stdev = 0.001
  CI (99.9%): [19.116, 19.147] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 75.49% complete, ETA 00:07:08
# Fork: 1 of 1
# Warmup Iteration   1: 7111.670 ns/op
# Warmup Iteration   2: 1077.922 ns/op
# Warmup Iteration   3: 756.298 ns/op
Iteration   1: 756.889 ns/op
Iteration   2: 756.548 ns/op
Iteration   3: 756.333 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  756.590 ±(99.9%) 5.113 ns/op [Average]
  (min, avg, max) = (756.333, 756.590, 756.889), stdev = 0.280
  CI (99.9%): [751.477, 761.703] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 75.56% complete, ETA 00:07:07
# Fork: 1 of 1
# Warmup Iteration   1: 11256.905 ns/op
# Warmup Iteration   2: 1288.483 ns/op
# Warmup Iteration   3: 900.581 ns/op
Iteration   1: 900.363 ns/op
Iteration   2: 900.273 ns/op
Iteration   3: 900.169 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  900.268 ±(99.9%) 1.771 ns/op [Average]
  (min, avg, max) = (900.169, 900.268, 900.363), stdev = 0.097
  CI (99.9%): [898.497, 902.039] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 75.63% complete, ETA 00:07:05
# Fork: 1 of 1
# Warmup Iteration   1: 7034.600 ns/op
# Warmup Iteration   2: 1277.461 ns/op
# Warmup Iteration   3: 868.457 ns/op
Iteration   1: 859.947 ns/op
Iteration   2: 860.716 ns/op
Iteration   3: 866.734 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  862.466 ±(99.9%) 67.805 ns/op [Average]
  (min, avg, max) = (859.947, 862.466, 866.734), stdev = 3.717
  CI (99.9%): [794.661, 930.270] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 75.69% complete, ETA 00:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 1370.798 ns/op
# Warmup Iteration   2: 1157.017 ns/op
# Warmup Iteration   3: 852.640 ns/op
Iteration   1: 851.729 ns/op
Iteration   2: 842.847 ns/op
Iteration   3: 851.525 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  848.700 ±(99.9%) 92.506 ns/op [Average]
  (min, avg, max) = (842.847, 848.700, 851.729), stdev = 5.071
  CI (99.9%): [756.194, 941.207] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 75.76% complete, ETA 00:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 1890.761 ns/op
# Warmup Iteration   2: 1257.411 ns/op
# Warmup Iteration   3: 824.157 ns/op
Iteration   1: 823.035 ns/op
Iteration   2: 823.090 ns/op
Iteration   3: 822.722 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  822.949 ±(99.9%) 3.613 ns/op [Average]
  (min, avg, max) = (822.722, 822.949, 823.090), stdev = 0.198
  CI (99.9%): [819.336, 826.562] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 75.83% complete, ETA 00:07:02
# Fork: 1 of 1
# Warmup Iteration   1: 24.665 ns/op
# Warmup Iteration   2: 29.147 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.142 ns/op
Iteration   2: 19.137 ns/op
Iteration   3: 19.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.098 ns/op [Average]
  (min, avg, max) = (19.131, 19.137, 19.142), stdev = 0.005
  CI (99.9%): [19.039, 19.235] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 75.90% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 16960.554 ns/op
# Warmup Iteration   2: 1348.485 ns/op
# Warmup Iteration   3: 914.514 ns/op
Iteration   1: 833.800 ns/op
Iteration   2: 838.905 ns/op
Iteration   3: 841.144 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  837.950 ±(99.9%) 68.670 ns/op [Average]
  (min, avg, max) = (833.800, 837.950, 841.144), stdev = 3.764
  CI (99.9%): [769.280, 906.619] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 75.97% complete, ETA 00:06:59
# Fork: 1 of 1
# Warmup Iteration   1: 28695.164 ns/op
# Warmup Iteration   2: 1504.705 ns/op
# Warmup Iteration   3: 1027.532 ns/op
Iteration   1: 937.643 ns/op
Iteration   2: 938.983 ns/op
Iteration   3: 935.711 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  937.446 ±(99.9%) 30.010 ns/op [Average]
  (min, avg, max) = (935.711, 937.446, 938.983), stdev = 1.645
  CI (99.9%): [907.436, 967.455] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 76.04% complete, ETA 00:06:58
# Fork: 1 of 1
# Warmup Iteration   1: 30794.980 ns/op
# Warmup Iteration   2: 1243.046 ns/op
# Warmup Iteration   3: 1016.740 ns/op
Iteration   1: 919.512 ns/op
Iteration   2: 920.394 ns/op
Iteration   3: 919.501 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  919.802 ±(99.9%) 9.347 ns/op [Average]
  (min, avg, max) = (919.501, 919.802, 920.394), stdev = 0.512
  CI (99.9%): [910.455, 929.149] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 76.11% complete, ETA 00:06:57
# Fork: 1 of 1
# Warmup Iteration   1: 1948.385 ns/op
# Warmup Iteration   2: 1477.357 ns/op
# Warmup Iteration   3: 1026.549 ns/op
Iteration   1: 1028.148 ns/op
Iteration   2: 1034.135 ns/op
Iteration   3: 1026.658 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1029.647 ±(99.9%) 72.194 ns/op [Average]
  (min, avg, max) = (1026.658, 1029.647, 1034.135), stdev = 3.957
  CI (99.9%): [957.453, 1101.841] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 76.18% complete, ETA 00:06:56
# Fork: 1 of 1
# Warmup Iteration   1: 9979.021 ns/op
# Warmup Iteration   2: 4772.788 ns/op
# Warmup Iteration   3: 3524.317 ns/op
Iteration   1: 3520.994 ns/op
Iteration   2: 3522.603 ns/op
Iteration   3: 3521.745 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3521.781 ±(99.9%) 14.690 ns/op [Average]
  (min, avg, max) = (3520.994, 3521.781, 3522.603), stdev = 0.805
  CI (99.9%): [3507.091, 3536.471] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 76.25% complete, ETA 00:06:55
# Fork: 1 of 1
# Warmup Iteration   1: 24.115 ns/op
# Warmup Iteration   2: 30.081 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.130 ns/op
Iteration   2: 19.140 ns/op
Iteration   3: 19.135 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.091 ns/op [Average]
  (min, avg, max) = (19.130, 19.135, 19.140), stdev = 0.005
  CI (99.9%): [19.044, 19.226] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 76.32% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 134.966 ns/op
# Warmup Iteration   2: 137.978 ns/op
# Warmup Iteration   3: 95.592 ns/op
Iteration   1: 95.693 ns/op
Iteration   2: 95.562 ns/op
Iteration   3: 95.546 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.600 ±(99.9%) 1.467 ns/op [Average]
  (min, avg, max) = (95.546, 95.600, 95.693), stdev = 0.080
  CI (99.9%): [94.134, 97.067] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 76.39% complete, ETA 00:06:52
# Fork: 1 of 1
# Warmup Iteration   1: 509.811 ns/op
# Warmup Iteration   2: 184.140 ns/op
# Warmup Iteration   3: 115.079 ns/op
Iteration   1: 115.197 ns/op
Iteration   2: 115.174 ns/op
Iteration   3: 115.158 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.176 ±(99.9%) 0.355 ns/op [Average]
  (min, avg, max) = (115.158, 115.176, 115.197), stdev = 0.019
  CI (99.9%): [114.821, 115.532] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 76.46% complete, ETA 00:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 1538.327 ns/op
# Warmup Iteration   2: 164.113 ns/op
# Warmup Iteration   3: 116.128 ns/op
Iteration   1: 115.988 ns/op
Iteration   2: 115.796 ns/op
Iteration   3: 116.047 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.944 ±(99.9%) 2.403 ns/op [Average]
  (min, avg, max) = (115.796, 115.944, 116.047), stdev = 0.132
  CI (99.9%): [113.540, 118.347] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 76.53% complete, ETA 00:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 103.473 ns/op
# Warmup Iteration   2: 114.605 ns/op
# Warmup Iteration   3: 74.226 ns/op
Iteration   1: 74.187 ns/op
Iteration   2: 74.219 ns/op
Iteration   3: 74.210 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.205 ±(99.9%) 0.303 ns/op [Average]
  (min, avg, max) = (74.187, 74.205, 74.219), stdev = 0.017
  CI (99.9%): [73.902, 74.508] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 76.60% complete, ETA 00:06:48
# Fork: 1 of 1
# Warmup Iteration   1: 193.436 ns/op
# Warmup Iteration   2: 207.090 ns/op
# Warmup Iteration   3: 137.020 ns/op
Iteration   1: 137.020 ns/op
Iteration   2: 137.419 ns/op
Iteration   3: 136.999 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.146 ±(99.9%) 4.320 ns/op [Average]
  (min, avg, max) = (136.999, 137.146, 137.419), stdev = 0.237
  CI (99.9%): [132.826, 141.466] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 76.67% complete, ETA 00:06:47
# Fork: 1 of 1
# Warmup Iteration   1: 23.998 ns/op
# Warmup Iteration   2: 28.940 ns/op
# Warmup Iteration   3: 19.744 ns/op
Iteration   1: 19.794 ns/op
Iteration   2: 19.733 ns/op
Iteration   3: 19.816 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.781 ±(99.9%) 0.786 ns/op [Average]
  (min, avg, max) = (19.733, 19.781, 19.816), stdev = 0.043
  CI (99.9%): [18.995, 20.568] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 76.74% complete, ETA 00:06:46
# Fork: 1 of 1
# Warmup Iteration   1: 2118.294 ns/op
# Warmup Iteration   2: 761.526 ns/op
# Warmup Iteration   3: 528.274 ns/op
Iteration   1: 528.179 ns/op
Iteration   2: 527.988 ns/op
Iteration   3: 526.023 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  527.397 ±(99.9%) 21.778 ns/op [Average]
  (min, avg, max) = (526.023, 527.397, 528.179), stdev = 1.194
  CI (99.9%): [505.619, 549.174] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 76.81% complete, ETA 00:06:45
# Fork: 1 of 1
# Warmup Iteration   1: 17457.370 ns/op
# Warmup Iteration   2: 677.919 ns/op
# Warmup Iteration   3: 499.588 ns/op
Iteration   1: 451.004 ns/op
Iteration   2: 448.177 ns/op
Iteration   3: 446.493 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  448.558 ±(99.9%) 41.587 ns/op [Average]
  (min, avg, max) = (446.493, 448.558, 451.004), stdev = 2.280
  CI (99.9%): [406.971, 490.145] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 76.88% complete, ETA 00:06:44
# Fork: 1 of 1
# Warmup Iteration   1: 26851.300 ns/op
# Warmup Iteration   2: 725.305 ns/op
# Warmup Iteration   3: 560.457 ns/op
Iteration   1: 510.596 ns/op
Iteration   2: 510.289 ns/op
Iteration   3: 510.881 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  510.589 ±(99.9%) 5.407 ns/op [Average]
  (min, avg, max) = (510.289, 510.589, 510.881), stdev = 0.296
  CI (99.9%): [505.182, 515.995] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 76.94% complete, ETA 00:06:42
# Fork: 1 of 1
# Warmup Iteration   1: 423.201 ns/op
# Warmup Iteration   2: 387.962 ns/op
# Warmup Iteration   3: 277.853 ns/op
Iteration   1: 278.985 ns/op
Iteration   2: 277.886 ns/op
Iteration   3: 278.861 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  278.578 ±(99.9%) 10.981 ns/op [Average]
  (min, avg, max) = (277.886, 278.578, 278.985), stdev = 0.602
  CI (99.9%): [267.597, 289.558] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 77.01% complete, ETA 00:06:41
# Fork: 1 of 1
# Warmup Iteration   1: 3180.874 ns/op
# Warmup Iteration   2: 1532.766 ns/op
# Warmup Iteration   3: 1058.063 ns/op
Iteration   1: 1056.195 ns/op
Iteration   2: 1058.914 ns/op
Iteration   3: 1059.223 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1058.110 ±(99.9%) 30.396 ns/op [Average]
  (min, avg, max) = (1056.195, 1058.110, 1059.223), stdev = 1.666
  CI (99.9%): [1027.715, 1088.506] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 77.08% complete, ETA 00:06:40
# Fork: 1 of 1
# Warmup Iteration   1: 24.342 ns/op
# Warmup Iteration   2: 27.903 ns/op
# Warmup Iteration   3: 19.134 ns/op
Iteration   1: 19.127 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.092 ns/op [Average]
  (min, avg, max) = (19.127, 19.130, 19.136), stdev = 0.005
  CI (99.9%): [19.039, 19.222] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 77.15% complete, ETA 00:06:39
# Fork: 1 of 1
# Warmup Iteration   1: 2371.333 ns/op
# Warmup Iteration   2: 1328.088 ns/op
# Warmup Iteration   3: 954.106 ns/op
Iteration   1: 953.769 ns/op
Iteration   2: 953.163 ns/op
Iteration   3: 953.679 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  953.537 ±(99.9%) 5.970 ns/op [Average]
  (min, avg, max) = (953.163, 953.537, 953.769), stdev = 0.327
  CI (99.9%): [947.567, 959.506] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 77.22% complete, ETA 00:06:38
# Fork: 1 of 1
# Warmup Iteration   1: 11013.288 ns/op
# Warmup Iteration   2: 1273.043 ns/op
# Warmup Iteration   3: 868.986 ns/op
Iteration   1: 869.469 ns/op
Iteration   2: 869.380 ns/op
Iteration   3: 869.042 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  869.297 ±(99.9%) 4.105 ns/op [Average]
  (min, avg, max) = (869.042, 869.297, 869.469), stdev = 0.225
  CI (99.9%): [865.192, 873.402] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 77.29% complete, ETA 00:06:36
# Fork: 1 of 1
# Warmup Iteration   1: 10278.571 ns/op
# Warmup Iteration   2: 1254.065 ns/op
# Warmup Iteration   3: 907.835 ns/op
Iteration   1: 907.505 ns/op
Iteration   2: 910.345 ns/op
Iteration   3: 908.409 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  908.753 ±(99.9%) 26.471 ns/op [Average]
  (min, avg, max) = (907.505, 908.753, 910.345), stdev = 1.451
  CI (99.9%): [882.282, 935.224] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 77.36% complete, ETA 00:06:35
# Fork: 1 of 1
# Warmup Iteration   1: 1980.674 ns/op
# Warmup Iteration   2: 1362.748 ns/op
# Warmup Iteration   3: 1004.793 ns/op
Iteration   1: 1014.173 ns/op
Iteration   2: 1013.744 ns/op
Iteration   3: 1004.654 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1010.857 ±(99.9%) 98.083 ns/op [Average]
  (min, avg, max) = (1004.654, 1010.857, 1014.173), stdev = 5.376
  CI (99.9%): [912.774, 1108.940] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 77.43% complete, ETA 00:06:34
# Fork: 1 of 1
# Warmup Iteration   1: 11410.644 ns/op
# Warmup Iteration   2: 5722.481 ns/op
# Warmup Iteration   3: 3794.025 ns/op
Iteration   1: 3792.019 ns/op
Iteration   2: 3791.114 ns/op
Iteration   3: 3790.260 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3791.131 ±(99.9%) 16.054 ns/op [Average]
  (min, avg, max) = (3790.260, 3791.131, 3792.019), stdev = 0.880
  CI (99.9%): [3775.078, 3807.185] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 77.50% complete, ETA 00:06:33
# Fork: 1 of 1
# Warmup Iteration   1: 24.805 ns/op
# Warmup Iteration   2: 30.629 ns/op
# Warmup Iteration   3: 19.146 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.145 ns/op
Iteration   3: 19.138 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.138 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (19.132, 19.138, 19.145), stdev = 0.007
  CI (99.9%): [19.012, 19.265] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 77.57% complete, ETA 00:06:31
# Fork: 1 of 1
# Warmup Iteration   1: 2951.003 ns/op
# Warmup Iteration   2: 970.320 ns/op
# Warmup Iteration   3: 660.910 ns/op
Iteration   1: 661.154 ns/op
Iteration   2: 661.409 ns/op
Iteration   3: 661.383 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  661.315 ±(99.9%) 2.563 ns/op [Average]
  (min, avg, max) = (661.154, 661.315, 661.409), stdev = 0.141
  CI (99.9%): [658.752, 663.879] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 77.64% complete, ETA 00:06:30
# Fork: 1 of 1
# Warmup Iteration   1: 11256.608 ns/op
# Warmup Iteration   2: 1043.627 ns/op
# Warmup Iteration   3: 860.698 ns/op
Iteration   1: 793.898 ns/op
Iteration   2: 793.349 ns/op
Iteration   3: 793.225 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  793.491 ±(99.9%) 6.536 ns/op [Average]
  (min, avg, max) = (793.225, 793.491, 793.898), stdev = 0.358
  CI (99.9%): [786.955, 800.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 77.71% complete, ETA 00:06:29
# Fork: 1 of 1
# Warmup Iteration   1: 11229.109 ns/op
# Warmup Iteration   2: 995.420 ns/op
# Warmup Iteration   3: 666.232 ns/op
Iteration   1: 666.083 ns/op
Iteration   2: 666.046 ns/op
Iteration   3: 666.089 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  666.073 ±(99.9%) 0.422 ns/op [Average]
  (min, avg, max) = (666.046, 666.073, 666.089), stdev = 0.023
  CI (99.9%): [665.651, 666.495] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 77.78% complete, ETA 00:06:28
# Fork: 1 of 1
# Warmup Iteration   1: 1832.726 ns/op
# Warmup Iteration   2: 1414.585 ns/op
# Warmup Iteration   3: 968.530 ns/op
Iteration   1: 968.503 ns/op
Iteration   2: 968.437 ns/op
Iteration   3: 968.482 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  968.474 ±(99.9%) 0.610 ns/op [Average]
  (min, avg, max) = (968.437, 968.474, 968.503), stdev = 0.033
  CI (99.9%): [967.863, 969.084] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 77.85% complete, ETA 00:06:27
# Fork: 1 of 1
# Warmup Iteration   1: 1986.226 ns/op
# Warmup Iteration   2: 1217.034 ns/op
# Warmup Iteration   3: 852.879 ns/op
Iteration   1: 851.837 ns/op
Iteration   2: 852.433 ns/op
Iteration   3: 852.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  852.133 ±(99.9%) 5.431 ns/op [Average]
  (min, avg, max) = (851.837, 852.133, 852.433), stdev = 0.298
  CI (99.9%): [846.703, 857.564] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 77.92% complete, ETA 00:06:25
# Fork: 1 of 1
# Warmup Iteration   1: 24.379 ns/op
# Warmup Iteration   2: 26.322 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.155 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.126 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.139 ±(99.9%) 0.271 ns/op [Average]
  (min, avg, max) = (19.126, 19.139, 19.155), stdev = 0.015
  CI (99.9%): [18.868, 19.410] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 77.99% complete, ETA 00:06:24
# Fork: 1 of 1
# Warmup Iteration   1: 10949.876 ns/op
# Warmup Iteration   2: 1035.484 ns/op
# Warmup Iteration   3: 898.100 ns/op
Iteration   1: 826.624 ns/op
Iteration   2: 823.406 ns/op
Iteration   3: 828.725 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  826.252 ±(99.9%) 48.866 ns/op [Average]
  (min, avg, max) = (823.406, 826.252, 828.725), stdev = 2.679
  CI (99.9%): [777.385, 875.118] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 78.06% complete, ETA 00:06:23
# Fork: 1 of 1
# Warmup Iteration   1: 24121.734 ns/op
# Warmup Iteration   2: 1378.861 ns/op
# Warmup Iteration   3: 1119.786 ns/op
Iteration   1: 1019.730 ns/op
Iteration   2: 1016.452 ns/op
Iteration   3: 1019.874 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1018.686 ±(99.9%) 35.309 ns/op [Average]
  (min, avg, max) = (1016.452, 1018.686, 1019.874), stdev = 1.935
  CI (99.9%): [983.376, 1053.995] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 78.13% complete, ETA 00:06:22
# Fork: 1 of 1
# Warmup Iteration   1: 37919.711 ns/op
# Warmup Iteration   2: 2001.792 ns/op
# Warmup Iteration   3: 1150.120 ns/op
Iteration   1: 972.259 ns/op
Iteration   2: 967.702 ns/op
Iteration   3: 970.315 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  970.092 ±(99.9%) 41.714 ns/op [Average]
  (min, avg, max) = (967.702, 970.092, 972.259), stdev = 2.286
  CI (99.9%): [928.378, 1011.806] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 78.19% complete, ETA 00:06:21
# Fork: 1 of 1
# Warmup Iteration   1: 1993.930 ns/op
# Warmup Iteration   2: 1480.332 ns/op
# Warmup Iteration   3: 1018.473 ns/op
Iteration   1: 1022.928 ns/op
Iteration   2: 1016.824 ns/op
Iteration   3: 1012.918 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1017.556 ±(99.9%) 92.045 ns/op [Average]
  (min, avg, max) = (1012.918, 1017.556, 1022.928), stdev = 5.045
  CI (99.9%): [925.511, 1109.602] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 78.26% complete, ETA 00:06:19
# Fork: 1 of 1
# Warmup Iteration   1: 10583.215 ns/op
# Warmup Iteration   2: 4925.446 ns/op
# Warmup Iteration   3: 3582.590 ns/op
Iteration   1: 3584.164 ns/op
Iteration   2: 3580.873 ns/op
Iteration   3: 3586.767 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3583.934 ±(99.9%) 53.887 ns/op [Average]
  (min, avg, max) = (3580.873, 3583.934, 3586.767), stdev = 2.954
  CI (99.9%): [3530.047, 3637.821] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 78.33% complete, ETA 00:06:18
# Fork: 1 of 1
# Warmup Iteration   1: 24.703 ns/op
# Warmup Iteration   2: 30.696 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.139 ns/op
Iteration   3: 19.125 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (19.125, 19.134, 19.139), stdev = 0.007
  CI (99.9%): [19.002, 19.266] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 78.40% complete, ETA 00:06:17
# Fork: 1 of 1
# Warmup Iteration   1: 333.179 ns/op
# Warmup Iteration   2: 321.777 ns/op
# Warmup Iteration   3: 228.795 ns/op
Iteration   1: 228.894 ns/op
Iteration   2: 228.767 ns/op
Iteration   3: 228.568 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  228.743 ±(99.9%) 2.996 ns/op [Average]
  (min, avg, max) = (228.568, 228.743, 228.894), stdev = 0.164
  CI (99.9%): [225.747, 231.739] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 78.47% complete, ETA 00:06:16
# Fork: 1 of 1
# Warmup Iteration   1: 1782.752 ns/op
# Warmup Iteration   2: 218.744 ns/op
# Warmup Iteration   3: 154.729 ns/op
Iteration   1: 154.762 ns/op
Iteration   2: 154.696 ns/op
Iteration   3: 154.688 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  154.716 ±(99.9%) 0.745 ns/op [Average]
  (min, avg, max) = (154.688, 154.716, 154.762), stdev = 0.041
  CI (99.9%): [153.970, 155.461] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 78.54% complete, ETA 00:06:14
# Fork: 1 of 1
# Warmup Iteration   1: 931.835 ns/op
# Warmup Iteration   2: 221.234 ns/op
# Warmup Iteration   3: 145.637 ns/op
Iteration   1: 145.777 ns/op
Iteration   2: 145.628 ns/op
Iteration   3: 145.665 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  145.690 ±(99.9%) 1.412 ns/op [Average]
  (min, avg, max) = (145.628, 145.690, 145.777), stdev = 0.077
  CI (99.9%): [144.278, 147.102] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 78.61% complete, ETA 00:06:13
# Fork: 1 of 1
# Warmup Iteration   1: 711.651 ns/op
# Warmup Iteration   2: 741.032 ns/op
# Warmup Iteration   3: 496.621 ns/op
Iteration   1: 496.511 ns/op
Iteration   2: 496.470 ns/op
Iteration   3: 496.634 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  496.538 ±(99.9%) 1.559 ns/op [Average]
  (min, avg, max) = (496.470, 496.538, 496.634), stdev = 0.085
  CI (99.9%): [494.979, 498.097] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 78.68% complete, ETA 00:06:12
# Fork: 1 of 1
# Warmup Iteration   1: 307.176 ns/op
# Warmup Iteration   2: 272.500 ns/op
# Warmup Iteration   3: 179.792 ns/op
Iteration   1: 179.644 ns/op
Iteration   2: 179.662 ns/op
Iteration   3: 179.643 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  179.650 ±(99.9%) 0.199 ns/op [Average]
  (min, avg, max) = (179.643, 179.650, 179.662), stdev = 0.011
  CI (99.9%): [179.451, 179.849] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 78.75% complete, ETA 00:06:11
# Fork: 1 of 1
# Warmup Iteration   1: 24.523 ns/op
# Warmup Iteration   2: 31.301 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.132 ±(99.9%) 0.060 ns/op [Average]
  (min, avg, max) = (19.128, 19.132, 19.134), stdev = 0.003
  CI (99.9%): [19.072, 19.192] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 78.82% complete, ETA 00:06:10
# Fork: 1 of 1
# Warmup Iteration   1: 2630.064 ns/op
# Warmup Iteration   2: 990.324 ns/op
# Warmup Iteration   3: 662.268 ns/op
Iteration   1: 663.159 ns/op
Iteration   2: 666.726 ns/op
Iteration   3: 664.733 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  664.873 ±(99.9%) 32.611 ns/op [Average]
  (min, avg, max) = (663.159, 664.873, 666.726), stdev = 1.788
  CI (99.9%): [632.261, 697.484] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 78.89% complete, ETA 00:06:08
# Fork: 1 of 1
# Warmup Iteration   1: 8458.607 ns/op
# Warmup Iteration   2: 903.522 ns/op
# Warmup Iteration   3: 625.588 ns/op
Iteration   1: 624.977 ns/op
Iteration   2: 623.780 ns/op
Iteration   3: 625.711 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  624.823 ±(99.9%) 17.786 ns/op [Average]
  (min, avg, max) = (623.780, 624.823, 625.711), stdev = 0.975
  CI (99.9%): [607.036, 642.609] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 78.96% complete, ETA 00:06:07
# Fork: 1 of 1
# Warmup Iteration   1: 35092.145 ns/op
# Warmup Iteration   2: 1296.315 ns/op
# Warmup Iteration   3: 860.573 ns/op
Iteration   1: 721.900 ns/op
Iteration   2: 720.710 ns/op
Iteration   3: 719.356 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  720.655 ±(99.9%) 23.222 ns/op [Average]
  (min, avg, max) = (719.356, 720.655, 721.900), stdev = 1.273
  CI (99.9%): [697.433, 743.878] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 79.03% complete, ETA 00:06:06
# Fork: 1 of 1
# Warmup Iteration   1: 2753.633 ns/op
# Warmup Iteration   2: 1796.824 ns/op
# Warmup Iteration   3: 1262.351 ns/op
Iteration   1: 1262.772 ns/op
Iteration   2: 1265.568 ns/op
Iteration   3: 1263.874 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1264.071 ±(99.9%) 25.690 ns/op [Average]
  (min, avg, max) = (1262.772, 1264.071, 1265.568), stdev = 1.408
  CI (99.9%): [1238.381, 1289.762] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 79.10% complete, ETA 00:06:05
# Fork: 1 of 1
# Warmup Iteration   1: 2001.737 ns/op
# Warmup Iteration   2: 1353.978 ns/op
# Warmup Iteration   3: 938.912 ns/op
Iteration   1: 937.617 ns/op
Iteration   2: 939.271 ns/op
Iteration   3: 937.537 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  938.141 ±(99.9%) 17.856 ns/op [Average]
  (min, avg, max) = (937.537, 938.141, 939.271), stdev = 0.979
  CI (99.9%): [920.286, 955.997] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 79.17% complete, ETA 00:06:04
# Fork: 1 of 1
# Warmup Iteration   1: 24.495 ns/op
# Warmup Iteration   2: 25.278 ns/op
# Warmup Iteration   3: 19.134 ns/op
Iteration   1: 19.130 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.138 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.067 ns/op [Average]
  (min, avg, max) = (19.130, 19.134, 19.138), stdev = 0.004
  CI (99.9%): [19.068, 19.201] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 79.24% complete, ETA 00:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 1614.715 ns/op
# Warmup Iteration   2: 977.986 ns/op
# Warmup Iteration   3: 679.178 ns/op
Iteration   1: 685.176 ns/op
Iteration   2: 678.731 ns/op
Iteration   3: 679.344 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  681.084 ±(99.9%) 64.900 ns/op [Average]
  (min, avg, max) = (678.731, 681.084, 685.176), stdev = 3.557
  CI (99.9%): [616.184, 745.983] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 79.31% complete, ETA 00:06:01
# Fork: 1 of 1
# Warmup Iteration   1: 7693.401 ns/op
# Warmup Iteration   2: 1399.401 ns/op
# Warmup Iteration   3: 1026.846 ns/op
Iteration   1: 1026.558 ns/op
Iteration   2: 1026.460 ns/op
Iteration   3: 1026.618 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1026.545 ±(99.9%) 1.458 ns/op [Average]
  (min, avg, max) = (1026.460, 1026.545, 1026.618), stdev = 0.080
  CI (99.9%): [1025.087, 1028.003] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 79.38% complete, ETA 00:06:00
# Fork: 1 of 1
# Warmup Iteration   1: 24568.928 ns/op
# Warmup Iteration   2: 1581.834 ns/op
# Warmup Iteration   3: 1137.106 ns/op
Iteration   1: 1029.041 ns/op
Iteration   2: 1028.679 ns/op
Iteration   3: 1028.635 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1028.785 ±(99.9%) 4.055 ns/op [Average]
  (min, avg, max) = (1028.635, 1028.785, 1029.041), stdev = 0.222
  CI (99.9%): [1024.730, 1032.841] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 79.44% complete, ETA 00:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 2485.176 ns/op
# Warmup Iteration   2: 1397.525 ns/op
# Warmup Iteration   3: 1035.236 ns/op
Iteration   1: 1034.966 ns/op
Iteration   2: 1035.007 ns/op
Iteration   3: 1035.114 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1035.029 ±(99.9%) 1.397 ns/op [Average]
  (min, avg, max) = (1034.966, 1035.029, 1035.114), stdev = 0.077
  CI (99.9%): [1033.632, 1036.426] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 79.51% complete, ETA 00:05:57
# Fork: 1 of 1
# Warmup Iteration   1: 10818.140 ns/op
# Warmup Iteration   2: 5341.664 ns/op
# Warmup Iteration   3: 4282.619 ns/op
Iteration   1: 3907.480 ns/op
Iteration   2: 3906.573 ns/op
Iteration   3: 3905.895 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3906.649 ±(99.9%) 14.508 ns/op [Average]
  (min, avg, max) = (3905.895, 3906.649, 3907.480), stdev = 0.795
  CI (99.9%): [3892.141, 3921.157] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 79.58% complete, ETA 00:05:56
# Fork: 1 of 1
# Warmup Iteration   1: 24.934 ns/op
# Warmup Iteration   2: 28.254 ns/op
# Warmup Iteration   3: 19.140 ns/op
Iteration   1: 19.133 ns/op
Iteration   2: 19.139 ns/op
Iteration   3: 19.139 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (19.133, 19.137, 19.139), stdev = 0.003
  CI (99.9%): [19.076, 19.198] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 79.65% complete, ETA 00:05:55
# Fork: 1 of 1
# Warmup Iteration   1: 2558.368 ns/op
# Warmup Iteration   2: 960.499 ns/op
# Warmup Iteration   3: 735.765 ns/op
Iteration   1: 732.848 ns/op
Iteration   2: 734.471 ns/op
Iteration   3: 734.528 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  733.949 ±(99.9%) 17.409 ns/op [Average]
  (min, avg, max) = (732.848, 733.949, 734.528), stdev = 0.954
  CI (99.9%): [716.540, 751.358] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 79.72% complete, ETA 00:05:54
# Fork: 1 of 1
# Warmup Iteration   1: 40897.879 ns/op
# Warmup Iteration   2: 1278.135 ns/op
# Warmup Iteration   3: 1019.789 ns/op
Iteration   1: 855.403 ns/op
Iteration   2: 854.778 ns/op
Iteration   3: 855.497 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  855.226 ±(99.9%) 7.135 ns/op [Average]
  (min, avg, max) = (854.778, 855.226, 855.497), stdev = 0.391
  CI (99.9%): [848.091, 862.361] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 79.79% complete, ETA 00:05:53
# Fork: 1 of 1
# Warmup Iteration   1: 7813.537 ns/op
# Warmup Iteration   2: 1230.892 ns/op
# Warmup Iteration   3: 844.149 ns/op
Iteration   1: 843.703 ns/op
Iteration   2: 843.234 ns/op
Iteration   3: 843.662 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  843.533 ±(99.9%) 4.739 ns/op [Average]
  (min, avg, max) = (843.234, 843.533, 843.703), stdev = 0.260
  CI (99.9%): [838.794, 848.271] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 79.86% complete, ETA 00:05:51
# Fork: 1 of 1
# Warmup Iteration   1: 1837.893 ns/op
# Warmup Iteration   2: 1251.273 ns/op
# Warmup Iteration   3: 933.908 ns/op
Iteration   1: 932.987 ns/op
Iteration   2: 932.894 ns/op
Iteration   3: 932.951 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  932.944 ±(99.9%) 0.852 ns/op [Average]
  (min, avg, max) = (932.894, 932.944, 932.987), stdev = 0.047
  CI (99.9%): [932.092, 933.797] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 79.93% complete, ETA 00:05:50
# Fork: 1 of 1
# Warmup Iteration   1: 1942.623 ns/op
# Warmup Iteration   2: 1202.007 ns/op
# Warmup Iteration   3: 877.959 ns/op
Iteration   1: 877.413 ns/op
Iteration   2: 878.151 ns/op
Iteration   3: 877.715 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  877.759 ±(99.9%) 6.770 ns/op [Average]
  (min, avg, max) = (877.413, 877.759, 878.151), stdev = 0.371
  CI (99.9%): [870.990, 884.529] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 80.00% complete, ETA 00:05:49
# Fork: 1 of 1
# Warmup Iteration   1: 24.744 ns/op
# Warmup Iteration   2: 27.071 ns/op
# Warmup Iteration   3: 19.135 ns/op
Iteration   1: 19.129 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.122 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.127 ±(99.9%) 0.089 ns/op [Average]
  (min, avg, max) = (19.122, 19.127, 19.132), stdev = 0.005
  CI (99.9%): [19.038, 19.217] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 80.07% complete, ETA 00:05:48
# Fork: 1 of 1
# Warmup Iteration   1: 47767.038 ns/op
# Warmup Iteration   2: 1103.145 ns/op
# Warmup Iteration   3: 977.085 ns/op
Iteration   1: 836.195 ns/op
Iteration   2: 827.579 ns/op
Iteration   3: 829.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  831.217 ±(99.9%) 81.393 ns/op [Average]
  (min, avg, max) = (827.579, 831.217, 836.195), stdev = 4.461
  CI (99.9%): [749.825, 912.610] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 80.14% complete, ETA 00:05:47
# Fork: 1 of 1
# Warmup Iteration   1: 15557.837 ns/op
# Warmup Iteration   2: 1454.513 ns/op
# Warmup Iteration   3: 1098.866 ns/op
Iteration   1: 1016.932 ns/op
Iteration   2: 1009.430 ns/op
Iteration   3: 1015.288 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1013.884 ±(99.9%) 71.942 ns/op [Average]
  (min, avg, max) = (1009.430, 1013.884, 1016.932), stdev = 3.943
  CI (99.9%): [941.941, 1085.826] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 80.21% complete, ETA 00:05:45
# Fork: 1 of 1
# Warmup Iteration   1: 60158.794 ns/op
# Warmup Iteration   2: 1619.509 ns/op
# Warmup Iteration   3: 1198.766 ns/op
Iteration   1: 998.901 ns/op
Iteration   2: 998.826 ns/op
Iteration   3: 1006.287 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1001.338 ±(99.9%) 78.193 ns/op [Average]
  (min, avg, max) = (998.826, 1001.338, 1006.287), stdev = 4.286
  CI (99.9%): [923.145, 1079.530] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 80.28% complete, ETA 00:05:44
# Fork: 1 of 1
# Warmup Iteration   1: 1971.280 ns/op
# Warmup Iteration   2: 1462.418 ns/op
# Warmup Iteration   3: 1017.850 ns/op
Iteration   1: 1021.518 ns/op
Iteration   2: 1017.884 ns/op
Iteration   3: 1015.996 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1018.466 ±(99.9%) 51.206 ns/op [Average]
  (min, avg, max) = (1015.996, 1018.466, 1021.518), stdev = 2.807
  CI (99.9%): [967.260, 1069.672] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 80.35% complete, ETA 00:05:43
# Fork: 1 of 1
# Warmup Iteration   1: 12126.458 ns/op
# Warmup Iteration   2: 5169.079 ns/op
# Warmup Iteration   3: 4265.113 ns/op
Iteration   1: 3898.751 ns/op
Iteration   2: 3898.402 ns/op
Iteration   3: 3901.412 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3899.522 ±(99.9%) 30.042 ns/op [Average]
  (min, avg, max) = (3898.402, 3899.522, 3901.412), stdev = 1.647
  CI (99.9%): [3869.479, 3929.564] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 80.42% complete, ETA 00:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 24.065 ns/op
# Warmup Iteration   2: 26.252 ns/op
# Warmup Iteration   3: 19.136 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.126 ns/op
Iteration   3: 19.138 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (19.126, 19.133, 19.138), stdev = 0.006
  CI (99.9%): [19.023, 19.243] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 80.49% complete, ETA 00:05:40
# Fork: 1 of 1
# Warmup Iteration   1: 381.963 ns/op
# Warmup Iteration   2: 316.844 ns/op
# Warmup Iteration   3: 231.346 ns/op
Iteration   1: 230.978 ns/op
Iteration   2: 231.285 ns/op
Iteration   3: 231.106 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.123 ±(99.9%) 2.807 ns/op [Average]
  (min, avg, max) = (230.978, 231.123, 231.285), stdev = 0.154
  CI (99.9%): [228.317, 233.930] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 80.56% complete, ETA 00:05:39
# Fork: 1 of 1
# Warmup Iteration   1: 1115.330 ns/op
# Warmup Iteration   2: 444.249 ns/op
# Warmup Iteration   3: 316.880 ns/op
Iteration   1: 316.905 ns/op
Iteration   2: 316.801 ns/op
Iteration   3: 316.859 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  316.855 ±(99.9%) 0.947 ns/op [Average]
  (min, avg, max) = (316.801, 316.855, 316.905), stdev = 0.052
  CI (99.9%): [315.908, 317.802] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 80.63% complete, ETA 00:05:38
# Fork: 1 of 1
# Warmup Iteration   1: 1052.372 ns/op
# Warmup Iteration   2: 417.189 ns/op
# Warmup Iteration   3: 295.124 ns/op
Iteration   1: 295.044 ns/op
Iteration   2: 295.108 ns/op
Iteration   3: 295.114 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  295.089 ±(99.9%) 0.704 ns/op [Average]
  (min, avg, max) = (295.044, 295.089, 295.114), stdev = 0.039
  CI (99.9%): [294.384, 295.793] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 80.69% complete, ETA 00:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 392.524 ns/op
# Warmup Iteration   2: 413.660 ns/op
# Warmup Iteration   3: 269.255 ns/op
Iteration   1: 269.138 ns/op
Iteration   2: 269.181 ns/op
Iteration   3: 269.168 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  269.162 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (269.138, 269.162, 269.181), stdev = 0.022
  CI (99.9%): [268.762, 269.562] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 80.76% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: 331.797 ns/op
# Warmup Iteration   2: 232.992 ns/op
# Warmup Iteration   3: 162.555 ns/op
Iteration   1: 162.534 ns/op
Iteration   2: 162.492 ns/op
Iteration   3: 162.498 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  162.508 ±(99.9%) 0.419 ns/op [Average]
  (min, avg, max) = (162.492, 162.508, 162.534), stdev = 0.023
  CI (99.9%): [162.089, 162.928] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 80.83% complete, ETA 00:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 24.546 ns/op
# Warmup Iteration   2: 29.187 ns/op
# Warmup Iteration   3: 19.140 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.133 ns/op
Iteration   3: 19.141 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (19.133, 19.136, 19.141), stdev = 0.004
  CI (99.9%): [19.061, 19.211] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 80.90% complete, ETA 00:05:33
# Fork: 1 of 1
# Warmup Iteration   1: 2415.936 ns/op
# Warmup Iteration   2: 748.606 ns/op
# Warmup Iteration   3: 569.520 ns/op
Iteration   1: 682.541 ns/op
Iteration   2: 725.512 ns/op
Iteration   3: 566.709 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  658.254 ±(99.9%) 1498.542 ns/op [Average]
  (min, avg, max) = (566.709, 658.254, 725.512), stdev = 82.140
  CI (99.9%): [≈ 0, 2156.796] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 80.97% complete, ETA 00:05:32
# Fork: 1 of 1
# Warmup Iteration   1: 49758.972 ns/op
# Warmup Iteration   2: 1433.251 ns/op
# Warmup Iteration   3: 908.934 ns/op
Iteration   1: 754.711 ns/op
Iteration   2: 753.824 ns/op
Iteration   3: 753.342 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  753.959 ±(99.9%) 12.671 ns/op [Average]
  (min, avg, max) = (753.342, 753.959, 754.711), stdev = 0.695
  CI (99.9%): [741.288, 766.630] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 81.04% complete, ETA 00:05:31
# Fork: 1 of 1
# Warmup Iteration   1: 34049.345 ns/op
# Warmup Iteration   2: 1033.567 ns/op
# Warmup Iteration   3: 770.431 ns/op
Iteration   1: 697.620 ns/op
Iteration   2: 697.171 ns/op
Iteration   3: 695.910 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  696.900 ±(99.9%) 16.181 ns/op [Average]
  (min, avg, max) = (695.910, 696.900, 697.620), stdev = 0.887
  CI (99.9%): [680.719, 713.082] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 81.11% complete, ETA 00:05:30
# Fork: 1 of 1
# Warmup Iteration   1: 997.558 ns/op
# Warmup Iteration   2: 848.142 ns/op
# Warmup Iteration   3: 618.277 ns/op
Iteration   1: 619.151 ns/op
Iteration   2: 622.039 ns/op
Iteration   3: 619.285 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  620.158 ±(99.9%) 29.731 ns/op [Average]
  (min, avg, max) = (619.151, 620.158, 622.039), stdev = 1.630
  CI (99.9%): [590.427, 649.889] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 81.18% complete, ETA 00:05:28
# Fork: 1 of 1
# Warmup Iteration   1: 2356.524 ns/op
# Warmup Iteration   2: 1567.659 ns/op
# Warmup Iteration   3: 1084.780 ns/op
Iteration   1: 1084.663 ns/op
Iteration   2: 1085.305 ns/op
Iteration   3: 1083.118 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1084.362 ±(99.9%) 20.502 ns/op [Average]
  (min, avg, max) = (1083.118, 1084.362, 1085.305), stdev = 1.124
  CI (99.9%): [1063.860, 1104.864] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 81.25% complete, ETA 00:05:27
# Fork: 1 of 1
# Warmup Iteration   1: 24.309 ns/op
# Warmup Iteration   2: 30.047 ns/op
# Warmup Iteration   3: 19.140 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.123 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.131 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (19.123, 19.131, 19.136), stdev = 0.007
  CI (99.9%): [19.003, 19.259] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 81.32% complete, ETA 00:05:26
# Fork: 1 of 1
# Warmup Iteration   1: 2757.916 ns/op
# Warmup Iteration   2: 1145.201 ns/op
# Warmup Iteration   3: 802.381 ns/op
Iteration   1: 801.252 ns/op
Iteration   2: 801.511 ns/op
Iteration   3: 801.730 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  801.498 ±(99.9%) 4.364 ns/op [Average]
  (min, avg, max) = (801.252, 801.498, 801.730), stdev = 0.239
  CI (99.9%): [797.134, 805.862] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 81.39% complete, ETA 00:05:25
# Fork: 1 of 1
# Warmup Iteration   1: 40202.061 ns/op
# Warmup Iteration   2: 1407.757 ns/op
# Warmup Iteration   3: 1053.086 ns/op
Iteration   1: 873.437 ns/op
Iteration   2: 873.086 ns/op
Iteration   3: 873.169 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  873.231 ±(99.9%) 3.351 ns/op [Average]
  (min, avg, max) = (873.086, 873.231, 873.437), stdev = 0.184
  CI (99.9%): [869.880, 876.581] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 81.46% complete, ETA 00:05:23
# Fork: 1 of 1
# Warmup Iteration   1: 10934.247 ns/op
# Warmup Iteration   2: 1220.386 ns/op
# Warmup Iteration   3: 967.800 ns/op
Iteration   1: 879.494 ns/op
Iteration   2: 879.527 ns/op
Iteration   3: 879.535 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  879.518 ±(99.9%) 0.399 ns/op [Average]
  (min, avg, max) = (879.494, 879.518, 879.535), stdev = 0.022
  CI (99.9%): [879.120, 879.917] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 81.53% complete, ETA 00:05:22
# Fork: 1 of 1
# Warmup Iteration   1: 1970.728 ns/op
# Warmup Iteration   2: 1407.330 ns/op
# Warmup Iteration   3: 997.522 ns/op
Iteration   1: 996.965 ns/op
Iteration   2: 996.840 ns/op
Iteration   3: 1006.466 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1000.090 ±(99.9%) 100.737 ns/op [Average]
  (min, avg, max) = (996.840, 1000.090, 1006.466), stdev = 5.522
  CI (99.9%): [899.354, 1100.827] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 81.60% complete, ETA 00:05:21
# Fork: 1 of 1
# Warmup Iteration   1: 11048.853 ns/op
# Warmup Iteration   2: 4800.809 ns/op
# Warmup Iteration   3: 4027.214 ns/op
Iteration   1: 3700.651 ns/op
Iteration   2: 3701.838 ns/op
Iteration   3: 3703.087 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3701.859 ±(99.9%) 22.219 ns/op [Average]
  (min, avg, max) = (3700.651, 3701.859, 3703.087), stdev = 1.218
  CI (99.9%): [3679.639, 3724.078] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 81.67% complete, ETA 00:05:20
# Fork: 1 of 1
# Warmup Iteration   1: 24.013 ns/op
# Warmup Iteration   2: 30.279 ns/op
# Warmup Iteration   3: 19.137 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.083 ns/op [Average]
  (min, avg, max) = (19.128, 19.133, 19.136), stdev = 0.005
  CI (99.9%): [19.051, 19.216] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 81.74% complete, ETA 00:05:19
# Fork: 1 of 1
# Warmup Iteration   1: 2751.563 ns/op
# Warmup Iteration   2: 928.389 ns/op
# Warmup Iteration   3: 696.754 ns/op
Iteration   1: 697.216 ns/op
Iteration   2: 697.061 ns/op
Iteration   3: 697.305 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  697.194 ±(99.9%) 2.249 ns/op [Average]
  (min, avg, max) = (697.061, 697.194, 697.305), stdev = 0.123
  CI (99.9%): [694.945, 699.443] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 81.81% complete, ETA 00:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 39505.567 ns/op
# Warmup Iteration   2: 1559.695 ns/op
# Warmup Iteration   3: 1261.705 ns/op
Iteration   1: 1053.804 ns/op
Iteration   2: 1057.995 ns/op
Iteration   3: 1053.723 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1055.174 ±(99.9%) 44.577 ns/op [Average]
  (min, avg, max) = (1053.723, 1055.174, 1057.995), stdev = 2.443
  CI (99.9%): [1010.597, 1099.751] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 81.88% complete, ETA 00:05:16
# Fork: 1 of 1
# Warmup Iteration   1: 11243.554 ns/op
# Warmup Iteration   2: 1584.894 ns/op
# Warmup Iteration   3: 1351.348 ns/op
Iteration   1: 1062.883 ns/op
Iteration   2: 1227.571 ns/op
Iteration   3: 1251.905 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1180.787 ±(99.9%) 1875.996 ns/op [Average]
  (min, avg, max) = (1062.883, 1180.787, 1251.905), stdev = 102.830
  CI (99.9%): [≈ 0, 3056.782] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 81.94% complete, ETA 00:05:15
# Fork: 1 of 1
# Warmup Iteration   1: 1462.563 ns/op
# Warmup Iteration   2: 1089.668 ns/op
# Warmup Iteration   3: 756.539 ns/op
Iteration   1: 757.647 ns/op
Iteration   2: 755.650 ns/op
Iteration   3: 754.591 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  755.963 ±(99.9%) 28.312 ns/op [Average]
  (min, avg, max) = (754.591, 755.963, 757.647), stdev = 1.552
  CI (99.9%): [727.651, 784.274] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 82.01% complete, ETA 00:05:14
# Fork: 1 of 1
# Warmup Iteration   1: 1936.292 ns/op
# Warmup Iteration   2: 1196.469 ns/op
# Warmup Iteration   3: 871.109 ns/op
Iteration   1: 870.645 ns/op
Iteration   2: 871.567 ns/op
Iteration   3: 871.110 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  871.107 ±(99.9%) 8.405 ns/op [Average]
  (min, avg, max) = (870.645, 871.107, 871.567), stdev = 0.461
  CI (99.9%): [862.702, 879.513] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 82.08% complete, ETA 00:05:13
# Fork: 1 of 1
# Warmup Iteration   1: 24.753 ns/op
# Warmup Iteration   2: 29.035 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.139 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (19.136, 19.137, 19.139), stdev = 0.002
  CI (99.9%): [19.108, 19.167] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 82.15% complete, ETA 00:05:11
# Fork: 1 of 1
# Warmup Iteration   1: 3001.026 ns/op
# Warmup Iteration   2: 1019.736 ns/op
# Warmup Iteration   3: 715.891 ns/op
Iteration   1: 718.713 ns/op
Iteration   2: 715.482 ns/op
Iteration   3: 719.687 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  717.960 ±(99.9%) 40.154 ns/op [Average]
  (min, avg, max) = (715.482, 717.960, 719.687), stdev = 2.201
  CI (99.9%): [677.806, 758.115] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 82.22% complete, ETA 00:05:10
# Fork: 1 of 1
# Warmup Iteration   1: 31124.853 ns/op
# Warmup Iteration   2: 1607.154 ns/op
# Warmup Iteration   3: 1162.850 ns/op
Iteration   1: 1057.245 ns/op
Iteration   2: 1058.107 ns/op
Iteration   3: 1060.257 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1058.536 ±(99.9%) 28.305 ns/op [Average]
  (min, avg, max) = (1057.245, 1058.536, 1060.257), stdev = 1.552
  CI (99.9%): [1030.231, 1086.842] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 82.29% complete, ETA 00:05:09
# Fork: 1 of 1
# Warmup Iteration   1: 32838.859 ns/op
# Warmup Iteration   2: 1924.477 ns/op
# Warmup Iteration   3: 1206.198 ns/op
Iteration   1: 1000.752 ns/op
Iteration   2: 995.762 ns/op
Iteration   3: 1003.781 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1000.098 ±(99.9%) 73.880 ns/op [Average]
  (min, avg, max) = (995.762, 1000.098, 1003.781), stdev = 4.050
  CI (99.9%): [926.219, 1073.978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 82.36% complete, ETA 00:05:08
# Fork: 1 of 1
# Warmup Iteration   1: 1987.772 ns/op
# Warmup Iteration   2: 1499.926 ns/op
# Warmup Iteration   3: 1036.327 ns/op
Iteration   1: 1037.433 ns/op
Iteration   2: 1029.702 ns/op
Iteration   3: 1030.638 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1032.591 ±(99.9%) 76.983 ns/op [Average]
  (min, avg, max) = (1029.702, 1032.591, 1037.433), stdev = 4.220
  CI (99.9%): [955.608, 1109.574] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 82.43% complete, ETA 00:05:06
# Fork: 1 of 1
# Warmup Iteration   1: 11390.109 ns/op
# Warmup Iteration   2: 4837.870 ns/op
# Warmup Iteration   3: 3840.384 ns/op
Iteration   1: 3514.200 ns/op
Iteration   2: 3511.941 ns/op
Iteration   3: 3517.377 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3514.506 ±(99.9%) 49.817 ns/op [Average]
  (min, avg, max) = (3511.941, 3514.506, 3517.377), stdev = 2.731
  CI (99.9%): [3464.689, 3564.323] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 82.50% complete, ETA 00:05:05
# Fork: 1 of 1
# Warmup Iteration   1: 24.813 ns/op
# Warmup Iteration   2: 28.262 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.133 ns/op
Iteration   2: 19.137 ns/op
Iteration   3: 19.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (19.130, 19.134, 19.137), stdev = 0.003
  CI (99.9%): [19.072, 19.195] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 82.57% complete, ETA 00:05:04
# Fork: 1 of 1
# Warmup Iteration   1: 139.935 ns/op
# Warmup Iteration   2: 140.116 ns/op
# Warmup Iteration   3: 95.638 ns/op
Iteration   1: 95.604 ns/op
Iteration   2: 95.615 ns/op
Iteration   3: 95.609 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.610 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (95.604, 95.610, 95.615), stdev = 0.006
  CI (99.9%): [95.504, 95.715] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 82.64% complete, ETA 00:05:03
# Fork: 1 of 1
# Warmup Iteration   1: 562.650 ns/op
# Warmup Iteration   2: 173.956 ns/op
# Warmup Iteration   3: 115.333 ns/op
Iteration   1: 114.964 ns/op
Iteration   2: 114.299 ns/op
Iteration   3: 114.894 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  114.719 ±(99.9%) 6.667 ns/op [Average]
  (min, avg, max) = (114.299, 114.719, 114.964), stdev = 0.365
  CI (99.9%): [108.052, 121.386] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 82.71% complete, ETA 00:05:02
# Fork: 1 of 1
# Warmup Iteration   1: 1132.154 ns/op
# Warmup Iteration   2: 147.149 ns/op
# Warmup Iteration   3: 115.809 ns/op
Iteration   1: 115.927 ns/op
Iteration   2: 115.869 ns/op
Iteration   3: 115.800 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.865 ±(99.9%) 1.166 ns/op [Average]
  (min, avg, max) = (115.800, 115.865, 115.927), stdev = 0.064
  CI (99.9%): [114.700, 117.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 82.78% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 105.629 ns/op
# Warmup Iteration   2: 115.496 ns/op
# Warmup Iteration   3: 74.173 ns/op
Iteration   1: 74.156 ns/op
Iteration   2: 74.147 ns/op
Iteration   3: 74.171 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.158 ±(99.9%) 0.221 ns/op [Average]
  (min, avg, max) = (74.147, 74.158, 74.171), stdev = 0.012
  CI (99.9%): [73.937, 74.379] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 82.85% complete, ETA 00:04:59
# Fork: 1 of 1
# Warmup Iteration   1: 228.771 ns/op
# Warmup Iteration   2: 226.083 ns/op
# Warmup Iteration   3: 156.976 ns/op
Iteration   1: 156.920 ns/op
Iteration   2: 157.042 ns/op
Iteration   3: 156.920 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.961 ±(99.9%) 1.281 ns/op [Average]
  (min, avg, max) = (156.920, 156.961, 157.042), stdev = 0.070
  CI (99.9%): [155.680, 158.242] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 82.92% complete, ETA 00:04:58
# Fork: 1 of 1
# Warmup Iteration   1: 26.563 ns/op
# Warmup Iteration   2: 32.754 ns/op
# Warmup Iteration   3: 20.173 ns/op
Iteration   1: 20.168 ns/op
Iteration   2: 20.166 ns/op
Iteration   3: 20.166 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  20.166 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (20.166, 20.166, 20.168), stdev = 0.001
  CI (99.9%): [20.147, 20.186] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 82.99% complete, ETA 00:04:57
# Fork: 1 of 1
# Warmup Iteration   1: 31527.925 ns/op
# Warmup Iteration   2: 956.109 ns/op
# Warmup Iteration   3: 754.215 ns/op
Iteration   1: 689.877 ns/op
Iteration   2: 687.868 ns/op
Iteration   3: 686.559 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  688.101 ±(99.9%) 30.483 ns/op [Average]
  (min, avg, max) = (686.559, 688.101, 689.877), stdev = 1.671
  CI (99.9%): [657.619, 718.584] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 83.06% complete, ETA 00:04:56
# Fork: 1 of 1
# Warmup Iteration   1: 11469.302 ns/op
# Warmup Iteration   2: 958.928 ns/op
# Warmup Iteration   3: 744.044 ns/op
Iteration   1: 678.603 ns/op
Iteration   2: 679.717 ns/op
Iteration   3: 679.669 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  679.330 ±(99.9%) 11.483 ns/op [Average]
  (min, avg, max) = (678.603, 679.330, 679.717), stdev = 0.629
  CI (99.9%): [667.847, 690.813] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 83.13% complete, ETA 00:04:54
# Fork: 1 of 1
# Warmup Iteration   1: 29906.090 ns/op
# Warmup Iteration   2: 1159.645 ns/op
# Warmup Iteration   3: 839.263 ns/op
Iteration   1: 764.603 ns/op
Iteration   2: 764.685 ns/op
Iteration   3: 764.906 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  764.732 ±(99.9%) 2.855 ns/op [Average]
  (min, avg, max) = (764.603, 764.732, 764.906), stdev = 0.156
  CI (99.9%): [761.877, 767.586] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 83.19% complete, ETA 00:04:53
# Fork: 1 of 1
# Warmup Iteration   1: 1023.567 ns/op
# Warmup Iteration   2: 794.001 ns/op
# Warmup Iteration   3: 564.204 ns/op
Iteration   1: 567.021 ns/op
Iteration   2: 563.782 ns/op
Iteration   3: 565.003 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  565.269 ±(99.9%) 29.838 ns/op [Average]
  (min, avg, max) = (563.782, 565.269, 567.021), stdev = 1.635
  CI (99.9%): [535.431, 595.106] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 83.26% complete, ETA 00:04:52
# Fork: 1 of 1
# Warmup Iteration   1: 2967.286 ns/op
# Warmup Iteration   2: 1547.778 ns/op
# Warmup Iteration   3: 1076.134 ns/op
Iteration   1: 1072.670 ns/op
Iteration   2: 1071.914 ns/op
Iteration   3: 1072.929 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1072.504 ±(99.9%) 9.626 ns/op [Average]
  (min, avg, max) = (1071.914, 1072.504, 1072.929), stdev = 0.528
  CI (99.9%): [1062.878, 1082.130] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 83.33% complete, ETA 00:04:51
# Fork: 1 of 1
# Warmup Iteration   1: 24.415 ns/op
# Warmup Iteration   2: 152.855 ns/op
# Warmup Iteration   3: 19.734 ns/op
Iteration   1: 19.561 ns/op
Iteration   2: 19.524 ns/op
Iteration   3: 19.548 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.544 ±(99.9%) 0.345 ns/op [Average]
  (min, avg, max) = (19.524, 19.544, 19.561), stdev = 0.019
  CI (99.9%): [19.199, 19.889] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 83.40% complete, ETA 00:04:49
# Fork: 1 of 1
# Warmup Iteration   1: 219.458 ns/op
# Warmup Iteration   2: 450.981 ns/op
# Warmup Iteration   3: 138.302 ns/op
Iteration   1: 138.610 ns/op
Iteration   2: 138.326 ns/op
Iteration   3: 138.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  138.354 ±(99.9%) 4.428 ns/op [Average]
  (min, avg, max) = (138.127, 138.354, 138.610), stdev = 0.243
  CI (99.9%): [133.926, 142.782] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 83.47% complete, ETA 00:04:48
# Fork: 1 of 1
# Warmup Iteration   1: 343.484 ns/op
# Warmup Iteration   2: 469.776 ns/op
# Warmup Iteration   3: 156.768 ns/op
Iteration   1: 156.939 ns/op
Iteration   2: 156.678 ns/op
Iteration   3: 156.645 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.754 ±(99.9%) 2.942 ns/op [Average]
  (min, avg, max) = (156.645, 156.754, 156.939), stdev = 0.161
  CI (99.9%): [153.812, 159.696] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 83.54% complete, ETA 00:04:47
# Fork: 1 of 1
# Warmup Iteration   1: 795.526 ns/op
# Warmup Iteration   2: 654.283 ns/op
# Warmup Iteration   3: 210.136 ns/op
Iteration   1: 210.103 ns/op
Iteration   2: 209.960 ns/op
Iteration   3: 210.280 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  210.114 ±(99.9%) 2.926 ns/op [Average]
  (min, avg, max) = (209.960, 210.114, 210.280), stdev = 0.160
  CI (99.9%): [207.188, 213.040] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 83.61% complete, ETA 00:04:46
# Fork: 1 of 1
# Warmup Iteration   1: 105.450 ns/op
# Warmup Iteration   2: 292.416 ns/op
# Warmup Iteration   3: 74.286 ns/op
Iteration   1: 74.385 ns/op
Iteration   2: 74.283 ns/op
Iteration   3: 74.302 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.323 ±(99.9%) 0.996 ns/op [Average]
  (min, avg, max) = (74.283, 74.323, 74.385), stdev = 0.055
  CI (99.9%): [73.327, 75.320] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 83.68% complete, ETA 00:04:45
# Fork: 1 of 1
# Warmup Iteration   1: 243.263 ns/op
# Warmup Iteration   2: 493.344 ns/op
# Warmup Iteration   3: 131.567 ns/op
Iteration   1: 132.168 ns/op
Iteration   2: 131.980 ns/op
Iteration   3: 131.917 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  132.022 ±(99.9%) 2.380 ns/op [Average]
  (min, avg, max) = (131.917, 132.022, 132.168), stdev = 0.130
  CI (99.9%): [129.641, 134.402] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 83.75% complete, ETA 00:04:43
# Fork: 1 of 1
# Warmup Iteration   1: 24.445 ns/op
# Warmup Iteration   2: 96.889 ns/op
# Warmup Iteration   3: 19.300 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.142 ±(99.9%) 0.168 ns/op [Average]
  (min, avg, max) = (19.135, 19.142, 19.152), stdev = 0.009
  CI (99.9%): [18.974, 19.310] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 83.82% complete, ETA 00:04:42
# Fork: 1 of 1
# Warmup Iteration   1: 222.558 ns/op
# Warmup Iteration   2: 431.703 ns/op
# Warmup Iteration   3: 139.248 ns/op
Iteration   1: 139.324 ns/op
Iteration   2: 139.165 ns/op
Iteration   3: 139.435 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.308 ±(99.9%) 2.480 ns/op [Average]
  (min, avg, max) = (139.165, 139.308, 139.435), stdev = 0.136
  CI (99.9%): [136.828, 141.788] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 83.89% complete, ETA 00:04:41
# Fork: 1 of 1
# Warmup Iteration   1: 502.780 ns/op
# Warmup Iteration   2: 518.359 ns/op
# Warmup Iteration   3: 165.219 ns/op
Iteration   1: 164.804 ns/op
Iteration   2: 164.829 ns/op
Iteration   3: 164.825 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  164.819 ±(99.9%) 0.250 ns/op [Average]
  (min, avg, max) = (164.804, 164.819, 164.829), stdev = 0.014
  CI (99.9%): [164.569, 165.070] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 83.96% complete, ETA 00:04:40
# Fork: 1 of 1
# Warmup Iteration   1: 567.172 ns/op
# Warmup Iteration   2: 668.068 ns/op
# Warmup Iteration   3: 220.086 ns/op
Iteration   1: 219.242 ns/op
Iteration   2: 220.213 ns/op
Iteration   3: 219.636 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  219.697 ±(99.9%) 8.907 ns/op [Average]
  (min, avg, max) = (219.242, 219.697, 220.213), stdev = 0.488
  CI (99.9%): [210.790, 228.604] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 84.03% complete, ETA 00:04:39
# Fork: 1 of 1
# Warmup Iteration   1: 104.006 ns/op
# Warmup Iteration   2: 269.919 ns/op
# Warmup Iteration   3: 74.257 ns/op
Iteration   1: 74.333 ns/op
Iteration   2: 74.296 ns/op
Iteration   3: 74.254 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.294 ±(99.9%) 0.722 ns/op [Average]
  (min, avg, max) = (74.254, 74.294, 74.333), stdev = 0.040
  CI (99.9%): [73.572, 75.016] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 84.10% complete, ETA 00:04:37
# Fork: 1 of 1
# Warmup Iteration   1: 242.153 ns/op
# Warmup Iteration   2: 475.408 ns/op
# Warmup Iteration   3: 139.065 ns/op
Iteration   1: 139.559 ns/op
Iteration   2: 139.046 ns/op
Iteration   3: 139.039 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.215 ±(99.9%) 5.437 ns/op [Average]
  (min, avg, max) = (139.039, 139.215, 139.559), stdev = 0.298
  CI (99.9%): [133.778, 144.652] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 84.17% complete, ETA 00:04:36
# Fork: 1 of 1
# Warmup Iteration   1: 23.802 ns/op
# Warmup Iteration   2: 142.889 ns/op
# Warmup Iteration   3: 19.296 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.140 ns/op
Iteration   3: 19.140 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.138 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (19.135, 19.138, 19.140), stdev = 0.002
  CI (99.9%): [19.094, 19.183] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 84.24% complete, ETA 00:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 271.880 ns/op
# Warmup Iteration   2: 457.608 ns/op
# Warmup Iteration   3: 144.752 ns/op
Iteration   1: 144.684 ns/op
Iteration   2: 144.427 ns/op
Iteration   3: 144.434 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  144.515 ±(99.9%) 2.667 ns/op [Average]
  (min, avg, max) = (144.427, 144.515, 144.684), stdev = 0.146
  CI (99.9%): [141.848, 147.181] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 84.31% complete, ETA 00:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 539.649 ns/op
# Warmup Iteration   2: 543.817 ns/op
# Warmup Iteration   3: 176.818 ns/op
Iteration   1: 177.171 ns/op
Iteration   2: 176.855 ns/op
Iteration   3: 177.560 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  177.195 ±(99.9%) 6.439 ns/op [Average]
  (min, avg, max) = (176.855, 177.195, 177.560), stdev = 0.353
  CI (99.9%): [170.756, 183.634] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 84.38% complete, ETA 00:04:33
# Fork: 1 of 1
# Warmup Iteration   1: 604.455 ns/op
# Warmup Iteration   2: 677.176 ns/op
# Warmup Iteration   3: 231.813 ns/op
Iteration   1: 231.967 ns/op
Iteration   2: 231.825 ns/op
Iteration   3: 232.003 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  231.931 ±(99.9%) 1.716 ns/op [Average]
  (min, avg, max) = (231.825, 231.931, 232.003), stdev = 0.094
  CI (99.9%): [230.215, 233.648] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 84.44% complete, ETA 00:04:31
# Fork: 1 of 1
# Warmup Iteration   1: 106.530 ns/op
# Warmup Iteration   2: 255.583 ns/op
# Warmup Iteration   3: 74.295 ns/op
Iteration   1: 74.286 ns/op
Iteration   2: 74.292 ns/op
Iteration   3: 74.261 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.280 ±(99.9%) 0.305 ns/op [Average]
  (min, avg, max) = (74.261, 74.280, 74.292), stdev = 0.017
  CI (99.9%): [73.975, 74.584] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 84.51% complete, ETA 00:04:30
# Fork: 1 of 1
# Warmup Iteration   1: 260.382 ns/op
# Warmup Iteration   2: 558.397 ns/op
# Warmup Iteration   3: 145.924 ns/op
Iteration   1: 146.186 ns/op
Iteration   2: 146.324 ns/op
Iteration   3: 146.209 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.240 ±(99.9%) 1.350 ns/op [Average]
  (min, avg, max) = (146.186, 146.240, 146.324), stdev = 0.074
  CI (99.9%): [144.891, 147.590] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 84.58% complete, ETA 00:04:29
# Fork: 1 of 1
# Warmup Iteration   1: 24.598 ns/op
# Warmup Iteration   2: 26.531 ns/op
# Warmup Iteration   3: 19.291 ns/op
Iteration   1: 19.127 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.158 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.139 ±(99.9%) 0.309 ns/op [Average]
  (min, avg, max) = (19.127, 19.139, 19.158), stdev = 0.017
  CI (99.9%): [18.830, 19.448] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 84.65% complete, ETA 00:04:28
# Fork: 1 of 1
# Warmup Iteration   1: 140.824 ns/op
# Warmup Iteration   2: 140.299 ns/op
# Warmup Iteration   3: 95.750 ns/op
Iteration   1: 95.585 ns/op
Iteration   2: 95.657 ns/op
Iteration   3: 95.600 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  95.614 ±(99.9%) 0.697 ns/op [Average]
  (min, avg, max) = (95.585, 95.614, 95.657), stdev = 0.038
  CI (99.9%): [94.917, 96.311] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 84.72% complete, ETA 00:04:27
# Fork: 1 of 1
# Warmup Iteration   1: 640.670 ns/op
# Warmup Iteration   2: 189.328 ns/op
# Warmup Iteration   3: 115.271 ns/op
Iteration   1: 115.213 ns/op
Iteration   2: 115.229 ns/op
Iteration   3: 115.487 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.310 ±(99.9%) 2.803 ns/op [Average]
  (min, avg, max) = (115.213, 115.310, 115.487), stdev = 0.154
  CI (99.9%): [112.506, 118.113] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 84.79% complete, ETA 00:04:25
# Fork: 1 of 1
# Warmup Iteration   1: 1011.204 ns/op
# Warmup Iteration   2: 187.052 ns/op
# Warmup Iteration   3: 115.944 ns/op
Iteration   1: 115.935 ns/op
Iteration   2: 116.091 ns/op
Iteration   3: 115.916 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  115.980 ±(99.9%) 1.749 ns/op [Average]
  (min, avg, max) = (115.916, 115.980, 116.091), stdev = 0.096
  CI (99.9%): [114.231, 117.729] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 84.86% complete, ETA 00:04:24
# Fork: 1 of 1
# Warmup Iteration   1: 104.209 ns/op
# Warmup Iteration   2: 115.995 ns/op
# Warmup Iteration   3: 74.315 ns/op
Iteration   1: 74.292 ns/op
Iteration   2: 74.307 ns/op
Iteration   3: 74.304 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.301 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (74.292, 74.301, 74.307), stdev = 0.008
  CI (99.9%): [74.161, 74.441] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 84.93% complete, ETA 00:04:23
# Fork: 1 of 1
# Warmup Iteration   1: 222.525 ns/op
# Warmup Iteration   2: 223.601 ns/op
# Warmup Iteration   3: 135.965 ns/op
Iteration   1: 136.033 ns/op
Iteration   2: 135.892 ns/op
Iteration   3: 135.853 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  135.926 ±(99.9%) 1.731 ns/op [Average]
  (min, avg, max) = (135.853, 135.926, 136.033), stdev = 0.095
  CI (99.9%): [134.196, 137.657] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 85.00% complete, ETA 00:04:22
# Fork: 1 of 1
# Warmup Iteration   1: 23.592 ns/op
# Warmup Iteration   2: 26.836 ns/op
# Warmup Iteration   3: 28.126 ns/op
Iteration   1: 19.143 ns/op
Iteration   2: 19.126 ns/op
Iteration   3: 19.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.140 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (19.126, 19.140, 19.152), stdev = 0.013
  CI (99.9%): [18.899, 19.382] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 85.07% complete, ETA 00:04:20
# Fork: 1 of 1
# Warmup Iteration   1: 226.779 ns/op
# Warmup Iteration   2: 182.297 ns/op
# Warmup Iteration   3: 182.397 ns/op
Iteration   1: 137.833 ns/op
Iteration   2: 137.726 ns/op
Iteration   3: 137.778 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.779 ±(99.9%) 0.978 ns/op [Average]
  (min, avg, max) = (137.726, 137.779, 137.833), stdev = 0.054
  CI (99.9%): [136.801, 138.757] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 85.14% complete, ETA 00:04:19
# Fork: 1 of 1
# Warmup Iteration   1: 347.683 ns/op
# Warmup Iteration   2: 230.201 ns/op
# Warmup Iteration   3: 208.870 ns/op
Iteration   1: 157.124 ns/op
Iteration   2: 157.095 ns/op
Iteration   3: 157.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  157.117 ±(99.9%) 0.360 ns/op [Average]
  (min, avg, max) = (157.095, 157.117, 157.132), stdev = 0.020
  CI (99.9%): [156.758, 157.477] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 85.21% complete, ETA 00:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 570.487 ns/op
# Warmup Iteration   2: 299.676 ns/op
# Warmup Iteration   3: 308.809 ns/op
Iteration   1: 210.039 ns/op
Iteration   2: 210.018 ns/op
Iteration   3: 210.383 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  210.147 ±(99.9%) 3.742 ns/op [Average]
  (min, avg, max) = (210.018, 210.147, 210.383), stdev = 0.205
  CI (99.9%): [206.405, 213.889] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 85.28% complete, ETA 00:04:17
# Fork: 1 of 1
# Warmup Iteration   1: 105.637 ns/op
# Warmup Iteration   2: 113.123 ns/op
# Warmup Iteration   3: 111.611 ns/op
Iteration   1: 74.324 ns/op
Iteration   2: 74.304 ns/op
Iteration   3: 74.292 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.306 ±(99.9%) 0.293 ns/op [Average]
  (min, avg, max) = (74.292, 74.306, 74.324), stdev = 0.016
  CI (99.9%): [74.013, 74.600] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 85.35% complete, ETA 00:04:16
# Fork: 1 of 1
# Warmup Iteration   1: 220.917 ns/op
# Warmup Iteration   2: 214.024 ns/op
# Warmup Iteration   3: 200.230 ns/op
Iteration   1: 131.554 ns/op
Iteration   2: 131.637 ns/op
Iteration   3: 131.831 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  131.674 ±(99.9%) 2.594 ns/op [Average]
  (min, avg, max) = (131.554, 131.674, 131.831), stdev = 0.142
  CI (99.9%): [129.080, 134.268] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 85.42% complete, ETA 00:04:14
# Fork: 1 of 1
# Warmup Iteration   1: 24.610 ns/op
# Warmup Iteration   2: 30.048 ns/op
# Warmup Iteration   3: 19.135 ns/op
Iteration   1: 19.131 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.057 ns/op [Average]
  (min, avg, max) = (19.131, 19.134, 19.137), stdev = 0.003
  CI (99.9%): [19.077, 19.192] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 85.49% complete, ETA 00:04:13
# Fork: 1 of 1
# Warmup Iteration   1: 2402.757 ns/op
# Warmup Iteration   2: 1222.964 ns/op
# Warmup Iteration   3: 859.210 ns/op
Iteration   1: 863.839 ns/op
Iteration   2: 866.902 ns/op
Iteration   3: 870.953 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  867.231 ±(99.9%) 65.098 ns/op [Average]
  (min, avg, max) = (863.839, 867.231, 870.953), stdev = 3.568
  CI (99.9%): [802.134, 932.329] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 85.56% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 28693.846 ns/op
# Warmup Iteration   2: 1234.625 ns/op
# Warmup Iteration   3: 945.301 ns/op
Iteration   1: 859.808 ns/op
Iteration   2: 860.189 ns/op
Iteration   3: 859.402 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  859.799 ±(99.9%) 7.176 ns/op [Average]
  (min, avg, max) = (859.402, 859.799, 860.189), stdev = 0.393
  CI (99.9%): [852.623, 866.976] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 85.63% complete, ETA 00:04:11
# Fork: 1 of 1
# Warmup Iteration   1: 8163.747 ns/op
# Warmup Iteration   2: 1340.444 ns/op
# Warmup Iteration   3: 930.757 ns/op
Iteration   1: 932.075 ns/op
Iteration   2: 942.050 ns/op
Iteration   3: 942.978 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  939.034 ±(99.9%) 110.280 ns/op [Average]
  (min, avg, max) = (932.075, 939.034, 942.978), stdev = 6.045
  CI (99.9%): [828.754, 1049.314] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 85.69% complete, ETA 00:04:10
# Fork: 1 of 1
# Warmup Iteration   1: 1835.867 ns/op
# Warmup Iteration   2: 1384.269 ns/op
# Warmup Iteration   3: 948.469 ns/op
Iteration   1: 947.955 ns/op
Iteration   2: 950.444 ns/op
Iteration   3: 947.773 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  948.724 ±(99.9%) 27.222 ns/op [Average]
  (min, avg, max) = (947.773, 948.724, 950.444), stdev = 1.492
  CI (99.9%): [921.502, 975.946] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 85.76% complete, ETA 00:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 10310.787 ns/op
# Warmup Iteration   2: 5696.069 ns/op
# Warmup Iteration   3: 3964.054 ns/op
Iteration   1: 3961.409 ns/op
Iteration   2: 3962.591 ns/op
Iteration   3: 3962.652 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3962.217 ±(99.9%) 12.785 ns/op [Average]
  (min, avg, max) = (3961.409, 3962.217, 3962.652), stdev = 0.701
  CI (99.9%): [3949.432, 3975.002] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 85.83% complete, ETA 00:04:07
# Fork: 1 of 1
# Warmup Iteration   1: 25.022 ns/op
# Warmup Iteration   2: 30.005 ns/op
# Warmup Iteration   3: 19.142 ns/op
Iteration   1: 19.142 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (19.128, 19.135, 19.142), stdev = 0.007
  CI (99.9%): [19.006, 19.264] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 85.90% complete, ETA 00:04:06
# Fork: 1 of 1
# Warmup Iteration   1: 1751.005 ns/op
# Warmup Iteration   2: 1011.287 ns/op
# Warmup Iteration   3: 703.501 ns/op
Iteration   1: 703.511 ns/op
Iteration   2: 705.410 ns/op
Iteration   3: 703.505 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  704.142 ±(99.9%) 20.032 ns/op [Average]
  (min, avg, max) = (703.505, 704.142, 705.410), stdev = 1.098
  CI (99.9%): [684.110, 724.174] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 85.97% complete, ETA 00:04:05
# Fork: 1 of 1
# Warmup Iteration   1: 12790.056 ns/op
# Warmup Iteration   2: 1285.919 ns/op
# Warmup Iteration   3: 1034.217 ns/op
Iteration   1: 942.890 ns/op
Iteration   2: 942.338 ns/op
Iteration   3: 942.073 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  942.434 ±(99.9%) 7.603 ns/op [Average]
  (min, avg, max) = (942.073, 942.434, 942.890), stdev = 0.417
  CI (99.9%): [934.831, 950.037] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 86.04% complete, ETA 00:04:03
# Fork: 1 of 1
# Warmup Iteration   1: 11020.389 ns/op
# Warmup Iteration   2: 1334.941 ns/op
# Warmup Iteration   3: 1094.229 ns/op
Iteration   1: 1000.442 ns/op
Iteration   2: 1000.072 ns/op
Iteration   3: 1000.537 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1000.350 ±(99.9%) 4.485 ns/op [Average]
  (min, avg, max) = (1000.072, 1000.350, 1000.537), stdev = 0.246
  CI (99.9%): [995.866, 1004.835] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 86.11% complete, ETA 00:04:02
# Fork: 1 of 1
# Warmup Iteration   1: 1433.231 ns/op
# Warmup Iteration   2: 1286.048 ns/op
# Warmup Iteration   3: 883.870 ns/op
Iteration   1: 883.419 ns/op
Iteration   2: 883.654 ns/op
Iteration   3: 883.458 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  883.510 ±(99.9%) 2.295 ns/op [Average]
  (min, avg, max) = (883.419, 883.510, 883.654), stdev = 0.126
  CI (99.9%): [881.216, 885.805] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 86.18% complete, ETA 00:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 11186.516 ns/op
# Warmup Iteration   2: 4983.724 ns/op
# Warmup Iteration   3: 3523.428 ns/op
Iteration   1: 3520.672 ns/op
Iteration   2: 3510.949 ns/op
Iteration   3: 3511.373 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3514.332 ±(99.9%) 100.249 ns/op [Average]
  (min, avg, max) = (3510.949, 3514.332, 3520.672), stdev = 5.495
  CI (99.9%): [3414.082, 3614.581] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 86.25% complete, ETA 00:04:00
# Fork: 1 of 1
# Warmup Iteration   1: 24.281 ns/op
# Warmup Iteration   2: 27.932 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.147 ns/op
Iteration   2: 19.139 ns/op
Iteration   3: 19.129 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.138 ±(99.9%) 0.164 ns/op [Average]
  (min, avg, max) = (19.129, 19.138, 19.147), stdev = 0.009
  CI (99.9%): [18.974, 19.303] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 86.32% complete, ETA 00:03:59
# Fork: 1 of 1
# Warmup Iteration   1: 8765.397 ns/op
# Warmup Iteration   2: 1052.574 ns/op
# Warmup Iteration   3: 799.218 ns/op
Iteration   1: 793.434 ns/op
Iteration   2: 795.076 ns/op
Iteration   3: 795.503 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  794.671 ±(99.9%) 19.931 ns/op [Average]
  (min, avg, max) = (793.434, 794.671, 795.503), stdev = 1.093
  CI (99.9%): [774.739, 814.602] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 86.39% complete, ETA 00:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 48821.301 ns/op
# Warmup Iteration   2: 1943.964 ns/op
# Warmup Iteration   3: 1139.912 ns/op
Iteration   1: 948.993 ns/op
Iteration   2: 954.652 ns/op
Iteration   3: 949.298 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  950.981 ±(99.9%) 58.060 ns/op [Average]
  (min, avg, max) = (948.993, 950.981, 954.652), stdev = 3.182
  CI (99.9%): [892.921, 1009.041] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 86.46% complete, ETA 00:03:56
# Fork: 1 of 1
# Warmup Iteration   1: 14615.851 ns/op
# Warmup Iteration   2: 1254.458 ns/op
# Warmup Iteration   3: 1024.955 ns/op
Iteration   1: 947.150 ns/op
Iteration   2: 946.260 ns/op
Iteration   3: 945.486 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  946.299 ±(99.9%) 15.191 ns/op [Average]
  (min, avg, max) = (945.486, 946.299, 947.150), stdev = 0.833
  CI (99.9%): [931.108, 961.489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 86.53% complete, ETA 00:03:55
# Fork: 1 of 1
# Warmup Iteration   1: 1972.068 ns/op
# Warmup Iteration   2: 1475.259 ns/op
# Warmup Iteration   3: 1018.991 ns/op
Iteration   1: 1017.343 ns/op
Iteration   2: 1026.333 ns/op
Iteration   3: 1018.405 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1020.694 ±(99.9%) 89.620 ns/op [Average]
  (min, avg, max) = (1017.343, 1020.694, 1026.333), stdev = 4.912
  CI (99.9%): [931.074, 1110.313] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 86.60% complete, ETA 00:03:54
# Fork: 1 of 1
# Warmup Iteration   1: 11192.154 ns/op
# Warmup Iteration   2: 5090.684 ns/op
# Warmup Iteration   3: 3542.149 ns/op
Iteration   1: 3546.667 ns/op
Iteration   2: 3547.989 ns/op
Iteration   3: 3546.850 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3547.169 ±(99.9%) 13.073 ns/op [Average]
  (min, avg, max) = (3546.667, 3547.169, 3547.989), stdev = 0.717
  CI (99.9%): [3534.096, 3560.242] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 86.67% complete, ETA 00:03:53
# Fork: 1 of 1
# Warmup Iteration   1: 24.757 ns/op
# Warmup Iteration   2: 30.282 ns/op
# Warmup Iteration   3: 19.140 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.129 ns/op
Iteration   3: 19.142 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (19.129, 19.136, 19.142), stdev = 0.007
  CI (99.9%): [19.011, 19.261] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 86.74% complete, ETA 00:03:51
# Fork: 1 of 1
# Warmup Iteration   1: 895.645 ns/op
# Warmup Iteration   2: 498.440 ns/op
# Warmup Iteration   3: 385.186 ns/op
Iteration   1: 391.658 ns/op
Iteration   2: 384.902 ns/op
Iteration   3: 392.863 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  389.808 ±(99.9%) 78.289 ns/op [Average]
  (min, avg, max) = (384.902, 389.808, 392.863), stdev = 4.291
  CI (99.9%): [311.518, 468.097] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 86.81% complete, ETA 00:03:50
# Fork: 1 of 1
# Warmup Iteration   1: 34930.112 ns/op
# Warmup Iteration   2: 1026.349 ns/op
# Warmup Iteration   3: 756.065 ns/op
Iteration   1: 702.195 ns/op
Iteration   2: 701.987 ns/op
Iteration   3: 701.902 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  702.028 ±(99.9%) 2.748 ns/op [Average]
  (min, avg, max) = (701.902, 702.028, 702.195), stdev = 0.151
  CI (99.9%): [699.280, 704.776] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 86.88% complete, ETA 00:03:49
# Fork: 1 of 1
# Warmup Iteration   1: 20669.236 ns/op
# Warmup Iteration   2: 985.743 ns/op
# Warmup Iteration   3: 803.119 ns/op
Iteration   1: 725.757 ns/op
Iteration   2: 725.915 ns/op
Iteration   3: 725.699 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  725.790 ±(99.9%) 2.039 ns/op [Average]
  (min, avg, max) = (725.699, 725.790, 725.915), stdev = 0.112
  CI (99.9%): [723.751, 727.829] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 86.94% complete, ETA 00:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 1114.737 ns/op
# Warmup Iteration   2: 973.992 ns/op
# Warmup Iteration   3: 703.016 ns/op
Iteration   1: 701.921 ns/op
Iteration   2: 701.896 ns/op
Iteration   3: 701.949 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  701.922 ±(99.9%) 0.485 ns/op [Average]
  (min, avg, max) = (701.896, 701.922, 701.949), stdev = 0.027
  CI (99.9%): [701.437, 702.407] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 87.01% complete, ETA 00:03:46
# Fork: 1 of 1
# Warmup Iteration   1: 11434.284 ns/op
# Warmup Iteration   2: 5513.900 ns/op
# Warmup Iteration   3: 4166.890 ns/op
Iteration   1: 3843.476 ns/op
Iteration   2: 3842.060 ns/op
Iteration   3: 3843.796 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3843.111 ±(99.9%) 16.860 ns/op [Average]
  (min, avg, max) = (3842.060, 3843.111, 3843.796), stdev = 0.924
  CI (99.9%): [3826.251, 3859.970] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 87.08% complete, ETA 00:03:45
# Fork: 1 of 1
# Warmup Iteration   1: 23.837 ns/op
# Warmup Iteration   2: 28.382 ns/op
# Warmup Iteration   3: 19.136 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.138 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.038 ns/op [Average]
  (min, avg, max) = (19.134, 19.136, 19.138), stdev = 0.002
  CI (99.9%): [19.098, 19.175] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 87.15% complete, ETA 00:03:44
# Fork: 1 of 1
# Warmup Iteration   1: 2193.626 ns/op
# Warmup Iteration   2: 752.740 ns/op
# Warmup Iteration   3: 556.724 ns/op
Iteration   1: 558.179 ns/op
Iteration   2: 557.280 ns/op
Iteration   3: 557.238 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  557.565 ±(99.9%) 9.698 ns/op [Average]
  (min, avg, max) = (557.238, 557.565, 558.179), stdev = 0.532
  CI (99.9%): [547.868, 567.263] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 87.22% complete, ETA 00:03:43
# Fork: 1 of 1
# Warmup Iteration   1: 11004.649 ns/op
# Warmup Iteration   2: 769.411 ns/op
# Warmup Iteration   3: 542.394 ns/op
Iteration   1: 543.683 ns/op
Iteration   2: 542.181 ns/op
Iteration   3: 542.405 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  542.756 ±(99.9%) 14.781 ns/op [Average]
  (min, avg, max) = (542.181, 542.756, 543.683), stdev = 0.810
  CI (99.9%): [527.976, 557.537] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 87.29% complete, ETA 00:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 27861.486 ns/op
# Warmup Iteration   2: 821.456 ns/op
# Warmup Iteration   3: 672.949 ns/op
Iteration   1: 614.361 ns/op
Iteration   2: 615.228 ns/op
Iteration   3: 618.634 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  616.074 ±(99.9%) 41.204 ns/op [Average]
  (min, avg, max) = (614.361, 616.074, 618.634), stdev = 2.259
  CI (99.9%): [574.870, 657.278] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 87.36% complete, ETA 00:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 603.714 ns/op
# Warmup Iteration   2: 501.406 ns/op
# Warmup Iteration   3: 336.973 ns/op
Iteration   1: 338.560 ns/op
Iteration   2: 335.773 ns/op
Iteration   3: 337.481 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  337.271 ±(99.9%) 25.631 ns/op [Average]
  (min, avg, max) = (335.773, 337.271, 338.560), stdev = 1.405
  CI (99.9%): [311.640, 362.902] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 16, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 87.43% complete, ETA 00:03:39
# Fork: 1 of 1
# Warmup Iteration   1: 12969.341 ns/op
# Warmup Iteration   2: 5778.345 ns/op
# Warmup Iteration   3: 4929.273 ns/op
Iteration   1: 4523.794 ns/op
Iteration   2: 4521.594 ns/op
Iteration   3: 4530.195 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4525.194 ±(99.9%) 81.523 ns/op [Average]
  (min, avg, max) = (4521.594, 4525.194, 4530.195), stdev = 4.469
  CI (99.9%): [4443.671, 4606.717] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 87.50% complete, ETA 00:03:38
# Fork: 1 of 1
# Warmup Iteration   1: 24.848 ns/op
# Warmup Iteration   2: 30.523 ns/op
# Warmup Iteration   3: 19.137 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.137 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (19.134, 19.136, 19.137), stdev = 0.001
  CI (99.9%): [19.111, 19.160] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 87.57% complete, ETA 00:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 4370.366 ns/op
# Warmup Iteration   2: 1314.531 ns/op
# Warmup Iteration   3: 998.265 ns/op
Iteration   1: 998.648 ns/op
Iteration   2: 998.593 ns/op
Iteration   3: 997.978 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  998.407 ±(99.9%) 6.783 ns/op [Average]
  (min, avg, max) = (997.978, 998.407, 998.648), stdev = 0.372
  CI (99.9%): [991.623, 1005.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 87.64% complete, ETA 00:03:36
# Fork: 1 of 1
# Warmup Iteration   1: 7721.423 ns/op
# Warmup Iteration   2: 1586.928 ns/op
# Warmup Iteration   3: 1089.555 ns/op
Iteration   1: 1089.180 ns/op
Iteration   2: 1089.266 ns/op
Iteration   3: 1089.224 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1089.223 ±(99.9%) 0.785 ns/op [Average]
  (min, avg, max) = (1089.180, 1089.223, 1089.266), stdev = 0.043
  CI (99.9%): [1088.439, 1090.008] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 87.71% complete, ETA 00:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 19920.639 ns/op
# Warmup Iteration   2: 1568.890 ns/op
# Warmup Iteration   3: 1211.536 ns/op
Iteration   1: 1095.415 ns/op
Iteration   2: 1095.277 ns/op
Iteration   3: 1094.858 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1095.183 ±(99.9%) 5.295 ns/op [Average]
  (min, avg, max) = (1094.858, 1095.183, 1095.415), stdev = 0.290
  CI (99.9%): [1089.889, 1100.478] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 87.78% complete, ETA 00:03:33
# Fork: 1 of 1
# Warmup Iteration   1: 1988.438 ns/op
# Warmup Iteration   2: 1383.484 ns/op
# Warmup Iteration   3: 1017.407 ns/op
Iteration   1: 1017.534 ns/op
Iteration   2: 1017.879 ns/op
Iteration   3: 1034.376 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1023.263 ±(99.9%) 175.610 ns/op [Average]
  (min, avg, max) = (1017.534, 1023.263, 1034.376), stdev = 9.626
  CI (99.9%): [847.653, 1198.873] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 87.85% complete, ETA 00:03:32
# Fork: 1 of 1
# Warmup Iteration   1: 11087.325 ns/op
# Warmup Iteration   2: 4836.523 ns/op
# Warmup Iteration   3: 3949.795 ns/op
Iteration   1: 3623.211 ns/op
Iteration   2: 3629.075 ns/op
Iteration   3: 3619.453 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3623.913 ±(99.9%) 88.473 ns/op [Average]
  (min, avg, max) = (3619.453, 3623.913, 3629.075), stdev = 4.849
  CI (99.9%): [3535.440, 3712.386] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 87.92% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 24.266 ns/op
# Warmup Iteration   2: 25.808 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.142 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.128 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (19.128, 19.136, 19.142), stdev = 0.007
  CI (99.9%): [19.000, 19.272] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 87.99% complete, ETA 00:03:29
# Fork: 1 of 1
# Warmup Iteration   1: 2394.858 ns/op
# Warmup Iteration   2: 1045.641 ns/op
# Warmup Iteration   3: 784.664 ns/op
Iteration   1: 784.678 ns/op
Iteration   2: 784.662 ns/op
Iteration   3: 784.612 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  784.651 ±(99.9%) 0.628 ns/op [Average]
  (min, avg, max) = (784.612, 784.651, 784.678), stdev = 0.034
  CI (99.9%): [784.023, 785.279] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 88.06% complete, ETA 00:03:28
# Fork: 1 of 1
# Warmup Iteration   1: 7567.610 ns/op
# Warmup Iteration   2: 1189.559 ns/op
# Warmup Iteration   3: 851.432 ns/op
Iteration   1: 851.425 ns/op
Iteration   2: 850.953 ns/op
Iteration   3: 851.299 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  851.226 ±(99.9%) 4.463 ns/op [Average]
  (min, avg, max) = (850.953, 851.226, 851.425), stdev = 0.245
  CI (99.9%): [846.762, 855.689] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 88.13% complete, ETA 00:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 42462.366 ns/op
# Warmup Iteration   2: 1148.128 ns/op
# Warmup Iteration   3: 997.352 ns/op
Iteration   1: 838.712 ns/op
Iteration   2: 838.161 ns/op
Iteration   3: 838.678 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  838.517 ±(99.9%) 5.637 ns/op [Average]
  (min, avg, max) = (838.161, 838.517, 838.712), stdev = 0.309
  CI (99.9%): [832.880, 844.154] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 88.19% complete, ETA 00:03:26
# Fork: 1 of 1
# Warmup Iteration   1: 940.242 ns/op
# Warmup Iteration   2: 862.375 ns/op
# Warmup Iteration   3: 570.927 ns/op
Iteration   1: 570.720 ns/op
Iteration   2: 571.170 ns/op
Iteration   3: 570.832 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  570.907 ±(99.9%) 4.283 ns/op [Average]
  (min, avg, max) = (570.720, 570.907, 571.170), stdev = 0.235
  CI (99.9%): [566.625, 575.190] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 88.26% complete, ETA 00:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 562.367 ns/op
# Warmup Iteration   2: 528.319 ns/op
# Warmup Iteration   3: 343.902 ns/op
Iteration   1: 343.860 ns/op
Iteration   2: 344.094 ns/op
Iteration   3: 343.461 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  343.805 ±(99.9%) 5.844 ns/op [Average]
  (min, avg, max) = (343.461, 343.805, 344.094), stdev = 0.320
  CI (99.9%): [337.961, 349.649] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 88.33% complete, ETA 00:03:23
# Fork: 1 of 1
# Warmup Iteration   1: 24.143 ns/op
# Warmup Iteration   2: 26.628 ns/op
# Warmup Iteration   3: 19.142 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.145 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.138 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (19.135, 19.138, 19.145), stdev = 0.006
  CI (99.9%): [19.038, 19.239] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 88.40% complete, ETA 00:03:22
# Fork: 1 of 1
# Warmup Iteration   1: 17135.597 ns/op
# Warmup Iteration   2: 1229.371 ns/op
# Warmup Iteration   3: 1033.258 ns/op
Iteration   1: 956.834 ns/op
Iteration   2: 956.414 ns/op
Iteration   3: 958.604 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  957.284 ±(99.9%) 21.202 ns/op [Average]
  (min, avg, max) = (956.414, 957.284, 958.604), stdev = 1.162
  CI (99.9%): [936.082, 978.486] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 88.47% complete, ETA 00:03:21
# Fork: 1 of 1
# Warmup Iteration   1: 33633.000 ns/op
# Warmup Iteration   2: 1546.431 ns/op
# Warmup Iteration   3: 1117.070 ns/op
Iteration   1: 1012.569 ns/op
Iteration   2: 1015.009 ns/op
Iteration   3: 1018.316 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1015.298 ±(99.9%) 52.620 ns/op [Average]
  (min, avg, max) = (1012.569, 1015.298, 1018.316), stdev = 2.884
  CI (99.9%): [962.678, 1067.918] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 88.54% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 33066.142 ns/op
# Warmup Iteration   2: 1346.253 ns/op
# Warmup Iteration   3: 1181.824 ns/op
Iteration   1: 1006.905 ns/op
Iteration   2: 1006.368 ns/op
Iteration   3: 1006.889 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1006.721 ±(99.9%) 5.573 ns/op [Average]
  (min, avg, max) = (1006.368, 1006.721, 1006.905), stdev = 0.305
  CI (99.9%): [1001.148, 1012.294] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 88.61% complete, ETA 00:03:19
# Fork: 1 of 1
# Warmup Iteration   1: 1656.503 ns/op
# Warmup Iteration   2: 1563.722 ns/op
# Warmup Iteration   3: 1031.921 ns/op
Iteration   1: 1027.792 ns/op
Iteration   2: 1034.456 ns/op
Iteration   3: 1037.473 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1033.240 ±(99.9%) 90.373 ns/op [Average]
  (min, avg, max) = (1027.792, 1033.240, 1037.473), stdev = 4.954
  CI (99.9%): [942.867, 1123.613] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 88.68% complete, ETA 00:03:17
# Fork: 1 of 1
# Warmup Iteration   1: 9451.743 ns/op
# Warmup Iteration   2: 5216.572 ns/op
# Warmup Iteration   3: 3640.105 ns/op
Iteration   1: 3649.924 ns/op
Iteration   2: 3648.390 ns/op
Iteration   3: 3637.961 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3645.425 ±(99.9%) 118.757 ns/op [Average]
  (min, avg, max) = (3637.961, 3645.425, 3649.924), stdev = 6.509
  CI (99.9%): [3526.669, 3764.182] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 88.75% complete, ETA 00:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 23.124 ns/op
# Warmup Iteration   2: 27.168 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.131 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.122 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.132 ns/op [Average]
  (min, avg, max) = (19.122, 19.130, 19.136), stdev = 0.007
  CI (99.9%): [18.997, 19.262] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 88.82% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 243.151 ns/op
# Warmup Iteration   2: 185.740 ns/op
# Warmup Iteration   3: 137.862 ns/op
Iteration   1: 137.761 ns/op
Iteration   2: 137.874 ns/op
Iteration   3: 137.975 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.870 ±(99.9%) 1.950 ns/op [Average]
  (min, avg, max) = (137.761, 137.870, 137.975), stdev = 0.107
  CI (99.9%): [135.919, 139.820] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 88.89% complete, ETA 00:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 369.054 ns/op
# Warmup Iteration   2: 220.784 ns/op
# Warmup Iteration   3: 156.541 ns/op
Iteration   1: 156.513 ns/op
Iteration   2: 156.468 ns/op
Iteration   3: 156.423 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  156.468 ±(99.9%) 0.818 ns/op [Average]
  (min, avg, max) = (156.423, 156.468, 156.513), stdev = 0.045
  CI (99.9%): [155.650, 157.286] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 88.96% complete, ETA 00:03:13
# Fork: 1 of 1
# Warmup Iteration   1: 487.759 ns/op
# Warmup Iteration   2: 308.801 ns/op
# Warmup Iteration   3: 205.084 ns/op
Iteration   1: 204.763 ns/op
Iteration   2: 204.659 ns/op
Iteration   3: 204.963 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  204.795 ±(99.9%) 2.813 ns/op [Average]
  (min, avg, max) = (204.659, 204.795, 204.963), stdev = 0.154
  CI (99.9%): [201.982, 207.608] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 89.03% complete, ETA 00:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 106.098 ns/op
# Warmup Iteration   2: 115.077 ns/op
# Warmup Iteration   3: 74.160 ns/op
Iteration   1: 74.151 ns/op
Iteration   2: 74.158 ns/op
Iteration   3: 74.196 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.168 ±(99.9%) 0.438 ns/op [Average]
  (min, avg, max) = (74.151, 74.168, 74.196), stdev = 0.024
  CI (99.9%): [73.730, 74.607] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 89.10% complete, ETA 00:03:10
# Fork: 1 of 1
# Warmup Iteration   1: 194.824 ns/op
# Warmup Iteration   2: 197.790 ns/op
# Warmup Iteration   3: 137.114 ns/op
Iteration   1: 137.053 ns/op
Iteration   2: 137.067 ns/op
Iteration   3: 137.041 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  137.053 ±(99.9%) 0.237 ns/op [Average]
  (min, avg, max) = (137.041, 137.053, 137.067), stdev = 0.013
  CI (99.9%): [136.816, 137.291] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 89.17% complete, ETA 00:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 23.270 ns/op
# Warmup Iteration   2: 26.178 ns/op
# Warmup Iteration   3: 19.727 ns/op
Iteration   1: 19.794 ns/op
Iteration   2: 19.738 ns/op
Iteration   3: 19.819 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.784 ±(99.9%) 0.764 ns/op [Average]
  (min, avg, max) = (19.738, 19.784, 19.819), stdev = 0.042
  CI (99.9%): [19.020, 20.548] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 89.24% complete, ETA 00:03:08
# Fork: 1 of 1
# Warmup Iteration   1: 1067.943 ns/op
# Warmup Iteration   2: 508.404 ns/op
# Warmup Iteration   3: 348.475 ns/op
Iteration   1: 348.840 ns/op
Iteration   2: 348.937 ns/op
Iteration   3: 349.510 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  349.096 ±(99.9%) 6.608 ns/op [Average]
  (min, avg, max) = (348.840, 349.096, 349.510), stdev = 0.362
  CI (99.9%): [342.488, 355.704] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 89.31% complete, ETA 00:03:06
# Fork: 1 of 1
# Warmup Iteration   1: 18951.571 ns/op
# Warmup Iteration   2: 524.255 ns/op
# Warmup Iteration   3: 343.020 ns/op
Iteration   1: 311.128 ns/op
Iteration   2: 311.038 ns/op
Iteration   3: 310.842 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  311.003 ±(99.9%) 2.661 ns/op [Average]
  (min, avg, max) = (310.842, 311.003, 311.128), stdev = 0.146
  CI (99.9%): [308.341, 313.664] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 89.38% complete, ETA 00:03:05
# Fork: 1 of 1
# Warmup Iteration   1: 25790.007 ns/op
# Warmup Iteration   2: 502.655 ns/op
# Warmup Iteration   3: 411.358 ns/op
Iteration   1: 369.819 ns/op
Iteration   2: 370.630 ns/op
Iteration   3: 371.738 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  370.729 ±(99.9%) 17.578 ns/op [Average]
  (min, avg, max) = (369.819, 370.729, 371.738), stdev = 0.963
  CI (99.9%): [353.151, 388.307] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 89.44% complete, ETA 00:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 281.282 ns/op
# Warmup Iteration   2: 261.523 ns/op
# Warmup Iteration   3: 188.155 ns/op
Iteration   1: 188.037 ns/op
Iteration   2: 189.187 ns/op
Iteration   3: 188.997 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  188.740 ±(99.9%) 11.247 ns/op [Average]
  (min, avg, max) = (188.037, 188.740, 189.187), stdev = 0.616
  CI (99.9%): [177.494, 199.987] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = IDENT_____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 89.51% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 1352.101 ns/op
# Warmup Iteration   2: 844.538 ns/op
# Warmup Iteration   3: 579.885 ns/op
Iteration   1: 577.806 ns/op
Iteration   2: 577.376 ns/op
Iteration   3: 577.787 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  577.656 ±(99.9%) 4.426 ns/op [Average]
  (min, avg, max) = (577.376, 577.656, 577.806), stdev = 0.243
  CI (99.9%): [573.230, 582.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 89.58% complete, ETA 00:03:02
# Fork: 1 of 1
# Warmup Iteration   1: 23.013 ns/op
# Warmup Iteration   2: 25.941 ns/op
# Warmup Iteration   3: 19.138 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (19.127, 19.130, 19.132), stdev = 0.003
  CI (99.9%): [19.083, 19.178] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 89.65% complete, ETA 00:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 2157.944 ns/op
# Warmup Iteration   2: 1278.188 ns/op
# Warmup Iteration   3: 901.933 ns/op
Iteration   1: 902.197 ns/op
Iteration   2: 901.953 ns/op
Iteration   3: 913.827 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  905.992 ±(99.9%) 123.803 ns/op [Average]
  (min, avg, max) = (901.953, 905.992, 913.827), stdev = 6.786
  CI (99.9%): [782.189, 1029.796] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 89.72% complete, ETA 00:02:59
# Fork: 1 of 1
# Warmup Iteration   1: 10380.209 ns/op
# Warmup Iteration   2: 1228.959 ns/op
# Warmup Iteration   3: 921.846 ns/op
Iteration   1: 920.894 ns/op
Iteration   2: 921.102 ns/op
Iteration   3: 921.355 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  921.117 ±(99.9%) 4.213 ns/op [Average]
  (min, avg, max) = (920.894, 921.117, 921.355), stdev = 0.231
  CI (99.9%): [916.904, 925.330] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 89.79% complete, ETA 00:02:58
# Fork: 1 of 1
# Warmup Iteration   1: 7691.335 ns/op
# Warmup Iteration   2: 1311.060 ns/op
# Warmup Iteration   3: 916.475 ns/op
Iteration   1: 916.152 ns/op
Iteration   2: 916.568 ns/op
Iteration   3: 916.086 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  916.269 ±(99.9%) 4.770 ns/op [Average]
  (min, avg, max) = (916.086, 916.269, 916.568), stdev = 0.261
  CI (99.9%): [911.499, 921.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 89.86% complete, ETA 00:02:57
# Fork: 1 of 1
# Warmup Iteration   1: 1846.594 ns/op
# Warmup Iteration   2: 1514.100 ns/op
# Warmup Iteration   3: 1042.037 ns/op
Iteration   1: 1045.951 ns/op
Iteration   2: 1042.525 ns/op
Iteration   3: 1039.458 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1042.644 ±(99.9%) 59.263 ns/op [Average]
  (min, avg, max) = (1039.458, 1042.644, 1045.951), stdev = 3.248
  CI (99.9%): [983.382, 1101.907] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 89.93% complete, ETA 00:02:56
# Fork: 1 of 1
# Warmup Iteration   1: 9881.803 ns/op
# Warmup Iteration   2: 4794.671 ns/op
# Warmup Iteration   3: 3542.602 ns/op
Iteration   1: 3541.719 ns/op
Iteration   2: 3540.652 ns/op
Iteration   3: 3538.480 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3540.283 ±(99.9%) 30.110 ns/op [Average]
  (min, avg, max) = (3538.480, 3540.283, 3541.719), stdev = 1.650
  CI (99.9%): [3510.174, 3570.393] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 90.00% complete, ETA 00:02:54
# Fork: 1 of 1
# Warmup Iteration   1: 24.306 ns/op
# Warmup Iteration   2: 25.672 ns/op
# Warmup Iteration   3: 19.134 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.130 ns/op
Iteration   3: 19.134 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.132 ±(99.9%) 0.035 ns/op [Average]
  (min, avg, max) = (19.130, 19.132, 19.134), stdev = 0.002
  CI (99.9%): [19.097, 19.167] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 90.07% complete, ETA 00:02:53
# Fork: 1 of 1
# Warmup Iteration   1: 1524.153 ns/op
# Warmup Iteration   2: 931.143 ns/op
# Warmup Iteration   3: 654.220 ns/op
Iteration   1: 663.209 ns/op
Iteration   2: 654.325 ns/op
Iteration   3: 654.271 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  657.268 ±(99.9%) 93.861 ns/op [Average]
  (min, avg, max) = (654.271, 657.268, 663.209), stdev = 5.145
  CI (99.9%): [563.407, 751.129] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 90.14% complete, ETA 00:02:52
# Fork: 1 of 1
# Warmup Iteration   1: 38836.692 ns/op
# Warmup Iteration   2: 1294.917 ns/op
# Warmup Iteration   3: 990.654 ns/op
Iteration   1: 842.957 ns/op
Iteration   2: 842.961 ns/op
Iteration   3: 842.331 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  842.750 ±(99.9%) 6.619 ns/op [Average]
  (min, avg, max) = (842.331, 842.750, 842.961), stdev = 0.363
  CI (99.9%): [836.130, 849.369] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 90.21% complete, ETA 00:02:51
# Fork: 1 of 1
# Warmup Iteration   1: 31618.284 ns/op
# Warmup Iteration   2: 1233.295 ns/op
# Warmup Iteration   3: 903.719 ns/op
Iteration   1: 830.762 ns/op
Iteration   2: 828.579 ns/op
Iteration   3: 828.955 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  829.432 ±(99.9%) 21.290 ns/op [Average]
  (min, avg, max) = (828.579, 829.432, 830.762), stdev = 1.167
  CI (99.9%): [808.141, 850.722] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 90.28% complete, ETA 00:02:49
# Fork: 1 of 1
# Warmup Iteration   1: 1890.721 ns/op
# Warmup Iteration   2: 1592.293 ns/op
# Warmup Iteration   3: 1182.937 ns/op
Iteration   1: 1183.629 ns/op
Iteration   2: 1197.222 ns/op
Iteration   3: 1178.354 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1186.402 ±(99.9%) 177.598 ns/op [Average]
  (min, avg, max) = (1178.354, 1186.402, 1197.222), stdev = 9.735
  CI (99.9%): [1008.804, 1363.999] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 90.35% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 893.492 ns/op
# Warmup Iteration   2: 594.290 ns/op
# Warmup Iteration   3: 435.618 ns/op
Iteration   1: 435.966 ns/op
Iteration   2: 435.868 ns/op
Iteration   3: 435.613 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  435.815 ±(99.9%) 3.325 ns/op [Average]
  (min, avg, max) = (435.613, 435.815, 435.966), stdev = 0.182
  CI (99.9%): [432.491, 439.140] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 90.42% complete, ETA 00:02:47
# Fork: 1 of 1
# Warmup Iteration   1: 24.239 ns/op
# Warmup Iteration   2: 27.308 ns/op
# Warmup Iteration   3: 19.730 ns/op
Iteration   1: 19.795 ns/op
Iteration   2: 19.731 ns/op
Iteration   3: 19.818 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.781 ±(99.9%) 0.824 ns/op [Average]
  (min, avg, max) = (19.731, 19.781, 19.818), stdev = 0.045
  CI (99.9%): [18.957, 20.606] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 90.49% complete, ETA 00:02:46
# Fork: 1 of 1
# Warmup Iteration   1: 3663.273 ns/op
# Warmup Iteration   2: 1142.411 ns/op
# Warmup Iteration   3: 853.818 ns/op
Iteration   1: 855.325 ns/op
Iteration   2: 851.770 ns/op
Iteration   3: 859.903 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  855.666 ±(99.9%) 74.382 ns/op [Average]
  (min, avg, max) = (851.770, 855.666, 859.903), stdev = 4.077
  CI (99.9%): [781.284, 930.049] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 90.56% complete, ETA 00:02:45
# Fork: 1 of 1
# Warmup Iteration   1: 36843.895 ns/op
# Warmup Iteration   2: 1872.346 ns/op
# Warmup Iteration   3: 1135.568 ns/op
Iteration   1: 957.173 ns/op
Iteration   2: 956.248 ns/op
Iteration   3: 947.413 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  953.611 ±(99.9%) 98.294 ns/op [Average]
  (min, avg, max) = (947.413, 953.611, 957.173), stdev = 5.388
  CI (99.9%): [855.317, 1051.906] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 90.63% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 33236.482 ns/op
# Warmup Iteration   2: 1983.985 ns/op
# Warmup Iteration   3: 1125.917 ns/op
Iteration   1: 1022.444 ns/op
Iteration   2: 1019.430 ns/op
Iteration   3: 1020.483 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1020.786 ±(99.9%) 27.911 ns/op [Average]
  (min, avg, max) = (1019.430, 1020.786, 1022.444), stdev = 1.530
  CI (99.9%): [992.875, 1048.696] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 90.69% complete, ETA 00:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 1663.010 ns/op
# Warmup Iteration   2: 1514.530 ns/op
# Warmup Iteration   3: 1055.741 ns/op
Iteration   1: 1051.213 ns/op
Iteration   2: 1048.368 ns/op
Iteration   3: 1049.365 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1049.648 ±(99.9%) 26.331 ns/op [Average]
  (min, avg, max) = (1048.368, 1049.648, 1051.213), stdev = 1.443
  CI (99.9%): [1023.318, 1075.979] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 90.76% complete, ETA 00:02:41
# Fork: 1 of 1
# Warmup Iteration   1: 9395.426 ns/op
# Warmup Iteration   2: 4898.353 ns/op
# Warmup Iteration   3: 3663.808 ns/op
Iteration   1: 3662.708 ns/op
Iteration   2: 3665.456 ns/op
Iteration   3: 3663.252 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3663.805 ±(99.9%) 26.548 ns/op [Average]
  (min, avg, max) = (3662.708, 3663.805, 3665.456), stdev = 1.455
  CI (99.9%): [3637.257, 3690.354] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 90.83% complete, ETA 00:02:40
# Fork: 1 of 1
# Warmup Iteration   1: 24.049 ns/op
# Warmup Iteration   2: 26.830 ns/op
# Warmup Iteration   3: 19.135 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.129 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.132 ±(99.9%) 0.064 ns/op [Average]
  (min, avg, max) = (19.129, 19.132, 19.136), stdev = 0.004
  CI (99.9%): [19.068, 19.196] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 90.90% complete, ETA 00:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 837.275 ns/op
# Warmup Iteration   2: 518.355 ns/op
# Warmup Iteration   3: 348.977 ns/op
Iteration   1: 348.900 ns/op
Iteration   2: 348.986 ns/op
Iteration   3: 349.082 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  348.989 ±(99.9%) 1.666 ns/op [Average]
  (min, avg, max) = (348.900, 348.989, 349.082), stdev = 0.091
  CI (99.9%): [347.323, 350.655] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 90.97% complete, ETA 00:02:37
# Fork: 1 of 1
# Warmup Iteration   1: 5071.629 ns/op
# Warmup Iteration   2: 495.190 ns/op
# Warmup Iteration   3: 338.096 ns/op
Iteration   1: 337.934 ns/op
Iteration   2: 337.890 ns/op
Iteration   3: 337.956 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  337.927 ±(99.9%) 0.606 ns/op [Average]
  (min, avg, max) = (337.890, 337.927, 337.956), stdev = 0.033
  CI (99.9%): [337.321, 338.532] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 91.04% complete, ETA 00:02:36
# Fork: 1 of 1
# Warmup Iteration   1: 9757.730 ns/op
# Warmup Iteration   2: 584.569 ns/op
# Warmup Iteration   3: 414.601 ns/op
Iteration   1: 414.785 ns/op
Iteration   2: 414.246 ns/op
Iteration   3: 415.293 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  414.775 ±(99.9%) 9.552 ns/op [Average]
  (min, avg, max) = (414.246, 414.775, 415.293), stdev = 0.524
  CI (99.9%): [405.223, 424.327] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 91.11% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 1880.488 ns/op
# Warmup Iteration   2: 1855.000 ns/op
# Warmup Iteration   3: 1289.477 ns/op
Iteration   1: 1289.211 ns/op
Iteration   2: 1289.458 ns/op
Iteration   3: 1289.439 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1289.370 ±(99.9%) 2.506 ns/op [Average]
  (min, avg, max) = (1289.211, 1289.370, 1289.458), stdev = 0.137
  CI (99.9%): [1286.864, 1291.876] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 91.18% complete, ETA 00:02:34
# Fork: 1 of 1
# Warmup Iteration   1: 528.270 ns/op
# Warmup Iteration   2: 355.107 ns/op
# Warmup Iteration   3: 238.428 ns/op
Iteration   1: 238.273 ns/op
Iteration   2: 238.146 ns/op
Iteration   3: 238.082 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  238.167 ±(99.9%) 1.771 ns/op [Average]
  (min, avg, max) = (238.082, 238.167, 238.273), stdev = 0.097
  CI (99.9%): [236.396, 239.938] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 91.25% complete, ETA 00:02:32
# Fork: 1 of 1
# Warmup Iteration   1: 23.994 ns/op
# Warmup Iteration   2: 30.060 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.133 ns/op
Iteration   3: 19.148 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.160 ns/op [Average]
  (min, avg, max) = (19.132, 19.137, 19.148), stdev = 0.009
  CI (99.9%): [18.977, 19.298] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 91.32% complete, ETA 00:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 1832.738 ns/op
# Warmup Iteration   2: 737.806 ns/op
# Warmup Iteration   3: 526.520 ns/op
Iteration   1: 525.279 ns/op
Iteration   2: 527.863 ns/op
Iteration   3: 525.945 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  526.362 ±(99.9%) 24.481 ns/op [Average]
  (min, avg, max) = (525.279, 526.362, 527.863), stdev = 1.342
  CI (99.9%): [501.881, 550.844] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 91.39% complete, ETA 00:02:30
# Fork: 1 of 1
# Warmup Iteration   1: 23005.181 ns/op
# Warmup Iteration   2: 851.151 ns/op
# Warmup Iteration   3: 572.584 ns/op
Iteration   1: 521.894 ns/op
Iteration   2: 518.846 ns/op
Iteration   3: 522.294 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  521.011 ±(99.9%) 34.410 ns/op [Average]
  (min, avg, max) = (518.846, 521.011, 522.294), stdev = 1.886
  CI (99.9%): [486.601, 555.421] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 91.46% complete, ETA 00:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 30204.379 ns/op
# Warmup Iteration   2: 1078.196 ns/op
# Warmup Iteration   3: 723.558 ns/op
Iteration   1: 662.680 ns/op
Iteration   2: 662.813 ns/op
Iteration   3: 662.437 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  662.643 ±(99.9%) 3.478 ns/op [Average]
  (min, avg, max) = (662.437, 662.643, 662.813), stdev = 0.191
  CI (99.9%): [659.165, 666.121] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 91.53% complete, ETA 00:02:28
# Fork: 1 of 1
# Warmup Iteration   1: 2320.726 ns/op
# Warmup Iteration   2: 1884.998 ns/op
# Warmup Iteration   3: 1262.373 ns/op
Iteration   1: 1263.448 ns/op
Iteration   2: 1263.919 ns/op
Iteration   3: 1264.672 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1264.013 ±(99.9%) 11.263 ns/op [Average]
  (min, avg, max) = (1263.448, 1264.013, 1264.672), stdev = 0.617
  CI (99.9%): [1252.750, 1275.276] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE___, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 91.60% complete, ETA 00:02:26
# Fork: 1 of 1
# Warmup Iteration   1: 1356.090 ns/op
# Warmup Iteration   2: 923.252 ns/op
# Warmup Iteration   3: 634.293 ns/op
Iteration   1: 633.609 ns/op
Iteration   2: 632.547 ns/op
Iteration   3: 634.285 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  633.480 ±(99.9%) 15.984 ns/op [Average]
  (min, avg, max) = (632.547, 633.480, 634.285), stdev = 0.876
  CI (99.9%): [617.496, 649.464] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 91.67% complete, ETA 00:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 22.993 ns/op
# Warmup Iteration   2: 29.216 ns/op
# Warmup Iteration   3: 19.147 ns/op
Iteration   1: 19.127 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.133 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.132 ±(99.9%) 0.083 ns/op [Average]
  (min, avg, max) = (19.127, 19.132, 19.136), stdev = 0.005
  CI (99.9%): [19.049, 19.215] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 91.74% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 3329.931 ns/op
# Warmup Iteration   2: 1002.652 ns/op
# Warmup Iteration   3: 678.362 ns/op
Iteration   1: 678.200 ns/op
Iteration   2: 678.322 ns/op
Iteration   3: 678.436 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  678.320 ±(99.9%) 2.150 ns/op [Average]
  (min, avg, max) = (678.200, 678.320, 678.436), stdev = 0.118
  CI (99.9%): [676.169, 680.470] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 91.81% complete, ETA 00:02:23
# Fork: 1 of 1
# Warmup Iteration   1: 10887.321 ns/op
# Warmup Iteration   2: 1508.062 ns/op
# Warmup Iteration   3: 1079.105 ns/op
Iteration   1: 1078.753 ns/op
Iteration   2: 1078.926 ns/op
Iteration   3: 1077.885 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1078.521 ±(99.9%) 10.179 ns/op [Average]
  (min, avg, max) = (1077.885, 1078.521, 1078.926), stdev = 0.558
  CI (99.9%): [1068.342, 1088.701] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 91.88% complete, ETA 00:02:22
# Fork: 1 of 1
# Warmup Iteration   1: 7869.030 ns/op
# Warmup Iteration   2: 1587.411 ns/op
# Warmup Iteration   3: 1104.089 ns/op
Iteration   1: 1104.743 ns/op
Iteration   2: 1104.435 ns/op
Iteration   3: 1104.835 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1104.671 ±(99.9%) 3.818 ns/op [Average]
  (min, avg, max) = (1104.435, 1104.671, 1104.835), stdev = 0.209
  CI (99.9%): [1100.853, 1108.489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 91.94% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 2061.762 ns/op
# Warmup Iteration   2: 1404.867 ns/op
# Warmup Iteration   3: 1047.707 ns/op
Iteration   1: 1047.612 ns/op
Iteration   2: 1061.227 ns/op
Iteration   3: 1047.976 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1052.272 ±(99.9%) 141.529 ns/op [Average]
  (min, avg, max) = (1047.612, 1052.272, 1061.227), stdev = 7.758
  CI (99.9%): [910.743, 1193.801] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 92.01% complete, ETA 00:02:19
# Fork: 1 of 1
# Warmup Iteration   1: 12411.645 ns/op
# Warmup Iteration   2: 5289.627 ns/op
# Warmup Iteration   3: 4111.845 ns/op
Iteration   1: 3801.540 ns/op
Iteration   2: 3806.797 ns/op
Iteration   3: 3801.538 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3803.292 ±(99.9%) 55.380 ns/op [Average]
  (min, avg, max) = (3801.538, 3803.292, 3806.797), stdev = 3.036
  CI (99.9%): [3747.911, 3858.672] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 92.08% complete, ETA 00:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 23.494 ns/op
# Warmup Iteration   2: 25.716 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.143 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.135 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (19.130, 19.135, 19.143), stdev = 0.007
  CI (99.9%): [19.008, 19.262] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 92.15% complete, ETA 00:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 4800.730 ns/op
# Warmup Iteration   2: 1186.210 ns/op
# Warmup Iteration   3: 854.032 ns/op
Iteration   1: 853.617 ns/op
Iteration   2: 853.637 ns/op
Iteration   3: 853.056 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  853.437 ±(99.9%) 6.014 ns/op [Average]
  (min, avg, max) = (853.056, 853.437, 853.637), stdev = 0.330
  CI (99.9%): [847.423, 859.451] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 92.22% complete, ETA 00:02:15
# Fork: 1 of 1
# Warmup Iteration   1: 8081.986 ns/op
# Warmup Iteration   2: 1592.181 ns/op
# Warmup Iteration   3: 1190.579 ns/op
Iteration   1: 1190.464 ns/op
Iteration   2: 1190.342 ns/op
Iteration   3: 1189.645 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1190.151 ±(99.9%) 8.063 ns/op [Average]
  (min, avg, max) = (1189.645, 1190.151, 1190.464), stdev = 0.442
  CI (99.9%): [1182.088, 1198.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 92.29% complete, ETA 00:02:14
# Fork: 1 of 1
# Warmup Iteration   1: 13414.992 ns/op
# Warmup Iteration   2: 1599.691 ns/op
# Warmup Iteration   3: 1319.978 ns/op
Iteration   1: 1199.132 ns/op
Iteration   2: 1199.035 ns/op
Iteration   3: 1199.100 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1199.089 ±(99.9%) 0.905 ns/op [Average]
  (min, avg, max) = (1199.035, 1199.089, 1199.132), stdev = 0.050
  CI (99.9%): [1198.184, 1199.994] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 92.36% complete, ETA 00:02:13
# Fork: 1 of 1
# Warmup Iteration   1: 1721.148 ns/op
# Warmup Iteration   2: 1245.181 ns/op
# Warmup Iteration   3: 958.091 ns/op
Iteration   1: 957.942 ns/op
Iteration   2: 957.907 ns/op
Iteration   3: 958.378 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  958.076 ±(99.9%) 4.790 ns/op [Average]
  (min, avg, max) = (957.907, 958.076, 958.378), stdev = 0.263
  CI (99.9%): [953.286, 962.866] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 92.43% complete, ETA 00:02:12
# Fork: 1 of 1
# Warmup Iteration   1: 1883.527 ns/op
# Warmup Iteration   2: 1062.796 ns/op
# Warmup Iteration   3: 700.526 ns/op
Iteration   1: 700.853 ns/op
Iteration   2: 701.075 ns/op
Iteration   3: 700.639 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  700.856 ±(99.9%) 3.982 ns/op [Average]
  (min, avg, max) = (700.639, 700.856, 701.075), stdev = 0.218
  CI (99.9%): [696.874, 704.838] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 92.50% complete, ETA 00:02:11
# Fork: 1 of 1
# Warmup Iteration   1: 24.679 ns/op
# Warmup Iteration   2: 30.926 ns/op
# Warmup Iteration   3: 19.149 ns/op
Iteration   1: 19.132 ns/op
Iteration   2: 19.146 ns/op
Iteration   3: 19.134 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.137 ±(99.9%) 0.145 ns/op [Average]
  (min, avg, max) = (19.132, 19.137, 19.146), stdev = 0.008
  CI (99.9%): [18.993, 19.282] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 92.57% complete, ETA 00:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 7590.259 ns/op
# Warmup Iteration   2: 1192.391 ns/op
# Warmup Iteration   3: 816.997 ns/op
Iteration   1: 817.304 ns/op
Iteration   2: 816.828 ns/op
Iteration   3: 820.248 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  818.126 ±(99.9%) 33.803 ns/op [Average]
  (min, avg, max) = (816.828, 818.126, 820.248), stdev = 1.853
  CI (99.9%): [784.323, 851.930] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 92.64% complete, ETA 00:02:08
# Fork: 1 of 1
# Warmup Iteration   1: 27592.608 ns/op
# Warmup Iteration   2: 1556.693 ns/op
# Warmup Iteration   3: 1057.199 ns/op
Iteration   1: 964.010 ns/op
Iteration   2: 965.315 ns/op
Iteration   3: 966.940 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  965.422 ±(99.9%) 26.779 ns/op [Average]
  (min, avg, max) = (964.010, 965.422, 966.940), stdev = 1.468
  CI (99.9%): [938.642, 992.201] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 92.71% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 41264.755 ns/op
# Warmup Iteration   2: 2072.723 ns/op
# Warmup Iteration   3: 1246.272 ns/op
Iteration   1: 1056.888 ns/op
Iteration   2: 1056.714 ns/op
Iteration   3: 1056.148 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1056.583 ±(99.9%) 7.053 ns/op [Average]
  (min, avg, max) = (1056.148, 1056.583, 1056.888), stdev = 0.387
  CI (99.9%): [1049.530, 1063.637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 92.78% complete, ETA 00:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 2130.368 ns/op
# Warmup Iteration   2: 1451.878 ns/op
# Warmup Iteration   3: 1065.662 ns/op
Iteration   1: 1063.839 ns/op
Iteration   2: 1066.154 ns/op
Iteration   3: 1068.454 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1066.149 ±(99.9%) 42.096 ns/op [Average]
  (min, avg, max) = (1063.839, 1066.149, 1068.454), stdev = 2.307
  CI (99.9%): [1024.053, 1108.245] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 92.85% complete, ETA 00:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 11696.894 ns/op
# Warmup Iteration   2: 4976.142 ns/op
# Warmup Iteration   3: 3896.645 ns/op
Iteration   1: 3608.280 ns/op
Iteration   2: 3603.600 ns/op
Iteration   3: 3603.152 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3605.011 ±(99.9%) 51.817 ns/op [Average]
  (min, avg, max) = (3603.152, 3605.011, 3608.280), stdev = 2.840
  CI (99.9%): [3553.194, 3656.827] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 92.92% complete, ETA 00:02:03
# Fork: 1 of 1
# Warmup Iteration   1: 25.740 ns/op
# Warmup Iteration   2: 29.291 ns/op
# Warmup Iteration   3: 19.137 ns/op
Iteration   1: 19.139 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.140 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.138 ±(99.9%) 0.045 ns/op [Average]
  (min, avg, max) = (19.136, 19.138, 19.140), stdev = 0.002
  CI (99.9%): [19.093, 19.184] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 92.99% complete, ETA 00:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 957.896 ns/op
# Warmup Iteration   2: 609.319 ns/op
# Warmup Iteration   3: 418.774 ns/op
Iteration   1: 418.572 ns/op
Iteration   2: 418.744 ns/op
Iteration   3: 418.743 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  418.686 ±(99.9%) 1.811 ns/op [Average]
  (min, avg, max) = (418.572, 418.686, 418.744), stdev = 0.099
  CI (99.9%): [416.875, 420.497] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 93.06% complete, ETA 00:02:01
# Fork: 1 of 1
# Warmup Iteration   1: 5601.669 ns/op
# Warmup Iteration   2: 859.867 ns/op
# Warmup Iteration   3: 672.240 ns/op
Iteration   1: 672.102 ns/op
Iteration   2: 672.219 ns/op
Iteration   3: 672.359 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  672.226 ±(99.9%) 2.345 ns/op [Average]
  (min, avg, max) = (672.102, 672.226, 672.359), stdev = 0.129
  CI (99.9%): [669.881, 674.572] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 93.13% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 7827.880 ns/op
# Warmup Iteration   2: 936.590 ns/op
# Warmup Iteration   3: 657.549 ns/op
Iteration   1: 657.432 ns/op
Iteration   2: 657.458 ns/op
Iteration   3: 657.275 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  657.388 ±(99.9%) 1.810 ns/op [Average]
  (min, avg, max) = (657.275, 657.388, 657.458), stdev = 0.099
  CI (99.9%): [655.579, 659.198] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 93.19% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: 749.004 ns/op
# Warmup Iteration   2: 752.777 ns/op
# Warmup Iteration   3: 516.308 ns/op
Iteration   1: 516.077 ns/op
Iteration   2: 516.223 ns/op
Iteration   3: 516.143 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  516.148 ±(99.9%) 1.330 ns/op [Average]
  (min, avg, max) = (516.077, 516.148, 516.223), stdev = 0.073
  CI (99.9%): [514.818, 517.477] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 93.26% complete, ETA 00:01:57
# Fork: 1 of 1
# Warmup Iteration   1: 856.083 ns/op
# Warmup Iteration   2: 584.753 ns/op
# Warmup Iteration   3: 397.094 ns/op
Iteration   1: 397.054 ns/op
Iteration   2: 397.142 ns/op
Iteration   3: 397.040 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  397.079 ±(99.9%) 1.017 ns/op [Average]
  (min, avg, max) = (397.040, 397.079, 397.142), stdev = 0.056
  CI (99.9%): [396.062, 398.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 93.33% complete, ETA 00:01:56
# Fork: 1 of 1
# Warmup Iteration   1: 24.503 ns/op
# Warmup Iteration   2: 31.616 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.135 ns/op
Iteration   2: 19.131 ns/op
Iteration   3: 19.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.030 ns/op [Average]
  (min, avg, max) = (19.131, 19.133, 19.135), stdev = 0.002
  CI (99.9%): [19.103, 19.163] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 93.40% complete, ETA 00:01:55
# Fork: 1 of 1
# Warmup Iteration   1: 2230.213 ns/op
# Warmup Iteration   2: 733.569 ns/op
# Warmup Iteration   3: 521.228 ns/op
Iteration   1: 518.663 ns/op
Iteration   2: 518.812 ns/op
Iteration   3: 523.415 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  520.296 ±(99.9%) 49.289 ns/op [Average]
  (min, avg, max) = (518.663, 520.296, 523.415), stdev = 2.702
  CI (99.9%): [471.007, 569.586] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 93.47% complete, ETA 00:01:54
# Fork: 1 of 1
# Warmup Iteration   1: 22418.919 ns/op
# Warmup Iteration   2: 1002.313 ns/op
# Warmup Iteration   3: 817.640 ns/op
Iteration   1: 748.911 ns/op
Iteration   2: 749.536 ns/op
Iteration   3: 748.987 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  749.144 ±(99.9%) 6.219 ns/op [Average]
  (min, avg, max) = (748.911, 749.144, 749.536), stdev = 0.341
  CI (99.9%): [742.925, 755.364] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 93.54% complete, ETA 00:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 10917.668 ns/op
# Warmup Iteration   2: 1150.258 ns/op
# Warmup Iteration   3: 827.400 ns/op
Iteration   1: 749.094 ns/op
Iteration   2: 748.883 ns/op
Iteration   3: 749.203 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  749.060 ±(99.9%) 2.964 ns/op [Average]
  (min, avg, max) = (748.883, 749.060, 749.203), stdev = 0.162
  CI (99.9%): [746.096, 752.024] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 93.61% complete, ETA 00:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 891.810 ns/op
# Warmup Iteration   2: 806.244 ns/op
# Warmup Iteration   3: 552.894 ns/op
Iteration   1: 551.257 ns/op
Iteration   2: 552.394 ns/op
Iteration   3: 553.482 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  552.378 ±(99.9%) 20.299 ns/op [Average]
  (min, avg, max) = (551.257, 552.378, 553.482), stdev = 1.113
  CI (99.9%): [532.079, 572.677] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_FR, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 93.68% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 1828.859 ns/op
# Warmup Iteration   2: 1115.412 ns/op
# Warmup Iteration   3: 753.473 ns/op
Iteration   1: 754.509 ns/op
Iteration   2: 755.407 ns/op
Iteration   3: 755.121 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  755.012 ±(99.9%) 8.375 ns/op [Average]
  (min, avg, max) = (754.509, 755.012, 755.407), stdev = 0.459
  CI (99.9%): [746.637, 763.387] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 93.75% complete, ETA 00:01:49
# Fork: 1 of 1
# Warmup Iteration   1: 23.222 ns/op
# Warmup Iteration   2: 27.238 ns/op
# Warmup Iteration   3: 19.145 ns/op
Iteration   1: 19.144 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.131 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.136 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (19.131, 19.136, 19.144), stdev = 0.007
  CI (99.9%): [19.013, 19.260] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 93.82% complete, ETA 00:01:48
# Fork: 1 of 1
# Warmup Iteration   1: 4069.120 ns/op
# Warmup Iteration   2: 1305.453 ns/op
# Warmup Iteration   3: 931.672 ns/op
Iteration   1: 930.889 ns/op
Iteration   2: 930.431 ns/op
Iteration   3: 931.819 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  931.046 ±(99.9%) 12.904 ns/op [Average]
  (min, avg, max) = (930.431, 931.046, 931.819), stdev = 0.707
  CI (99.9%): [918.143, 943.950] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 93.89% complete, ETA 00:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 32135.079 ns/op
# Warmup Iteration   2: 1265.255 ns/op
# Warmup Iteration   3: 973.855 ns/op
Iteration   1: 889.496 ns/op
Iteration   2: 889.341 ns/op
Iteration   3: 889.234 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  889.357 ±(99.9%) 2.398 ns/op [Average]
  (min, avg, max) = (889.234, 889.357, 889.496), stdev = 0.131
  CI (99.9%): [886.959, 891.756] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 93.96% complete, ETA 00:01:45
# Fork: 1 of 1
# Warmup Iteration   1: 28463.193 ns/op
# Warmup Iteration   2: 1252.112 ns/op
# Warmup Iteration   3: 966.335 ns/op
Iteration   1: 884.385 ns/op
Iteration   2: 884.206 ns/op
Iteration   3: 884.495 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  884.362 ±(99.9%) 2.655 ns/op [Average]
  (min, avg, max) = (884.206, 884.362, 884.495), stdev = 0.146
  CI (99.9%): [881.707, 887.017] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 94.03% complete, ETA 00:01:44
# Fork: 1 of 1
# Warmup Iteration   1: 2094.116 ns/op
# Warmup Iteration   2: 1448.413 ns/op
# Warmup Iteration   3: 1072.629 ns/op
Iteration   1: 1060.158 ns/op
Iteration   2: 1060.378 ns/op
Iteration   3: 1074.722 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1065.086 ±(99.9%) 152.256 ns/op [Average]
  (min, avg, max) = (1060.158, 1065.086, 1074.722), stdev = 8.346
  CI (99.9%): [912.830, 1217.342] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 94.10% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 14070.095 ns/op
# Warmup Iteration   2: 5315.105 ns/op
# Warmup Iteration   3: 4089.356 ns/op
Iteration   1: 3755.224 ns/op
Iteration   2: 3753.071 ns/op
Iteration   3: 3751.620 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3753.305 ±(99.9%) 33.087 ns/op [Average]
  (min, avg, max) = (3751.620, 3753.305, 3755.224), stdev = 1.814
  CI (99.9%): [3720.217, 3786.392] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 94.17% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 24.821 ns/op
# Warmup Iteration   2: 28.798 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.130 ns/op
Iteration   2: 19.133 ns/op
Iteration   3: 19.130 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.131 ±(99.9%) 0.032 ns/op [Average]
  (min, avg, max) = (19.130, 19.131, 19.133), stdev = 0.002
  CI (99.9%): [19.099, 19.163] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 94.24% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 2871.831 ns/op
# Warmup Iteration   2: 1132.304 ns/op
# Warmup Iteration   3: 804.376 ns/op
Iteration   1: 803.758 ns/op
Iteration   2: 795.213 ns/op
Iteration   3: 805.427 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  801.466 ±(99.9%) 99.966 ns/op [Average]
  (min, avg, max) = (795.213, 801.466, 805.427), stdev = 5.479
  CI (99.9%): [701.500, 901.432] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 94.31% complete, ETA 00:01:39
# Fork: 1 of 1
# Warmup Iteration   1: 31357.954 ns/op
# Warmup Iteration   2: 1250.489 ns/op
# Warmup Iteration   3: 807.818 ns/op
Iteration   1: 737.361 ns/op
Iteration   2: 737.079 ns/op
Iteration   3: 736.957 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  737.132 ±(99.9%) 3.787 ns/op [Average]
  (min, avg, max) = (736.957, 737.132, 737.361), stdev = 0.208
  CI (99.9%): [733.346, 740.919] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 94.38% complete, ETA 00:01:38
# Fork: 1 of 1
# Warmup Iteration   1: 8991.188 ns/op
# Warmup Iteration   2: 968.652 ns/op
# Warmup Iteration   3: 695.557 ns/op
Iteration   1: 694.921 ns/op
Iteration   2: 695.551 ns/op
Iteration   3: 707.322 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  699.265 ±(99.9%) 127.437 ns/op [Average]
  (min, avg, max) = (694.921, 699.265, 707.322), stdev = 6.985
  CI (99.9%): [571.827, 826.702] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 94.44% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 936.090 ns/op
# Warmup Iteration   2: 802.717 ns/op
# Warmup Iteration   3: 566.593 ns/op
Iteration   1: 552.499 ns/op
Iteration   2: 569.268 ns/op
Iteration   3: 565.645 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  562.471 ±(99.9%) 160.978 ns/op [Average]
  (min, avg, max) = (552.499, 562.471, 569.268), stdev = 8.824
  CI (99.9%): [401.493, 723.448] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 94.51% complete, ETA 00:01:35
# Fork: 1 of 1
# Warmup Iteration   1: 1885.634 ns/op
# Warmup Iteration   2: 1093.197 ns/op
# Warmup Iteration   3: 770.847 ns/op
Iteration   1: 771.082 ns/op
Iteration   2: 770.420 ns/op
Iteration   3: 771.501 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  771.001 ±(99.9%) 9.951 ns/op [Average]
  (min, avg, max) = (770.420, 771.001, 771.501), stdev = 0.545
  CI (99.9%): [761.050, 780.952] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 94.58% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 23.620 ns/op
# Warmup Iteration   2: 27.062 ns/op
# Warmup Iteration   3: 19.139 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.140 ns/op
Iteration   3: 19.144 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.140 ±(99.9%) 0.073 ns/op [Average]
  (min, avg, max) = (19.136, 19.140, 19.144), stdev = 0.004
  CI (99.9%): [19.067, 19.213] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 94.65% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 50519.822 ns/op
# Warmup Iteration   2: 1333.019 ns/op
# Warmup Iteration   3: 1110.691 ns/op
Iteration   1: 960.786 ns/op
Iteration   2: 959.718 ns/op
Iteration   3: 958.099 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  959.535 ±(99.9%) 24.687 ns/op [Average]
  (min, avg, max) = (958.099, 959.535, 960.786), stdev = 1.353
  CI (99.9%): [934.848, 984.221] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 94.72% complete, ETA 00:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 33589.938 ns/op
# Warmup Iteration   2: 1468.610 ns/op
# Warmup Iteration   3: 1180.495 ns/op
Iteration   1: 988.923 ns/op
Iteration   2: 987.607 ns/op
Iteration   3: 989.853 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  988.794 ±(99.9%) 20.593 ns/op [Average]
  (min, avg, max) = (987.607, 988.794, 989.853), stdev = 1.129
  CI (99.9%): [968.201, 1009.388] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 94.79% complete, ETA 00:01:31
# Fork: 1 of 1
# Warmup Iteration   1: 40565.425 ns/op
# Warmup Iteration   2: 2398.669 ns/op
# Warmup Iteration   3: 1237.713 ns/op
Iteration   1: 1039.665 ns/op
Iteration   2: 1039.523 ns/op
Iteration   3: 1037.937 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1039.042 ±(99.9%) 17.502 ns/op [Average]
  (min, avg, max) = (1037.937, 1039.042, 1039.665), stdev = 0.959
  CI (99.9%): [1021.540, 1056.544] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 94.86% complete, ETA 00:01:29
# Fork: 1 of 1
# Warmup Iteration   1: 1699.855 ns/op
# Warmup Iteration   2: 1541.650 ns/op
# Warmup Iteration   3: 1053.904 ns/op
Iteration   1: 1048.917 ns/op
Iteration   2: 1048.311 ns/op
Iteration   3: 1059.220 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1052.149 ±(99.9%) 111.853 ns/op [Average]
  (min, avg, max) = (1048.311, 1052.149, 1059.220), stdev = 6.131
  CI (99.9%): [940.296, 1164.002] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 94.93% complete, ETA 00:01:28
# Fork: 1 of 1
# Warmup Iteration   1: 10779.487 ns/op
# Warmup Iteration   2: 5219.374 ns/op
# Warmup Iteration   3: 3621.379 ns/op
Iteration   1: 3622.695 ns/op
Iteration   2: 3622.526 ns/op
Iteration   3: 3615.230 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3620.151 ±(99.9%) 77.750 ns/op [Average]
  (min, avg, max) = (3615.230, 3620.151, 3622.695), stdev = 4.262
  CI (99.9%): [3542.400, 3697.901] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 95.00% complete, ETA 00:01:27
# Fork: 1 of 1
# Warmup Iteration   1: 23.113 ns/op
# Warmup Iteration   2: 30.121 ns/op
# Warmup Iteration   3: 19.136 ns/op
Iteration   1: 19.127 ns/op
Iteration   2: 19.132 ns/op
Iteration   3: 19.132 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.055 ns/op [Average]
  (min, avg, max) = (19.127, 19.130, 19.132), stdev = 0.003
  CI (99.9%): [19.075, 19.186] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 95.07% complete, ETA 00:01:26
# Fork: 1 of 1
# Warmup Iteration   1: 1198.802 ns/op
# Warmup Iteration   2: 494.427 ns/op
# Warmup Iteration   3: 327.723 ns/op
Iteration   1: 327.671 ns/op
Iteration   2: 327.695 ns/op
Iteration   3: 327.779 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  327.715 ±(99.9%) 1.031 ns/op [Average]
  (min, avg, max) = (327.671, 327.715, 327.779), stdev = 0.057
  CI (99.9%): [326.684, 328.747] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 95.14% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 729.548 ns/op
# Warmup Iteration   2: 460.774 ns/op
# Warmup Iteration   3: 338.258 ns/op
Iteration   1: 338.345 ns/op
Iteration   2: 337.957 ns/op
Iteration   3: 338.236 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  338.179 ±(99.9%) 3.645 ns/op [Average]
  (min, avg, max) = (337.957, 338.179, 338.345), stdev = 0.200
  CI (99.9%): [334.534, 341.825] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 95.21% complete, ETA 00:01:23
# Fork: 1 of 1
# Warmup Iteration   1: 1348.914 ns/op
# Warmup Iteration   2: 564.755 ns/op
# Warmup Iteration   3: 393.550 ns/op
Iteration   1: 393.625 ns/op
Iteration   2: 393.434 ns/op
Iteration   3: 393.271 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  393.444 ±(99.9%) 3.230 ns/op [Average]
  (min, avg, max) = (393.271, 393.444, 393.625), stdev = 0.177
  CI (99.9%): [390.214, 396.673] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 95.28% complete, ETA 00:01:22
# Fork: 1 of 1
# Warmup Iteration   1: 406.665 ns/op
# Warmup Iteration   2: 353.380 ns/op
# Warmup Iteration   3: 256.984 ns/op
Iteration   1: 256.907 ns/op
Iteration   2: 257.039 ns/op
Iteration   3: 256.886 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  256.944 ±(99.9%) 1.507 ns/op [Average]
  (min, avg, max) = (256.886, 256.944, 257.039), stdev = 0.083
  CI (99.9%): [255.438, 258.451] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 95.35% complete, ETA 00:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 849.181 ns/op
# Warmup Iteration   2: 542.481 ns/op
# Warmup Iteration   3: 358.249 ns/op
Iteration   1: 358.168 ns/op
Iteration   2: 358.443 ns/op
Iteration   3: 358.143 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  358.251 ±(99.9%) 3.037 ns/op [Average]
  (min, avg, max) = (358.143, 358.251, 358.443), stdev = 0.166
  CI (99.9%): [355.214, 361.288] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 95.42% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 24.267 ns/op
# Warmup Iteration   2: 30.478 ns/op
# Warmup Iteration   3: 19.144 ns/op
Iteration   1: 19.141 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.134 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (19.127, 19.134, 19.141), stdev = 0.007
  CI (99.9%): [19.008, 19.260] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 95.49% complete, ETA 00:01:18
# Fork: 1 of 1
# Warmup Iteration   1: 1721.494 ns/op
# Warmup Iteration   2: 564.601 ns/op
# Warmup Iteration   3: 409.865 ns/op
Iteration   1: 408.920 ns/op
Iteration   2: 409.247 ns/op
Iteration   3: 409.451 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  409.206 ±(99.9%) 4.889 ns/op [Average]
  (min, avg, max) = (408.920, 409.206, 409.451), stdev = 0.268
  CI (99.9%): [404.316, 414.095] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 95.56% complete, ETA 00:01:17
# Fork: 1 of 1
# Warmup Iteration   1: 25906.118 ns/op
# Warmup Iteration   2: 761.851 ns/op
# Warmup Iteration   3: 596.526 ns/op
Iteration   1: 545.139 ns/op
Iteration   2: 544.145 ns/op
Iteration   3: 544.243 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  544.509 ±(99.9%) 9.996 ns/op [Average]
  (min, avg, max) = (544.145, 544.509, 545.139), stdev = 0.548
  CI (99.9%): [534.513, 554.505] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 95.63% complete, ETA 00:01:16
# Fork: 1 of 1
# Warmup Iteration   1: 30727.757 ns/op
# Warmup Iteration   2: 1024.845 ns/op
# Warmup Iteration   3: 707.959 ns/op
Iteration   1: 644.410 ns/op
Iteration   2: 642.211 ns/op
Iteration   3: 643.608 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  643.410 ±(99.9%) 20.300 ns/op [Average]
  (min, avg, max) = (642.211, 643.410, 644.410), stdev = 1.113
  CI (99.9%): [623.109, 663.710] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 95.69% complete, ETA 00:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 1156.299 ns/op
# Warmup Iteration   2: 770.734 ns/op
# Warmup Iteration   3: 523.402 ns/op
Iteration   1: 526.529 ns/op
Iteration   2: 523.377 ns/op
Iteration   3: 522.853 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  524.253 ±(99.9%) 36.277 ns/op [Average]
  (min, avg, max) = (522.853, 524.253, 526.529), stdev = 1.988
  CI (99.9%): [487.976, 560.530] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = REVERSE_BA, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 95.76% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: 1746.137 ns/op
# Warmup Iteration   2: 1080.131 ns/op
# Warmup Iteration   3: 791.105 ns/op
Iteration   1: 791.238 ns/op
Iteration   2: 794.263 ns/op
Iteration   3: 793.929 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  793.143 ±(99.9%) 30.251 ns/op [Average]
  (min, avg, max) = (791.238, 793.143, 794.263), stdev = 1.658
  CI (99.9%): [762.892, 823.395] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 95.83% complete, ETA 00:01:12
# Fork: 1 of 1
# Warmup Iteration   1: 24.400 ns/op
# Warmup Iteration   2: 134.585 ns/op
# Warmup Iteration   3: 19.297 ns/op
Iteration   1: 19.138 ns/op
Iteration   2: 19.154 ns/op
Iteration   3: 19.153 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.148 ±(99.9%) 0.168 ns/op [Average]
  (min, avg, max) = (19.138, 19.148, 19.154), stdev = 0.009
  CI (99.9%): [18.980, 19.316] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 95.90% complete, ETA 00:01:11
# Fork: 1 of 1
# Warmup Iteration   1: 286.677 ns/op
# Warmup Iteration   2: 478.597 ns/op
# Warmup Iteration   3: 145.718 ns/op
Iteration   1: 146.481 ns/op
Iteration   2: 145.867 ns/op
Iteration   3: 146.107 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.152 ±(99.9%) 5.646 ns/op [Average]
  (min, avg, max) = (145.867, 146.152, 146.481), stdev = 0.309
  CI (99.9%): [140.506, 151.798] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 95.97% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 499.870 ns/op
# Warmup Iteration   2: 500.953 ns/op
# Warmup Iteration   3: 164.199 ns/op
Iteration   1: 164.026 ns/op
Iteration   2: 164.012 ns/op
Iteration   3: 164.016 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  164.018 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (164.012, 164.018, 164.026), stdev = 0.007
  CI (99.9%): [163.882, 164.155] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 96.04% complete, ETA 00:01:09
# Fork: 1 of 1
# Warmup Iteration   1: 2506.850 ns/op
# Warmup Iteration   2: 596.161 ns/op
# Warmup Iteration   3: 215.660 ns/op
Iteration   1: 215.463 ns/op
Iteration   2: 215.405 ns/op
Iteration   3: 215.474 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  215.447 ±(99.9%) 0.675 ns/op [Average]
  (min, avg, max) = (215.405, 215.447, 215.474), stdev = 0.037
  CI (99.9%): [214.772, 216.123] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 96.11% complete, ETA 00:01:07
# Fork: 1 of 1
# Warmup Iteration   1: 104.323 ns/op
# Warmup Iteration   2: 270.807 ns/op
# Warmup Iteration   3: 74.323 ns/op
Iteration   1: 74.348 ns/op
Iteration   2: 74.331 ns/op
Iteration   3: 74.326 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.335 ±(99.9%) 0.212 ns/op [Average]
  (min, avg, max) = (74.326, 74.335, 74.348), stdev = 0.012
  CI (99.9%): [74.123, 74.547] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 96.18% complete, ETA 00:01:06
# Fork: 1 of 1
# Warmup Iteration   1: 247.701 ns/op
# Warmup Iteration   2: 525.980 ns/op
# Warmup Iteration   3: 139.225 ns/op
Iteration   1: 139.442 ns/op
Iteration   2: 139.204 ns/op
Iteration   3: 139.201 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.282 ±(99.9%) 2.520 ns/op [Average]
  (min, avg, max) = (139.201, 139.282, 139.442), stdev = 0.138
  CI (99.9%): [136.762, 141.802] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 96.25% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 24.637 ns/op
# Warmup Iteration   2: 147.764 ns/op
# Warmup Iteration   3: 19.292 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.138 ns/op
Iteration   3: 19.160 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.144 ±(99.9%) 0.256 ns/op [Average]
  (min, avg, max) = (19.134, 19.144, 19.160), stdev = 0.014
  CI (99.9%): [18.889, 19.400] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 96.32% complete, ETA 00:01:04
# Fork: 1 of 1
# Warmup Iteration   1: 269.858 ns/op
# Warmup Iteration   2: 438.757 ns/op
# Warmup Iteration   3: 139.375 ns/op
Iteration   1: 139.419 ns/op
Iteration   2: 139.287 ns/op
Iteration   3: 139.389 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  139.365 ±(99.9%) 1.268 ns/op [Average]
  (min, avg, max) = (139.287, 139.365, 139.419), stdev = 0.070
  CI (99.9%): [138.097, 140.633] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 96.39% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 1037.095 ns/op
# Warmup Iteration   2: 514.713 ns/op
# Warmup Iteration   3: 164.363 ns/op
Iteration   1: 164.077 ns/op
Iteration   2: 164.009 ns/op
Iteration   3: 164.045 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  164.044 ±(99.9%) 0.619 ns/op [Average]
  (min, avg, max) = (164.009, 164.044, 164.077), stdev = 0.034
  CI (99.9%): [163.425, 164.663] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 96.46% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 622.300 ns/op
# Warmup Iteration   2: 692.286 ns/op
# Warmup Iteration   3: 214.601 ns/op
Iteration   1: 214.458 ns/op
Iteration   2: 214.481 ns/op
Iteration   3: 214.377 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  214.439 ±(99.9%) 0.998 ns/op [Average]
  (min, avg, max) = (214.377, 214.439, 214.481), stdev = 0.055
  CI (99.9%): [213.440, 215.437] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 96.53% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106.531 ns/op
# Warmup Iteration   2: 304.187 ns/op
# Warmup Iteration   3: 74.333 ns/op
Iteration   1: 74.442 ns/op
Iteration   2: 74.320 ns/op
Iteration   3: 74.340 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.367 ±(99.9%) 1.197 ns/op [Average]
  (min, avg, max) = (74.320, 74.367, 74.442), stdev = 0.066
  CI (99.9%): [73.171, 75.564] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 96.60% complete, ETA 00:00:59
# Fork: 1 of 1
# Warmup Iteration   1: 238.048 ns/op
# Warmup Iteration   2: 546.748 ns/op
# Warmup Iteration   3: 141.046 ns/op
Iteration   1: 141.454 ns/op
Iteration   2: 141.031 ns/op
Iteration   3: 141.142 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  141.209 ±(99.9%) 3.998 ns/op [Average]
  (min, avg, max) = (141.031, 141.209, 141.454), stdev = 0.219
  CI (99.9%): [137.211, 145.207] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 96.67% complete, ETA 00:00:58
# Fork: 1 of 1
# Warmup Iteration   1: 23.421 ns/op
# Warmup Iteration   2: 142.261 ns/op
# Warmup Iteration   3: 19.301 ns/op
Iteration   1: 19.136 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.149 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.140 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (19.136, 19.140, 19.149), stdev = 0.007
  CI (99.9%): [19.006, 19.274] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 96.74% complete, ETA 00:00:57
# Fork: 1 of 1
# Warmup Iteration   1: 281.599 ns/op
# Warmup Iteration   2: 504.533 ns/op
# Warmup Iteration   3: 147.095 ns/op
Iteration   1: 146.942 ns/op
Iteration   2: 146.896 ns/op
Iteration   3: 146.915 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  146.918 ±(99.9%) 0.422 ns/op [Average]
  (min, avg, max) = (146.896, 146.918, 146.942), stdev = 0.023
  CI (99.9%): [146.496, 147.340] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 96.81% complete, ETA 00:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 550.237 ns/op
# Warmup Iteration   2: 519.136 ns/op
# Warmup Iteration   3: 168.960 ns/op
Iteration   1: 168.925 ns/op
Iteration   2: 168.874 ns/op
Iteration   3: 169.007 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  168.935 ±(99.9%) 1.224 ns/op [Average]
  (min, avg, max) = (168.874, 168.935, 169.007), stdev = 0.067
  CI (99.9%): [167.711, 170.159] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 96.88% complete, ETA 00:00:54
# Fork: 1 of 1
# Warmup Iteration   1: 601.034 ns/op
# Warmup Iteration   2: 680.741 ns/op
# Warmup Iteration   3: 240.263 ns/op
Iteration   1: 238.663 ns/op
Iteration   2: 238.242 ns/op
Iteration   3: 236.204 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  237.703 ±(99.9%) 23.995 ns/op [Average]
  (min, avg, max) = (236.204, 237.703, 238.663), stdev = 1.315
  CI (99.9%): [213.708, 261.698] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 96.94% complete, ETA 00:00:53
# Fork: 1 of 1
# Warmup Iteration   1: 106.661 ns/op
# Warmup Iteration   2: 286.168 ns/op
# Warmup Iteration   3: 74.325 ns/op
Iteration   1: 74.498 ns/op
Iteration   2: 74.288 ns/op
Iteration   3: 74.301 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  74.362 ±(99.9%) 2.148 ns/op [Average]
  (min, avg, max) = (74.288, 74.362, 74.498), stdev = 0.118
  CI (99.9%): [72.214, 76.511] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 97.01% complete, ETA 00:00:52
# Fork: 1 of 1
# Warmup Iteration   1: 243.601 ns/op
# Warmup Iteration   2: 512.168 ns/op
# Warmup Iteration   3: 143.314 ns/op
Iteration   1: 143.463 ns/op
Iteration   2: 143.330 ns/op
Iteration   3: 143.259 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  143.351 ±(99.9%) 1.891 ns/op [Average]
  (min, avg, max) = (143.259, 143.351, 143.463), stdev = 0.104
  CI (99.9%): [141.460, 145.242] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 97.08% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 24.513 ns/op
# Warmup Iteration   2: 29.225 ns/op
# Warmup Iteration   3: 19.303 ns/op
Iteration   1: 19.137 ns/op
Iteration   2: 19.135 ns/op
Iteration   3: 19.933 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.402 ±(99.9%) 8.397 ns/op [Average]
  (min, avg, max) = (19.135, 19.402, 19.933), stdev = 0.460
  CI (99.9%): [11.005, 27.798] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 97.15% complete, ETA 00:00:49
# Fork: 1 of 1
# Warmup Iteration   1: 219.503 ns/op
# Warmup Iteration   2: 188.843 ns/op
# Warmup Iteration   3: 138.147 ns/op
Iteration   1: 138.244 ns/op
Iteration   2: 138.104 ns/op
Iteration   3: 144.713 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  140.354 ±(99.9%) 68.884 ns/op [Average]
  (min, avg, max) = (138.104, 140.354, 144.713), stdev = 3.776
  CI (99.9%): [71.470, 209.238] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 97.22% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 386.730 ns/op
# Warmup Iteration   2: 251.911 ns/op
# Warmup Iteration   3: 159.950 ns/op
Iteration   1: 159.861 ns/op
Iteration   2: 159.855 ns/op
Iteration   3: 171.409 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  163.708 ±(99.9%) 121.661 ns/op [Average]
  (min, avg, max) = (159.855, 163.708, 171.409), stdev = 6.669
  CI (99.9%): [42.047, 285.370] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 97.29% complete, ETA 00:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 499.656 ns/op
# Warmup Iteration   2: 317.447 ns/op
# Warmup Iteration   3: 213.759 ns/op
Iteration   1: 213.396 ns/op
Iteration   2: 213.001 ns/op
Iteration   3: 223.263 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  216.554 ±(99.9%) 106.073 ns/op [Average]
  (min, avg, max) = (213.001, 216.554, 223.263), stdev = 5.814
  CI (99.9%): [110.480, 322.627] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 97.36% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 112.783 ns/op
# Warmup Iteration   2: 122.091 ns/op
# Warmup Iteration   3: 74.319 ns/op
Iteration   1: 74.247 ns/op
Iteration   2: 74.270 ns/op
Iteration   3: 77.859 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  75.459 ±(99.9%) 37.926 ns/op [Average]
  (min, avg, max) = (74.247, 75.459, 77.859), stdev = 2.079
  CI (99.9%): [37.533, 113.385] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 97.43% complete, ETA 00:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 221.369 ns/op
# Warmup Iteration   2: 240.216 ns/op
# Warmup Iteration   3: 131.822 ns/op
Iteration   1: 131.682 ns/op
Iteration   2: 131.764 ns/op
Iteration   3: 141.348 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  134.931 ±(99.9%) 101.387 ns/op [Average]
  (min, avg, max) = (131.682, 134.931, 141.348), stdev = 5.557
  CI (99.9%): [33.545, 236.318] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 97.50% complete, ETA 00:00:43
# Fork: 1 of 1
# Warmup Iteration   1: 24.721 ns/op
# Warmup Iteration   2: 29.931 ns/op
# Warmup Iteration   3: 20.043 ns/op
Iteration   1: 26.250 ns/op
Iteration   2: 19.821 ns/op
Iteration   3: 19.778 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  21.950 ±(99.9%) 67.947 ns/op [Average]
  (min, avg, max) = (19.778, 21.950, 26.250), stdev = 3.724
  CI (99.9%): [≈ 0, 89.897] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 97.57% complete, ETA 00:00:42
# Fork: 1 of 1
# Warmup Iteration   1: 254.110 ns/op
# Warmup Iteration   2: 202.356 ns/op
# Warmup Iteration   3: 137.979 ns/op
Iteration   1: 166.926 ns/op
Iteration   2: 137.807 ns/op
Iteration   3: 137.787 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  147.507 ±(99.9%) 306.817 ns/op [Average]
  (min, avg, max) = (137.787, 147.507, 166.926), stdev = 16.818
  CI (99.9%): [≈ 0, 454.323] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 97.64% complete, ETA 00:00:41
# Fork: 1 of 1
# Warmup Iteration   1: 357.590 ns/op
# Warmup Iteration   2: 245.782 ns/op
# Warmup Iteration   3: 163.703 ns/op
Iteration   1: 217.170 ns/op
Iteration   2: 163.678 ns/op
Iteration   3: 163.707 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  181.519 ±(99.9%) 563.278 ns/op [Average]
  (min, avg, max) = (163.678, 181.519, 217.170), stdev = 30.875
  CI (99.9%): [≈ 0, 744.797] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 97.71% complete, ETA 00:00:40
# Fork: 1 of 1
# Warmup Iteration   1: 475.364 ns/op
# Warmup Iteration   2: 308.885 ns/op
# Warmup Iteration   3: 210.233 ns/op
Iteration   1: 272.159 ns/op
Iteration   2: 210.279 ns/op
Iteration   3: 210.416 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  230.951 ±(99.9%) 651.058 ns/op [Average]
  (min, avg, max) = (210.279, 230.951, 272.159), stdev = 35.687
  CI (99.9%): [≈ 0, 882.009] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 97.78% complete, ETA 00:00:38
# Fork: 1 of 1
# Warmup Iteration   1: 104.668 ns/op
# Warmup Iteration   2: 113.910 ns/op
# Warmup Iteration   3: 74.262 ns/op
Iteration   1: 102.049 ns/op
Iteration   2: 74.272 ns/op
Iteration   3: 74.277 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  83.532 ±(99.9%) 292.550 ns/op [Average]
  (min, avg, max) = (74.272, 83.532, 102.049), stdev = 16.036
  CI (99.9%): [≈ 0, 376.082] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = SORT______, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 97.85% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 219.439 ns/op
# Warmup Iteration   2: 214.755 ns/op
# Warmup Iteration   3: 130.555 ns/op
Iteration   1: 172.607 ns/op
Iteration   2: 130.945 ns/op
Iteration   3: 130.784 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  144.779 ±(99.9%) 439.683 ns/op [Average]
  (min, avg, max) = (130.784, 144.779, 172.607), stdev = 24.101
  CI (99.9%): [≈ 0, 584.462] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = BASELINE)

# Run progress: 97.92% complete, ETA 00:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 23.529 ns/op
# Warmup Iteration   2: 25.587 ns/op
# Warmup Iteration   3: 19.694 ns/op
Iteration   1: 19.682 ns/op
Iteration   2: 19.688 ns/op
Iteration   3: 19.608 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.660 ±(99.9%) 0.810 ns/op [Average]
  (min, avg, max) = (19.608, 19.660, 19.688), stdev = 0.044
  CI (99.9%): [18.849, 20.470] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_11)

# Run progress: 97.99% complete, ETA 00:00:35
# Fork: 1 of 1
# Warmup Iteration   1: 2721.111 ns/op
# Warmup Iteration   2: 1408.387 ns/op
# Warmup Iteration   3: 974.245 ns/op
Iteration   1: 977.136 ns/op
Iteration   2: 974.645 ns/op
Iteration   3: 976.861 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  976.214 ±(99.9%) 24.911 ns/op [Average]
  (min, avg, max) = (974.645, 976.214, 977.136), stdev = 1.365
  CI (99.9%): [951.302, 1001.125] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11_21)

# Run progress: 98.06% complete, ETA 00:00:33
# Fork: 1 of 1
# Warmup Iteration   1: 17618.360 ns/op
# Warmup Iteration   2: 1557.080 ns/op
# Warmup Iteration   3: 1195.288 ns/op
Iteration   1: 1091.141 ns/op
Iteration   2: 1091.129 ns/op
Iteration   3: 1091.624 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1091.298 ±(99.9%) 5.148 ns/op [Average]
  (min, avg, max) = (1091.129, 1091.298, 1091.624), stdev = 0.282
  CI (99.9%): [1086.150, 1096.446] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11I)

# Run progress: 98.13% complete, ETA 00:00:32
# Fork: 1 of 1
# Warmup Iteration   1: 17407.378 ns/op
# Warmup Iteration   2: 1780.776 ns/op
# Warmup Iteration   3: 1210.311 ns/op
Iteration   1: 1098.952 ns/op
Iteration   2: 1098.835 ns/op
Iteration   3: 1098.481 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1098.756 ±(99.9%) 4.477 ns/op [Average]
  (min, avg, max) = (1098.481, 1098.756, 1098.952), stdev = 0.245
  CI (99.9%): [1094.279, 1103.232] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = DPQ_18_11P)

# Run progress: 98.19% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 2401.849 ns/op
# Warmup Iteration   2: 1401.732 ns/op
# Warmup Iteration   3: 1017.261 ns/op
Iteration   1: 1016.929 ns/op
Iteration   2: 1015.772 ns/op
Iteration   3: 1016.878 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1016.526 ±(99.9%) 11.929 ns/op [Average]
  (min, avg, max) = (1015.772, 1016.526, 1016.929), stdev = 0.654
  CI (99.9%): [1004.597, 1028.455] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = STAGGER, tSorter = RADIX)

# Run progress: 98.26% complete, ETA 00:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 10871.384 ns/op
# Warmup Iteration   2: 5606.649 ns/op
# Warmup Iteration   3: 3903.855 ns/op
Iteration   1: 3899.642 ns/op
Iteration   2: 3907.194 ns/op
Iteration   3: 3901.624 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3902.820 ±(99.9%) 71.430 ns/op [Average]
  (min, avg, max) = (3899.642, 3902.820, 3907.194), stdev = 3.915
  CI (99.9%): [3831.390, 3974.250] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = BASELINE)

# Run progress: 98.33% complete, ETA 00:00:29
# Fork: 1 of 1
# Warmup Iteration   1: 23.522 ns/op
# Warmup Iteration   2: 25.736 ns/op
# Warmup Iteration   3: 19.141 ns/op
Iteration   1: 19.139 ns/op
Iteration   2: 19.134 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.133 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (19.127, 19.133, 19.139), stdev = 0.006
  CI (99.9%): [19.022, 19.245] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_11)

# Run progress: 98.40% complete, ETA 00:00:27
# Fork: 1 of 1
# Warmup Iteration   1: 2018.788 ns/op
# Warmup Iteration   2: 1126.621 ns/op
# Warmup Iteration   3: 834.366 ns/op
Iteration   1: 834.218 ns/op
Iteration   2: 834.180 ns/op
Iteration   3: 834.841 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  834.413 ±(99.9%) 6.774 ns/op [Average]
  (min, avg, max) = (834.180, 834.413, 834.841), stdev = 0.371
  CI (99.9%): [827.639, 841.187] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11_21)

# Run progress: 98.47% complete, ETA 00:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 20456.089 ns/op
# Warmup Iteration   2: 1108.377 ns/op
# Warmup Iteration   3: 875.987 ns/op
Iteration   1: 801.120 ns/op
Iteration   2: 800.978 ns/op
Iteration   3: 801.290 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  801.129 ±(99.9%) 2.848 ns/op [Average]
  (min, avg, max) = (800.978, 801.129, 801.290), stdev = 0.156
  CI (99.9%): [798.281, 803.978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11I)

# Run progress: 98.54% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14954.414 ns/op
# Warmup Iteration   2: 1048.250 ns/op
# Warmup Iteration   3: 862.785 ns/op
Iteration   1: 784.723 ns/op
Iteration   2: 784.784 ns/op
Iteration   3: 784.723 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  784.743 ±(99.9%) 0.650 ns/op [Average]
  (min, avg, max) = (784.723, 784.743, 784.784), stdev = 0.036
  CI (99.9%): [784.093, 785.393] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = DPQ_18_11P)

# Run progress: 98.61% complete, ETA 00:00:24
# Fork: 1 of 1
# Warmup Iteration   1: 1051.098 ns/op
# Warmup Iteration   2: 998.047 ns/op
# Warmup Iteration   3: 665.204 ns/op
Iteration   1: 665.032 ns/op
Iteration   2: 664.795 ns/op
Iteration   3: 665.050 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  664.959 ±(99.9%) 2.594 ns/op [Average]
  (min, avg, max) = (664.795, 664.959, 665.050), stdev = 0.142
  CI (99.9%): [662.364, 667.553] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SAWTOTH, tSorter = RADIX)

# Run progress: 98.68% complete, ETA 00:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 10838.752 ns/op
# Warmup Iteration   2: 5419.451 ns/op
# Warmup Iteration   3: 4075.770 ns/op
Iteration   1: 3763.135 ns/op
Iteration   2: 3763.207 ns/op
Iteration   3: 3763.632 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3763.325 ±(99.9%) 4.895 ns/op [Average]
  (min, avg, max) = (3763.135, 3763.325, 3763.632), stdev = 0.268
  CI (99.9%): [3758.429, 3768.220] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = BASELINE)

# Run progress: 98.75% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 23.681 ns/op
# Warmup Iteration   2: 25.760 ns/op
# Warmup Iteration   3: 19.145 ns/op
Iteration   1: 19.134 ns/op
Iteration   2: 19.142 ns/op
Iteration   3: 19.149 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.142 ±(99.9%) 0.142 ns/op [Average]
  (min, avg, max) = (19.134, 19.142, 19.149), stdev = 0.008
  CI (99.9%): [19.000, 19.283] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_11)

# Run progress: 98.82% complete, ETA 00:00:20
# Fork: 1 of 1
# Warmup Iteration   1: 20281.290 ns/op
# Warmup Iteration   2: 1379.754 ns/op
# Warmup Iteration   3: 1065.498 ns/op
Iteration   1: 980.807 ns/op
Iteration   2: 984.059 ns/op
Iteration   3: 979.940 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  981.602 ±(99.9%) 39.621 ns/op [Average]
  (min, avg, max) = (979.940, 981.602, 984.059), stdev = 2.172
  CI (99.9%): [941.981, 1021.223] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11_21)

# Run progress: 98.89% complete, ETA 00:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 30522.902 ns/op
# Warmup Iteration   2: 1447.107 ns/op
# Warmup Iteration   3: 1116.432 ns/op
Iteration   1: 1008.534 ns/op
Iteration   2: 1008.819 ns/op
Iteration   3: 1010.230 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1009.195 ±(99.9%) 16.570 ns/op [Average]
  (min, avg, max) = (1008.534, 1009.195, 1010.230), stdev = 0.908
  CI (99.9%): [992.624, 1025.765] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11I)

# Run progress: 98.96% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 31099.550 ns/op
# Warmup Iteration   2: 1338.271 ns/op
# Warmup Iteration   3: 1093.399 ns/op
Iteration   1: 1002.830 ns/op
Iteration   2: 997.809 ns/op
Iteration   3: 1005.318 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1001.986 ±(99.9%) 69.783 ns/op [Average]
  (min, avg, max) = (997.809, 1001.986, 1005.318), stdev = 3.825
  CI (99.9%): [932.202, 1071.769] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = DPQ_18_11P)

# Run progress: 99.03% complete, ETA 00:00:16
# Fork: 1 of 1
# Warmup Iteration   1: 1694.292 ns/op
# Warmup Iteration   2: 1518.729 ns/op
# Warmup Iteration   3: 1053.799 ns/op
Iteration   1: 1056.869 ns/op
Iteration   2: 1054.955 ns/op
Iteration   3: 1054.239 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  1055.354 ±(99.9%) 24.804 ns/op [Average]
  (min, avg, max) = (1054.239, 1055.354, 1056.869), stdev = 1.360
  CI (99.9%): [1030.550, 1080.158] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = _RANDOM, tSorter = RADIX)

# Run progress: 99.10% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 11300.895 ns/op
# Warmup Iteration   2: 5213.427 ns/op
# Warmup Iteration   3: 3665.746 ns/op
Iteration   1: 3663.838 ns/op
Iteration   2: 3666.089 ns/op
Iteration   3: 3669.253 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3666.393 ±(99.9%) 49.630 ns/op [Average]
  (min, avg, max) = (3663.838, 3666.393, 3669.253), stdev = 2.720
  CI (99.9%): [3616.763, 3716.023] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = BASELINE)

# Run progress: 99.17% complete, ETA 00:00:14
# Fork: 1 of 1
# Warmup Iteration   1: 24.063 ns/op
# Warmup Iteration   2: 30.052 ns/op
# Warmup Iteration   3: 19.149 ns/op
Iteration   1: 19.147 ns/op
Iteration   2: 19.144 ns/op
Iteration   3: 19.146 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.146 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (19.144, 19.146, 19.147), stdev = 0.002
  CI (99.9%): [19.113, 19.179] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_11)

# Run progress: 99.24% complete, ETA 00:00:13
# Fork: 1 of 1
# Warmup Iteration   1: 3210.091 ns/op
# Warmup Iteration   2: 834.765 ns/op
# Warmup Iteration   3: 642.520 ns/op
Iteration   1: 642.927 ns/op
Iteration   2: 642.649 ns/op
Iteration   3: 643.001 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  642.859 ±(99.9%) 3.385 ns/op [Average]
  (min, avg, max) = (642.649, 642.859, 643.001), stdev = 0.186
  CI (99.9%): [639.474, 646.244] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11_21)

# Run progress: 99.31% complete, ETA 00:00:12
# Fork: 1 of 1
# Warmup Iteration   1: 15712.939 ns/op
# Warmup Iteration   2: 827.785 ns/op
# Warmup Iteration   3: 613.470 ns/op
Iteration   1: 561.596 ns/op
Iteration   2: 561.763 ns/op
Iteration   3: 562.056 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  561.805 ±(99.9%) 4.249 ns/op [Average]
  (min, avg, max) = (561.596, 561.805, 562.056), stdev = 0.233
  CI (99.9%): [557.557, 566.054] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11I)

# Run progress: 99.38% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 10782.717 ns/op
# Warmup Iteration   2: 810.213 ns/op
# Warmup Iteration   3: 546.067 ns/op
Iteration   1: 545.161 ns/op
Iteration   2: 545.737 ns/op
Iteration   3: 545.392 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  545.430 ±(99.9%) 5.293 ns/op [Average]
  (min, avg, max) = (545.161, 545.430, 545.737), stdev = 0.290
  CI (99.9%): [540.137, 550.723] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = DPQ_18_11P)

# Run progress: 99.44% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 507.518 ns/op
# Warmup Iteration   2: 448.006 ns/op
# Warmup Iteration   3: 326.366 ns/op
Iteration   1: 326.645 ns/op
Iteration   2: 326.326 ns/op
Iteration   3: 326.261 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  326.411 ±(99.9%) 3.745 ns/op [Average]
  (min, avg, max) = (326.261, 326.411, 326.645), stdev = 0.205
  CI (99.9%): [322.665, 330.156] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = PLATEAU, tSorter = RADIX)

# Run progress: 99.51% complete, ETA 00:00:08
# Fork: 1 of 1
# Warmup Iteration   1: 11060.409 ns/op
# Warmup Iteration   2: 4930.529 ns/op
# Warmup Iteration   3: 3543.887 ns/op
Iteration   1: 3536.589 ns/op
Iteration   2: 3543.631 ns/op
Iteration   3: 3540.057 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  3540.092 ±(99.9%) 64.242 ns/op [Average]
  (min, avg, max) = (3536.589, 3540.092, 3543.631), stdev = 3.521
  CI (99.9%): [3475.850, 3604.334] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = BASELINE)

# Run progress: 99.58% complete, ETA 00:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 22.977 ns/op
# Warmup Iteration   2: 30.219 ns/op
# Warmup Iteration   3: 19.143 ns/op
Iteration   1: 19.126 ns/op
Iteration   2: 19.136 ns/op
Iteration   3: 19.127 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  19.130 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (19.126, 19.130, 19.136), stdev = 0.006
  CI (99.9%): [19.026, 19.234] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_11)

# Run progress: 99.65% complete, ETA 00:00:06
# Fork: 1 of 1
# Warmup Iteration   1: 1412.315 ns/op
# Warmup Iteration   2: 655.801 ns/op
# Warmup Iteration   3: 443.703 ns/op
Iteration   1: 443.976 ns/op
Iteration   2: 443.180 ns/op
Iteration   3: 444.034 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  443.730 ±(99.9%) 8.705 ns/op [Average]
  (min, avg, max) = (443.180, 443.730, 444.034), stdev = 0.477
  CI (99.9%): [435.025, 452.435] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11_21)

# Run progress: 99.72% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 17499.799 ns/op
# Warmup Iteration   2: 2070.878 ns/op
# Warmup Iteration   3: 474.365 ns/op
Iteration   1: 427.078 ns/op
Iteration   2: 426.676 ns/op
Iteration   3: 426.228 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  426.661 ±(99.9%) 7.758 ns/op [Average]
  (min, avg, max) = (426.228, 426.661, 427.078), stdev = 0.425
  CI (99.9%): [418.903, 434.418] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11I)

# Run progress: 99.79% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 26852.556 ns/op
# Warmup Iteration   2: 762.517 ns/op
# Warmup Iteration   3: 513.375 ns/op
Iteration   1: 463.269 ns/op
Iteration   2: 462.377 ns/op
Iteration   3: 460.835 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  462.161 ±(99.9%) 22.465 ns/op [Average]
  (min, avg, max) = (460.835, 462.161, 463.269), stdev = 1.231
  CI (99.9%): [439.696, 484.625] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = DPQ_18_11P)

# Run progress: 99.86% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 386.898 ns/op
# Warmup Iteration   2: 356.436 ns/op
# Warmup Iteration   3: 247.944 ns/op
Iteration   1: 247.888 ns/op
Iteration   2: 247.735 ns/op
Iteration   3: 247.638 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  247.754 ±(99.9%) 2.295 ns/op [Average]
  (min, avg, max) = (247.638, 247.754, 247.888), stdev = 0.126
  CI (99.9%): [245.458, 250.049] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_192, Java HotSpot(TM) 64-Bit Server VM, 25.192-b12
# VM invoker: /home/bourgesl/apps/jdk1.8.0/jre/bin/java
# VM options: -Xms1g -Xmx1g -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=300000
# Warmup: 3 iterations, 100 ms each
# Measurement: 3 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: edu.sorting.bench.ArraySortBenchmark.sort
# Parameters: (arraySize = 100, arraySubSize = 64, dataTweaker = DITHER____, distBuilder = SHUFFLE, tSorter = RADIX)

# Run progress: 99.93% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 11187.619 ns/op
# Warmup Iteration   2: 5619.052 ns/op
# Warmup Iteration   3: 4030.175 ns/op
Iteration   1: 4031.589 ns/op
Iteration   2: 4029.561 ns/op
Iteration   3: 4033.588 ns/op


Result "edu.sorting.bench.ArraySortBenchmark.sort":
  4031.579 ±(99.9%) 36.735 ns/op [Average]
  (min, avg, max) = (4029.561, 4031.579, 4033.588), stdev = 2.014
  CI (99.9%): [3994.844, 4068.314] (assumes normal distribution)


# Run complete. Total time: 00:29:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                (arraySize)  (arraySubSize)  (dataTweaker)  (distBuilder)     (tSorter)  Mode  Cnt     Score      Error  Units
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER      BASELINE  avgt    3    13.356 ±    0.153  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER        DPQ_11  avgt    3   285.220 ±    3.191  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3   252.650 ±    9.708  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER    DPQ_18_11I  avgt    3   297.666 ±    1.766  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER    DPQ_18_11P  avgt    3   188.921 ±    1.935  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        STAGGER         RADIX  avgt    3   217.592 ±    2.837  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH      BASELINE  avgt    3    13.364 ±    0.248  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH        DPQ_11  avgt    3    51.782 ±    0.199  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3    44.051 ±    0.264  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3    47.226 ±    0.675  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3    46.461 ±    1.544  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SAWTOTH         RADIX  avgt    3    93.071 ±    0.969  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM      BASELINE  avgt    3    13.372 ±    0.251  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM        DPQ_11  avgt    3    51.444 ±    0.358  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3    44.059 ±    0.324  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3    52.143 ±    1.732  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3    46.491 ±    1.547  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        _RANDOM         RADIX  avgt    3    93.053 ±    0.727  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU      BASELINE  avgt    3    13.358 ±    0.166  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU        DPQ_11  avgt    3    55.000 ±    0.695  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3    44.055 ±    0.167  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3    65.259 ±    0.593  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    46.490 ±    1.493  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        PLATEAU         RADIX  avgt    3    97.756 ±    0.066  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE      BASELINE  avgt    3    13.366 ±    0.187  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE        DPQ_11  avgt    3    89.596 ±    0.953  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3    44.076 ±    0.207  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   104.601 ±    1.180  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3    47.440 ±    1.162  ns/op
ArraySortBenchmark.sort           50               1     IDENT_____        SHUFFLE         RADIX  avgt    3    97.739 ±    0.122  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER      BASELINE  avgt    3    13.363 ±    0.176  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER        DPQ_11  avgt    3   296.544 ±    0.806  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3   528.091 ±    1.524  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER    DPQ_18_11I  avgt    3   500.082 ±    3.431  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER    DPQ_18_11P  avgt    3   333.698 ±    4.679  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        STAGGER         RADIX  avgt    3   258.202 ±    0.656  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH      BASELINE  avgt    3    13.357 ±    0.089  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH        DPQ_11  avgt    3    51.427 ±    0.223  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3    44.044 ±    0.194  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3    47.534 ±    0.650  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3    46.455 ±    1.814  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SAWTOTH         RADIX  avgt    3    93.058 ±    0.697  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM      BASELINE  avgt    3    13.359 ±    0.144  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM        DPQ_11  avgt    3    51.770 ±    0.169  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3    44.043 ±    0.276  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3    51.421 ±    2.098  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3    47.443 ±    1.189  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        _RANDOM         RADIX  avgt    3    93.047 ±    0.674  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU      BASELINE  avgt    3    13.370 ±    0.268  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU        DPQ_11  avgt    3    55.163 ±    0.207  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   108.071 ±    0.033  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3    62.252 ±    0.431  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3    77.407 ±    1.144  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        PLATEAU         RADIX  avgt    3    99.804 ±    0.244  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE      BASELINE  avgt    3    13.358 ±    0.137  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE        DPQ_11  avgt    3   203.420 ±    2.427  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   606.434 ±   79.674  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   157.264 ±    1.892  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3   432.885 ±    1.193  ns/op
ArraySortBenchmark.sort           50               1     REVERSE___        SHUFFLE         RADIX  avgt    3   139.400 ±    0.937  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER      BASELINE  avgt    3    13.361 ±    0.106  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER        DPQ_11  avgt    3   285.641 ±    2.593  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3   408.885 ±    2.532  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3   371.408 ±  391.546  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3   295.301 ±    4.437  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        STAGGER         RADIX  avgt    3   245.411 ±    0.803  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    13.361 ±    0.194  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3    66.281 ±  469.355  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3    44.066 ±    0.304  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3    51.414 ±    2.280  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3    46.465 ±    1.594  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SAWTOTH         RADIX  avgt    3    93.059 ±    0.772  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM      BASELINE  avgt    3    13.356 ±    0.127  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM        DPQ_11  avgt    3    51.758 ±    0.118  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3    44.047 ±    0.078  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3    47.942 ±    0.475  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3    46.476 ±    1.579  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        _RANDOM         RADIX  avgt    3    93.059 ±    1.148  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU      BASELINE  avgt    3    13.358 ±    0.155  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU        DPQ_11  avgt    3    57.302 ±    0.259  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   102.303 ±    1.532  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3    66.508 ±    0.426  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3    59.973 ±    1.836  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        PLATEAU         RADIX  avgt    3    98.744 ±    1.931  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    13.372 ±    0.526  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   178.317 ±    1.748  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   232.803 ±    0.695  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   289.968 ±    2.256  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   173.744 ±    6.078  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_FR        SHUFFLE         RADIX  avgt    3   225.381 ±    3.530  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER      BASELINE  avgt    3    13.365 ±    0.282  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER        DPQ_11  avgt    3   300.102 ±    4.804  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   378.091 ±    6.474  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   322.825 ±    7.108  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3   220.340 ±   13.788  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        STAGGER         RADIX  avgt    3   229.067 ±    4.180  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    13.364 ±    0.260  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3    51.431 ±    0.141  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3    44.042 ±    0.042  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3    47.566 ±    0.399  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3    46.477 ±    1.208  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SAWTOTH         RADIX  avgt    3    94.040 ±    1.494  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM      BASELINE  avgt    3    14.320 ±    0.604  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM        DPQ_11  avgt    3    51.437 ±    0.027  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3    44.534 ±    0.278  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3    47.525 ±    0.833  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3    46.465 ±    1.457  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        _RANDOM         RADIX  avgt    3    93.050 ±    0.698  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU      BASELINE  avgt    3    13.358 ±    0.123  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU        DPQ_11  avgt    3    54.978 ±    0.215  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3    44.051 ±    0.265  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3    65.257 ±    1.279  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3    46.728 ±    1.711  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        PLATEAU         RADIX  avgt    3    97.755 ±    1.088  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    13.365 ±    0.140  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   137.921 ±    0.116  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   256.684 ±    6.620  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3   197.421 ±    1.412  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   162.241 ±    1.097  ns/op
ArraySortBenchmark.sort           50               1     REVERSE_BA        SHUFFLE         RADIX  avgt    3   234.276 ±    1.148  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER      BASELINE  avgt    3    14.600 ±   39.498  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER        DPQ_11  avgt    3    95.082 ±  220.809  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER  DPQ_18_11_21  avgt    3    49.338 ±  165.673  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER    DPQ_18_11I  avgt    3   121.979 ±  434.211  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER    DPQ_18_11P  avgt    3    51.916 ±  174.903  ns/op
ArraySortBenchmark.sort           50               1     SORT______        STAGGER         RADIX  avgt    3   145.166 ±  489.200  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH      BASELINE  avgt    3    13.356 ±    0.013  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH        DPQ_11  avgt    3    51.408 ±    0.175  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3    44.071 ±    0.175  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH    DPQ_18_11I  avgt    3    47.611 ±    0.486  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    46.456 ±    0.385  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SAWTOTH         RADIX  avgt    3   119.568 ±    2.563  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM      BASELINE  avgt    3    13.362 ±    0.075  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM        DPQ_11  avgt    3    51.477 ±    0.337  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM  DPQ_18_11_21  avgt    3    44.090 ±    0.504  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM    DPQ_18_11I  avgt    3    47.489 ±    0.076  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM    DPQ_18_11P  avgt    3    46.395 ±    0.094  ns/op
ArraySortBenchmark.sort           50               1     SORT______        _RANDOM         RADIX  avgt    3   121.281 ±    0.843  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU      BASELINE  avgt    3    13.350 ±    0.018  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU        DPQ_11  avgt    3    54.948 ±    0.388  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU  DPQ_18_11_21  avgt    3    44.069 ±    0.205  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU    DPQ_18_11I  avgt    3    65.790 ±    0.400  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU    DPQ_18_11P  avgt    3    46.378 ±    0.619  ns/op
ArraySortBenchmark.sort           50               1     SORT______        PLATEAU         RADIX  avgt    3   125.487 ±    0.070  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE      BASELINE  avgt    3    13.350 ±    0.086  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE        DPQ_11  avgt    3    89.008 ±    0.309  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3    44.071 ±    0.238  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   105.814 ±    1.844  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    46.386 ±    0.194  ns/op
ArraySortBenchmark.sort           50               1     SORT______        SHUFFLE         RADIX  avgt    3   124.116 ±    0.039  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER      BASELINE  avgt    3    13.619 ±    0.171  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER        DPQ_11  avgt    3   313.170 ±    0.567  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER  DPQ_18_11_21  avgt    3   260.154 ±    0.762  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER    DPQ_18_11I  avgt    3   314.393 ±    4.284  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER    DPQ_18_11P  avgt    3   207.345 ±    0.056  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        STAGGER         RADIX  avgt    3   728.056 ±    1.768  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH      BASELINE  avgt    3    13.357 ±    0.135  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH        DPQ_11  avgt    3   237.268 ±    0.641  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3   339.261 ±    1.593  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3   247.299 ±    1.848  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   284.436 ±    0.313  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SAWTOTH         RADIX  avgt    3   673.375 ±    1.188  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM      BASELINE  avgt    3    13.384 ±    0.775  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM        DPQ_11  avgt    3   238.671 ±    2.718  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3   340.000 ±    3.058  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM    DPQ_18_11I  avgt    3   258.053 ±  296.667  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM    DPQ_18_11P  avgt    3   284.471 ±    1.959  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        _RANDOM         RADIX  avgt    3   702.678 ±    1.047  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU      BASELINE  avgt    3    13.375 ±    0.860  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU        DPQ_11  avgt    3   237.410 ±    1.270  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   339.237 ±    1.791  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   273.203 ±   30.787  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   284.937 ±    3.842  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        PLATEAU         RADIX  avgt    3   673.244 ±    0.487  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE      BASELINE  avgt    3    13.363 ±    0.262  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE        DPQ_11  avgt    3   136.537 ±    0.446  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3    95.080 ±    0.340  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   124.006 ±    1.461  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3    75.143 ±    0.393  ns/op
ArraySortBenchmark.sort           50               1     DITHER____        SHUFFLE         RADIX  avgt    3   633.850 ±    2.873  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER      BASELINE  avgt    3    13.353 ±    0.187  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER        DPQ_11  avgt    3   303.069 ±    4.183  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3   338.189 ±    2.614  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER    DPQ_18_11I  avgt    3   313.454 ±    1.875  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER    DPQ_18_11P  avgt    3   260.929 ±    1.648  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        STAGGER         RADIX  avgt    3   419.691 ±    2.422  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH      BASELINE  avgt    3    13.358 ±    0.187  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH        DPQ_11  avgt    3   292.729 ±    5.994  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3   337.095 ±    0.744  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3   196.454 ±    2.753  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3   284.028 ±    1.193  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SAWTOTH         RADIX  avgt    3   748.281 ±    1.765  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM      BASELINE  avgt    3    13.373 ±    0.220  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM        DPQ_11  avgt    3   291.543 ±    7.417  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3   359.853 ±   30.285  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3   235.086 ±   11.855  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3   279.872 ±    0.510  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        _RANDOM         RADIX  avgt    3  1540.631 ±   60.554  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU      BASELINE  avgt    3    13.426 ±    0.839  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU        DPQ_11  avgt    3    56.972 ±    0.649  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3    44.033 ±    0.072  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3    70.751 ±    0.272  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    46.471 ±    1.545  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        PLATEAU         RADIX  avgt    3    98.340 ±    0.717  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE      BASELINE  avgt    3    13.362 ±    0.336  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE        DPQ_11  avgt    3   323.953 ±    0.491  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3   223.280 ±   23.662  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   323.411 ±    6.506  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3   181.801 ±    1.119  ns/op
ArraySortBenchmark.sort           50               4     IDENT_____        SHUFFLE         RADIX  avgt    3   639.745 ±   58.965  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER      BASELINE  avgt    3    13.362 ±    0.273  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER        DPQ_11  avgt    3   301.884 ±    4.612  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3   454.228 ±    4.956  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER    DPQ_18_11I  avgt    3   322.159 ±    4.790  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER    DPQ_18_11P  avgt    3   325.803 ±    0.725  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        STAGGER         RADIX  avgt    3   462.869 ±    6.794  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH      BASELINE  avgt    3    13.359 ±    0.270  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH        DPQ_11  avgt    3   297.343 ±    4.928  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3   363.165 ±   18.427  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3   203.805 ±    2.767  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3   290.675 ±    8.972  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SAWTOTH         RADIX  avgt    3   776.957 ±    3.719  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM      BASELINE  avgt    3    13.359 ±    0.163  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM        DPQ_11  avgt    3   240.982 ±    2.101  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3   359.556 ±   33.191  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3   206.463 ±    0.343  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3   287.120 ±   10.275  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        _RANDOM         RADIX  avgt    3  1521.172 ±   25.513  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU      BASELINE  avgt    3    13.362 ±    0.203  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU        DPQ_11  avgt    3    65.546 ±    0.277  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   166.361 ±    3.947  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3    74.051 ±    1.098  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3   103.980 ±    0.341  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        PLATEAU         RADIX  avgt    3   101.055 ±    0.426  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE      BASELINE  avgt    3    13.361 ±    0.259  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE        DPQ_11  avgt    3   360.130 ±   28.110  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   579.996 ±   14.281  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   356.856 ±    9.948  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3   402.299 ±   54.196  ns/op
ArraySortBenchmark.sort           50               4     REVERSE___        SHUFFLE         RADIX  avgt    3   665.861 ±   54.881  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER      BASELINE  avgt    3    13.636 ±    0.597  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER        DPQ_11  avgt    3   297.498 ±    0.631  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3   385.061 ±    3.996  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3   339.515 ±    0.962  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3   297.095 ±    6.135  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        STAGGER         RADIX  avgt    3   450.664 ±    2.840  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    13.384 ±    0.682  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3   256.530 ±    3.465  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3   351.565 ±    6.645  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3   245.736 ±    1.299  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3   288.782 ±    4.852  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SAWTOTH         RADIX  avgt    3   815.494 ±   65.869  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM      BASELINE  avgt    3    13.360 ±    0.025  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM        DPQ_11  avgt    3   228.981 ±   11.292  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3   360.787 ±   28.523  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3   242.128 ±   10.195  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3   275.778 ±    8.960  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        _RANDOM         RADIX  avgt    3  1531.436 ±   28.690  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU      BASELINE  avgt    3    13.360 ±    0.262  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU        DPQ_11  avgt    3    66.031 ±    0.688  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   130.473 ±   12.277  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3   116.223 ±    0.820  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3    90.274 ±    0.882  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        PLATEAU         RADIX  avgt    3   100.548 ±    0.852  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    13.356 ±    0.134  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   289.632 ±   22.142  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   325.352 ±   28.619  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   336.815 ±   22.126  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   266.786 ±    0.934  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_FR        SHUFFLE         RADIX  avgt    3   721.441 ±   33.170  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER      BASELINE  avgt    3    13.366 ±    0.102  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER        DPQ_11  avgt    3   284.448 ±    2.587  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   359.113 ±    1.300  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   323.389 ±    1.098  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3   275.340 ±    1.094  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        STAGGER         RADIX  avgt    3   474.813 ±  173.914  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    13.353 ±    0.134  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3   175.601 ±    2.526  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3   338.257 ±    1.535  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3   186.316 ±    2.212  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3   308.763 ±    8.250  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SAWTOTH         RADIX  avgt    3   794.401 ±   74.028  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM      BASELINE  avgt    3    13.356 ±    0.143  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM        DPQ_11  avgt    3   228.016 ±   34.694  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3   362.638 ±   42.107  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3   225.987 ±   25.854  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3   283.934 ±   16.905  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        _RANDOM         RADIX  avgt    3  1567.789 ±   29.977  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU      BASELINE  avgt    3    13.360 ±    0.131  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU        DPQ_11  avgt    3    56.980 ±    0.909  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3    44.051 ±    0.126  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3    68.395 ±    0.260  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3    46.477 ±    1.664  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        PLATEAU         RADIX  avgt    3    97.737 ±    0.210  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    13.362 ±    0.243  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   312.367 ±    6.655  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   341.319 ±   13.155  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3   382.611 ±    8.762  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   253.108 ±    1.662  ns/op
ArraySortBenchmark.sort           50               4     REVERSE_BA        SHUFFLE         RADIX  avgt    3   726.357 ±  118.568  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER      BASELINE  avgt    3    14.058 ±   22.154  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER        DPQ_11  avgt    3   101.277 ±  216.666  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER  DPQ_18_11_21  avgt    3    47.149 ±   96.907  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER    DPQ_18_11I  avgt    3   119.434 ±  254.732  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER    DPQ_18_11P  avgt    3    48.624 ±   70.525  ns/op
ArraySortBenchmark.sort           50               4     SORT______        STAGGER         RADIX  avgt    3   133.337 ±  167.811  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH      BASELINE  avgt    3    13.360 ±    0.045  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH        DPQ_11  avgt    3   126.556 ±    3.197  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3    44.067 ±    0.178  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH    DPQ_18_11I  avgt    3   110.583 ±    0.131  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    46.376 ±    0.503  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SAWTOTH         RADIX  avgt    3   127.357 ±    0.213  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM      BASELINE  avgt    3    14.808 ±   45.641  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM        DPQ_11  avgt    3   140.422 ±  465.191  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM  DPQ_18_11_21  avgt    3    48.586 ±  142.225  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM    DPQ_18_11I  avgt    3   116.192 ±  265.813  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM    DPQ_18_11P  avgt    3    51.610 ±  155.608  ns/op
ArraySortBenchmark.sort           50               4     SORT______        _RANDOM         RADIX  avgt    3   140.086 ±  322.238  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU      BASELINE  avgt    3    13.351 ±    0.094  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU        DPQ_11  avgt    3    56.968 ±    0.719  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU  DPQ_18_11_21  avgt    3    44.705 ±    0.029  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU    DPQ_18_11I  avgt    3    68.132 ±    0.213  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU    DPQ_18_11P  avgt    3    46.389 ±    0.283  ns/op
ArraySortBenchmark.sort           50               4     SORT______        PLATEAU         RADIX  avgt    3   125.072 ±    1.221  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE      BASELINE  avgt    3    14.926 ±   49.816  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE        DPQ_11  avgt    3    98.205 ±  291.234  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3    49.725 ±  158.490  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   117.484 ±  384.882  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    51.565 ±  163.943  ns/op
ArraySortBenchmark.sort           50               4     SORT______        SHUFFLE         RADIX  avgt    3   138.567 ±  454.528  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER      BASELINE  avgt    3    13.381 ±    0.746  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER        DPQ_11  avgt    3   303.660 ±    0.806  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER  DPQ_18_11_21  avgt    3   341.352 ±    1.963  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER    DPQ_18_11I  avgt    3   313.286 ±    0.121  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER    DPQ_18_11P  avgt    3   258.973 ±    1.831  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        STAGGER         RADIX  avgt    3   419.993 ±    4.472  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH      BASELINE  avgt    3    13.361 ±    0.164  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH        DPQ_11  avgt    3   309.216 ±    2.811  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3   365.654 ±    0.851  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3   292.275 ±   84.006  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   305.512 ±    3.546  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SAWTOTH         RADIX  avgt    3  1504.857 ±   23.965  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM      BASELINE  avgt    3    13.353 ±    0.154  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM        DPQ_11  avgt    3   303.465 ±   14.627  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3   378.926 ±   13.984  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM    DPQ_18_11I  avgt    3   285.892 ±   40.546  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM    DPQ_18_11P  avgt    3   313.281 ±   10.830  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        _RANDOM         RADIX  avgt    3  1558.326 ±   35.792  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU      BASELINE  avgt    3    13.364 ±    0.384  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU        DPQ_11  avgt    3   237.541 ±    6.540  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   323.213 ±    4.955  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   266.277 ±   96.429  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   274.497 ±    4.343  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        PLATEAU         RADIX  avgt    3   676.038 ±   12.199  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE      BASELINE  avgt    3    13.366 ±    0.104  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE        DPQ_11  avgt    3   296.050 ±    7.561  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3   237.737 ±    6.659  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   337.500 ±    1.330  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3   202.099 ±    9.254  ns/op
ArraySortBenchmark.sort           50               4     DITHER____        SHUFFLE         RADIX  avgt    3  1133.192 ±   24.815  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER      BASELINE  avgt    3    13.360 ±    0.084  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER        DPQ_11  avgt    3   326.317 ±    4.053  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3   311.139 ±    0.536  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER    DPQ_18_11I  avgt    3   368.899 ±    2.687  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER    DPQ_18_11P  avgt    3   275.964 ±    0.893  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        STAGGER         RADIX  avgt    3  1396.358 ±    9.362  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH      BASELINE  avgt    3    13.362 ±    0.216  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH        DPQ_11  avgt    3   331.619 ±    1.261  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3   333.414 ±    1.088  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3   335.140 ±    0.805  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3   238.083 ±    0.943  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SAWTOTH         RADIX  avgt    3   378.516 ±    0.358  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM      BASELINE  avgt    3    13.369 ±    0.114  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM        DPQ_11  avgt    3   367.895 ±    1.400  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3   427.188 ±   17.557  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3   432.291 ±   35.754  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3   333.591 ±    2.381  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        _RANDOM         RADIX  avgt    3  1620.969 ±   88.387  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU      BASELINE  avgt    3    13.363 ±    0.134  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU        DPQ_11  avgt    3    68.015 ±    0.099  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3    44.045 ±    0.176  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3    75.498 ±    0.761  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    47.048 ±    2.396  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        PLATEAU         RADIX  avgt    3    97.527 ±    1.028  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE      BASELINE  avgt    3    13.363 ±    0.304  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE        DPQ_11  avgt    3   189.636 ±   18.788  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3   137.156 ±    5.089  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   176.180 ±    3.851  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3    99.804 ±    1.295  ns/op
ArraySortBenchmark.sort           50              16     IDENT_____        SHUFFLE         RADIX  avgt    3   314.471 ±    0.837  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER      BASELINE  avgt    3    13.359 ±    0.206  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER        DPQ_11  avgt    3   313.932 ±    3.497  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3   499.523 ±    0.598  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER    DPQ_18_11I  avgt    3   334.320 ±    1.531  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER    DPQ_18_11P  avgt    3   412.877 ±    4.418  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        STAGGER         RADIX  avgt    3  1767.712 ±   11.505  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH      BASELINE  avgt    3    13.359 ±    0.150  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH        DPQ_11  avgt    3   266.676 ±    0.972  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3   484.500 ±    9.654  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3   286.329 ±    2.125  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3   333.722 ±    1.716  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SAWTOTH         RADIX  avgt    3   396.630 ±    2.454  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM      BASELINE  avgt    3    13.357 ±    0.183  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM        DPQ_11  avgt    3   377.283 ±   28.784  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3   416.464 ±   22.232  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3   404.606 ±    2.595  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3   337.355 ±   37.020  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        _RANDOM         RADIX  avgt    3  1638.325 ±   34.034  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU      BASELINE  avgt    3    13.358 ±    0.183  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU        DPQ_11  avgt    3   217.898 ±    0.340  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   352.667 ±    0.685  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3   103.720 ±    0.144  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3   235.107 ±    0.385  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        PLATEAU         RADIX  avgt    3   124.156 ±    0.707  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE      BASELINE  avgt    3    13.620 ±    0.170  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE        DPQ_11  avgt    3   254.057 ±    8.213  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   670.250 ±   30.130  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   298.623 ±    8.542  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3   388.960 ±    7.463  ns/op
ArraySortBenchmark.sort           50              16     REVERSE___        SHUFFLE         RADIX  avgt    3   348.833 ±    6.891  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER      BASELINE  avgt    3    13.621 ±    0.203  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER        DPQ_11  avgt    3   326.060 ±    1.008  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3   370.736 ±    1.506  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3   390.785 ±    1.307  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3   341.995 ±    1.777  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        STAGGER         RADIX  avgt    3  1548.903 ±    3.350  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    13.356 ±    0.262  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3   342.650 ±    0.909  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3   400.060 ±    2.194  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3   330.907 ±    3.482  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3   302.044 ±    6.502  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SAWTOTH         RADIX  avgt    3   441.493 ±   15.414  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM      BASELINE  avgt    3    13.622 ±    0.171  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM        DPQ_11  avgt    3   359.728 ±   36.324  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3   422.639 ±   28.455  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3   371.861 ±    2.464  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3   326.310 ±   13.492  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        _RANDOM         RADIX  avgt    3  1609.758 ±   27.992  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU      BASELINE  avgt    3    13.358 ±    0.192  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU        DPQ_11  avgt    3   148.545 ±    2.087  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   207.137 ±    0.838  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3   226.624 ±    2.816  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3   160.094 ±    0.366  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        PLATEAU         RADIX  avgt    3   114.445 ±    2.274  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    13.358 ±    0.089  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   237.488 ±   10.967  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   283.409 ±    7.830  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   284.640 ±    5.032  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   224.818 ±    2.244  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_FR        SHUFFLE         RADIX  avgt    3   406.922 ±   23.346  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER      BASELINE  avgt    3    13.355 ±    0.251  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER        DPQ_11  avgt    3   302.999 ±    4.055  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   357.089 ±    1.493  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   307.144 ±    1.250  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3   302.352 ±    3.661  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        STAGGER         RADIX  avgt    3  1498.871 ±    2.530  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    13.360 ±    0.095  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3   293.984 ±    3.727  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3   345.373 ±    1.105  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3   335.775 ±    3.290  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3   240.018 ±    0.652  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SAWTOTH         RADIX  avgt    3   467.187 ±    2.366  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM      BASELINE  avgt    3    13.351 ±    0.175  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM        DPQ_11  avgt    3   335.660 ±   45.156  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3   431.521 ±   68.262  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3   421.792 ±   24.718  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3   341.861 ±   28.042  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        _RANDOM         RADIX  avgt    3  1620.651 ±   46.677  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU      BASELINE  avgt    3    13.361 ±    0.187  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU        DPQ_11  avgt    3    67.907 ±    1.538  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3    44.044 ±    0.016  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3    75.103 ±    0.609  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3    46.485 ±    1.427  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        PLATEAU         RADIX  avgt    3    97.749 ±    0.084  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    13.367 ±    0.342  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   243.744 ±    3.302  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   283.617 ±    6.487  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3   283.655 ±    2.078  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   193.469 ±    7.515  ns/op
ArraySortBenchmark.sort           50              16     REVERSE_BA        SHUFFLE         RADIX  avgt    3   414.769 ±   32.396  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER      BASELINE  avgt    3    14.808 ±   46.125  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER        DPQ_11  avgt    3    98.746 ±  303.733  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER  DPQ_18_11_21  avgt    3    47.930 ±  121.884  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER    DPQ_18_11I  avgt    3   113.116 ±  222.727  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER    DPQ_18_11P  avgt    3    51.441 ±  159.655  ns/op
ArraySortBenchmark.sort           50              16     SORT______        STAGGER         RADIX  avgt    3   134.822 ±  338.339  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH      BASELINE  avgt    3    14.116 ±   23.393  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH        DPQ_11  avgt    3    95.400 ±  193.143  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3    47.916 ±  121.689  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH    DPQ_18_11I  avgt    3   117.712 ±  291.013  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    50.334 ±  124.448  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SAWTOTH         RADIX  avgt    3   135.416 ±  214.876  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM      BASELINE  avgt    3    14.839 ±   46.732  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM        DPQ_11  avgt    3   117.298 ±  310.000  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM  DPQ_18_11_21  avgt    3    49.645 ±  175.802  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM    DPQ_18_11I  avgt    3   121.361 ±  418.991  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM    DPQ_18_11P  avgt    3    52.247 ±  185.176  ns/op
ArraySortBenchmark.sort           50              16     SORT______        _RANDOM         RADIX  avgt    3   133.728 ±  472.573  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU      BASELINE  avgt    3    15.504 ±    0.030  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU        DPQ_11  avgt    3    67.833 ±    0.244  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU  DPQ_18_11_21  avgt    3    44.082 ±    0.191  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU    DPQ_18_11I  avgt    3    75.529 ±    0.201  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU    DPQ_18_11P  avgt    3    46.392 ±    0.072  ns/op
ArraySortBenchmark.sort           50              16     SORT______        PLATEAU         RADIX  avgt    3   123.570 ±    0.297  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE      BASELINE  avgt    3    13.359 ±    0.191  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE        DPQ_11  avgt    3    89.083 ±    1.180  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3    44.067 ±    0.408  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   105.401 ±    2.482  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    46.395 ±    0.085  ns/op
ArraySortBenchmark.sort           50              16     SORT______        SHUFFLE         RADIX  avgt    3   124.863 ±    0.607  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER      BASELINE  avgt    3    13.364 ±    0.403  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER        DPQ_11  avgt    3   314.712 ±    0.849  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER  DPQ_18_11_21  avgt    3   335.207 ±    0.782  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER    DPQ_18_11I  avgt    3   370.667 ±    0.440  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER    DPQ_18_11P  avgt    3   295.128 ±    2.671  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        STAGGER         RADIX  avgt    3  1426.983 ±    3.664  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH      BASELINE  avgt    3    13.370 ±    0.167  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH        DPQ_11  avgt    3   335.901 ±    1.247  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3   352.726 ±    1.690  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3   345.931 ±   12.840  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   267.714 ±    2.978  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SAWTOTH         RADIX  avgt    3   707.246 ±    1.857  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM      BASELINE  avgt    3    14.145 ±    0.050  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM        DPQ_11  avgt    3   358.272 ±   18.803  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3   424.517 ±   11.324  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM    DPQ_18_11I  avgt    3   385.091 ±   37.555  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM    DPQ_18_11P  avgt    3   327.011 ±   18.549  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        _RANDOM         RADIX  avgt    3  1621.446 ±   45.178  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU      BASELINE  avgt    3    13.359 ±    0.232  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU        DPQ_11  avgt    3   234.726 ±    0.667  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   238.340 ±    3.401  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   254.185 ±    0.676  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   205.897 ±    1.142  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        PLATEAU         RADIX  avgt    3   664.709 ±    1.230  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE      BASELINE  avgt    3    13.383 ±    0.758  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE        DPQ_11  avgt    3   212.185 ±    0.423  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3   153.102 ±    4.537  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   188.392 ±   17.112  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3   130.989 ±    1.748  ns/op
ArraySortBenchmark.sort           50              16     DITHER____        SHUFFLE         RADIX  avgt    3   724.869 ±   25.311  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER      BASELINE  avgt    3    13.389 ±    0.755  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER        DPQ_11  avgt    3   302.556 ±    6.589  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3   391.059 ±    0.871  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER    DPQ_18_11I  avgt    3   315.446 ±    0.334  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER    DPQ_18_11P  avgt    3   312.338 ±    0.678  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        STAGGER         RADIX  avgt    3  1536.982 ±   44.895  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH      BASELINE  avgt    3    13.351 ±    0.171  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH        DPQ_11  avgt    3    89.032 ±    1.140  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3    44.043 ±    0.068  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3   103.992 ±    0.265  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3    46.468 ±    1.779  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SAWTOTH         RADIX  avgt    3    97.739 ±    0.462  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM      BASELINE  avgt    3    13.358 ±    0.189  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM        DPQ_11  avgt    3   350.771 ±   45.708  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3   444.166 ±   24.382  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3   416.076 ±   16.042  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3   344.511 ±   14.178  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        _RANDOM         RADIX  avgt    3  1672.130 ±  124.462  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU      BASELINE  avgt    3    13.359 ±    0.160  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU        DPQ_11  avgt    3    89.068 ±    0.530  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3    44.062 ±    0.219  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3   106.392 ±    3.255  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    46.463 ±    1.558  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        PLATEAU         RADIX  avgt    3    97.724 ±    0.038  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE      BASELINE  avgt    3    13.364 ±    0.206  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE        DPQ_11  avgt    3   157.089 ±    1.349  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3   116.273 ±    6.731  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   145.029 ±    2.226  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3    78.104 ±    1.207  ns/op
ArraySortBenchmark.sort           50              64     IDENT_____        SHUFFLE         RADIX  avgt    3   218.333 ±   12.731  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER      BASELINE  avgt    3    13.618 ±    0.156  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER        DPQ_11  avgt    3   311.615 ±    0.486  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3   427.615 ±   92.846  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER    DPQ_18_11I  avgt    3   401.795 ±    2.225  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER    DPQ_18_11P  avgt    3   319.795 ±   13.090  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        STAGGER         RADIX  avgt    3  1595.053 ±  121.615  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH      BASELINE  avgt    3    13.356 ±    0.220  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH        DPQ_11  avgt    3   203.266 ±    1.742  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3   603.388 ±    1.342  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3   159.595 ±    7.559  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3   432.845 ±    2.963  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SAWTOTH         RADIX  avgt    3   139.281 ±    0.095  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM      BASELINE  avgt    3    13.372 ±    0.257  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM        DPQ_11  avgt    3   389.600 ±   13.570  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3   432.965 ±    0.974  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3   410.045 ±   33.169  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3   349.542 ±   32.147  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        _RANDOM         RADIX  avgt    3  1641.204 ±   52.825  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU      BASELINE  avgt    3    13.379 ±    0.767  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU        DPQ_11  avgt    3   207.519 ±    6.184  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   603.454 ±    1.204  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3   167.751 ±    3.371  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3   435.472 ±    2.087  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        PLATEAU         RADIX  avgt    3   138.508 ±    0.973  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE      BASELINE  avgt    3    13.355 ±    0.103  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE        DPQ_11  avgt    3   231.901 ±   42.758  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   673.398 ±   39.745  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   246.498 ±    1.391  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3   390.319 ±   24.493  ns/op
ArraySortBenchmark.sort           50              64     REVERSE___        SHUFFLE         RADIX  avgt    3   249.620 ±   10.475  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER      BASELINE  avgt    3    13.374 ±    0.852  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER        DPQ_11  avgt    3   278.839 ±    2.877  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3   413.978 ±    1.444  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3   425.339 ±    1.208  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3   336.811 ±   26.856  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        STAGGER         RADIX  avgt    3  1571.077 ±  224.380  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    13.367 ±    0.123  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3   178.209 ±    1.425  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3   232.743 ±    0.242  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3   280.635 ±    1.707  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3   174.784 ±    6.209  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SAWTOTH         RADIX  avgt    3   227.413 ±   72.125  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM      BASELINE  avgt    3    13.368 ±    0.225  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM        DPQ_11  avgt    3   345.145 ±   16.098  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3   437.278 ±   65.175  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3   401.152 ±    4.894  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3   333.359 ±   60.863  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        _RANDOM         RADIX  avgt    3  1645.824 ±   58.359  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU      BASELINE  avgt    3    13.356 ±    0.114  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU        DPQ_11  avgt    3   184.672 ±    0.732  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   232.739 ±    0.182  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3   281.651 ±    0.732  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3   173.735 ±    6.227  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        PLATEAU         RADIX  avgt    3   225.019 ±    0.286  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    13.620 ±    0.169  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   205.407 ±    3.845  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   273.626 ±    5.171  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   307.143 ±    1.608  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   207.234 ±    2.636  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_FR        SHUFFLE         RADIX  avgt    3   329.166 ±    1.517  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER      BASELINE  avgt    3    13.356 ±    0.235  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER        DPQ_11  avgt    3   268.350 ±    3.717  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   383.953 ±    1.280  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   338.852 ±    0.566  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3   312.683 ±    2.365  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        STAGGER         RADIX  avgt    3  1557.809 ±   87.993  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    13.374 ±    0.836  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3   137.978 ±    0.509  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3   250.778 ±    2.722  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3   196.192 ±    0.560  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3   154.622 ±    1.852  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SAWTOTH         RADIX  avgt    3   233.850 ±    2.089  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM      BASELINE  avgt    3    13.355 ±    0.242  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM        DPQ_11  avgt    3   346.696 ±   41.605  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3   448.516 ±   67.689  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3   417.135 ±   20.754  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3   347.812 ±    3.269  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        _RANDOM         RADIX  avgt    3  1687.329 ±  106.578  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU      BASELINE  avgt    3    14.046 ±    0.302  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU        DPQ_11  avgt    3   138.501 ±    0.478  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3   247.271 ±    0.713  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3   194.877 ±    2.469  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3   161.572 ±    0.463  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        PLATEAU         RADIX  avgt    3   241.284 ±    0.850  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    13.620 ±    0.159  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   215.881 ±    1.002  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   273.063 ±    4.196  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3   272.271 ±  323.766  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   196.842 ±    2.457  ns/op
ArraySortBenchmark.sort           50              64     REVERSE_BA        SHUFFLE         RADIX  avgt    3   340.086 ±    1.631  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER      BASELINE  avgt    3    14.424 ±   33.785  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER        DPQ_11  avgt    3   101.004 ±  183.226  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER  DPQ_18_11_21  avgt    3    46.626 ±   80.597  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER    DPQ_18_11I  avgt    3   117.317 ±  260.109  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER    DPQ_18_11P  avgt    3    48.454 ±   64.965  ns/op
ArraySortBenchmark.sort           50              64     SORT______        STAGGER         RADIX  avgt    3   136.630 ±  248.037  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH      BASELINE  avgt    3    13.353 ±    0.086  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH        DPQ_11  avgt    3    89.081 ±    0.644  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3    44.078 ±    0.204  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH    DPQ_18_11I  avgt    3   104.588 ±    0.147  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    46.401 ±    0.323  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SAWTOTH         RADIX  avgt    3   124.124 ±    0.983  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM      BASELINE  avgt    3    14.278 ±   28.995  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM        DPQ_11  avgt    3   108.603 ±  276.430  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM  DPQ_18_11_21  avgt    3    47.955 ±  123.187  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM    DPQ_18_11I  avgt    3   121.352 ±  185.942  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM    DPQ_18_11P  avgt    3    51.594 ±  120.149  ns/op
ArraySortBenchmark.sort           50              64     SORT______        _RANDOM         RADIX  avgt    3   136.151 ±  207.211  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU      BASELINE  avgt    3    14.145 ±    0.045  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU        DPQ_11  avgt    3    89.041 ±    0.183  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU  DPQ_18_11_21  avgt    3    44.718 ±    0.229  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU    DPQ_18_11I  avgt    3   107.061 ±    1.551  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU    DPQ_18_11P  avgt    3    46.391 ±    0.309  ns/op
ArraySortBenchmark.sort           50              64     SORT______        PLATEAU         RADIX  avgt    3   125.459 ±    0.432  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE      BASELINE  avgt    3    13.359 ±    0.227  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE        DPQ_11  avgt    3    89.299 ±    0.464  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3    44.072 ±    0.323  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   104.175 ±    0.541  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    47.784 ±    0.185  ns/op
ArraySortBenchmark.sort           50              64     SORT______        SHUFFLE         RADIX  avgt    3   115.139 ±    0.500  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER      BASELINE  avgt    3    13.361 ±    0.169  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER        DPQ_11  avgt    3   303.957 ±    2.223  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER  DPQ_18_11_21  avgt    3   385.754 ±    2.484  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER    DPQ_18_11I  avgt    3   315.457 ±    1.265  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER    DPQ_18_11P  avgt    3   312.455 ±    0.614  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        STAGGER         RADIX  avgt    3  1529.790 ±    2.097  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH      BASELINE  avgt    3    13.353 ±    0.125  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH        DPQ_11  avgt    3   200.016 ±    1.385  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3   117.101 ±    0.573  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3   197.765 ±    3.362  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   115.272 ±    2.723  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SAWTOTH         RADIX  avgt    3   643.218 ±   68.543  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM      BASELINE  avgt    3    13.621 ±    0.162  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM        DPQ_11  avgt    3   373.087 ±   23.237  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3   436.429 ±    4.384  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM    DPQ_18_11I  avgt    3   419.578 ±    3.755  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM    DPQ_18_11P  avgt    3   345.254 ±   30.833  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        _RANDOM         RADIX  avgt    3  1650.049 ±   55.441  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU      BASELINE  avgt    3    13.362 ±    0.087  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU        DPQ_11  avgt    3   200.164 ±    2.544  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   117.094 ±    0.490  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   198.833 ±    1.020  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   115.220 ±    2.666  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        PLATEAU         RADIX  avgt    3   640.632 ±    0.699  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE      BASELINE  avgt    3    13.357 ±    0.177  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE        DPQ_11  avgt    3   186.581 ±    0.396  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3   127.172 ±    5.571  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   159.995 ±    1.964  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3   115.651 ±    0.639  ns/op
ArraySortBenchmark.sort           50              64     DITHER____        SHUFFLE         RADIX  avgt    3   657.718 ±   37.305  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER      BASELINE  avgt    3    19.131 ±    0.077  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER        DPQ_11  avgt    3   777.660 ±   73.999  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3   719.669 ±  411.375  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER    DPQ_18_11I  avgt    3   637.282 ±   20.550  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER    DPQ_18_11P  avgt    3   497.546 ±   81.778  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        STAGGER         RADIX  avgt    3   386.154 ±    3.353  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH      BASELINE  avgt    3    19.133 ±    0.058  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH        DPQ_11  avgt    3    74.167 ±    0.205  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3    71.277 ±    0.469  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3    72.248 ±    0.489  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3    74.179 ±    0.332  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SAWTOTH         RADIX  avgt    3   146.833 ±    5.376  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM      BASELINE  avgt    3    19.134 ±    0.074  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM        DPQ_11  avgt    3    74.313 ±    0.801  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3    71.264 ±    0.244  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3    72.248 ±    0.348  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3    74.691 ±    1.888  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        _RANDOM         RADIX  avgt    3   146.869 ±    5.560  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU      BASELINE  avgt    3    19.137 ±    0.152  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU        DPQ_11  avgt    3    93.578 ±    6.513  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3   108.388 ±    0.416  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3   108.974 ±    0.426  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    74.169 ±    0.203  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        PLATEAU         RADIX  avgt    3   156.937 ±    0.415  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE      BASELINE  avgt    3    19.135 ±    0.220  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE        DPQ_11  avgt    3   139.583 ±    0.842  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3   165.160 ±    8.011  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   206.004 ±    2.051  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3    74.164 ±    0.735  ns/op
ArraySortBenchmark.sort          100               1     IDENT_____        SHUFFLE         RADIX  avgt    3   156.974 ±    1.968  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER      BASELINE  avgt    3    19.134 ±    0.062  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER        DPQ_11  avgt    3   699.250 ±  106.412  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3  1113.520 ±    3.099  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER    DPQ_18_11I  avgt    3  1135.709 ±    3.622  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER    DPQ_18_11P  avgt    3  1305.271 ±  153.777  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        STAGGER         RADIX  avgt    3   468.864 ±   20.377  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH      BASELINE  avgt    3    19.134 ±    0.060  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH        DPQ_11  avgt    3    74.195 ±    0.820  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3    71.329 ±    1.089  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3    72.245 ±    0.211  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3    74.160 ±    0.299  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SAWTOTH         RADIX  avgt    3   146.750 ±    2.952  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM      BASELINE  avgt    3    19.144 ±    0.185  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM        DPQ_11  avgt    3    74.704 ±    1.782  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3    72.789 ±    0.380  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3    72.367 ±    1.198  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3    74.515 ±    0.223  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        _RANDOM         RADIX  avgt    3   146.840 ±    3.334  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU      BASELINE  avgt    3    19.137 ±    0.206  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU        DPQ_11  avgt    3    93.352 ±    0.672  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   116.134 ±    1.292  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3   115.993 ±    0.648  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3   143.478 ±   43.561  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        PLATEAU         RADIX  avgt    3   155.923 ±    2.041  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE      BASELINE  avgt    3    19.134 ±    0.063  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE        DPQ_11  avgt    3   424.004 ±    6.774  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   340.713 ±    2.413  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   414.464 ±    5.483  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3  1566.244 ±   23.730  ns/op
ArraySortBenchmark.sort          100               1     REVERSE___        SHUFFLE         RADIX  avgt    3   236.415 ±    2.050  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER      BASELINE  avgt    3    19.133 ±    0.048  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER        DPQ_11  avgt    3   816.669 ±   42.044  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3   885.951 ±    8.141  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3   889.511 ±    1.980  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3   872.412 ±    1.953  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        STAGGER         RADIX  avgt    3   439.284 ±    6.236  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    19.133 ±    0.119  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3    74.156 ±    0.544  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3    71.307 ±    1.046  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3    72.246 ±    0.046  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3    74.186 ±    0.531  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SAWTOTH         RADIX  avgt    3   146.854 ±    5.060  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM      BASELINE  avgt    3    19.130 ±    0.082  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM        DPQ_11  avgt    3    74.399 ±    0.579  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3    71.357 ±    0.823  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3    72.250 ±    0.112  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3    74.501 ±    0.276  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        _RANDOM         RADIX  avgt    3   146.559 ±    1.036  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU      BASELINE  avgt    3    19.137 ±    0.076  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU        DPQ_11  avgt    3    82.374 ±    0.576  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   110.084 ±    6.879  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3   122.162 ±   22.909  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3   112.360 ±    1.658  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        PLATEAU         RADIX  avgt    3   141.492 ±    2.956  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    19.136 ±    0.016  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   419.027 ±    2.102  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   657.400 ±    0.844  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   660.853 ±    6.597  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   517.777 ±    2.414  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_FR        SHUFFLE         RADIX  avgt    3   397.932 ±    4.504  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER      BASELINE  avgt    3    19.136 ±    0.171  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER        DPQ_11  avgt    3   682.056 ±    2.336  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   793.160 ±    2.150  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   783.914 ±   49.919  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3   746.714 ±    3.221  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        STAGGER         RADIX  avgt    3   419.306 ±    3.550  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    19.130 ±    0.143  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3    74.383 ±    0.217  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3    71.323 ±    0.910  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3    72.268 ±    0.195  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3    74.189 ±    0.485  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SAWTOTH         RADIX  avgt    3   147.459 ±    3.331  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM      BASELINE  avgt    3    19.133 ±    0.022  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM        DPQ_11  avgt    3    74.157 ±    0.428  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3    72.785 ±    0.462  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3    72.250 ±    0.415  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3    74.189 ±    0.354  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        _RANDOM         RADIX  avgt    3   146.820 ±    1.215  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU      BASELINE  avgt    3    19.135 ±    0.020  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU        DPQ_11  avgt    3    80.789 ±    1.102  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3   108.569 ±    1.795  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3   108.887 ±    1.925  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3    74.172 ±    0.127  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        PLATEAU         RADIX  avgt    3   156.878 ±    0.936  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    19.779 ±    0.756  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   236.417 ±    5.036  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   408.967 ±    0.753  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3   517.622 ±   13.135  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   461.469 ±    1.245  ns/op
ArraySortBenchmark.sort          100               1     REVERSE_BA        SHUFFLE         RADIX  avgt    3   417.261 ±    1.562  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER      BASELINE  avgt    3    20.594 ±    5.155  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER        DPQ_11  avgt    3   139.125 ±    0.794  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER  DPQ_18_11_21  avgt    3   164.166 ±    3.373  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER    DPQ_18_11I  avgt    3   221.741 ±    2.406  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER    DPQ_18_11P  avgt    3    74.344 ±    1.951  ns/op
ArraySortBenchmark.sort          100               1     SORT______        STAGGER         RADIX  avgt    3   141.399 ±    0.984  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH      BASELINE  avgt    3    19.141 ±    0.078  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH        DPQ_11  avgt    3    74.468 ±    0.751  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3    71.562 ±    1.738  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH    DPQ_18_11I  avgt    3    72.315 ±    0.510  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    74.333 ±    1.715  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SAWTOTH         RADIX  avgt    3   123.935 ±    8.152  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM      BASELINE  avgt    3    19.137 ±    0.085  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM        DPQ_11  avgt    3    74.157 ±    0.754  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM  DPQ_18_11_21  avgt    3    71.612 ±    0.609  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM    DPQ_18_11I  avgt    3    72.229 ±    0.169  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM    DPQ_18_11P  avgt    3    74.349 ±    1.403  ns/op
ArraySortBenchmark.sort          100               1     SORT______        _RANDOM         RADIX  avgt    3   123.873 ±    2.780  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU      BASELINE  avgt    3    19.142 ±    0.076  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU        DPQ_11  avgt    3    80.796 ±    0.277  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU  DPQ_18_11_21  avgt    3   108.487 ±    1.121  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU    DPQ_18_11I  avgt    3   108.855 ±    0.310  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU    DPQ_18_11P  avgt    3    74.303 ±    0.596  ns/op
ArraySortBenchmark.sort          100               1     SORT______        PLATEAU         RADIX  avgt    3   131.463 ±    0.827  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE      BASELINE  avgt    3    19.327 ±    6.140  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE        DPQ_11  avgt    3   140.472 ±   56.547  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3   159.850 ±    0.657  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   216.505 ±   92.760  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    74.958 ±   20.732  ns/op
ArraySortBenchmark.sort          100               1     SORT______        SHUFFLE         RADIX  avgt    3   131.790 ±    3.875  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER      BASELINE  avgt    3    19.133 ±    0.084  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER        DPQ_11  avgt    3   762.869 ±    1.772  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER  DPQ_18_11_21  avgt    3   689.480 ±   35.663  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER    DPQ_18_11I  avgt    3   780.782 ±  334.498  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER    DPQ_18_11P  avgt    3   534.288 ±    0.766  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        STAGGER         RADIX  avgt    3  3957.710 ±   30.028  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH      BASELINE  avgt    3    19.135 ±    0.032  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH        DPQ_11  avgt    3   323.407 ±    0.708  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3   429.028 ±    9.582  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3   430.557 ±    3.061  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   868.317 ±    3.000  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SAWTOTH         RADIX  avgt    3  3432.867 ±  110.681  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM      BASELINE  avgt    3    19.146 ±    0.181  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM        DPQ_11  avgt    3   323.345 ±    3.972  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3   426.548 ±    3.721  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM    DPQ_18_11I  avgt    3   437.703 ±    3.901  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM    DPQ_18_11P  avgt    3   870.164 ±    1.134  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        _RANDOM         RADIX  avgt    3  3381.561 ±   19.088  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU      BASELINE  avgt    3    19.136 ±    0.096  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU        DPQ_11  avgt    3   344.245 ±    2.572  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   459.941 ±   16.247  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   452.336 ±    3.133  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   867.264 ±    2.467  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        PLATEAU         RADIX  avgt    3  3779.730 ±   29.025  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE      BASELINE  avgt    3    19.132 ±    0.112  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE        DPQ_11  avgt    3   233.167 ±    2.592  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3   407.072 ±    0.745  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   371.015 ±    6.367  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3   139.175 ±    0.219  ns/op
ArraySortBenchmark.sort          100               1     DITHER____        SHUFFLE         RADIX  avgt    3  4180.836 ±   17.403  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER      BASELINE  avgt    3    19.136 ±    0.143  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER        DPQ_11  avgt    3   747.332 ±    1.674  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3   858.757 ±    4.066  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER    DPQ_18_11I  avgt    3   872.668 ±  158.660  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER    DPQ_18_11P  avgt    3   778.577 ±  151.762  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        STAGGER         RADIX  avgt    3   766.315 ±    6.578  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH      BASELINE  avgt    3    19.137 ±    0.024  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH        DPQ_11  avgt    3   307.879 ±   31.212  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3   457.200 ±   11.399  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3   454.814 ±    2.414  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3   870.512 ±    4.583  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SAWTOTH         RADIX  avgt    3  3438.667 ±   47.207  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM      BASELINE  avgt    3    19.138 ±    0.074  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM        DPQ_11  avgt    3   499.617 ±   51.601  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3   534.965 ±   24.921  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3   344.131 ±   54.419  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3   869.404 ±   47.792  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        _RANDOM         RADIX  avgt    3  3541.272 ±   38.121  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU      BASELINE  avgt    3    19.131 ±    0.111  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU        DPQ_11  avgt    3    81.531 ±    0.193  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3   112.443 ±    1.629  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3   112.798 ±    0.505  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    74.170 ±    0.424  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        PLATEAU         RADIX  avgt    3   156.912 ±    0.603  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE      BASELINE  avgt    3    19.137 ±    0.091  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE        DPQ_11  avgt    3   742.975 ±   50.966  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3   714.037 ±   38.967  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   692.772 ±   17.643  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3   544.739 ±   54.474  ns/op
ArraySortBenchmark.sort          100               4     IDENT_____        SHUFFLE         RADIX  avgt    3  3671.014 ±   46.941  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER      BASELINE  avgt    3    19.131 ±    0.044  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER        DPQ_11  avgt    3   690.440 ±    5.030  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3  1106.831 ±    5.506  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER    DPQ_18_11I  avgt    3  1101.470 ±    3.770  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER    DPQ_18_11P  avgt    3  1052.320 ±    4.225  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        STAGGER         RADIX  avgt    3   828.731 ±    5.928  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH      BASELINE  avgt    3    19.133 ±    0.047  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH        DPQ_11  avgt    3   284.339 ±    5.283  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3   534.063 ±    6.249  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3   299.540 ±    2.736  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3   918.705 ±  126.164  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SAWTOTH         RADIX  avgt    3  3830.586 ±   51.683  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM      BASELINE  avgt    3    19.134 ±    0.015  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM        DPQ_11  avgt    3   426.948 ±   25.863  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3   567.038 ±   41.549  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3   463.367 ±   95.325  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3   856.131 ±   80.794  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        _RANDOM         RADIX  avgt    3  3530.314 ±  419.970  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU      BASELINE  avgt    3    19.133 ±    0.114  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU        DPQ_11  avgt    3    90.742 ±    0.584  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   120.267 ±    0.684  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3   117.817 ±    2.042  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3   195.522 ±   15.580  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        PLATEAU         RADIX  avgt    3   152.181 ±    0.965  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE      BASELINE  avgt    3    19.135 ±    0.094  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE        DPQ_11  avgt    3   740.051 ±   64.387  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   750.654 ±    5.180  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   776.681 ±   22.054  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3  1209.505 ±   22.938  ns/op
ArraySortBenchmark.sort          100               4     REVERSE___        SHUFFLE         RADIX  avgt    3  3952.395 ±   16.183  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER      BASELINE  avgt    3    19.134 ±    0.032  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER        DPQ_11  avgt    3   761.792 ±   11.670  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3   822.919 ±   11.904  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3   909.711 ±   13.665  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3   866.041 ±    0.861  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        STAGGER         RADIX  avgt    3   806.127 ±   26.562  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    19.136 ±    0.005  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3   291.412 ±    3.827  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3   431.606 ±   33.878  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3   444.535 ±    0.757  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3   861.624 ±   18.486  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SAWTOTH         RADIX  avgt    3  3579.816 ±  123.103  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM      BASELINE  avgt    3    19.133 ±    0.123  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM        DPQ_11  avgt    3   426.556 ±   42.864  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3   543.527 ±   25.683  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3   363.053 ±   33.344  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3   883.081 ±   23.478  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        _RANDOM         RADIX  avgt    3  3504.976 ±   93.786  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU      BASELINE  avgt    3    19.135 ±    0.093  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU        DPQ_11  avgt    3    97.676 ±    9.254  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   113.229 ±    0.902  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3   112.891 ±    1.401  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3   137.554 ±    0.756  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        PLATEAU         RADIX  avgt    3   147.292 ±    9.638  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    19.134 ±    0.054  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   790.877 ±   28.351  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   810.595 ±   27.843  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   844.787 ±   57.916  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   795.804 ±   47.045  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_FR        SHUFFLE         RADIX  avgt    3  4527.546 ±   37.029  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER      BASELINE  avgt    3    19.130 ±    0.098  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER        DPQ_11  avgt    3   750.735 ±    3.753  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   808.093 ±   82.039  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   760.971 ±    3.172  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3   724.068 ±    7.122  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        STAGGER         RADIX  avgt    3   866.581 ±   42.982  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    19.138 ±    0.076  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3   317.290 ±    2.079  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3   398.906 ±    0.267  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3   441.050 ±    2.862  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3   742.362 ±    5.542  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SAWTOTH         RADIX  avgt    3  3458.105 ±   71.318  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM      BASELINE  avgt    3    19.135 ±    0.051  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM        DPQ_11  avgt    3   420.492 ±   64.427  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3   507.754 ±   17.360  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3   341.340 ±   83.224  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3   861.519 ±   82.343  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        _RANDOM         RADIX  avgt    3  3553.772 ±   12.323  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU      BASELINE  avgt    3    19.133 ±    0.055  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU        DPQ_11  avgt    3    81.402 ±    0.263  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3   115.311 ±    0.410  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3   112.912 ±    2.157  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3    74.172 ±    0.236  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        PLATEAU         RADIX  avgt    3   156.307 ±    3.805  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    19.135 ±    0.108  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   768.340 ±   55.978  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   874.641 ±   10.301  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3  1145.823 ± 6149.807  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   732.336 ±  106.486  ns/op
ArraySortBenchmark.sort          100               4     REVERSE_BA        SHUFFLE         RADIX  avgt    3  4237.852 ±  137.620  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER      BASELINE  avgt    3    19.137 ±    0.097  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER        DPQ_11  avgt    3   142.534 ±    2.514  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER  DPQ_18_11_21  avgt    3   168.115 ±    3.314  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER    DPQ_18_11I  avgt    3   222.096 ±    2.158  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER    DPQ_18_11P  avgt    3    74.732 ±    0.518  ns/op
ArraySortBenchmark.sort          100               4     SORT______        STAGGER         RADIX  avgt    3   139.581 ±    1.081  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH      BASELINE  avgt    3    19.142 ±    0.166  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH        DPQ_11  avgt    3   235.109 ±    1.455  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3   183.248 ±   10.254  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH    DPQ_18_11I  avgt    3   190.235 ±    1.858  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    74.309 ±    0.335  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SAWTOTH         RADIX  avgt    3   137.795 ±    0.980  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM      BASELINE  avgt    3    24.195 ±  147.252  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM        DPQ_11  avgt    3   281.713 ± 1573.452  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM  DPQ_18_11_21  avgt    3   199.873 ± 1109.194  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM    DPQ_18_11I  avgt    3   256.385 ± 1427.783  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM    DPQ_18_11P  avgt    3    89.869 ±  482.041  ns/op
ArraySortBenchmark.sort          100               4     SORT______        _RANDOM         RADIX  avgt    3   174.583 ±  940.786  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU      BASELINE  avgt    3    19.134 ±    0.054  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU        DPQ_11  avgt    3    81.394 ±    0.184  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU  DPQ_18_11_21  avgt    3   112.601 ±    0.209  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU    DPQ_18_11I  avgt    3   121.383 ±    0.033  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU    DPQ_18_11P  avgt    3    74.335 ±    0.968  ns/op
ArraySortBenchmark.sort          100               4     SORT______        PLATEAU         RADIX  avgt    3   131.676 ±    2.584  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE      BASELINE  avgt    3    19.137 ±    0.100  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE        DPQ_11  avgt    3   137.937 ±    0.295  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3   161.526 ±    4.453  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   209.973 ±    1.661  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    74.269 ±    0.274  ns/op
ArraySortBenchmark.sort          100               4     SORT______        SHUFFLE         RADIX  avgt    3   131.827 ±    2.533  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER      BASELINE  avgt    3    19.139 ±    0.097  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER        DPQ_11  avgt    3   724.127 ±    1.178  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER  DPQ_18_11_21  avgt    3   858.178 ±    2.263  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER    DPQ_18_11I  avgt    3   858.358 ±    1.757  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER    DPQ_18_11P  avgt    3   770.307 ±    3.113  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        STAGGER         RADIX  avgt    3   766.843 ±    4.699  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH      BASELINE  avgt    3    19.141 ±    0.079  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH        DPQ_11  avgt    3   498.272 ±    7.563  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3  1125.452 ±    2.530  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3  1112.037 ±    6.427  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   955.287 ±  103.529  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SAWTOTH         RADIX  avgt    3  3748.106 ±   29.761  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM      BASELINE  avgt    3    19.132 ±    0.111  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM        DPQ_11  avgt    3   548.018 ±   48.035  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3   674.374 ±   50.829  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM    DPQ_18_11I  avgt    3   578.704 ±   14.193  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM    DPQ_18_11P  avgt    3   971.769 ±   39.288  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        _RANDOM         RADIX  avgt    3  3794.158 ±   14.187  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU      BASELINE  avgt    3    19.133 ±    0.266  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU        DPQ_11  avgt    3   308.733 ±    4.117  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   478.467 ±    1.375  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   470.732 ±    0.264  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   849.340 ±    5.038  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        PLATEAU         RADIX  avgt    3  3421.513 ±    8.073  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE      BASELINE  avgt    3    19.137 ±    0.111  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE        DPQ_11  avgt    3   815.087 ±   57.579  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3   749.295 ±   39.950  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   716.185 ±   36.065  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3   594.313 ±   29.552  ns/op
ArraySortBenchmark.sort          100               4     DITHER____        SHUFFLE         RADIX  avgt    3  4532.100 ±   50.632  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER      BASELINE  avgt    3    19.141 ±    0.102  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER        DPQ_11  avgt    3   854.253 ±   16.217  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3   837.651 ±    3.847  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER    DPQ_18_11I  avgt    3   871.062 ±    2.572  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER    DPQ_18_11P  avgt    3   939.258 ±    7.432  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        STAGGER         RADIX  avgt    3  3813.336 ±    2.186  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH      BASELINE  avgt    3    19.131 ±    0.015  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH        DPQ_11  avgt    3   756.590 ±    5.113  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3   900.268 ±    1.771  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3   862.466 ±   67.805  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3   848.700 ±   92.506  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SAWTOTH         RADIX  avgt    3   822.949 ±    3.613  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM      BASELINE  avgt    3    19.137 ±    0.098  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM        DPQ_11  avgt    3   837.950 ±   68.670  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3   937.446 ±   30.010  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3   919.802 ±    9.347  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3  1029.647 ±   72.194  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        _RANDOM         RADIX  avgt    3  3521.781 ±   14.690  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU      BASELINE  avgt    3    19.135 ±    0.091  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU        DPQ_11  avgt    3    95.600 ±    1.467  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3   115.176 ±    0.355  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3   115.944 ±    2.403  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    74.205 ±    0.303  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        PLATEAU         RADIX  avgt    3   137.146 ±    4.320  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE      BASELINE  avgt    3    19.781 ±    0.786  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE        DPQ_11  avgt    3   527.397 ±   21.778  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3   448.558 ±   41.587  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   510.589 ±    5.407  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3   278.578 ±   10.981  ns/op
ArraySortBenchmark.sort          100              16     IDENT_____        SHUFFLE         RADIX  avgt    3  1058.110 ±   30.396  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER      BASELINE  avgt    3    19.130 ±    0.092  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER        DPQ_11  avgt    3   953.537 ±    5.970  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3   869.297 ±    4.105  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER    DPQ_18_11I  avgt    3   908.753 ±   26.471  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER    DPQ_18_11P  avgt    3  1010.857 ±   98.083  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        STAGGER         RADIX  avgt    3  3791.131 ±   16.054  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH      BASELINE  avgt    3    19.138 ±    0.127  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH        DPQ_11  avgt    3   661.315 ±    2.563  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3   793.491 ±    6.536  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3   666.073 ±    0.422  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3   968.474 ±    0.610  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SAWTOTH         RADIX  avgt    3   852.133 ±    5.431  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM      BASELINE  avgt    3    19.139 ±    0.271  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM        DPQ_11  avgt    3   826.252 ±   48.866  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3  1018.686 ±   35.309  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3   970.092 ±   41.714  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3  1017.556 ±   92.045  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        _RANDOM         RADIX  avgt    3  3583.934 ±   53.887  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU      BASELINE  avgt    3    19.134 ±    0.132  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU        DPQ_11  avgt    3   228.743 ±    2.996  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   154.716 ±    0.745  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3   145.690 ±    1.412  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3   496.538 ±    1.559  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        PLATEAU         RADIX  avgt    3   179.650 ±    0.199  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE      BASELINE  avgt    3    19.132 ±    0.060  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE        DPQ_11  avgt    3   664.873 ±   32.611  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   624.823 ±   17.786  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   720.655 ±   23.222  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3  1264.071 ±   25.690  ns/op
ArraySortBenchmark.sort          100              16     REVERSE___        SHUFFLE         RADIX  avgt    3   938.141 ±   17.856  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER      BASELINE  avgt    3    19.134 ±    0.067  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER        DPQ_11  avgt    3   681.084 ±   64.900  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3  1026.545 ±    1.458  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3  1028.785 ±    4.055  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3  1035.029 ±    1.397  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        STAGGER         RADIX  avgt    3  3906.649 ±   14.508  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    19.137 ±    0.061  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3   733.949 ±   17.409  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3   855.226 ±    7.135  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3   843.533 ±    4.739  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3   932.944 ±    0.852  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SAWTOTH         RADIX  avgt    3   877.759 ±    6.770  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM      BASELINE  avgt    3    19.127 ±    0.089  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM        DPQ_11  avgt    3   831.217 ±   81.393  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3  1013.884 ±   71.942  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3  1001.338 ±   78.193  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3  1018.466 ±   51.206  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        _RANDOM         RADIX  avgt    3  3899.522 ±   30.042  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU      BASELINE  avgt    3    19.133 ±    0.110  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU        DPQ_11  avgt    3   231.123 ±    2.807  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   316.855 ±    0.947  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3   295.089 ±    0.704  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3   269.162 ±    0.400  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        PLATEAU         RADIX  avgt    3   162.508 ±    0.419  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    19.136 ±    0.075  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   658.254 ± 1498.542  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   753.959 ±   12.671  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   696.900 ±   16.181  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   620.158 ±   29.731  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_FR        SHUFFLE         RADIX  avgt    3  1084.362 ±   20.502  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER      BASELINE  avgt    3    19.131 ±    0.128  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER        DPQ_11  avgt    3   801.498 ±    4.364  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   873.231 ±    3.351  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   879.518 ±    0.399  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3  1000.090 ±  100.737  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        STAGGER         RADIX  avgt    3  3701.859 ±   22.219  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    19.133 ±    0.083  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3   697.194 ±    2.249  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3  1055.174 ±   44.577  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3  1180.787 ± 1875.996  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3   755.963 ±   28.312  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SAWTOTH         RADIX  avgt    3   871.107 ±    8.405  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM      BASELINE  avgt    3    19.137 ±    0.029  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM        DPQ_11  avgt    3   717.960 ±   40.154  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3  1058.536 ±   28.305  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3  1000.098 ±   73.880  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3  1032.591 ±   76.983  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        _RANDOM         RADIX  avgt    3  3514.506 ±   49.817  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU      BASELINE  avgt    3    19.134 ±    0.061  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU        DPQ_11  avgt    3    95.610 ±    0.106  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3   114.719 ±    6.667  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3   115.865 ±    1.166  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3    74.158 ±    0.221  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        PLATEAU         RADIX  avgt    3   156.961 ±    1.281  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    20.166 ±    0.019  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   688.101 ±   30.483  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   679.330 ±   11.483  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3   764.732 ±    2.855  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   565.269 ±   29.838  ns/op
ArraySortBenchmark.sort          100              16     REVERSE_BA        SHUFFLE         RADIX  avgt    3  1072.504 ±    9.626  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER      BASELINE  avgt    3    19.544 ±    0.345  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER        DPQ_11  avgt    3   138.354 ±    4.428  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER  DPQ_18_11_21  avgt    3   156.754 ±    2.942  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER    DPQ_18_11I  avgt    3   210.114 ±    2.926  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER    DPQ_18_11P  avgt    3    74.323 ±    0.996  ns/op
ArraySortBenchmark.sort          100              16     SORT______        STAGGER         RADIX  avgt    3   132.022 ±    2.380  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH      BASELINE  avgt    3    19.142 ±    0.168  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH        DPQ_11  avgt    3   139.308 ±    2.480  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3   164.819 ±    0.250  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH    DPQ_18_11I  avgt    3   219.697 ±    8.907  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    74.294 ±    0.722  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SAWTOTH         RADIX  avgt    3   139.215 ±    5.437  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM      BASELINE  avgt    3    19.138 ±    0.044  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM        DPQ_11  avgt    3   144.515 ±    2.667  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM  DPQ_18_11_21  avgt    3   177.195 ±    6.439  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM    DPQ_18_11I  avgt    3   231.931 ±    1.716  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM    DPQ_18_11P  avgt    3    74.280 ±    0.305  ns/op
ArraySortBenchmark.sort          100              16     SORT______        _RANDOM         RADIX  avgt    3   146.240 ±    1.350  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU      BASELINE  avgt    3    19.139 ±    0.309  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU        DPQ_11  avgt    3    95.614 ±    0.697  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU  DPQ_18_11_21  avgt    3   115.310 ±    2.803  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU    DPQ_18_11I  avgt    3   115.980 ±    1.749  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU    DPQ_18_11P  avgt    3    74.301 ±    0.140  ns/op
ArraySortBenchmark.sort          100              16     SORT______        PLATEAU         RADIX  avgt    3   135.926 ±    1.731  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE      BASELINE  avgt    3    19.140 ±    0.242  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE        DPQ_11  avgt    3   137.779 ±    0.978  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3   157.117 ±    0.360  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   210.147 ±    3.742  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    74.306 ±    0.293  ns/op
ArraySortBenchmark.sort          100              16     SORT______        SHUFFLE         RADIX  avgt    3   131.674 ±    2.594  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER      BASELINE  avgt    3    19.134 ±    0.057  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER        DPQ_11  avgt    3   867.231 ±   65.098  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER  DPQ_18_11_21  avgt    3   859.799 ±    7.176  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER    DPQ_18_11I  avgt    3   939.034 ±  110.280  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER    DPQ_18_11P  avgt    3   948.724 ±   27.222  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        STAGGER         RADIX  avgt    3  3962.217 ±   12.785  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH      BASELINE  avgt    3    19.135 ±    0.129  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH        DPQ_11  avgt    3   704.142 ±   20.032  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3   942.434 ±    7.603  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3  1000.350 ±    4.485  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   883.510 ±    2.295  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SAWTOTH         RADIX  avgt    3  3514.332 ±  100.249  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM      BASELINE  avgt    3    19.138 ±    0.164  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM        DPQ_11  avgt    3   794.671 ±   19.931  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3   950.981 ±   58.060  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM    DPQ_18_11I  avgt    3   946.299 ±   15.191  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM    DPQ_18_11P  avgt    3  1020.694 ±   89.620  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        _RANDOM         RADIX  avgt    3  3547.169 ±   13.073  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU      BASELINE  avgt    3    19.136 ±    0.125  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU        DPQ_11  avgt    3   389.808 ±   78.289  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   702.028 ±    2.748  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   725.790 ±    2.039  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   701.922 ±    0.485  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        PLATEAU         RADIX  avgt    3  3843.111 ±   16.860  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE      BASELINE  avgt    3    19.136 ±    0.038  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE        DPQ_11  avgt    3   557.565 ±    9.698  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3   542.756 ±   14.781  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   616.074 ±   41.204  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3   337.271 ±   25.631  ns/op
ArraySortBenchmark.sort          100              16     DITHER____        SHUFFLE         RADIX  avgt    3  4525.194 ±   81.523  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER      BASELINE  avgt    3    19.136 ±    0.024  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER        DPQ_11  avgt    3   998.407 ±    6.783  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER  DPQ_18_11_21  avgt    3  1089.223 ±    0.785  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER    DPQ_18_11I  avgt    3  1095.183 ±    5.295  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER    DPQ_18_11P  avgt    3  1023.263 ±  175.610  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        STAGGER         RADIX  avgt    3  3623.913 ±   88.473  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH      BASELINE  avgt    3    19.136 ±    0.136  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH        DPQ_11  avgt    3   784.651 ±    0.628  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH  DPQ_18_11_21  avgt    3   851.226 ±    4.463  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH    DPQ_18_11I  avgt    3   838.517 ±    5.637  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH    DPQ_18_11P  avgt    3   570.907 ±    4.283  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SAWTOTH         RADIX  avgt    3   343.805 ±    5.844  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM      BASELINE  avgt    3    19.138 ±    0.101  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM        DPQ_11  avgt    3   957.284 ±   21.202  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM  DPQ_18_11_21  avgt    3  1015.298 ±   52.620  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM    DPQ_18_11I  avgt    3  1006.721 ±    5.573  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM    DPQ_18_11P  avgt    3  1033.240 ±   90.373  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        _RANDOM         RADIX  avgt    3  3645.425 ±  118.757  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU      BASELINE  avgt    3    19.130 ±    0.132  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU        DPQ_11  avgt    3   137.870 ±    1.950  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU  DPQ_18_11_21  avgt    3   156.468 ±    0.818  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU    DPQ_18_11I  avgt    3   204.795 ±    2.813  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU    DPQ_18_11P  avgt    3    74.168 ±    0.438  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        PLATEAU         RADIX  avgt    3   137.053 ±    0.237  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE      BASELINE  avgt    3    19.784 ±    0.764  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE        DPQ_11  avgt    3   349.096 ±    6.608  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE  DPQ_18_11_21  avgt    3   311.003 ±    2.661  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE    DPQ_18_11I  avgt    3   370.729 ±   17.578  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE    DPQ_18_11P  avgt    3   188.740 ±   11.247  ns/op
ArraySortBenchmark.sort          100              64     IDENT_____        SHUFFLE         RADIX  avgt    3   577.656 ±    4.426  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER      BASELINE  avgt    3    19.130 ±    0.047  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER        DPQ_11  avgt    3   905.992 ±  123.803  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER  DPQ_18_11_21  avgt    3   921.117 ±    4.213  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER    DPQ_18_11I  avgt    3   916.269 ±    4.770  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER    DPQ_18_11P  avgt    3  1042.644 ±   59.263  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        STAGGER         RADIX  avgt    3  3540.283 ±   30.110  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH      BASELINE  avgt    3    19.132 ±    0.035  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH        DPQ_11  avgt    3   657.268 ±   93.861  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH  DPQ_18_11_21  avgt    3   842.750 ±    6.619  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH    DPQ_18_11I  avgt    3   829.432 ±   21.290  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH    DPQ_18_11P  avgt    3  1186.402 ±  177.598  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SAWTOTH         RADIX  avgt    3   435.815 ±    3.325  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM      BASELINE  avgt    3    19.781 ±    0.824  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM        DPQ_11  avgt    3   855.666 ±   74.382  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM  DPQ_18_11_21  avgt    3   953.611 ±   98.294  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM    DPQ_18_11I  avgt    3  1020.786 ±   27.911  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM    DPQ_18_11P  avgt    3  1049.648 ±   26.331  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        _RANDOM         RADIX  avgt    3  3663.805 ±   26.548  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU      BASELINE  avgt    3    19.132 ±    0.064  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU        DPQ_11  avgt    3   348.989 ±    1.666  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU  DPQ_18_11_21  avgt    3   337.927 ±    0.606  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU    DPQ_18_11I  avgt    3   414.775 ±    9.552  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU    DPQ_18_11P  avgt    3  1289.370 ±    2.506  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        PLATEAU         RADIX  avgt    3   238.167 ±    1.771  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE      BASELINE  avgt    3    19.137 ±    0.160  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE        DPQ_11  avgt    3   526.362 ±   24.481  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE  DPQ_18_11_21  avgt    3   521.011 ±   34.410  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE    DPQ_18_11I  avgt    3   662.643 ±    3.478  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE    DPQ_18_11P  avgt    3  1264.013 ±   11.263  ns/op
ArraySortBenchmark.sort          100              64     REVERSE___        SHUFFLE         RADIX  avgt    3   633.480 ±   15.984  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER      BASELINE  avgt    3    19.132 ±    0.083  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER        DPQ_11  avgt    3   678.320 ±    2.150  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER  DPQ_18_11_21  avgt    3  1078.521 ±   10.179  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER    DPQ_18_11I  avgt    3  1104.671 ±    3.818  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER    DPQ_18_11P  avgt    3  1052.272 ±  141.529  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        STAGGER         RADIX  avgt    3  3803.292 ±   55.380  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH      BASELINE  avgt    3    19.135 ±    0.127  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH        DPQ_11  avgt    3   853.437 ±    6.014  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH  DPQ_18_11_21  avgt    3  1190.151 ±    8.063  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH    DPQ_18_11I  avgt    3  1199.089 ±    0.905  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH    DPQ_18_11P  avgt    3   958.076 ±    4.790  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SAWTOTH         RADIX  avgt    3   700.856 ±    3.982  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM      BASELINE  avgt    3    19.137 ±    0.145  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM        DPQ_11  avgt    3   818.126 ±   33.803  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM  DPQ_18_11_21  avgt    3   965.422 ±   26.779  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM    DPQ_18_11I  avgt    3  1056.583 ±    7.053  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM    DPQ_18_11P  avgt    3  1066.149 ±   42.096  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        _RANDOM         RADIX  avgt    3  3605.011 ±   51.817  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU      BASELINE  avgt    3    19.138 ±    0.045  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU        DPQ_11  avgt    3   418.686 ±    1.811  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU  DPQ_18_11_21  avgt    3   672.226 ±    2.345  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU    DPQ_18_11I  avgt    3   657.388 ±    1.810  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU    DPQ_18_11P  avgt    3   516.148 ±    1.330  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        PLATEAU         RADIX  avgt    3   397.079 ±    1.017  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE      BASELINE  avgt    3    19.133 ±    0.030  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE        DPQ_11  avgt    3   520.296 ±   49.289  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE  DPQ_18_11_21  avgt    3   749.144 ±    6.219  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE    DPQ_18_11I  avgt    3   749.060 ±    2.964  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE    DPQ_18_11P  avgt    3   552.378 ±   20.299  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_FR        SHUFFLE         RADIX  avgt    3   755.012 ±    8.375  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER      BASELINE  avgt    3    19.136 ±    0.124  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER        DPQ_11  avgt    3   931.046 ±   12.904  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER  DPQ_18_11_21  avgt    3   889.357 ±    2.398  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER    DPQ_18_11I  avgt    3   884.362 ±    2.655  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER    DPQ_18_11P  avgt    3  1065.086 ±  152.256  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        STAGGER         RADIX  avgt    3  3753.305 ±   33.087  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH      BASELINE  avgt    3    19.131 ±    0.032  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH        DPQ_11  avgt    3   801.466 ±   99.966  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH  DPQ_18_11_21  avgt    3   737.132 ±    3.787  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH    DPQ_18_11I  avgt    3   699.265 ±  127.437  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH    DPQ_18_11P  avgt    3   562.471 ±  160.978  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SAWTOTH         RADIX  avgt    3   771.001 ±    9.951  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM      BASELINE  avgt    3    19.140 ±    0.073  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM        DPQ_11  avgt    3   959.535 ±   24.687  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM  DPQ_18_11_21  avgt    3   988.794 ±   20.593  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM    DPQ_18_11I  avgt    3  1039.042 ±   17.502  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM    DPQ_18_11P  avgt    3  1052.149 ±  111.853  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        _RANDOM         RADIX  avgt    3  3620.151 ±   77.750  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU      BASELINE  avgt    3    19.130 ±    0.055  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU        DPQ_11  avgt    3   327.715 ±    1.031  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU  DPQ_18_11_21  avgt    3   338.179 ±    3.645  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU    DPQ_18_11I  avgt    3   393.444 ±    3.230  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU    DPQ_18_11P  avgt    3   256.944 ±    1.507  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        PLATEAU         RADIX  avgt    3   358.251 ±    3.037  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE      BASELINE  avgt    3    19.134 ±    0.126  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE        DPQ_11  avgt    3   409.206 ±    4.889  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE  DPQ_18_11_21  avgt    3   544.509 ±    9.996  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE    DPQ_18_11I  avgt    3   643.410 ±   20.300  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE    DPQ_18_11P  avgt    3   524.253 ±   36.277  ns/op
ArraySortBenchmark.sort          100              64     REVERSE_BA        SHUFFLE         RADIX  avgt    3   793.143 ±   30.251  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER      BASELINE  avgt    3    19.148 ±    0.168  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER        DPQ_11  avgt    3   146.152 ±    5.646  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER  DPQ_18_11_21  avgt    3   164.018 ±    0.137  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER    DPQ_18_11I  avgt    3   215.447 ±    0.675  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER    DPQ_18_11P  avgt    3    74.335 ±    0.212  ns/op
ArraySortBenchmark.sort          100              64     SORT______        STAGGER         RADIX  avgt    3   139.282 ±    2.520  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH      BASELINE  avgt    3    19.144 ±    0.256  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH        DPQ_11  avgt    3   139.365 ±    1.268  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH  DPQ_18_11_21  avgt    3   164.044 ±    0.619  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH    DPQ_18_11I  avgt    3   214.439 ±    0.998  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH    DPQ_18_11P  avgt    3    74.367 ±    1.197  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SAWTOTH         RADIX  avgt    3   141.209 ±    3.998  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM      BASELINE  avgt    3    19.140 ±    0.134  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM        DPQ_11  avgt    3   146.918 ±    0.422  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM  DPQ_18_11_21  avgt    3   168.935 ±    1.224  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM    DPQ_18_11I  avgt    3   237.703 ±   23.995  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM    DPQ_18_11P  avgt    3    74.362 ±    2.148  ns/op
ArraySortBenchmark.sort          100              64     SORT______        _RANDOM         RADIX  avgt    3   143.351 ±    1.891  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU      BASELINE  avgt    3    19.402 ±    8.397  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU        DPQ_11  avgt    3   140.354 ±   68.884  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU  DPQ_18_11_21  avgt    3   163.708 ±  121.661  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU    DPQ_18_11I  avgt    3   216.554 ±  106.073  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU    DPQ_18_11P  avgt    3    75.459 ±   37.926  ns/op
ArraySortBenchmark.sort          100              64     SORT______        PLATEAU         RADIX  avgt    3   134.931 ±  101.387  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE      BASELINE  avgt    3    21.950 ±   67.947  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE        DPQ_11  avgt    3   147.507 ±  306.817  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE  DPQ_18_11_21  avgt    3   181.519 ±  563.278  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE    DPQ_18_11I  avgt    3   230.951 ±  651.058  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE    DPQ_18_11P  avgt    3    83.532 ±  292.550  ns/op
ArraySortBenchmark.sort          100              64     SORT______        SHUFFLE         RADIX  avgt    3   144.779 ±  439.683  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER      BASELINE  avgt    3    19.660 ±    0.810  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER        DPQ_11  avgt    3   976.214 ±   24.911  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER  DPQ_18_11_21  avgt    3  1091.298 ±    5.148  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER    DPQ_18_11I  avgt    3  1098.756 ±    4.477  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER    DPQ_18_11P  avgt    3  1016.526 ±   11.929  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        STAGGER         RADIX  avgt    3  3902.820 ±   71.430  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH      BASELINE  avgt    3    19.133 ±    0.111  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH        DPQ_11  avgt    3   834.413 ±    6.774  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH  DPQ_18_11_21  avgt    3   801.129 ±    2.848  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH    DPQ_18_11I  avgt    3   784.743 ±    0.650  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH    DPQ_18_11P  avgt    3   664.959 ±    2.594  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SAWTOTH         RADIX  avgt    3  3763.325 ±    4.895  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM      BASELINE  avgt    3    19.142 ±    0.142  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM        DPQ_11  avgt    3   981.602 ±   39.621  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM  DPQ_18_11_21  avgt    3  1009.195 ±   16.570  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM    DPQ_18_11I  avgt    3  1001.986 ±   69.783  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM    DPQ_18_11P  avgt    3  1055.354 ±   24.804  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        _RANDOM         RADIX  avgt    3  3666.393 ±   49.630  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU      BASELINE  avgt    3    19.146 ±    0.033  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU        DPQ_11  avgt    3   642.859 ±    3.385  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU  DPQ_18_11_21  avgt    3   561.805 ±    4.249  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU    DPQ_18_11I  avgt    3   545.430 ±    5.293  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU    DPQ_18_11P  avgt    3   326.411 ±    3.745  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        PLATEAU         RADIX  avgt    3  3540.092 ±   64.242  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE      BASELINE  avgt    3    19.130 ±    0.104  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE        DPQ_11  avgt    3   443.730 ±    8.705  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE  DPQ_18_11_21  avgt    3   426.661 ±    7.758  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE    DPQ_18_11I  avgt    3   462.161 ±   22.465  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE    DPQ_18_11P  avgt    3   247.754 ±    2.295  ns/op
ArraySortBenchmark.sort          100              64     DITHER____        SHUFFLE         RADIX  avgt    3  4031.579 ±   36.735  ns/op

Benchmark result is saved to bench.out
